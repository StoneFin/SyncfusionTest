/*!
*  filename: ej.gridupload.all.js
*  version : 13.3.0.18
*  Copyright Syncfusion Inc. 2001 - 2016. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

window.ej = window.Syncfusion = window.Syncfusion || {};

(function ($, ej, undefined) {
    'use strict';

    ej.consts = {
        NamespaceJoin: '-'
    };
    ej.TextAlign = {
        Center: 'center',
        Justify: 'justify',
        Left: 'left',
        Right: 'right'
    };
    ej.Orientation = { Horizontal: "horizontal", Vertical: "vertical" };

    ej.serverTimezoneOffset = 0;

    if (!Object.prototype.hasOwnProperty) {
        Object.prototype.hasOwnProperty = function (obj, prop) {
            return obj[prop] !== undefined;
        };
    }

    String.format = function () {
        var source = arguments[0];
        for (var i = 0; i < arguments.length - 1; i++)
            source = source.replace(new RegExp("\\{" + i + "\\}", "gm"), arguments[i + 1]);

        source = source.replace(/\{[0-9]\}/g, "");
        return source;
    };

    jQuery.uaMatch = function (ua) {
        ua = ua.toLowerCase();

        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];

        return {
            browser: match[1] || "",
            version: match[2] || "0"
        };
    };
    // Function to create new class
    ej.defineClass = function (className, constructor, proto, replace) {
        /// <summary>Creates the javascript class with given namespace & class name & constructor etc</summary>
        /// <param name="className" type="String">class name prefixed with namespace</param>
        /// <param name="constructor" type="Function">constructor function</param>
        /// <param name="proto" type="Object">prototype for the class</param>
        /// <param name="replace" type="Boolean">[Optional]Replace existing class if exists</param>
        /// <returns type="Function">returns the class function</returns>
        if (!className || !proto) return undefined;

        var parts = className.split(".");

        // Object creation
        var obj = window, i = 0;
        for (; i < parts.length - 1; i++) {

            if (ej.isNullOrUndefined(obj[parts[i]]))
                obj[parts[i]] = {};

            obj = obj[parts[i]];
        }

        if (replace || ej.isNullOrUndefined(obj[parts[i]])) {

            //constructor
            constructor = typeof constructor === "function" ? constructor : function () {
            };

            obj[parts[i]] = constructor;

            // prototype
            obj[parts[i]].prototype = proto;
        }

        return obj[parts[i]];
    };

    ej.util = {
        getNameSpace: function (className) {
            /// <summary>Internal function, this will create namespace for plugins using class name</summary>
            /// <param name="className" type="String"></param>
            /// <returns type="String"></returns>
            var splits = className.toLowerCase().split(".");
            splits[0] === "ej" && (splits[0] = "e");

            return splits.join(ej.consts.NamespaceJoin);
        },

        getObject: function (nameSpace, from) {
            if (!from) return undefined;

            var value = from, splits = nameSpace.split('.');

            for (var i = 0; i < splits.length; i++) {

                if (ej.util.isNullOrUndefined(value)) break;

                value = value[splits[i]];
            }

            return value;
        },

        createObject: function (nameSpace, value, initIn) {
            var splits = nameSpace.split('.'), start = initIn || window, from = start, i, t, length = splits.length;

            for (i = 0; i < length; i++) {
                t = splits[i];
                if (i + 1 == length)
                    from[t] = value === undefined ? {} : value;
                else if (ej.isNullOrUndefined(from[t]))
                    from[t] = {};

                from = from[t];
            }

            return start;
        },

        isNullOrUndefined: function (value) {
            /// <summary>Util to check null or undefined</summary>
            /// <param name="value" type="Object"></param>
            /// <returns type="Boolean"></returns>
            return value === undefined || value === null;
        },
        print: function (element) {
            var $div = ej.buildTag('div')
            var elementClone = element.clone();
            $div.append(elementClone);
            var printWin = window.open('', 'pint', "'height=452,width=1024,tabbar=no");
            printWin.document.write('<!DOCTYPE html>');
            var links = $('head').find('link').add("style");
            if (ej.browserInfo().name === "msie") {
                var a = ""
                links.each(function (index, obj) {
                    if (obj.tagName == "LINK")
                        $(obj).attr('href', obj.href);
                    a += obj.outerHTML;
                });
                printWin.document.write('<html><head></head><body>' + a + $div[0].innerHTML + '</body></html>');
            }
            else {
                var a = ""
                printWin.document.write('<html><head>')
                links.each(function (index, obj) {
                    if (obj.tagName == "LINK")
                        $(obj).attr('href', obj.href);
                    a += obj.outerHTML;
                });
                printWin.document.writeln(a + '</head><body>')
                printWin.document.writeln($div[0].innerHTML + '</body></html>')
            }
            printWin.focus();
            setTimeout(function () {
                if (!ej.isNullOrUndefined(printWin.window)) {
                    printWin.print();
                    printWin.location.reload();
                    setTimeout(function () { printWin.close() }, 1000);
                }
            }, 1000);
        },
        ieClearRemover: function (element) {
            var searchBoxHeight = $(element).height();
            element.style.paddingTop = parseFloat(searchBoxHeight / 2) + "px";
            element.style.paddingBottom = parseFloat(searchBoxHeight / 2) + "px";
            element.style.height = "1px";
            element.style.lineHeight = "1px";
        },
        //To send ajax request
        sendAjaxRequest: function (ajaxOptions) {
            $.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.successHandler,
                error: ajaxOptions.errorHandler,
                beforeSend: ajaxOptions.beforeSendHandler,
                complete: ajaxOptions.completeHandler
            });
        },

        buildTag: function (tag, innerHtml, styles, attrs) {
            /// <summary>Helper to build jQuery element</summary>
            /// <param name="tag" type="String">tagName#id.cssClass</param>
            /// <param name="innerHtml" type="String"></param>
            /// <param name="styles" type="Object">A set of key/value pairs that configure styles</param>
            /// <param name="attrs" type="Object">A set of key/value pairs that configure attributes</param>
            /// <returns type="jQuery"></returns>
            var tagName = /^[a-z]*[0-9a-z]+/ig.exec(tag)[0];

            var id = /#([a-z]+[-_0-9a-z]+)/ig.exec(tag);
            id = id ? id[id.length - 1] : undefined;

            var className = /\.([a-z]+[-_0-9a-z ]+)/ig.exec(tag);
            className = className ? className[className.length - 1] : undefined;

            return $(document.createElement(tagName))
                .attr(id ? { "id": id } : {})
                .addClass(className || "")
                .css(styles || {})
                .attr(attrs || {})
                .html(innerHtml || "");
        },
        _preventDefaultException: function (el, exceptions) {
            if (el) {
                for (var i in exceptions) {
                    if (exceptions[i].test(el[i])) {
                        return true;
                    }
                }
            }

            return false;
        },

        //Gets the maximum z-index in the document
        getMaxZindex: function () {
            var maxZ = 1;
            maxZ = Math.max.apply(null, $.map($('body *'), function (e, n) {
                if ($(e).css('position') == 'absolute' || $(e).css('position') == 'fixed')
                    return parseInt($(e).css('z-index')) || 1;
            })
            );
            if (maxZ == undefined || maxZ == null)
                maxZ = 1;
            return maxZ;
        },

        //To prevent default actions for the element
        blockDefaultActions: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.preventDefault) e.preventDefault();
            if (e.stopPropagation) e.stopPropagation();
        },

        //To get dimensions of the element when its hidden
        getDimension: function (element, method) {
            var value;
            var $hidden = $(element).parents().andSelf().filter(':hidden');
            if ($hidden) {
                var prop = { visibility: 'hidden', display: 'block' };
                var tmp = [];
                $hidden.each(function () {
                    var temp = {}, name;
                    for (name in prop) {
                        temp[name] = this.style[name];
                        this.style[name] = prop[name];
                    }
                    tmp.push(temp);
                });
                value = /(outer)/g.test(method) ?
                $(element)[method](true) :
               $(element)[method]();

                $hidden.each(function (i) {
                    var temp = tmp[i], name;
                    for (name in prop) {
                        this.style[name] = temp[name];
                    }
                });
            }
            return value;
        },
        //Get triggers when transition End
        transitionEndEvent: function () {
            var transitionEnd = {
                '': 'transitionend',
                'webkit': 'webkitTransitionEnd',
                'Moz': 'transitionend',
                'O': 'otransitionend',
                'ms': 'MSTransitionEnd'
            };

            return transitionEnd[ej.userAgent()];
        },
        //Get triggers when transition End
        animationEndEvent: function () {
            var animationEnd = {
                '': 'animationend',
                'webkit': 'webkitAnimationEnd',
                'Moz': 'animationend',
                'O': 'webkitAnimationEnd',
                'ms': 'animationend'
            };

            return animationEnd[ej.userAgent()];
        },
        //To return the start event to bind for element
        startEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "touchstart" : "mousedown";
        },
        //To return end event to bind for element
        endEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "touchend" : "mouseup"
        },
        //To return move event to bind for element
        moveEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? ($.support.hasPointer && !ej.isMobile()) ? "ejtouchmove" : "touchmove" : "mousemove";
        },
        //To return cancel event to bind for element
        cancelEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "touchcancel" : "mousecancel";
        },
        //To return tap event to bind for element
        tapEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "tap" : "click";
        },
        //To return tap hold event to bind for element
        tapHoldEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "taphold" : "click";
        },
        //To check whether its Device
        isDevice: function () {
            if (ej.getBooleanVal($('head'), 'data-ej-forceset', false))
                return ej.getBooleanVal($('head'), 'data-ej-device', this._device());
            else
                return this._device();
        },
        //To check whether its windows web view
        isWindowsWebView: function () {
            return location.href.indexOf("x-wmapp") != -1;
        },
        _device: function () {
            return (/mobile|tablet|android|kindle/i.test(navigator.userAgent.toLowerCase()));
        },
        //To check whether its Mobile
        isMobile: function () {
            return ((/iphone|ipod|android|blackberry|opera|mini|windows\sce|palm|smartphone|iemobile/i.test(navigator.userAgent.toLowerCase()) && /mobile/i.test(navigator.userAgent.toLowerCase()))) || (ej.getBooleanVal($('head'), 'data-ej-mobile', false) === true);
        },
        //To check whether its Tablet
        isTablet: function () {
            return (/ipad|xoom|sch-i800|playbook|tablet|kindle/i.test(navigator.userAgent.toLowerCase())) || (ej.getBooleanVal($('head'), 'data-ej-tablet', false) === true) || (!ej.isMobile() && ej.isDevice());
        },
        //To check whether its Touch Device
        isTouchDevice: function () {
            return (('ontouchstart' in window || (window.navigator.msPointerEnabled && ej.isMobile())) && this.isDevice());
        },
        //To get the outerHTML string for object
        getClearString: function (string) {
            return $.trim(string.replace(/\s+/g, " ").replace(/(\r\n|\n|\r)/gm, "").replace(new RegExp("\>[\n\t ]+\<", "g"), "><"));
        },
        //Get the attribute value with boolean type of element
        getBooleanVal: function (ele, val, option) {
            /// <summary>Util to get the property from data attributes</summary>
            /// <param name="ele" type="Object"></param>
            /// <param name="val" type="String"></param>
            /// <param name="option" type="GenericType"></param>
            /// <returns type="GenericType"></returns>
            var value = $(ele).attr(val);
            if (value != null)
                return value.toLowerCase() == "true";
            else
                return option;
        },
        //Gets the Skew class based on the element current position
        _getSkewClass: function (item, pageX, pageY) {
            var itemwidth = item.width();
            var itemheight = item.height();
            var leftOffset = item.offset().left;
            var rightOffset = item.offset().left + itemwidth;
            var topOffset = item.offset().top;
            var bottomOffset = item.offset().top + itemheight;
            var widthoffset = itemwidth * 0.3;
            var heightoffset = itemheight * 0.3;
            if (pageX < leftOffset + widthoffset && pageY < topOffset + heightoffset)
                return "e-m-skew-topleft";
            if (pageX > rightOffset - widthoffset && pageY < topOffset + heightoffset)
                return "e-m-skew-topright";
            if (pageX > rightOffset - widthoffset && pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottomright";
            if (pageX < leftOffset + widthoffset && pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottomleft";
            if (pageX > leftOffset + widthoffset && pageY < topOffset + heightoffset && pageX < rightOffset - widthoffset)
                return "e-m-skew-top";
            if (pageX < leftOffset + widthoffset)
                return "e-m-skew-left";
            if (pageX > rightOffset - widthoffset)
                return "e-m-skew-right";
            if (pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottom";
            return "e-m-skew-center";
        },
        //Removes the added Skew class on the element
        _removeSkewClass: function (element) {
            $(element).removeClass("e-m-skew-top e-m-skew-bottom e-m-skew-left e-m-skew-right e-m-skew-topleft e-m-skew-topright e-m-skew-bottomleft e-m-skew-bottomright e-m-skew-center e-skew-top e-skew-bottom e-skew-left e-skew-right e-skew-topleft e-skew-topright e-skew-bottomleft e-skew-bottomright e-skew-center");
        },
        _touchStartPoints: function (evt, object) {
            if (evt) {
                var point = evt.touches ? evt.touches[0] : evt;
                object._distX = 0;
                object._distY = 0;
                object._moved = false;
                object._pointX = point.pageX;
                object._pointY = point.pageY;
            }
        },
        _isTouchMoved: function (evt, object) {
            if (evt) {
                var point = evt.touches ? evt.touches[0] : evt,
                deltaX = point.pageX - object._pointX,
                deltaY = point.pageY - object._pointY,
                timestamp = Date.now(),
                newX, newY,
                absDistX, absDistY;
                object._pointX = point.pageX;
                object._pointY = point.pageY;
                object._distX += deltaX;
                object._distY += deltaY;
                absDistX = Math.abs(object._distX);
                absDistY = Math.abs(object._distY);
                return !(absDistX < 5 && absDistY < 5);
            }
        },
        //To bind events for element
        listenEvents: function (selectors, eventTypes, handlers, remove, pluginObj, disableMouse) {
            for (var i = 0; i < selectors.length; i++) {
                ej.listenTouchEvent(selectors[i], eventTypes[i], handlers[i], remove, pluginObj, disableMouse);
            }
        },
        //To bind touch events for element
        listenTouchEvent: function (selector, eventType, handler, remove, pluginObj, disableMouse) {
            var event = remove ? "removeEventListener" : "addEventListener";
            var jqueryEvent = remove ? "off" : "on";
            var elements = $(selector);
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                switch (eventType) {
                    case "touchstart":
                        ej._bindEvent(element, event, eventType, handler, "mousedown", "MSPointerDown", "pointerdown", disableMouse);
                        break;
                    case "touchmove":
                        ej._bindEvent(element, event, eventType, handler, "mousemove", "MSPointerMove", "pointermove", disableMouse);
                        break;
                    case "touchend":
                        ej._bindEvent(element, event, eventType, handler, "mouseup", "MSPointerUp", "pointerup", disableMouse);
                        break;
                    case "touchcancel":
                        ej._bindEvent(element, event, eventType, handler, "mousecancel", "MSPointerCancel", "pointercancel", disableMouse);
                        break;
                    case "tap": case "taphold": case "ejtouchmove": case "click":
                        $(element)[jqueryEvent](eventType, handler);
                        break;
                    default:
                        if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9)
                            pluginObj["_on"]($(element), eventType, handler);
                        else
                            element[event](eventType, handler, true);
                        break;
                }
            }
        },
        //To bind events for element
        _bindEvent: function (element, event, eventType, handler, mouseEvent, pointerEvent, ie11pointerEvent, disableMouse) {
            if ($.support.hasPointer)
                element[event](window.navigator.pointerEnabled ? ie11pointerEvent : pointerEvent, handler, true);
            else
                element[event](eventType, handler, true);
        },
        _browser: function () {
            return (/webkit/i).test(navigator.appVersion) ? 'webkit' : (/firefox/i).test(navigator.userAgent) ? 'Moz' : (/trident/i).test(navigator.userAgent) ? 'ms' : 'opera' in window ? 'O' : '';
        },
        styles: document.createElement('div').style,
        /**
       * To get the userAgent Name     
       * @example             
       * &lt;script&gt;
       *       ej.userAgent();//return user agent name
       * &lt;/script&gt         
       * @memberof AppView
       * @instance
       */
        userAgent: function () {
            var agents = 'webkitT,t,MozT,msT,OT'.split(','),
            t,
            i = 0,
            l = agents.length;

            for (; i < l; i++) {
                t = agents[i] + 'ransform';
                if (t in ej.styles) {
                    return agents[i].substr(0, agents[i].length - 1);
                }
            }

            return false;
        },
        addPrefix: function (style) {
            if (ej.userAgent() === '') return style;

            style = style.charAt(0).toUpperCase() + style.substr(1);
            return ej.userAgent() + style;
        },
        //To Prevent Default Exception

        //To destroy the mobile widgets
        destroyWidgets: function (element) {
            var dataEl = $(element).find("[data-role *= ejm]");
            dataEl.each(function (index, element) {
                var $element = $(element);
                var plugin = $element.data("ejWidgets");
                if (plugin)
                    $element[plugin]("destroy");
            });
        },
        //Get the attribute value of element
        getAttrVal: function (ele, val, option) {
            /// <summary>Util to get the property from data attributes</summary>
            /// <param name="ele" type="Object"></param>
            /// <param name="val" type="String"></param>
            /// <param name="option" type="GenericType"></param>
            /// <returns type="GenericType"></returns>
            var value = $(ele).attr(val);
            if (value != null)
                return value;
            else
                return option;
        },

        // Get the offset value of element
        getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },

        // Z-index calculation for the element
        getZindexPartial: function (element, popupEle) {
            if (!ej.isNullOrUndefined(element) && element.length > 0) {
                var parents = element.parents(), bodyEle;
                bodyEle = $('body').children();
                if (!ej.isNullOrUndefined(element) && element.length > 0)
                    bodyEle.splice(bodyEle.index(popupEle), 1);
                $(bodyEle).each(function (i, ele) { parents.push(ele); });

                var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                    if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
                }));
                if (!maxZ || maxZ < 10000) maxZ = 10000;
                else maxZ += 1;
                return maxZ;
            }
        },

    };

    $.extend(ej, ej.util);

    // base class for all ej widgets. It will automatically inhertied
    ej.widgetBase = {
        droppables: { 'default': [] },
        resizables: { 'default': [] },

        _renderEjTemplate: function (selector, data, index, prop) {
            var type = null;
            if (typeof selector === "object" || selector.startsWith("#") || selector.startsWith("."))
                type = $(selector).attr("type");
            if (type) {
                type = type.toLowerCase();
                if (ej.template[type])
                    return ej.template[type](this, selector, data, index, prop);
            }
            return ej.template.render(this, selector, data, index, prop);
        },

        destroy: function () {

            if (this._trigger("destroy"))
                return;

            if (this.model.enablePersistence)
                this.persistState();

            try {
                this._destroy();
            } catch (e) { }

            var arr = this.element.data("ejWidgets") || [];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == this.pluginName) {
                    arr.splice(i, 1);
                }
            }
            if (!arr.length)
                this.element.removeData("ejWidgets");

            while (this._events) {
                var item = this._events.pop(), args = [];

                if (!item)
                    break;

                for (var i = 0; i < item[1].length; i++)
                    if (!$.isPlainObject(item[1][i]))
                        args.push(item[1][i]);

                $.fn.off.apply(item[0], args);
            }

            this._events = null;

            this.element
                .removeClass(ej.util.getNameSpace(this.sfType))
                .removeClass("e-js")
                .removeData(this.pluginName);

            this.element = null;
            this.model = null;
        },

        _on: function (element) {
            if (!this._events)
                this._events = [];
            var args = [].splice.call(arguments, 1, arguments.length - 1);

            var handler = {}, i = args.length;
            while (handler && typeof handler !== "function") {
                handler = args[--i];
            }

            args[i] = ej.proxy(args[i], this);

            this._events.push([element, args, handler, args[i]]);

            $.fn.on.apply(element, args);

            return this;
        },

        _off: function (element, eventName, selector, handlerObject) {
            var e = this._events, temp;
            if (!e || !e.length)
                return this;
            if (typeof selector == "function") {
                temp = handlerObject;
                handlerObject = selector;
                selector = temp;
            }
            for (var i = 0; i < e.length; i++) {
                var arg = e[i],
                r = arg[0].length && (!handlerObject || arg[2] === handlerObject) && arg[1][0] === eventName && (!selector || arg[1][1] === selector) && $.inArray(element[0], arg[0]) > -1;
                if (r) {
                    $.fn.off.apply(element, handlerObject ? [eventName, selector, arg[3]] : [eventName, selector]);
                    e.splice(i, 1);
                    break;
                }
            }

            return this;
        },

        // Client side events wire-up / trigger helper.
        _trigger: function (eventName, eventProp) {
            var fn = null, returnValue, args, clientProp = {};
            $.extend(clientProp, eventProp)

            if (eventName in this.model)
                fn = this.model[eventName];

            if (fn) {
                if (typeof fn === "string") {
                    fn = ej.util.getObject(fn, window);
                }

                if ($.isFunction(fn)) {

                    args = ej.event(eventName, this.model, eventProp);

                    returnValue = fn.call(this, args);

                    // sending changes back - deep copy option should not be enabled for this $.extend 
                    if (eventProp) $.extend(eventProp, args);

                    if (args.cancel || !ej.isNullOrUndefined(returnValue))
                        return returnValue === false || args.cancel;
                }
            }

            var isPropDefined = Boolean(eventProp);
            eventProp = eventProp || {};
            eventProp.originalEventType = eventName;
            eventProp.type = this.pluginName + eventName;

            args = $.Event(eventProp.type, ej.event(eventProp.type, this.model, eventProp));

            this.element.trigger(args);

            // sending changes back - deep copy option should not be enabled for this $.extend 
            if (isPropDefined) $.extend(eventProp, args);

            if (ej.isOnWebForms && args.cancel == false && this.model.serverEvents && this.model.serverEvents.length)
                ej.raiseWebFormsServerEvents(eventName, eventProp, clientProp);

            return args.cancel;
        },

        setModel: function (options, forceSet) {
            // check for whether to apply values are not. if _setModel function is defined in child,
            //  this will call that function and validate it using return value

            if (this._trigger("modelChange", { "changes": options }))
                return;

            for (var prop in options) {
                if (!forceSet) {
                    if (this.model[prop] === options[prop]) {
                        delete options[prop];
                        continue;
                    }
                    if ($.isPlainObject(options[prop])) {
                        iterateAndRemoveProps(this.model[prop], options[prop]);
                        if ($.isEmptyObject(options[prop])) {
                            delete options[prop];
                            continue;
                        }
                    }
                }

                if (this.dataTypes) {
                    var returnValue = this._isValidModelValue(prop, this.dataTypes, options);
                    if (returnValue !== true)
                        throw "setModel - Invalid input for property :" + prop + " - " + returnValue;
                }
                if (this.model.notifyOnEachPropertyChanges && this.model[prop] !== options[prop]) {
                    var arg = {
                        oldValue: this.model[prop],
                        newValue: options[prop]
                    };

                    options[prop] = this._trigger(prop + "Change", arg) ? this.model[prop] : arg.newValue;
                }
            }
            if ($.isEmptyObject(options))
                return;

            if (this._setFirst) {
                var ds = options.dataSource;
                if (ds) delete options.dataSource

                $.extend(true, this.model, options);
                if (ds) {
                    this.model.dataSource = (ds instanceof Array) ? ds.slice() : ds;
                    options["dataSource"] = this.model.dataSource;
                }
                !this._setModel || this._setModel(options);

            } else if (!this._setModel || this._setModel(options) !== false) {
                $.extend(true, this.model, options);
            }
            if ("enablePersistence" in options) {
                this._setState(options.enablePersistence);
            }
        },

        option: function (prop, value, forceSet) {
            if (!prop)
                return this.model;

            if ($.isPlainObject(prop))
                return this.setModel(prop);

            if (typeof prop === "string") {
                prop = prop.replace(/^model\./, "");
                var oldValue = ej.getObject(prop, this.model);

                if (value === undefined)
                    return oldValue;

                if (prop === "enablePersistence")
                    return this._setState(value);

                if (forceSet && value === ej.extensions.modelGUID) {
                    return this._setModel(ej.createObject(prop, ej.getObject(prop, this.model), {}));
                }

                if (forceSet || ej.getObject(prop, this.model) !== value)
                    return this.setModel(ej.createObject(prop, value, {}), forceSet);
            }
            return undefined;
        },

        _isValidModelValue: function (prop, types, options) {
            var value = types[prop], option = options[prop], returnValue;

            if (!value)
                return true;

            if (typeof value === "string") {
                if (value == "enum") {
                    options[prop] = option ? option.toString().toLowerCase() : option;
                    value = "string";
                }

                if (value === "array") {
                    if (Object.prototype.toString.call(option) === '[object Array]')
                        return true;
                }
                else if (value === "data") {
                    return true;
                }
                else if (value === "parent") {
                    return true;
                }
                else if (typeof option === value)
                    return true;

                return "Expected type - " + value;
            }

            if (option instanceof Array) {
                for (var i = 0; i < option.length; i++) {
                    returnValue = this._isValidModelValue(prop, types, option[i]);
                    if (returnValue !== true) {
                        return " [" + i + "] - " + returnValue;
                    }
                }
                return true;
            }

            for (var innerProp in option) {
                returnValue = this._isValidModelValue(innerProp, value, option);
                if (returnValue !== true)
                    return innerProp + " : " + returnValue;
            }

            return true;
        },

        _setState: function (val) {
            if (val === true) {
                this._persistHandler = ej.proxy(this.persistState, this);
                $(window).on("unload", this._persistHandler);
            } else {
                this.deleteState();
                $(window).off("unload", this._persistHandler);
            }
        },

        persistState: function () {
            var model = copyObject({}, this.model);

            if (this._ignoreOnPersist) {
                for (var i = 0; i < this._ignoreOnPersist.length; i++) {
                    delete model[this._ignoreOnPersist[i]];
                }
            }

            if (this._persistState) {
                model.customPersists = {};
                this._persistState(model.customPersists);
            }

            if (window.localStorage)
                window.localStorage.setItem(this.pluginName + this._id, JSON.stringify(model));
            else if (document.cookie)
                ej.cookie.set(this.pluginName + this._id, model);
        },

        deleteState: function () {
            if (window.localStorage)
                window.localStorage.removeItem(this.pluginName + this._id);
            else if (document.cookie)
                ej.cookie.set(this.pluginName + this._id, model, new Date());
        },

        restoreState: function (silent) {
            var value = null;
            if (window.localStorage)
                value = window.localStorage.getItem(this.pluginName + this._id);
            else if (document.cookie)
                value = ej.cookie.get(this.pluginName + this._id);

            if (value) {
                var model = ej.parseJSON(value);

                if (this._restoreState) {
                    this._restoreState(model.customPersists);
                    delete model.customPersists;
                }

                this.model = $.extend(true, this.model, model);
            }

            if (!silent && value && this._setModel)
                this._setModel(this.model);
        },
        // Get formatted text 
        formatting: function (formatstring, str, locale) {
            formatstring = formatstring.replace(/%280/g, "\"").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
            locale = Globalize.cultures[locale] ? locale : "en-US";
            var s = formatstring;
            var frontHtmlidx, FrontHtml, RearHtml, lastidxval;
            frontHtmlidx = formatstring.split("{0:");
            lastidxval = formatstring.split("}");
            FrontHtml = frontHtmlidx[0];
            RearHtml = lastidxval[1];
            if (typeof (str) == "string" && $.isNumeric(str))
                str = Number(str);
            if (formatstring.indexOf("{0:") != -1) {
                var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                var formatVal = toformat.exec(formatstring);
                if (formatVal != null && str != null) {
                    if (FrontHtml != null && RearHtml != null)
                        str = FrontHtml + Globalize.format(str, formatVal[2], locale) + RearHtml;
                    else
                        str = Globalize.format(str, formatVal[2], locale);
                } else if (str != null)
                    str = str;
                else
                    str = "";
                return str;
            } else if (s.startsWith("{") && !s.startsWith("{0:")) {
                var fVal = s.split(""), str = (str || "") + "", strSplt = str.split(""), formats = /[0aA\*CN<>\?]/gm;
                for (var f = 0, f, val = 0; f < fVal.length; f++)
                    fVal[f] = formats.test(fVal[f]) ? "{" + val++ + "}" : fVal[f];
                return String.format.apply(String, [fVal.join("")].concat(strSplt)).replace('{', '').replace('}', '');
            } else if (this.data != null && this.data.Value == null) {
                $.each(this.data, function (dataIndex, dataValue) {
                    s = s.replace(new RegExp('\\{' + dataIndex + '\\}', 'gm'), dataValue);
                });
                return s;
            } else {
                return this.data.Value;
            }
        },
    };

    var iterateAndRemoveProps = function (source, target) {
        for (var prop in source) {
            if (source[prop] === target[prop])
                delete target[prop];
            if ($.isPlainObject(target[prop]) && $.isPlainObject(source[prop]))
                iterateAndRemoveProps(source[prop], target[prop]);
        }
    }

    ej.widget = function (pluginName, className, proto) {
        /// <summary>Widget helper for developers, this set have predefined function to jQuery plug-ins</summary>
        /// <param name="pluginName" type="String">the plugin name that will be added in jquery.fn</param>
        /// <param name="className" type="String">the class name for your plugin, this will help create default cssClas</param>
        /// <param name="proto" type="Object">prototype for of the plug-in</param>

        if (typeof pluginName === "object") {
            proto = className;
            for (var prop in pluginName) {
                var name = pluginName[prop];

                if (name instanceof Array) {
                    proto._rootCSS = name[1];
                    name = name[0];
                }

                ej.widget(prop, name, proto);

                if (pluginName[prop] instanceof Array)
                    proto._rootCSS = "";
            }

            return;
        }

        var nameSpace = proto._rootCSS || ej.getNameSpace(className);

        proto = ej.defineClass(className, function (element, options) {

            this.sfType = className;
            this.pluginName = pluginName;
            this.instance = pInstance;

            if (ej.isNullOrUndefined(this._setFirst))
                this._setFirst = true;

            this["ob.values"] = {};

            $.extend(this, ej.widgetBase);

            if (this.dataTypes) {
                for (var property in options) {
                    var returnValue = this._isValidModelValue(property, this.dataTypes, options);
                    if (returnValue !== true)
                        throw "setModel - Invalid input for property :" + property + " - " + returnValue;
                }
            }

            var arr = (element.data("ejWidgets") || []);
            arr.push(pluginName);
            element.data("ejWidgets", arr);

            for (var i = 0; ej.widget.observables && this.observables && i < this.observables.length; i++) {
                var t = ej.getObject(this.observables[i], options);
                if (t) ej.createObject(this.observables[i], ej.widget.observables.register(t, this.observables[i], this, element), options);
            }

            this.element = element.jquery ? element : $(element);
            this.model = copyObject(true, {}, proto.prototype.defaults, options);
            this.model.keyConfigs = copyObject(this.keyConfigs);

            this.element.addClass(nameSpace + " e-js").data(pluginName, this);

            this._id = element[0].id;

            if (!this.element.attr("tabIndex"))
                this.element.attr("tabIndex", "");

            if (this.model.enablePersistence) {
                this._persistHandler = ej.proxy(this.persistState, this);
                $(window).on("unload", this._persistHandler);
                this.restoreState(true);
            }

            this._init(options);

            if (typeof this.model.keyConfigs === "object" && !(this.model.keyConfigs instanceof Array)) {
                var requiresEvt = false;
                if (this.model.keyConfigs.focus)
                    this.element.attr("accesskey", this.model.keyConfigs.focus);

                for (var keyProps in this.model.keyConfigs) {
                    if (keyProps !== "focus") {
                        requiresEvt = true;
                        break;
                    }
                }

                if (requiresEvt && this._keyPressed) {
                    var el = element, evt = "keydown";

                    if (this.keySettings) {
                        el = this.keySettings.getElement ? this.keySettings.getElement() || el : el;
                        evt = this.keySettings.event || evt;
                    }

                    this._on(el, evt, function (e) {
                        if (!this.model.keyConfigs) return;

                        var action = keyFn.getActionFromCode(this.model.keyConfigs, e.which, e.ctrlKey, e.shiftKey, e.altKey);
                        var arg = {
                            code: e.which,
                            ctrl: e.ctrlKey,
                            alt: e.altKey,
                            shift: e.shiftKey
                        };
                        if (!action) return;

                        if (this._keyPressed(action, e.target, arg, e) === false)
                            e.preventDefault();
                    });
                }
            }
            if (this.pluginName == "ejGrid" && this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")
                this._startAdd();
            this._trigger("create");
        }, proto);

        $.fn[pluginName] = function (options) {
            var opt = options, args;
            for (var i = 0; i < this.length; i++) {

                var $this = $(this[i]),
                    pluginObj = $this.data(pluginName),
                    isAlreadyExists = pluginObj && $this.hasClass(nameSpace),
                    obj = null;

                if (this.length > 0 && $.isPlainObject(opt))
                    options = ej.copyObject({}, opt);

                // ----- plug-in creation/init
                if (!isAlreadyExists) {
                    if (!options || typeof options === "object") {
                        new proto($this, options);
                    }
                    else {
                        throwError(pluginName + ": methods/properties can be accessed only after plugin creation");
                    }
                    continue;
                }

                if (!options) continue;

                args = [].slice.call(arguments, 1);

                if (this.length > 0 && args[0] && opt === "option" && $.isPlainObject(args[0])) {
                    args[0] = ej.copyObject({}, args[0]);
                }

                // --- Function/property set/access
                if ($.isPlainObject(options)) {
                    // setModel using JSON object
                    pluginObj.setModel(options);
                }

                    // function/property name starts with "_" is private so ignore it.
                else if (options.indexOf('_') !== 0
                    && !ej.isNullOrUndefined(obj = ej.getObject(options, pluginObj))
                    || options.indexOf("model.") === 0) {

                    if (!obj || !$.isFunction(obj)) {

                        // if property is accessed, then break the jquery chain
                        if (arguments.length == 1)
                            return obj;

                        //setModel using string input
                        pluginObj.option(options, arguments[1]);

                        continue;
                    }

                    var value = obj.apply(pluginObj, args);

                    // If function call returns any value, then break the jquery chain
                    if (value !== undefined)
                        return value;

                } else {
                    throwError(className + ": function/property - " + options + " does not exist");
                }
            }
            if (pluginName.indexOf("ejm") != -1)
                ej.widget.registerInstance($this, pluginName, className, proto.prototype);
            // maintaining jquery chain
            return this;
        };

        ej.widget.register(pluginName, className, proto.prototype);
    };

    $.extend(ej.widget, (function () {
        var _widgets = {}, _registeredInstances = [],

        register = function (pluginName, className, prototype) {
            if (!ej.isNullOrUndefined(_widgets[pluginName]))
                throwError("ej.widget : The widget named " + pluginName + " is trying to register twice.");

            _widgets[pluginName] = { name: pluginName, className: className, proto: prototype };

            ej.widget.extensions && ej.widget.extensions.registerWidget(pluginName);
        },
        registerInstance = function (element, pluginName, className, prototype) {
            _registeredInstances.push({ element: element, pluginName: pluginName, className: className, proto: prototype });
        }

        return {
            register: register,
            registerInstance: registerInstance,
            registeredWidgets: _widgets,
            registeredInstances: _registeredInstances
        };

    })());

    ej.widget.destroyAll = function (elements) {
        if (!elements || !elements.length) return;

        for (var i = 0; i < elements.length; i++) {
            var data = elements.eq(i).data(), wds = data["ejWidgets"];
            if (wds && wds.length) {
                for (var j = 0; j < wds.length; j++) {
                    if (data[wds[j]] && data[wds[j]].destroy)
                        data[wds[j]].destroy();
                }
            }
        }
    };

    ej.cookie = {
        get: function (name) {
            var value = RegExp(name + "=([^;]+)").exec(document.cookie);

            if (value && value.length > 1)
                return value[1];

            return undefined;
        },
        set: function (name, value, expiryDate) {
            if (typeof value === "object")
                value = JSON.stringify(value);

            value = escape(value) + ((expiryDate == null) ? "" : "; expires=" + expiryDate.toUTCString());
            document.cookie = name + "=" + value;
        }
    };

    var keyFn = {
        getActionFromCode: function (keyConfigs, keyCode, isCtrl, isShift, isAlt) {
            isCtrl = isCtrl || false;
            isShift = isShift || false;
            isAlt = isAlt || false;

            for (var keys in keyConfigs) {
                if (keys === "focus") continue;

                var key = keyFn.getKeyObject(keyConfigs[keys]);
                for(var i=0; i < key.length; i++){
					if (keyCode === key[i].code && isCtrl == key[i].isCtrl && isShift == key[i].isShift && isAlt == key[i].isAlt)
						return keys;
				}
            }
            return null;
        },
        getKeyObject: function (key) {
            var res = {
                isCtrl: false,
                isShift: false,
                isAlt: false
            };
			var tempRes = $.extend(true, {}, res);
			var $key = key.split(","), $res = [];
			for(var i=0; i < $key.length; i++){
				var rslt = null;
				if($key[i].indexOf("+") != -1){
					var k = $key[i].split("+");
					for(var j=0;j< k.length; j++){
						rslt = keyFn.getResult($.trim(k[j]), res);						
					}					
				}
				else{
					rslt = keyFn.getResult($.trim($key[i]), $.extend(true, {}, tempRes));										
				}	
				$res.push(rslt);				
			}            
            return $res;
        },
		getResult: function(key, res){
			if (key === "ctrl")
                res.isCtrl = true;
            else if (key === "shift")
                res.isShift = true;
            else if (key === "alt")
                res.isAlt = true;
            else res.code = parseInt(key, 10);
			return res;
		}
    };

    ej.getScrollableParents = function (element) {
        return $(element).parentsUntil("body").filter(function () {
            return $(this).css("overflow") != "visible";
        }).add($(window));
    }
    ej.browserInfo = function () {
        var browser = {}, clientInfo = [],
        browserClients = {
            webkit: /(chrome)[ \/]([\w.]+)/i, safari: /(webkit)[ \/]([\w.]+)/i, msie: /(msie) ([\w.]+)/i,
            opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i, mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
        };
        for (var client in browserClients) {
            if (browserClients.hasOwnProperty(client)) {
                clientInfo = navigator.userAgent.match(browserClients[client]);
                if (clientInfo) {
                    browser.name = clientInfo[1].toLowerCase();
                    browser.version = clientInfo[2];
                    browser.culture = {};
                    browser.culture.name = browser.culture.language = navigator.language || navigator.userLanguage;
                    if (typeof (Globalize) != 'undefined') {
                        var oldCulture = Globalize.culture();
                        var culture = (navigator.language || navigator.userLanguage) ? Globalize.culture(navigator.language || navigator.userLanguage) : Globalize.culture("en-US");
                        for (var i = 0; (navigator.languages) && i < navigator.languages.length; i++) {
                            culture = Globalize.culture(navigator.languages[i]);
                            if (culture.language == navigator.languages[i])
                                break;
                        }
                        Globalize.culture(oldCulture);
                        $.extend(true, browser.culture, culture);
                    }
                    if (!!navigator.userAgent.match(/Trident\/7\./)) {
                        browser.name = "msie";
                    }
                    break;
                }
            }
        }
        browser.isMSPointerEnabled = (browser.name == 'msie') && browser.version > 9 && window.navigator.msPointerEnabled;
        return browser;
    };
    ej.eventType = {
        mouseDown: "mousedown touchstart",
        mouseMove: "mousemove touchmove",
        mouseUp: "mouseup touchend",
        mouseLeave: "mouseleave touchcancel",
        click: "click touchend"
    };

    ej.event = function (type, data, eventProp) {

        var e = $.extend(eventProp || {},
            {
                "type": type,
                "model": data,
                "cancel": false
            });

        return e;
    };

    ej.proxy = function (fn, context, arg) {
        if (!fn || typeof fn !== "function")
            return null;

        if ('bind' in fn && context)
            return arg ? fn.bind(context, arg) : fn.bind(context);

        return function () {
            var args = arg ? [arg] : []; args.push.apply(args, arguments);
            return fn.apply(context || this, args);
        };
    };

    ej.hasStyle = function (prop) {
        var style = document.documentElement.style;

        if (prop in style) return true;

        var prefixs = ['ms', 'Moz', 'Webkit', 'O', 'Khtml'];

        prop = prop[0].toUpperCase() + prop.slice(1);

        for (var i = 0; i < prefixs.length; i++) {
            if (prefixs[i] + prop in style)
                return true;
        }

        return false;
    };

    Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
        var len = this.length;

        if (len === 0) return -1;

        for (var i = 0; i < len; i++) {
            if (i in this && this[i] === searchElement)
                return i;
        }
        return -1;
    };

    String.prototype.startsWith = String.prototype.startsWith || function (key) {
        return this.slice(0, key.length) === key;
    };
    var copyObject = ej.copyObject = function (isFirstDefault, target) {
        var start = 2, current, source;
        if (typeof isFirstDefault !== "boolean") {
            start = 1;
        }
        var objects = [].slice.call(arguments, start);
        if (start === 1) {
            target = isFirstDefault;
            isFirstDefault = undefined;
        }

        for (var i = 0; i < objects.length; i++) {
            for (var prop in objects[i]) {
                current = target[prop], source = objects[i][prop];

                if (source === undefined || current === source || objects[i] === source || target === source)
                    continue;
                if (source instanceof Array) {
                    if (i === 0 && isFirstDefault)
                        target[prop] = source.slice();
                    else
                        target[prop] = source.slice();
                } else if (ej.isPlainObject(source)) {
                    target[prop] = current || {};
                    if (isFirstDefault)
                        copyObject(isFirstDefault, target[prop], source);
                    else
                        copyObject(target[prop], source);
                } else
                    target[prop] = source;
            }
        }
        return target;
    };
    var pInstance = function () {
        return this;
    }

    ej.template = {};

    ej.template.render = ej.template["text/x-jsrender"] = function (self, selector, data, index, prop) {
        if (selector.slice(0, 1) !== "#")
            selector = ["<div>", selector, "</div>"].join("");
        var property = { prop: prop, index: index };
        return $(selector).render(data, property);
    }

    ej.isPlainObject = function (obj) {
        if (!obj) return false;

        if (typeof obj !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
            return false;
        }

        try {
            if (obj.constructor &&
                !obj.constructor.prototype.hasOwnProperty("isPrototypeOf")) {
                return false;
            }
        } catch (e) {
            return false;
        }

        var key, ownLast = ej.support.isOwnLast;
        for (key in obj) {
            if (ownLast) break;
        }

        return key === undefined || obj.hasOwnProperty(key);
    };
    var getValueFn = false;
    ej.util.valueFunction = function (prop) {
        return function (value, getObservable) {
            var val = ej.getObject(prop, this.model);

            if (getValueFn === false)
                getValueFn = ej.getObject("observables.getValue", ej.widget);

            if (value === undefined) {
                if (!ej.isNullOrUndefined(getValueFn)) {
                    return getValueFn(val, getObservable);
                }
                return typeof val === "function" ? val() : val;
            }

            if (typeof val === "function") {
                this["ob.values"][prop] = value;
                val.call(this, value);
            }
            else
                ej.createObject(prop, value, this.model);
        }
    };
    ej.util.getVal = function (val) {
        if (typeof val === "function")
            return val();
        return val;
    };
    ej.support = {
        isOwnLast: function () {
            var fn = function () { this.a = 1; };
            fn.prototype.b = 1;

            for (var p in new fn()) {
                return p === "b";
            }
        }(),
        outerHTML: function () {
            return document.createElement("div").outerHTML !== undefined;
        }()
    };

    var throwError = ej.throwError = function (er) {
        try {
            throw new Error(er);
        } catch (e) {
            throw e.message + "\n" + e.stack;
        }
    };



    ej.extensions = {};
    ej.extensions.modelGUID = "{0B1051BA-1CCB-42C2-A3B5-635389B92A50}";
})(window.jQuery, window.Syncfusion);
(function () {
    $.fn.addEleAttrs = function (json) {
        var $this = $(this);
        $.each(json, function (i, attr) {
            if (attr && attr.specified) {
                $this.attr(attr.name, attr.value);
            }
        });

    };
    $.fn.removeEleAttrs = function (regex) {
        return this.each(function () {
            var $this = $(this),
                names = [],
                attrs = $(this.attributes).clone();
            $.each(attrs, function (i, attr) {
                if (attr && attr.specified && regex.test(attr.name)) {
                    $this.removeAttr(attr.name);
                }
            });
        });
    };
    $.fn.attrNotStartsWith = function (regex) {
        var proxy = this;
        var attributes = [], attrs;
        this.each(function () {
            attrs = $(this.attributes).clone();
        });
        for (i = 0; i < attrs.length; i++) {
            if (attrs[i] && attrs[i].specified && regex.test(attrs[i].name)) {
                continue
            }
            else
                attributes.push(attrs[i])
        }
        return attributes;

    }
    $.fn.removeEleEmptyAttrs = function () {
        return this.each(function () {
            var $this = $(this),
                names = [],
                attrs = $(this.attributes).clone();
            $.each(attrs, function (i, attr) {
                if (attr && attr.specified && attr.value === "") {
                    $this.removeAttr(attr.name);
                }
            });
        });
    };
    $.extend($.support, {
        has3d: ej.addPrefix('perspective') in ej.styles,
        hasTouch: 'ontouchstart' in window,
        hasPointer: navigator.msPointerEnabled,
        hasTransform: ej.userAgent() !== false,
        pushstate: "pushState" in history &&
        "replaceState" in history,
        hasTransition: ej.addPrefix('transition') in ej.styles
    });
    //Ensuring elements having attribute starts with 'ejm-' 
    $.extend($.expr[':'], {
        attrNotStartsWith: function (element, index, match) {
            var i, attrs = element.attributes;
            for (i = 0; i < attrs.length; i++) {
                if (attrs[i].nodeName.indexOf(match[3]) === 0) {
                    return false;
                }
            }
            return true;
        }
    });
})();;
window.ej = window.Syncfusion = window.Syncfusion || {};

(function ($, ej, doc, undefined) {
    'use strict';
	
    ej.DataManager = function (dataSource, query, adaptor) {
          if (!(this instanceof ej.DataManager))
            return new ej.DataManager(dataSource, query, adaptor);

        if (!dataSource)
            dataSource = [];
        adaptor = adaptor || dataSource.adaptor;

        if (typeof (adaptor) === "string") 
            adaptor = new ej[adaptor]();
        var data = [], self = this;

        if (dataSource instanceof Array) {
            // JSON array
            data = {
                json: dataSource,
                offline: true
            };

        } else if (typeof dataSource === "object") {
            if ($.isPlainObject(dataSource)) {
                if (!dataSource.json)
                    dataSource.json = [];
                if (dataSource.table)
                    dataSource.json = this._getJsonFromElement(dataSource.table, dataSource.headerOption);
                data = {
                    url: dataSource.url,
                    insertUrl: dataSource.insertUrl,
                    removeUrl: dataSource.removeUrl,
                    updateUrl: dataSource.updateUrl,
                    crudUrl: dataSource.crudUrl,
                    batchUrl: dataSource.batchUrl,
                    json: dataSource.json,
                    headers: dataSource.headers,
                    accept: dataSource.accept,
                    data: dataSource.data,
                    timeTillExpiration: dataSource.timeTillExpiration,
                    cachingPageSize: dataSource.cachingPageSize,
                    enableCaching: dataSource.enableCaching,
                    requestType: dataSource.requestType,
                    key: dataSource.key,
                    crossDomain: dataSource.crossDomain,
                    jsonp: dataSource.jsonp,
                    dataType: dataSource.dataType,
                    offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor == "remoteSaveAdaptor" ? false : dataSource.url ? false : true,
                    requiresFormat: dataSource.requiresFormat
                };
            } else if (dataSource.jquery || isHtmlElement(dataSource)) {
                data = {
                    json: this._getJsonFromElement(dataSource),
                    offline: true,
                    table: dataSource
                };
            }
        } else if (typeof dataSource === "string") {
            data = {
                url: dataSource,
                offline: false,
                dataType: "json"
            };
        }

        if (data.requiresFormat === undefined && !ej.support.cors)
            data.requiresFormat = isNull(data.crossDomain) ? true : data.crossDomain;
        if (data.dataType === undefined)
            data.dataType = "json";

        this.dataSource = data;
        this.defaultQuery = query;

        if (data.url && data.offline && !data.json.length) {
            this.isDataAvailable = false;
            this.adaptor = adaptor || new ej.ODataAdaptor();
            this.dataSource.offline = false;
            this.ready = this.executeQuery(query || ej.Query()).done(function (e) {
                self.dataSource.offline = true;
                self.isDataAvailable = true;
                data.json = e.result;
                self.adaptor = new ej.JsonAdaptor();
            });
        }
        else
            this.adaptor = data.offline ? new ej.JsonAdaptor() : new ej.ODataAdaptor();
        if (!data.jsonp && this.adaptor instanceof ej.ODataAdaptor)
            data.jsonp = "callback";
        this.adaptor = adaptor || this.adaptor;
        if (data.enableCaching)
            this.adaptor = new ej.CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
        return this;
    };

    ej.DataManager.prototype = {
        setDefaultQuery: function (query) {
            this.defaultQuery = query;
        },
	
        executeQuery: function (query, done, fail, always) {
            if (typeof query === "function") {
                always = fail;
                fail = done;
                done = query;
                query = null;
            }

            if (!query)
                query = this.defaultQuery;

            if (!(query instanceof ej.Query))
                throwError("DataManager - executeQuery() : A query is required to execute");

            var deffered = $.Deferred();

            deffered.then(done, fail, always);
            var args = { query: query };

            if (!this.dataSource.offline && this.dataSource.url != undefined) {
				 var result = this.adaptor.processQuery(this, query);
                if (!ej.isNullOrUndefined(result.url))
                    this._makeRequest(result, deffered, args, query);
                else {
                    nextTick(function () {
                        args = this._getDeferedArgs(query, result, args);
                        deffered.resolveWith(this, [args]);;
                    }, this);
                }
            } else {
                nextTick(function () {
                    var res = this.executeLocal(query);
                    args = this._getDeferedArgs(query, res, args);
                    deffered.resolveWith(this, [args]);
                }, this);
            }

            return deffered.promise();
        },
        _getDeferedArgs: function (query, result, args) {
            if (query._requiresCount) {
                args.result = result.result;
                args.count = result.count;
            } else
                args.result = result;
            args.getTableModel = getTableModel(query._fromTable, args.result, this);
            args.getKnockoutModel = getKnockoutModel(args.result);
            return args;
        },
	
        executeLocal: function (query) {
            if (!this.defaultQuery && !(query instanceof ej.Query))
                throwError("DataManager - executeLocal() : A query is required to execute");

            if (!this.dataSource.json)
                throwError("DataManager - executeLocal() : Json data is required to execute");

            query = query || this.defaultQuery;

            var result = this.adaptor.processQuery(this, query);

            if (query._subQuery) {
                var from = query._subQuery._fromTable, lookup = query._subQuery._lookup,
                    res = query._requiresCount ? result.result : result;

                if (lookup && lookup instanceof Array) {
                    buildHierarchy(query._subQuery._fKey, from, res, lookup);
                }

                for (var j = 0; j < res.length; j++) {
                    if (res[j][from] instanceof Array) {
                        res[j] = $.extend({}, res[j]);
                        res[j][from] = this.adaptor.processResponse(query._subQuery.using(ej.DataManager(res[j][from].slice(0))).executeLocal(), this, query);
                    }
                }
            }

            return this.adaptor.processResponse(result, this, query);
        },

        _makeRequest: function (url, deffered, args, query) {
            var isSelector = !!query._subQuerySelector;

            var fnFail = $proxy(function (e) {
                args.error = e;
                deffered.rejectWith(this, [args]);
            }, this);

            var process = $proxy(function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {
                if (isSelector) return;

                args.xhr = xhr;
                args.count = parseInt(count, 10);
                args.result = data;
                args.request = request;
                args.aggregates = aggregates;
                args.getTableModel = getTableModel(query._fromTable, data, this);
                args.getKnockoutModel = getKnockoutModel(data);
                args.actual = actual;
                args.virtualSelectRecords = virtualSelectRecords;
                deffered.resolveWith(this, [args]);

            }, this);

            var fnQueryChild = $proxy(function (data, selector) {
                var subDeffer = $.Deferred(),
                    childArgs = { parent: args };

                query._subQuery._isChild = true;

                var subUrl = this.adaptor.processQuery(this, query._subQuery, data ? this.adaptor.processResponse(data) : selector);

                var childReq = this._makeRequest(subUrl, subDeffer, childArgs, query._subQuery);

                if(!isSelector)
                    subDeffer.then(function (subData) {
                        if (data) {
                            buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, data, subData);
                            process(data);
                        }
                    }, fnFail);

                return childReq;
            }, this);

            var fnSuccess = proxy(function (data, status, xhr, request) {
                if (xhr.getResponseHeader("Content-Type").indexOf("xml") == -1 && ej.dateParse)
                    data = ej.parseJSON(data);
                var result = this.adaptor.processResponse(data, this, query, xhr, request), count = 0, aggregates = null;
                var virtualSelectRecords = data.virtualSelectRecords;
                if (query._requiresCount) {
                    count = result.count;
                    aggregates = result.aggregates;
                    result = result.result;
                }

                if (!query._subQuery) {
                    process(result, count, xhr, request, data, aggregates, virtualSelectRecords);
                    return;
                }

                if (!isSelector)
                    fnQueryChild(result);

            }, this);

            var req = $.extend({
                type: "GET",
                dataType: this.dataSource.dataType,
                crossDomain: this.dataSource.crossDomain,
                jsonp: this.dataSource.jsonp,
                cache: true,
                beforeSend: $proxy(this._beforeSend, this),
                processData: false,
                success: fnSuccess,
                error: fnFail
            }, url);

            req = $.ajax(req);

            if (isSelector) {
                var res = query._subQuerySelector.call(this, { query: query._subQuery, parent: query });

                if (res && res.length) {
                    req = $.when(req, fnQueryChild(null, res));

                    req.then(proxy(function (pData, cData, requests) {
                        var pResult = this.adaptor.processResponse(pData[0], this, query, pData[2], requests[0]), count = 0;
                        if (query._requiresCount) {
                            count = pResult.count;
                            pResult = pResult.result;
                        }
                        var cResult = this.adaptor.processResponse(cData[0], this, query._subQuery, cData[2], requests[1]), count = 0;
                        if (query._subQuery._requiresCount) {
                            count = cResult.count;
                            cResult = cResult.result;
                        }

                        buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, pResult, cResult);
                        isSelector = false;
                        process(pResult, count, pData[2]);

                    }, this), fnFail);
                } else {
                    isSelector = false;
                }
            }

            return req;
        },

        _beforeSend: function (request, settings) {
            this.adaptor.beforeSend(this, request, settings);

            var headers = this.dataSource.headers, props;
            for (var i = 0; headers && i < headers.length; i++) {
                props = [];
                for (var prop in headers[i]) {
                    props.push(prop);
                    request.setRequestHeader(prop, headers[i][prop]);
                }
            }
        },
	
        saveChanges: function (changes, key, tableName) {
            var args = {
                url: tableName,
                key: key || this.dataSource.key
            };

            var req = this.adaptor.batchRequest(this, changes, args);

            if (this.dataSource.offline) {
                return req;
            }

            var deff = $.Deferred();
            $.ajax($.extend({
                beforeSend: $proxy(this._beforeSend, this),
                success: proxy(function (data, status, xhr, request) {
                    deff.resolveWith(this, [this.adaptor.processResponse(data, this, null, xhr, request, changes)]);
                }, this),
                error: function (e) {
                    deff.rejectWith(this, [{ error: e }]);
                }
            }, req));

            return deff.promise();
        },
	
        insert: function (data, tableName) {
            var res = this.adaptor.insert(this, data, tableName);
            if (this.dataSource.offline) {
                return res;
            }

            var deffer = $.Deferred();

            $.ajax($.extend({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                processData: false,
                beforeSend: $proxy(this._beforeSend, this),
                success: proxy(function (record, status, xhr, request) {
                    try {
                        if (ej.isNullOrUndefined(record))
                            record = [];
                        else
                            p.parseJson(record);
                    }
                    catch (e) {
                        record = [];
                    }
                    record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
                    deffer.resolveWith(this, [{ record: record, dataManager: this }]);
                }, this),
                error: function (e) {
                    deffer.rejectWith(this, [{ error: e, dataManager: this }]);
                }
            }, res));

            return deffer.promise();
        },
	
        remove: function (keyField, value, tableName) {
            if (typeof value === "object")
                value = value[keyField];

            var res = this.adaptor.remove(this, keyField, value, tableName);

            if (this.dataSource.offline)
                return res;

            return $.ajax($.extend({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                beforeSend: $proxy(this._beforeSend, this)
            }, res));
        },
	
        update: function (keyField, value, tableName) {
            var res = this.adaptor.update(this, keyField, value, tableName);

            if (this.dataSource.offline) {
                return res;
            }

            var deffer = $.Deferred();

           $.ajax($.extend({
                contentType: "application/json; charset=utf-8",
                beforeSend: $proxy(this._beforeSend, this),
                success: proxy(function (record, status, xhr, request) {
                    try {
                        if (ej.isNullOrUndefined(record))
                            record = [];
                        else
                            p.parseJson(record);
                    }
                    catch (e) {
                        record = [];
                    }
                    record = p.parseJson(record);
                    deffer.resolveWith(this, [{ record: record, dataManager: this }]);
                }, this),
                error: function (e) {
                    deffer.rejectWith(this, [{ error: e, dataManager: this }]);
                }
           }, res));

           return deffer.promise();
        },

        _getJsonFromElement: function (ds) {
            if (typeof (ds) == "string")
                ds = $($(ds).html());

            ds = ds.jquery ? ds[0] : ds;

            var tagName = ds.tagName.toLowerCase();

            if (tagName !== "table")
                throwError("ej.DataManager : Unsupported htmlElement : " + tagName);

            return ej.parseTable(ds);
        }
    };

    var buildHierarchy = function (fKey, from, source, lookup) {
        var i, grp = {}, t;
        if (lookup.result) lookup = lookup.result;

        if (lookup.GROUPGUID)
            throwError("ej.DataManager: Do not have support Grouping in hierarchy");

        for (i = 0; i < lookup.length; i++) {
            t = grp[lookup[i][fKey]] || (grp[lookup[i][fKey]] = []);

            t.push(lookup[i]);
        }

        for (i = 0; i < source.length; i++) {
            source[i][from] = grp[source[i][fKey]];
        }
    };

    var oData = {
        accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
        multipartAccept: "multipart/mixed",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
    };
    var p = {
        parseJson: function (jsonText) {
            var type = typeof jsonText;
            if (type === "string") {
                jsonText = JSON.parse(jsonText, p.jsonReviver);
            } else if (jsonText instanceof Array) {
                p.iterateAndReviveArray(jsonText);
            } else if (type === "object")
                p.iterateAndReviveJson(jsonText);
            return jsonText;
        },
        iterateAndReviveArray: function (array) {
            for (var i = 0; i < array.length; i++) {
                if (typeof array[i] === "object")
                    p.iterateAndReviveJson(array[i]);
                else if (typeof array[i] === "string" && !/^[\s]*\[|^[\s]*\{|\"/g.test(array[i]))
                    array[i] = p.jsonReviver("",array[i]);
                else
                    array[i] = p.parseJson(array[i]);
            }
        },
        iterateAndReviveJson: function (json) {
            var value;

            for (var prop in json) {
                if (prop.startsWith("__"))
                    continue;

                value = json[prop];
                if (typeof value === "object") {
                    if (value instanceof Array)
                        p.iterateAndReviveArray(value);
                    else
                        p.iterateAndReviveJson(value);
                } else
                    json[prop] = p.jsonReviver(prop, value);
            }
        },
        jsonReviver: function (field, value) {
            var s = value;
            if (typeof value === "string") {
                var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
                if (ms)
                    return new Date(parseInt(ms[1]));
                else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
                    value = new Date(value);
                    if (isNaN(value)) {
                        var a = s.split(/[^0-9]/);
                        value = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);
                    }
                }
            }

            return value;
        },
        isJson: function (jsonData) {
            if(typeof jsonData[0]== "string")
                return jsonData;
            return ej.parseJSON(jsonData);
        },
        isGuid: function (value) {
            var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
            var match = regex.exec(value);
            return match != null;
        },
        replacer: function (key, value) {

            if (ej.isPlainObject(value))
                return p.jsonReplacer(key, value);

            if (value instanceof Array)
                return p.arrayReplacer(key, value);

            if (value instanceof Date)
                return p.jsonReplacer("", { val: value }).val;

            return value;
        },
        jsonReplacer: function (key, val) {
            var value;
            for (var prop in val) {
                value = val[prop];

                if (!(value instanceof Date))
                    continue;

                var d = value, unixstamp = +d - (d.getTimezoneOffset() * 60000);
                val[prop] = new Date(unixstamp - (ej.serverTimezoneOffset * 3600000)).toJSON();
            }

            return val;
        },
        arrayReplacer: function (key, val) {

            for (var i = 0; i < val.length; i++) {            
                if (ej.isPlainObject(val[i]))
                    val[i] = p.jsonReplacer("", val[i]);
                else if (val[i] instanceof Date)
                    val[i] = p.jsonReplacer("", { date: val[i] }).date;
            }

            return val;
        }
    };

    ej.isJSON = p.isJson;
    ej.parseJSON = p.parseJson;
    ej.dateParse = true;
    ej.isGUID = p.isGuid;
    ej.Query = function (from) {
        if (!(this instanceof ej.Query))
            return new ej.Query(from);

        this.queries = [];
        this._key = "";
        this._fKey = "";

        if (typeof from === "string")
            this._fromTable = from || "";
        else if (from && from instanceof Array)
            this._lookup = from;

        this._expands = [];
        this._sortedColumns = [];
        this._groupedColumns = [];
        this._subQuery = null;
        this._isChild = false;
        this._params = [];
        return this;
    };

    ej.Query.prototype = {
        key: function (field) {
            if (typeof field === "string")
                this._key = field;

            return this;
        },
	
        using: function (dataManager) {
            if (dataManager instanceof ej.DataManager) {
                this.dataManagar = dataManager;
                return this;
            }

            return throwError("Query - using() : 'using' function should be called with parameter of instance ej.DataManager");
        },
	
        execute: function (dataManager, done, fail, always) {
            dataManager = dataManager || this.dataManagar;

            if (dataManager && dataManager instanceof ej.DataManager)
                return dataManager.executeQuery(this, done, fail, always);

            return throwError("Query - execute() : dataManager needs to be is set using 'using' function or should be passed as argument");
        },
	
        executeLocal: function (dataManager) {
            // this does not support for URL binding
            

            dataManager = dataManager || this.dataManagar;

            if (dataManager && dataManager instanceof ej.DataManager)
                return dataManager.executeLocal(this);

            return throwError("Query - executeLocal() : dataManager needs to be is set using 'using' function or should be passed as argument");
        },
	
        clone: function () {
            var cl = new ej.Query();
            cl.queries = this.queries.slice(0);
            cl._key = this._key;
            cl._isChild = this._isChild;
            cl.dataManagar = this.dataManager;
            cl._fromTable = this._fromTable;
            cl._params = this._params.slice(0);
            cl._expands = this._expands.slice(0);
            cl._sortedColumns = this._sortedColumns.slice(0);
            cl._groupedColumns = this._groupedColumns.slice(0);
            cl._subQuerySelector = this._subQuerySelector;
            cl._subQuery = this._subQuery;
            cl._fKey = this._fKey;
            cl._requiresCount = this._requiresCount;
            return cl;
        },
	
        from: function (tableName) {
            if (typeof tableName === "string")
                this._fromTable = tableName;

            return this;
        },
	
        addParams: function (key, value) {
            if (typeof value !== "function" && !ej.isPlainObject(value))
                this._params.push({ key: key, value: value });
            else if (typeof value === "function")
                this._params.push({ key: key, fn: value });

            return this;
        },
	
        expand: function (tables) {
            if (typeof tables === "string")
                this._expands = [].slice.call(arguments, 0);
            else
                this._expands = tables.slice(0);

            return this;
        },
	
        where: function (fieldName, operator, value, ignoreCase) {
            operator = (operator || ej.FilterOperators.equal).toLowerCase();
            var predicate = null;

            if (typeof fieldName === "string")
                predicate = new ej.Predicate(fieldName, operator, value, ignoreCase);
            else if (fieldName instanceof ej.Predicate)
                predicate = fieldName;
            else
                throwError("Query - where : Invalid arguments");

            this.queries.push({
                fn: "onWhere",
                e: predicate
            });
            return this;
        },
	
        search: function (searchKey, fieldNames, operator, ignoreCase) {
            if (!fieldNames || typeof fieldNames === "boolean") {
                fieldNames = [];
                ignoreCase = fieldNames;
            } else if (typeof fieldNames === "string")
                fieldNames = [fieldNames];

            if (typeof operator === "boolean") {
                ignoreCase = operator;
                operator = null;
            }
            operator = operator || ej.FilterOperators.contains;
            if (operator.length < 3)
                operator = ej.data.operatorSymbols[operator];

            var comparer = ej.data.fnOperators[operator] || ej.data.fnOperators.processSymbols(operator);

            this.queries.push({
                fn: "onSearch",
                e: {
                    fieldNames: fieldNames,
                    operator: operator,
                    searchKey: searchKey,
                    ignoreCase: ignoreCase,
                    comparer: comparer
                }
            });
            return this;
        },
		
        sortBy: function (fieldName, comparer, isFromGroup) {
            var order = ej.sortOrder.Ascending, sorts, t;

            if (typeof fieldName === "string" && fieldName.toLowerCase().endsWith(" desc")) {
                fieldName = fieldName.replace(/ desc$/i, '');
                comparer = ej.sortOrder.Descending;
            }
            if (fieldName instanceof Array) {
                for(var i=0;i<fieldName.length;i++)
                   this.sortBy(fieldName[i],comparer,isFromGroup);
                return this;
            }
            if (typeof comparer === "boolean")
                comparer = !comparer ? ej.sortOrder.Ascending : ej.sortOrder.Descending;
            else if (typeof comparer === "function")
                order = "custom";

            if (!comparer || typeof comparer === "string") {
                order = comparer ? comparer.toLowerCase() : ej.sortOrder.Ascending;
                comparer = ej.pvt.fnSort(comparer);
            }
            if (isFromGroup) {
                sorts = filterQueries(this.queries, "onSortBy");

                for (var i = 0; i < sorts.length; i++) {
                    t = sorts[i].e.fieldName;
                    if (typeof t === "string") {
                        if (t === fieldName) return this;
                    } else if (t instanceof Array) {
                        for (var j = 0; j < t.length; j++)
                            if (t[j] === fieldName || fieldName.toLowerCase() === t[j] + " desc")
                                return this;
                    }
                }
            }

            this.queries.push({
                fn: "onSortBy",
                e: {
                    fieldName: fieldName,
                    comparer: comparer,
                    direction: order
                }
            });

            return this;
        },
		
        sortByDesc: function (fieldName) {
            return this.sortBy(fieldName, ej.sortOrder.Descending);
        },
		
        group: function (fieldName) {
            this.sortBy(fieldName, null, true);

            this.queries.push({
                fn: "onGroup",
                e: {
                    fieldName: fieldName
                }
            });
            return this;
        },
	
        page: function (pageIndex, pageSize) {
            this.queries.push({
                fn: "onPage",
                e: {
                    pageIndex: pageIndex,
                    pageSize: pageSize
                }
            });
            return this;
        },
	
        range: function (start, end) {
            if (typeof start !== "number" || typeof end !== "number")
                throwError("Query() - range : Arguments type should be a number");

            this.queries.push({
                fn: "onRange",
                e: {
                    start: start,
                    end: end
                }
            });
            return this;
        },
	

        take: function (nos) {
            if (typeof nos !== "number")
                throwError("Query() - Take : Argument type should be a number");

            this.queries.push({
                fn: "onTake",
                e: {
                    nos: nos
                }
            });
            return this;
        },
	
        skip: function (nos) {
            if (typeof nos !== "number")
                throwError("Query() - Skip : Argument type should be a number");

            this.queries.push({
                fn: "onSkip",
                e: { nos: nos }
            });
            return this;
        },
	
        select: function (fieldNames) {
            if (typeof fieldNames === "string")
                fieldNames = [].slice.call(arguments, 0);

            if (!(fieldNames instanceof Array)) {
                throwError("Query() - Select : Argument type should be String or Array");
            }

            this.queries.push({
                fn: "onSelect",
                e: { fieldNames: fieldNames }
            });
            return this;
        },
	
        hierarchy: function (query, selectorFn) {
            if (!query || !(query instanceof ej.Query))
                throwError("Query() - hierarchy : query must be instance of ej.Query");

            if (typeof selectorFn === "function")
                this._subQuerySelector = selectorFn;

            this._subQuery = query;
            return this;
        },
	
        foreignKey: function (key) {
            if (typeof key === "string")
                this._fKey = key;

            return this;
        },
	
        requiresCount: function () {
            this._requiresCount = true;

            return this;
        },
        //type - sum, avg, min, max
        aggregate: function (type, field) {
            this.queries.push({
                fn: "onAggregates",
                e: { field: field, type: type }
            });
        }
    };

    ej.Adaptor = function (ds) {
        this.dataSource = ds;
        this.pvt = {};
		this.init.apply(this, [].slice.call(arguments, 1));
    };

    ej.Adaptor.prototype = {
        options: {
            from: "table",
            requestType: "json",
            sortBy: "sorted",
            select: "select",
            skip: "skip",
            group: "group",
            take: "take",
            search: "search",
            count: "requiresCounts",
            where: "where",
            aggregates: "aggregates"
        },
        init: function () {
        },
        extend: function (overrides) {
            var fn = function (ds) {
                this.dataSource = ds;

                if (this.options)
                    this.options = $.extend({}, this.options);
				this.init.apply(this, [].slice.call(arguments, 0));

                this.pvt = {};
            };
            fn.prototype = new this.type();
            fn.prototype.type = fn;

            var base = fn.prototype.base = {};
            for (var p in overrides) {
                if (fn.prototype[p])
                    base[p] = fn.prototype[p];
            }
            $.extend(true, fn.prototype, overrides);
            return fn;
        },
        processQuery: function (dm, query) {
            // this needs to be overridden
        },
        processResponse: function (data, ds, query, xhr) {
            return data;
        },
        convertToQueryString: function (req, query, dm) {
            return $.param(req);
        },
        type: ej.Adaptor
    };

    ej.UrlAdaptor = new ej.Adaptor().extend({
        processQuery: function (dm, query, hierarchyFilters) {
            var sorted = filterQueries(query.queries, "onSortBy"),
                grouped = filterQueries(query.queries, "onGroup"),
                filters = filterQueries(query.queries, "onWhere"),
                searchs = filterQueries(query.queries, "onSearch"),
                aggregates = filterQueries(query.queries, "onAggregates"),
                singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
                params = query._params,
                url = dm.dataSource.url, tmp, skip, take = null,
                op = this.options;

            var r = {
                sorted: [],
                grouped: [],
                filters: [],
                searches: [],
                aggregates: []
            };

            // calc Paging & Range
            if (singles["onPage"]) {
                tmp = singles["onPage"];
                skip = getValue(tmp.pageIndex, query);
                take = getValue(tmp.pageSize, query);
				skip = (skip - 1) * take;
            } else if (singles["onRange"]) {
                tmp = singles["onRange"];
                skip = tmp.start;
                take = tmp.end - tmp.start;
            }

            // Sorting
            for (var i = 0; i < sorted.length; i++) {
                tmp = getValue(sorted[i].e.fieldName, query);

                r.sorted.push(callAdaptorFunc(this, "onEachSort", { name: tmp, direction: sorted[i].e.direction }, query));
            }

            // hierarchy
            if (hierarchyFilters) {
                tmp = this.getFiltersFrom(hierarchyFilters, query);
                if (tmp)
                    r.filters.push(callAdaptorFunc(this, "onEachWhere", tmp.toJSON(), query));
            }

            // Filters
            for (var i = 0; i < filters.length; i++) {
                r.filters.push(callAdaptorFunc(this, "onEachWhere", filters[i].e.toJSON(), query));

                for (var prop in r.filters[i]) {
                    if (isNull(r[prop]))
                        delete r[prop];
                }
            }

            // Searches
            for (var i = 0; i < searchs.length; i++) {
                tmp = searchs[i].e;
                r.searches.push(callAdaptorFunc(this, "onEachSearch", {
                    fields: tmp.fieldNames,
                    operator: tmp.operator,
                    key: tmp.searchKey,
                    ignoreCase: tmp.ignoreCase
                }, query));
            }

            // Grouping
            for (var i = 0; i < grouped.length; i++) {
                r.grouped.push(getValue(grouped[i].e.fieldName, query));
            }

            // aggregates
            for (var i = 0; i < aggregates.length; i++) {
                tmp = aggregates[i].e; 
                r.aggregates.push({ type: tmp.type, field: getValue(tmp.field, query) });
            }

            var req = {};
            req[op.from] = query._fromTable;
            if (op.expand) req[op.expand] = query._expands;
            req[op.select] = singles["onSelect"] ? callAdaptorFunc(this, "onSelect", getValue(singles["onSelect"].fieldNames, query), query) : "";
            req[op.count] = query._requiresCount ? callAdaptorFunc(this, "onCount", query._requiresCount, query) : "";
            req[op.search] = r.searches.length ? callAdaptorFunc(this, "onSearch", r.searches, query) : "";
            req[op.skip] = singles["onSkip"] ? callAdaptorFunc(this, "onSkip", getValue(singles["onSkip"].nos, query), query) : "";
            req[op.take] = singles["onTake"] ? callAdaptorFunc(this, "onTake", getValue(singles["onTake"].nos, query), query) : "";
            req[op.where] = r.filters.length || r.searches.length ? callAdaptorFunc(this, "onWhere", r.filters, query) : "";
            req[op.sortBy] = r.sorted.length ? callAdaptorFunc(this, "onSortBy", r.sorted, query) : "";
            req[op.group] = r.grouped.length ? callAdaptorFunc(this, "onGroup", r.grouped, query) : "";
            req[op.aggregates] = r.aggregates.length ? callAdaptorFunc(this, "onAggregates", r.aggregates, query) : "";
			req["param"] = [];
			
            // Params
            for (var i = 0; tmp = params[i]; i++) {
                if (req[tmp.key]) throwError("ej.Query: Custom Param is conflicting other request arguments");

                if(dm.adaptor instanceof ej.WebMethodAdaptor) {                  
                    var webkey = tmp.key, webvalue = tmp.value,  obj = {};                    
                    if (tmp.fn) 
                        webvalue = tmp.fn.call(query, tmp.key, query, dm);  
                    obj[webkey] = webvalue;
                    req["param"].push(obj);
                }
                else {
                    req[tmp.key] = tmp.value;
                    if (tmp.fn)
                        req[tmp.key] = tmp.fn.call(query, tmp.key, query, dm);
                }                
            }

            // cleanup
            for (var prop in req) {
                if (isNull(req[prop]) || req[prop] === "" || req[prop].length === 0)
                    delete req[prop];
            }

            if (!(op.skip in req && op.take in req) && take !== null) {
                req[op.skip] = callAdaptorFunc(this, "onSkip", skip, query);
                req[op.take] = callAdaptorFunc(this, "onTake", take, query);
            }
            var p = this.pvt;
            this.pvt = {};

            if (this.options.requestType === "json") {
                return {
                    data: JSON.stringify(req),
                    url: url,
                    ejPvtData: p,
                    type: "POST",
                    contentType: "application/json; charset=utf-8"
                }
            }
            tmp = this.convertToQueryString(req, query, dm);
            tmp =  (dm.dataSource.url.indexOf("?")!== -1 ? "&" : "/") + tmp;
            return {
                type: "GET",
                url: tmp.length ? url.replace(/\/*$/, tmp) : url,
                ejPvtData: p
            };
        },
        convertToQueryString: function (req, query, dm) {
            if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1)
                return $.param(req);
            return "?" + $.param(req);
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            var pvt = request.ejPvtData || {};
			var groupDs= data.groupDs;
			if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            var d = JSON.parse(request.data);
            if (d && d.action === "batch" && data.added) {
                changes.added = data.added;
                return changes;
            }
            if (data.d)
                data = data.d;

            if (pvt && pvt.aggregates && pvt.aggregates.length) {
                var agg = pvt.aggregates, args = {}, fn, res = {};
                if (data["count"]) args.count = data.count;
                if (data["result"]) args.result = data.result;
                if (data["aggregate"]) data = data.aggregate;
                for (var i = 0; i < agg.length; i++) {
                    fn = ej.aggregates[agg[i].type];
                    if (fn)
                        res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                }
                args["aggregates"] = res;
                data = args;
            }

            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups, args = {};
                if (data["count"] != undefined) args.count = data.count;
                if (data["aggregates"]) args.aggregates = data.aggregates;
                if (data["result"]) data = data.result;
                for (var i = 0; i < groups.length; i++){
                    var level=null;
                    if(!ej.isNullOrUndefined(groupDs))
                        groupDs = ej.group(groupDs, groups[i]);
                    data = ej.group(data, groups[i], pvt.aggregates,level,groupDs);
                }
                if (args.count != undefined)
                    args.result = data;
                else
                    args = data;
                return args;
            }
            return data;
        },
        onGroup: function (e) {
            this.pvt.groups = e;
        },
        onAggregates: function (e) {
            this.pvt.aggregates = e;
        },
        batchRequest: function (dm, changes, e) {
            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({
                    changed: changes.changed,
                    added: changes.added,
                    deleted: changes.deleted,
                    action: "batch",
                    table: e.url,
                    key: e.key
                })
            };
        },
        beforeSend: function (dm, request) {
        },
        insert: function (dm, data, tableName) {
            return {
                url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    value: data,
                    table: tableName,
                    action: "insert"
                })
            };
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    key: value,
                    keyColumn: keyField,
                    table: tableName,
                    action: "remove"
                })
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    value: value,
                    action: "update",
                    keyColumn: keyField,
                    key: value[keyField],
                    table: tableName
                })
            };
        },
        getFiltersFrom: function (data, query) {
            if (!(data instanceof Array) || !data.length)
                throwError("ej.SubQuery: Array of key values required");
            var key = query._fKey, value, prop = key, predicats = [],
                isValues = typeof data[0] !== "object";

            if (typeof data[0] !== "object") prop = null;

            for (var i = 0; i < data.length; i++) {
                value = !isValues ? ej.pvt.getObject(prop, data[i]) : data[i];
                predicats.push(new ej.Predicate(key, "==", value));
            }

            return ej.Predicate.or(predicats);
        }
    });
    ej.WebMethodAdaptor = new ej.UrlAdaptor().extend({
        processQuery: function (dm, query, hierarchyFilters) {
            var obj = ej.UrlAdaptor.prototype.processQuery(dm, query, hierarchyFilters); 
            var data = ej.parseJSON(obj.data), result = {};
            // Param
            if (data.param) {
                for(var i=0; i< data.param.length; i++){
                    var param = data.param[i], key = Object.keys(param)[0];
                    result[key] = param[key];                
                }
            }            
            result["value"] = data;
            return {
                data: JSON.stringify(result),
                url: obj.url,
                ejPvtData: obj.ejPvtData,
                type: "POST",
                contentType: "application/json; charset=utf-8"
            }
        }
    });
    ej.CacheAdaptor = new ej.UrlAdaptor().extend({
        init: function (adaptor, timeStamp, pageSize) {
            if (!ej.isNullOrUndefined(adaptor)) {
                this.cacheAdaptor = adaptor;
            }
            this.pageSize = pageSize;
            this.guidId = ej.getGuid("cacheAdaptor");
            var obj = { keys: [], results: [] };
            if (window.localStorage)
                window.localStorage.setItem(this.guidId, JSON.stringify(obj));
            var guid = this.guidId;
            if (!ej.isNullOrUndefined(timeStamp)) {
                setInterval(function () {
                    var data = ej.parseJSON(window.localStorage.getItem(guid));
                    var forDel = [];
                    for (var i = 0; i < data.results.length; i++) {
                        data.results[i].timeStamp = new Date() - new Date(data.results[i].timeStamp)
                        if (new Date() - new Date(data.results[i].timeStamp) > timeStamp)
                            forDel.push(i);
                    }
                    var d = forDel;
                    for (var i = 0; i < forDel.length; i++) {
                        data.results.splice(forDel[i], 1);
                        data.keys.splice(forDel[i], 1);
                    }
                    window.localStorage.removeItem(guid);
                    window.localStorage.setItem(guid, JSON.stringify(data));
                }, timeStamp);
            }
        },
        generateKey: function (url, query) {
            var sorted = filterQueries(query.queries, "onSortBy"),
                grouped = filterQueries(query.queries, "onGroup"),
                filters = filterQueries(query.queries, "onWhere"),
                searchs = filterQueries(query.queries, "onSearch"),
				pageQuery = filterQueries(query.queries, "onPage"),
                singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
                params = query._params;
            var key = url;
            if (singles["onPage"])
            key += singles["onPage"].pageIndex;
            sorted.forEach(function (obj) {
                key += obj.e.direction + obj.e.fieldName;
            });
            grouped.forEach(function (obj) {
                key += obj.e.fieldName;
            });
            searchs.forEach(function (obj) {
                key += obj.e.searchKey;
            });
            for (var filter = 0; filter < filters.length; filter++) {
                var currentFilter = filters[filter];
                if (currentFilter.e.isComplex) {
                    var newQuery = query.clone();
                    newQuery.queries = [];
                    for (var i = 0; i < currentFilter.e.predicates.length; i++) {
                        newQuery.queries.push({ fn: "onWhere", e: currentFilter.e.predicates[i], filter: query.queries.filter });
                    }
                    key += currentFilter.e.condition + this.generateKey(url, newQuery);
                }
                else
                    key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value
            }
            return key;
        },
        processQuery: function (dm, query, hierarchyFilters) {
            var key = this.generateKey(dm.dataSource.url, query);
            var cachedItems;
            if (window.localStorage)
                cachedItems = ej.parseJSON(window.localStorage.getItem(this.guidId));
            var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
            if (data != null && !this._crudAction && !this._insertAction) {
                return data;
            }
            this._crudAction = null; this._insertAction = null;
            return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0))
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            if (this._insertAction || (request && this.cacheAdaptor.options.batch && request.url.endsWith(this.cacheAdaptor.options.batch) && request.type.toLowerCase() === "post")) {
                return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
            }
            var data = this.cacheAdaptor.processResponse.apply(this, [].slice.call(arguments, 0));
            var key = this.generateKey(ds.dataSource.url, query)
            var obj = {};
            if (window.localStorage)
                obj = ej.parseJSON(window.localStorage.getItem(this.guidId));
            var index = $.inArray(key, obj.keys);
            if (index != -1) {
                obj.results.splice(index, 1);
                obj.keys.splice(index, 1);
            }
            obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count }
            while (obj.results.length > this.pageSize) {
                obj.results.splice(0, 1);
                obj.keys.splice(0, 1);
            }
            window.localStorage.setItem(this.guidId, JSON.stringify(obj));
            return data;
        },
        update: function (dm, keyField, value, tableName) {
            this._crudAction = true;
            return this.cacheAdaptor.update(dm, keyField, value, tableName);
        },
        insert: function (dm, data, tableName) {
            this._insertAction = true;
            return this.cacheAdaptor.insert(dm, data, tableName);
        },
        remove: function (dm, keyField, value, tableName) {
            this._crudAction = true;
            return this.cacheAdaptor.remove(dm, keyField, value, tableName);
        },
        batchRequest: function (dm, changes, e) {
            return this.cacheAdaptor.batchRequest(dm, changes, e);
        }
    });
    var filterQueries = function (queries, name) {
        return queries.filter(function (q) {
            return q.fn === name;
        }) || [];
    };
    var filterQueryLists = function (queries, singles) {
        var filtered = queries.filter(function (q) {
            return singles.indexOf(q.fn) !== -1;
        }), res = {};
        for (var i = 0; i < filtered.length; i++) {
            if (!res[filtered[i].fn])
                res[filtered[i].fn] = filtered[i].e;
        }
        return res;
    };
    var callAdaptorFunc = function (obj, fnName, param, param1) {
        if (obj[fnName]) {
            var res = obj[fnName](param, param1);
            if (!isNull(res)) param = res;
        }
        return param;
    };

    ej.ODataAdaptor = new ej.UrlAdaptor().extend({
        options: {
            requestType: "get",
            accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
            multipartAccept: "multipart/mixed",
            sortBy: "$orderby",
            select: "$select",
            skip: "$skip",
            take: "$top",
            count: "$inlinecount",
            where: "$filter",
            expand: "$expand",
            batch: "$batch",
            changeSet: "--changeset_",
            batchPre: "batch_",
            contentId: "Content-Id: ",
            batchContent: "Content-Type: multipart/mixed; boundary=",
            changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
            batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
        },
        onEachWhere: function (filter, requiresCast) {
            return filter.isComplex ? this.onComplexPredicate(filter, requiresCast) : this.onPredicate(filter, requiresCast);
        },
        onPredicate: function (pred, query, requiresCast) {
            var returnValue = "",
                operator,guid,
                val = pred.value,
                type = typeof val,
                field = this._p(pred.field);

            if (val instanceof Date)
                val = "datetime'" + dateSerialize(val) + "'";

            if (type === "string") {
                val = "'" + val + "'";

                if (requiresCast) {
                    field = "cast(" + field + ", 'Edm.String')";
                }
                if (ej.isGUID(val))
                    guid = 'guid';
                if (pred.ignoreCase) {
                    !guid ? field = "tolower(" + field + ")" : field;
                    val = val.toLowerCase();
                }
            }

            operator = ej.data.odBiOperator[pred.operator];
            if (operator) {
                returnValue += field;
                returnValue += operator;
                if (guid)
                    returnValue += guid;
                return returnValue + val;
            }

            operator = ej.data.odUniOperator[pred.operator];
            if (!operator || type !== "string") return "";

            if (operator === "substringof") {
                var t = val;
                val = field;
                field = t;
            }

            returnValue += operator + "(";
            returnValue += field + ",";
            if (guid) returnValue += guid;
            returnValue += val + ")";

            return returnValue;
        },
        onComplexPredicate: function (pred, requiresCast) {
            var res = [];
            for (var i = 0; i < pred.predicates.length; i++) {
                res.push("(" + this.onEachWhere(pred.predicates[i], requiresCast) + ")");
            }
            return res.join(" " + pred.condition + " ");
        },
        onWhere: function (filters) {
            if (this.pvt.searches)
                filters.push(this.onEachWhere(this.pvt.searches, null, true));

            return filters.join(" and ");
        },
        onEachSearch: function (e) {
            if (e.fields.length === 0)
                throwError("Query() - Search : oData search requires list of field names to search");

            var filter = this.pvt.searches || [];
            for (var i = 0; i < e.fields.length; i++) {
                filter.push(new ej.Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
            }
            this.pvt.searches = filter;
        },
        onSearch: function (e) {
            this.pvt.searches = ej.Predicate.or(this.pvt.searches);
            return "";
        },
        onEachSort: function (e) {
            var res = [];
            if (e.name instanceof Array) {
                for (var i = 0; i < e.name.length; i++)
                    res.push(this._p(e.name[i]));
            } else
                res.push(this._p(e.name) + (e.direction === "descending" ? " desc" : ""));

            return res.join(",");
        },
        onSortBy: function (e) {
            return e.reverse().join(",");
        },
        onGroup: function (e) {
            this.pvt.groups = e;
            return "";
        },
        onSelect: function (e) {
            for (var i = 0; i < e.length; i++)
                e[i] = this._p(e[i]);

            return e.join(',');
        },
        onAggregates: function(e){
            this.pvt.aggregates = e;
            return "";
        },
        onCount: function (e) {
            return e === true ? "allpages" : "";
        },
        beforeSend: function (dm, request, settings) {
            if (settings.url.endsWith(this.options.batch) && settings.type.toLowerCase() === "post") {
                request.setRequestHeader("Accept", oData.multipartAccept);
                request.setRequestHeader("DataServiceVersion", "2.0");
                request.overrideMimeType("text/plain; charset=x-user-defined");
            }

            if (!dm.dataSource.crossDomain) {
                request.setRequestHeader("DataServiceVersion", "2.0");
                request.setRequestHeader("MaxDataServiceVersion", "2.0");
            }
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            if (!ej.isNullOrUndefined(data.d)) {
                var dataCopy = query._requiresCount ? data.d.result : data.d;
                if (!ej.isNullOrUndefined(dataCopy))
                    for (var i = 0; i < dataCopy.length; i++) {
                        !ej.isNullOrUndefined(dataCopy[i].__metadata) && delete dataCopy[i].__metadata;
                    }
            }
            var pvt = request && request.ejPvtData;
            if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            if (request && this.options.batch && request.url.endsWith(this.options.batch) && request.type.toLowerCase() === "post") {
                var guid = xhr.getResponseHeader("Content-Type"), cIdx, jsonObj;
                guid = guid.substring(guid.indexOf("=batchresponse") + 1);
                data = data.split(guid);
                if (data.length < 2) return;

                data = data[1];
                var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(data);
                data.replace(exVal[0], "");

                var changeGuid = exVal[1];
                data = data.split(changeGuid);

                for (var i = data.length; i > -1; i--) {
                    if (!/\bContent-ID:/i.test(data[i]) || !/\bHTTP.+201/.test(data[i]))
                        continue;

                    cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(data[i])[1]);

                    if (changes.added[cIdx]) {
                        jsonObj = p.parseJson(/^\{.+\}/m.exec(data[i])[0]);
                        $.extend(changes.added[cIdx], this.processResponse(jsonObj));
                    }
                }
                return changes;
            }
            var version = xhr && xhr.getResponseHeader("DataServiceVersion"), count = null, aggregateResult = {};
            version = (version && parseInt(version, 10)) || 2;

            if (query && query._requiresCount) {
                if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
                if (data.d) data = data.d;
                if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
            }

            if (version === 3 && data.value) data = data.value;
            if (data.d) data = data.d;
            if (version < 3 && data.results) data = data.results;

            if (pvt && pvt.aggregates && pvt.aggregates.length) {
                var agg = pvt.aggregates, args = {}, fn, res = {};
                for (var i = 0; i < agg.length; i++) {
                    fn = ej.aggregates[agg[i].type];
                    if (fn)
                        res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                }
                aggregateResult = res;
            }
            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups;
                for (var i = 0; i < groups.length; i++)
                    data = ej.group(data, groups[i], pvt.aggregates);
            }
            return isNull(count) ? data : { result: data, count: count, aggregates: aggregateResult };
        },
        convertToQueryString: function (req, query, dm) {
            var res = [], tableName = req.table || "";
            delete req.table;

            if (dm.dataSource.requiresFormat)
                req["$format"] = "json";

            for (var prop in req)
                res.push(prop + "=" + req[prop]);

            res = res.join("&");

            if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1 && !tableName)
                return res;

            return res.length ? tableName + "?" + res : tableName || "";
        },
        insert: function (dm, data, tableName) {
            return {
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : ''),
                data: JSON.stringify(data)
            }
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "DELETE",
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value + ')'
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "PUT",
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value[keyField] + ')',
                data: JSON.stringify(value),
                accept: this.options.accept
            };
        },
        batchRequest: function (dm, changes, e) {
            var initialGuid = e.guid = ej.getGuid(oData.batchPre);
            var url = dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
            var args = {
                url: e.url,
                key: e.key,
                cid: 1,
                cSet: ej.getGuid(oData.changeSet)
            };
            var req = "--" + initialGuid + "\n";

            req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n";

            this.pvt.changeSet = 0;

            req += this.generateInsertRequest(changes.added, args);
            req += this.generateUpdateRequest(changes.changed, args);
            req += this.generateDeleteRequest(changes.deleted, args);

            req += args.cSet + "--\n";
            req += "--" + initialGuid + "--";

            return {
                type: "POST",
                url: url,
                contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
                data: req
            };
        },
        generateDeleteRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "DELETE ";
                req += e.url + "(" + arr[i][e.key] + ") HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + this.pvt.changeSet++ + "\n";
                req += oData.batchChangeSetContentType + "\n";
            }

            return req + "\n";
        },
        generateInsertRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "POST ";
                req += e.url + " HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + this.pvt.changeSet++ + "\n";
                req += oData.batchChangeSetContentType + "\n\n";

                req += JSON.stringify(arr[i]) + "\n";
            }

            return req;
        },
        generateUpdateRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "PUT ";
                req += e.url + "(" + arr[i][e.key] + ")" + " HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + this.pvt.changeSet++ + "\n";
                req += oData.batchChangeSetContentType + "\n\n";

                req += JSON.stringify(arr[i]) + "\n\n";
            }

            return req;
        },
        _p: function (prop) {
            return prop.replace(/\./g, "/");
        }
    });
    ej.ODataV4Adaptor = new ej.ODataAdaptor().extend({
        options: {
            requestType: "get",
            accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
            multipartAccept: "multipart/mixed",
            sortBy: "$orderby",
            select: "$select",
            skip: "$skip",
            take: "$top",
            count: "$count",
            search: "$search",
            where: "$filter",
            expand: "$expand",
            batch: "$batch",
            changeSet: "--changeset_",
            batchPre: "batch_",
            contentId: "Content-Id: ",
            batchContent: "Content-Type: multipart/mixed; boundary=",
            changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
            batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
        },
        onCount: function (e) {
            return e === true ? "true" : "";
        },
        onPredicate: function (pred, query, requiresCast) {
            var returnValue = "",
                val = pred.value,
                isDate = val instanceof Date;               

                returnValue = this.base.onPredicate.call(this, pred, query, requiresCast);

                if (isDate)
                    returnValue = returnValue.replace(/datetime'(.*)'$/, "$1");

            return returnValue;
        },
        onEachSearch: function (e) {
			 var search = this.pvt.search || [];
			 search.push(e.key);
			 this.pvt.search = search;
		},
		onSearch: function (e) {
			 return this.pvt.search.join(" OR ");
		},
        beforeSend: function (dm, request, settings) {
 
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            var pvt = request && request.ejPvtData;
            if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            if (request && this.options.batch && request.url.endsWith(this.options.batch) && request.type.toLowerCase() === "post") {
                var guid = xhr.getResponseHeader("Content-Type"), cIdx, jsonObj;
                guid = guid.substring(guid.indexOf("=batchresponse") + 1);
                data = data.split(guid);
                if (data.length < 2) return;

                data = data[1];
                var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(data);
                data.replace(exVal[0], "");

                var changeGuid = exVal[1];
                data = data.split(changeGuid);

                for (var i = data.length; i > -1; i--) {
                   if (!/\bContent-ID:/i.test(data[i]) || !/\bHTTP.+201/.test(data[i]))
                        continue;

                    cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(data[i])[1]);

                    if (changes.added[cIdx]) {
                        jsonObj = p.parseJson(/^\{.+\}/m.exec(data[i])[0]);
                        $.extend(changes.added[cIdx], this.processResponse(jsonObj));
                    }
                }
                return changes;
           }
            var count = null, aggregateResult = {};
            if (query && query._requiresCount)
                if (data['@odata.count']) count = data['@odata.count'];

           data = data.value;
           if (pvt && pvt.aggregates && pvt.aggregates.length) {
               var agg = pvt.aggregates, args = {}, fn, res = {};
               for (var i = 0; i < agg.length; i++) {
                   fn = ej.aggregates[agg[i].type];
                   if (fn)
                       res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
               }
               aggregateResult = res;
           }
            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups;
                for (var i = 0; i < groups.length; i++)
                    data = ej.group(data, groups[i], pvt.aggregates);
            }
            return isNull(count) ? data : { result: data, count: count, aggregates: aggregateResult };
        },
    });
    ej.JsonAdaptor = new ej.Adaptor().extend({
        processQuery: function (ds, query) {
            var result = ds.dataSource.json.slice(0), count = result.length, cntFlg = true, ret, key, agg = {};

            for (var i = 0; i < query.queries.length; i++) {
                key = query.queries[i];
                ret = this[key.fn].call(this, result, key.e, query);
                if (key.fn == "onAggregates")
                    agg[key.e.field + " - " + key.e.type] = ret;
                else
                result = ret !== undefined ? ret : result;

                if (key.fn === "onPage" || key.fn === "onSkip" || key.fn === "onTake" || key.fn === "onRange") cntFlg = false;

                if (cntFlg) count = result.length;
            }

            if (query._requiresCount) {
                result = {
                    result: result,
                    count: count,
                    aggregates: agg
                };
            }

            return result;
        },
        batchRequest: function (dm, changes, e) {
            var i;
            for (i = 0; i < changes.added.length; i++)
                this.insert(dm, changes.added[i]);
            for (i = 0; i < changes.changed.length; i++)
                this.update(dm, e.key, changes.changed[i]);
            for (i = 0; i < changes.deleted.length; i++)
                this.remove(dm, e.key, changes.deleted[i]);
            return changes;
        },
        onWhere: function (ds, e) {
            if (!ds) return ds;

            return ds.filter(function (obj) {
                return e.validate(obj);
            });
        },
        onAggregates: function(ds, e){
            var fn = ej.aggregates[e.type];
            if (!ds || !fn || ds.length == 0) return null;
            return fn(ds, e.field);
        },
        onSearch: function (ds, e) {
            if (!ds || !ds.length) return ds;

            if (e.fieldNames.length === 0) {
                ej.pvt.getFieldList(ds[0], e.fieldNames);
            }

            return ds.filter(function (obj) {
                for (var j = 0; j < e.fieldNames.length; j++) {
                    if (e.comparer.call(obj, ej.pvt.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase))
                        return true;
                }
                return false;
            });
        },
        onSortBy: function (ds, e, query) {
            if (!ds) return ds;
            var fnCompare, field = getValue(e.fieldName, query);
            if (!field)
                return ds.sort(e.comparer);

            if (field instanceof Array) {
                field = field.slice(0);

                for (var i = field.length - 1; i >= 0; i--) {
                    if (!field[i]) continue;

                    fnCompare = e.comparer;

                    if (field[i].endsWith(" desc")) {
                        fnCompare = ej.pvt.fnSort(ej.sortOrder.Descending);
                        field[i] = field[i].replace(" desc", "");
                    }

                    ds = stableSort(ds, field[i], fnCompare, []);
                }
                return ds;
            }
            return stableSort(ds, field, e.comparer, query ? query.queries : []);
        },
        onGroup: function (ds, e, query) {
            if (!ds) return ds;
            var aggQuery = filterQueries(query.queries, "onAggregates"), agg = [];
            if (aggQuery.length) {
                var tmp;
                for (var i = 0; i < aggQuery.length; i++) {
                    tmp = aggQuery[i].e;
                    agg.push({ type: tmp.type, field: getValue(tmp.field, query) });
                }
            }
            return ej.group(ds, getValue(e.fieldName, query), agg);
        },
        onPage: function (ds, e, query) {
            var size = getValue(e.pageSize, query),
                start = (getValue(e.pageIndex, query) - 1) * size, end = start + size;

            if (!ds) return ds;

            return ds.slice(start, end);
        },
        onRange: function (ds, e) {
            if (!ds) return ds;
            return ds.slice(getValue(e.start), getValue(e.end));
        },
        onTake: function (ds, e) {
            if (!ds) return ds;

            return ds.slice(0, getValue(e.nos));
        },
        onSkip: function (ds, e) {
            if (!ds) return ds;
            return ds.slice(getValue(e.nos));
        },
        onSelect: function (ds, e) {
            if (!ds) return ds;
            return ej.select(ds, getValue(e.fieldNames));
        },
        insert: function (dm, data) {
            return dm.dataSource.json.push(data);
        },
        remove: function (dm, keyField, value, tableName) {
            var ds = dm.dataSource.json, i;
            if (typeof value === "object")
                value = value[keyField];
            for (i = 0; i < ds.length; i++) {
                if (ds[i][keyField] === value) break;
            }

            return i !== ds.length ? ds.splice(i, 1) : null;
        },
        update: function (dm, keyField, value, tableName) {
            var ds = dm.dataSource.json, i, key = value[keyField];

            for (i = 0; i < ds.length; i++) {
                if (ds[i][keyField] === key) break;
            }

            return i < ds.length ? $.extend(ds[i], value) : null;
        }
    });
    ej.ForiegnKeyAdaptor = function (data, type) {
        var adaptor = new ej.Adaptor();
        adaptor.type = ej[type || "JsonAdaptor"];
        return (function () {
            var AdaptorObject = adaptor.extend({
                init: function () {
                    this.foreignData = [];
                    this.key = [];
                    this.value = [];
                    var dataObj = data;
                    for (var i = 0; i < dataObj.length; i++) {
                        this.foreignData[i] = dataObj[i].dataSource;
                        this.key[i] = dataObj[i].foreignKeyField;
                        this.value[i] = dataObj[i].foreignKeyValue;
                        this.initial = true;
                    }
                },
                processQuery: function (ds, query) {
                    if (this.initial) {
                        var data = ds.dataSource.json;
                        for (i = 0; i < data.length; i++) {
                            var proxy = this;
                            for (var j = 0; j < this.foreignData.length; j++) {
                                this.foreignData[j].filter(function (col) { //filtering the foreignKey dataSource
                                    if (ej.getObject(proxy.key[j], col) == ej.getObject(proxy.key[j], data[i]))
                                        data[i][proxy.value[j]] = ej.getObject(proxy.value[j], col);
                                });
                            }
                        }
                        this.initial = false
                    }
                    return this.base.processQuery.apply(this, [ds, query]);
                },
                insert: function (dm, data, tableName) {
					ej.JsonAdaptor.prototype.insert(dm,data);
                    for (var i = 0; i < this.foreignData.length; i++) {
                        dm.dataSource.json[0][this.value[i]] = data[this.value[i]];
                    }
                    return {
                        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                        data: JSON.stringify({
                            value: data,
                            table: tableName,
                            action: "insert"
                        })
                    };
                },
                update: function (dm, keyField, value, tableName) {
					ej.JsonAdaptor.prototype.update(dm, keyField, value, tableName) 
                    return {
                        type: "POST",
                        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                        data: JSON.stringify({
                            value: value,
                            action: "update",
                            keyColumn: keyField,
                            key: value[keyField],
                            table: tableName
                        })
                    };
                }
            });
            return new AdaptorObject();
        })();
    }
    ej.remoteSaveAdaptor = new ej.JsonAdaptor().extend({
        beforeSend: ej.UrlAdaptor.prototype.beforeSend,
        insert: ej.UrlAdaptor.prototype.insert,
        update: ej.UrlAdaptor.prototype.update,
        remove: ej.UrlAdaptor.prototype.remove,
        batchRequest: function (dm, changes, e) {
            var i;
            for (i = 0; i < changes.added.length; i++)
                ej.JsonAdaptor.prototype.insert(dm, changes.added[i]);
            for (i = 0; i < changes.changed.length; i++)
                ej.JsonAdaptor.prototype.update(dm, e.key, changes.changed[i]);
            for (i = 0; i < changes.deleted.length; i++)
                ej.JsonAdaptor.prototype.remove(dm, e.key, changes.deleted[i]);
            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({
                    changed: changes.changed,
                    added: changes.added,
                    deleted: changes.deleted,
                    action: "batch",
                    table: e.url,
                    key: e.key
                })
            };
        }
    });
    ej.WebApiAdaptor = new ej.ODataAdaptor().extend({
        insert: function (dm, data, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.url,
                data: JSON.stringify(data)
            };
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "DELETE",
                url: dm.dataSource.url + "/" + value,
                data: JSON.stringify(value)
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "PUT",
                url: dm.dataSource.url,
                data: JSON.stringify(value)
            };
        },
        processResponse: function (data, ds, query, xhr, request, changes) {

            var pvt = request && request.ejPvtData;
            if (request && request.type.toLowerCase() != "post") {
                var version = xhr && xhr.getResponseHeader("DataServiceVersion"), count = null, aggregateResult = {};
                version = (version && parseInt(version, 10)) || 2;

                if (query && query._requiresCount) {
                     if (!isNull(data.Count)) count = data.Count;
                }

                if (version < 3 && data.Items) data = data.Items;

                if (pvt && pvt.aggregates && pvt.aggregates.length) {
                    var agg = pvt.aggregates, args = {}, fn, res = {};
                    for (var i = 0; i < agg.length; i++) {
                        fn = ej.aggregates[agg[i].type];
                        if (fn)
                            res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                    }
                    aggregateResult = res;
                }
                if (pvt && pvt.groups && pvt.groups.length) {
                    var groups = pvt.groups;
                    for (var i = 0; i < groups.length; i++)
                        data = ej.group(data, groups[i], pvt.aggregates);
                }
                return isNull(count) ? data : { result: data, count: count, aggregates: aggregateResult };
            }
        }
    });
    var getValue = function (value, inst) {
        if (typeof value === "function")
            return value.call(inst || {});
        return value;
    }

    ej.TableModel = function (name, jsonArray, dataManager, modelComputed) {
        if (!instance(this, ej.TableModel))
            return new ej.TableModel(jsonArray);

        if (!instance(jsonArray, Array))
            throwError("ej.TableModel - Json Array is required");

        var rows = [], model, dirtyFn = $proxy(setDirty, this);

        for (var i = 0; i < jsonArray.length; i++) {
            model = new ej.Model(jsonArray[i], this);
            model.state = "unchanged";
            model.on("stateChange", dirtyFn);
            if (modelComputed)
                model.computes(modelComputed);
            rows.push(model);
        }

        this.name = name || "table1";

        this.rows = ej.NotifierArray(rows);
        this._deleted = [];

        this._events = $({});

        this.dataManager = dataManager;

        this._isDirty = false;

        return this;
    };

    ej.TableModel.prototype = {
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },

        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },

        setDataManager: function (dataManager) {
            this.dataManagar = dataManager;
        },

        saveChanges: function () {
            if (!this.dataManager || !instance(this.dataManager, ej.DataManager))
                throwError("ej.TableModel - saveChanges : Set the dataManager using setDataManager function");

            if (!this.isDirty())
                return;

            var promise = this.dataManager.saveChanges(this.getChanges(), this.key, this.name);

            promise.done($proxy(function (changes) {
                var rows = this.toArray();
                for (var i = 0; i < rows.length; i++) {
                    if (rows.state === "added") {
                        rows.set(this.key, changes.added.filter(function (e) {
                            return e[this.key] === rows.get(this.key);
                        })[0][this.key]);
                    }
                    rows[i].markCommit();
                }

                this._events.triggerHandler({ type: "save", table: this });

            }, this));

            promise.fail($proxy(function (e) {
                this.rejectChanges();
                this._events.triggerHandler({ type: "reject", table: this, error: e });
            }, this));

            this._isDirty = false;
        },

        rejectChanges: function () {
            var rows = this.toArray();
            for (var i = 0; i < rows.length; i++)
                rows[i].revert(true);

            this._isDirty = false;
            this._events.triggerHandler({ type: "reject", table: this });
        },

        insert: function (json) {
            var model = new ej.Model(json);
            model._isDirty = this._isDirty = true;

            this.rows.push(model);

            this._events.triggerHandler({ type: "insert", model: model, table: this });
        },

        update: function (value) {
            if (!this.key)
                throwError("TableModel - update : Primary key should be assigned to TableModel.key");

            var row = value, model, key = this.key, keyValue = row[key];

            model = this.rows.array.filter(function (obj) {
                return obj.get(key) === keyValue;
            });

            model = model[0];

            for (var col in row) {
                model.set(col, row[col]);
            }

            this._isDirty = true;

            this._events.triggerHandler({ type: "update", model: model, table: this });
        },

        remove: function (key) {
            if (!this.key)
                throwError("TableModel - update : Primary key should be assigned to TableModel.key");

            var field = this.key;

            var index = -1, model;

            if (key && typeof key === "object") {
                key = key[field] !== undefined ? key[field] : key.get(field);
            }

            for (var i = 0; i < this.rows.length() ; i++) {
                if (this.rows.array[i].get(field) === key) {
                    index = i;
                    break;
                }
            }

            if (index > -1) {
                model = this.rows.removeAt(index);
                model.markDelete();

                this._deleted.push({ model: model, position: index });

                this._isDirty = true;
                this._events.triggerHandler({ type: "remove", model: model, table: this });
            }
        },

        isDirty: function () {
            return this._isDirty;
        },

        getChanges: function () {

            var changes = {
                added: [],
                changed: []
            };
            var rows = this.toArray();
            for (var i = 0; i < rows.length; i++) {
                if (changes[rows[i].state])
                    changes[rows[i].state].push(rows[i].json);
            }

            changes.deleted = ej.select(this._deleted, ["model"]);

            return changes;
        },

        toArray: function () {
            return this.rows.toArray();
        },

        setDirty: function (dirty, model) {
            if (this._isDirty === !!dirty) return;

            this._isDirty = !!dirty;

            this._events.triggerHandler({ type: "dirty", table: this, model: model });
        },
        get: function (index) {
            return this.rows.array[index];
        },
        length: function () {
            return this.rows.array.length;
        },

        bindTo: function (element) {
            var marker = tDiv, template = $(element.html()), rows = this.toArray(), cur;
            if ($.inArray(element.prop("tagName").toLowerCase(), ["table", "tbody"]))
                marker = tTR;

            marker.insertBefore(element);
            element.detach().empty();

            for (var i = 0; i < rows.length; i++) {
                cur = template.clone();
                rows[i].bindTo(cur);
                element.append(cur);
            }

            element.insertAfter(marker);
            marker.remove();
        }
    };

    var tDiv = doc ? $(document.createElement("div")) : {},
        tTR = doc ? $(document.createElement("tr")) : {};

    ej.Model = function (json, table, name) {
        if (typeof table === "string") {
            name = table;
            table = null;
        }
        this.$id = getUid("m");

        this.json = json;
        this.table = table instanceof ej.TableModel ? table : null;
        this.name = name || (this.table && this.table.name);
        this.dataManager = (table instanceof ej.DataManager) ? table : table.dataManagar;
        this.actual = {};
        this._events = $({});
        this.isDirty = false;
        this.state = "added";
        this._props = [];
        this._computeEls = {};
        this._fields = {};
        this._attrEls = {};
        this._updates = {};
        this.computed = {};
    };

    ej.Model.prototype = {
        computes: function (value) {
            $.extend(this.computed, value);
        },
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },
        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },
        set: function (field, value) {
            var obj = this.json, actual = field, prev;
            field = field.split('.');

            for (var i = 0; i < field.length - 1; i++) {
                field = field[0];
                obj = obj[field[0]];
            }

            this.isDirty = true;
            this.changeState("changed", { from: "set" });

            prev = obj[field];

            if (this.actual[field] === undefined && !(field in this.actual))
                this.actual[field] = value; // Complex property ?

            obj[field] = value;

            this._updateValues(field, value);
            this._events.triggerHandler({ type: actual, current: value, previous: prev, model: this });
        },
        get: function (field) {
            return ej.pvt.getObject(field, this.json);
        },
        revert: function (suspendEvent) {
            for (var prop in this.actual) {
                this.json[prop] = this.actual[prop];
            }

            this.isDirty = false;

            if (suspendEvent)
                this.state = "unchanged";
            else
                this.changeState("unchanged", { from: "revert" });
        },
        save: function (dm, key) {
            dm = dm || this.dataManagar;
            key = key || dm.dataSource.key;
            if (!dm) throwError("ej.Model - DataManager is required to commit the changes");
            if (this.state === "added") {
                return dm.insert(this.json, this.name).done(ej.proxy(function (e) {
                    $.extend(this.json, e.record);
                }, this));
            }
            else if (this.state === "changed") {
                return dm.update(key, this.json, this.name);
            }
            else if (this.state === "deleted") {
                return dm.remove(key, this.json, this.name);
            }
        },
        markCommit: function () {
            this.isDirty = false;
            this.changeState("unchanged", { from: "commit" });
        },
        markDelete: function () {
            this.changeState("deleted", { from: "delete" });
        },
        changeState: function (state, args) {
            if (this.state === state) return;

            if (this.state === "added") {
                if (state === "deleted")
                    state = "unchanged";
                else return;
            }

            var prev = state;
            args = args || {};

            this.state = state;
            this._events.triggerHandler($.extend({ type: "stateChange", current: state, previous: prev, model: this }, args));
        },
        properties: function () {
            if (this._props.length)
                return this._props;

            for (var pr in this.json) {
                this._props.push(pr);
                this._updates[pr] = { read: [], input: [] };
            }

            return this._props;
        },
        bindTo: function (element) {
            var el = $(element), ctl, field,
                elements = el.find("[ej-observe], [ej-computed], [ej-prop]"), len = elements.length;

            el.data("ejModel", this);
            var unbindData = { fields: [], props: [], computes: [] };
            for (var i = 0; i < len; i++) {
                ctl = elements.eq(i);

                field = ctl.attr("ej-prop");
                if (field) {
                    this._processAttrib(field, ctl, unbindData);
                }
                field = ctl.attr("ej-observe");
                if (field && this._props.indexOf(field) !== -1) {
                    this._processField(ctl, field, unbindData);
                    continue;
                }

                field = ctl.attr("ej-computed");
                if (field) {
                    this._processComputed(field, ctl, unbindData);
                    continue;
                }
            }
            el.data("ejModelBinding" + this.$id, unbindData);
        },
        unbind: function (element) {
            var tmp, data = {
                props: this._attrEls,
                computes: this._computeEls
            }, isCustom = false;

            if (element) {
                data = $(element).removeData("ejModel").data("ejModelBinding" + this.$id) || data;
                isCustom = true;
            }

            for (var p in this.computed) {
                tmp = data.computes[p], p = this.computed[p];
                if (tmp && p.deps) {
                    this.off(p.deps.join(' '), tmp.handle);
                    if (isCustom)
                        delete this._computeEls[p];
                }
            }
            if (!isCustom)
                this._computeEls = {};

            for (var p in data.props) {
                tmp = data.props[p];
                if (tmp) {
                    this.off(tmp.deps.join(' '), tmp.handle);
                    delete data.props[p];
                    if (isCustom)
                        delete this._attrEls[p];
                }
            }
            if (!isCustom)
                this._attrEls = {};

            if (data.fields && data.fields.length) {
                var len = data.fields.length, ctl, idx, ty;
                for (var i = 0; i < len; i++) {
                    ctl = data.fields[i];
                    $(ctl).off("change", null, this._changeHandler);

                    ty = this.formElements.indexOf(ctl.tagName.toLowerCase()) !== -1 ? "input" : "read";
                    idx = this._updates[ty].indexOf(ctl);
                    if (idx !== -1)
                        this._updates[ty].splice(idx, 1);
                }
            }
        },
        _processComputed: function (value, element, data) {
            if (!value) return;

            var val, deps, safeVal = safeStr(value),
            type = this.formElements.indexOf(element[0].tagName.toLowerCase()) !== -1 ? "val" : "html";

            if (!this.computed[value] || !this.computed[safeVal]) {
                this.computed[safeVal] = {
                    value: new Function("var e = this; return " + value),
                    deps: this._generateDeps(value)
                }
                value = safeVal;
            }

            val = this.computed[value];
            if (!val.get) {
                val.get = function () {
                    val.value.call(this.json);
                }
            }

            deps = val.deps;
            val = val.value;

            this._updateDeps(deps);
            this._updateElement(element, type, val);

            val = { el: element, handle: $proxy(this._computeHandle, this, { value: value, type: type }) };
            this._computeEls[value] = val;
            data.computes[value] = val;

            this.on(deps.join(' '), val.handle);
        },
        _computeHandle: function (e) {
            var el = this._computeEls[e.value];
            if (el && this.computed[e.value])
                this._updateElement(el.el, e.type, this.computed[e.value].value);
        },
        _updateElement: function (el, type, val) {
            el[type](val.call($.extend({}, this.json, this.computed)));
        },
        _updateDeps: function (deps) {
            for (var i = 0; i < deps.length; i++) {
                if (!(deps[i] in this.json) && deps[i] in this.computed)
                    ej.merge(deps, this.computed[deps[i]].deps);
            }
        },
        _generateDeps: function (value) {
            var splits = value.replace(/(^e\.)|( e\.)/g, '#%^*##ej.#').split("#%^*#"),
                field, deps = [];

            for (var i = 0; i < splits.length; i++) {
                if (splits[i].startsWith("#ej.#")) {
                    field = splits[i].replace("#ej.#", "").split(' ')[0];
                    if (field && this._props.indexOf(field) !== -1)
                        deps.push(field);
                }
            }

            return deps;
        },
        _processAttrib: function (value, el, data) {
            var prop, val, res = {};
            value = value.replace(/^ +| +$/g, "").split(";");
            for (var i = 0; i < value.length; i++) {
                value[i] = value[i].split(":");
                if (value[i].length < 2) continue;

                prop = value[i][0].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
                res[prop] = value[i][1].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
            }
            value = res;
            var deps = [];
            for (prop in value)
                deps.push(value[prop]);

            this._updateDeps(deps);
            this._updateProps(el, value);

            res = getUid("emak");
            val = { el: el, handle: $proxy(this._attrHandle, this, res), value: value, deps: deps };
            el.prop("ejmodelattrkey", res);

            data.props[res] = val;
            this._attrEls[res] = val;

            this.on(deps.join(' '), val.handle);
        },
        _attrHandle: function (res) {
            var el = this._attrEls[res];
            if (el)
                this._updateProps(el.el, el.value);
        },
        _updateProps: function (element, value) {
            var json = this.json, t, c = this.computed;
            for (var prop in value) {
                t = value[prop];
                if (t in json)
                    t = json[t];
                else if (t in c) {
                    t = c[t];
                    if (t) {
                        t = t.value.call($.extend({}, this.json, c));
                    }
                }

                if (!isNull(t)) {
                    element.prop(prop, t);
                }
            }
        },
        _updateValues: function (prop, value) {
            var arr = this._updates[prop];

            if (!arr || (!arr.read && !arr.input)) return;

            this._ensureItems(arr.read, "html", value);
            this._ensureItems(arr.input, "val", value);
        },
        _ensureItems: function (a, type, value) {
            if (!a) return;

            for (var i = a.length - 1; i > -1; i--) {
                if (!a[i].offsetParent) {
                    a.splice(i, 1);
                    continue;
                }
                $(a[i])[type](value);
            }
        },
        _changeHandler: function (e) {
            e.data.self.set(e.data.prop, $(this).val());
        },
        _processField: function (ctl, field, data) {
            var e = { self: this, prop: field }, val = this.get(field);

            data.fields.push(ctl[0]);

            if (this.formElements.indexOf(ctl[0].tagName.toLowerCase()) === -1) {
                ctl.html(val);
                return this._updates[field].read.push(ctl[0]);
            }

            ctl.val(val)
                    .off("change", null, this._changeHandler)
                    .on("change", null, e, this._changeHandler);

            return this._updates[field].input.push(ctl[0]);
        },
        formElements: ["input", "select", "textarea"]
    };

    var safeReg = /[^\w]+/g;
    var safeStr = function (value) {
        return value.replace(safeReg, "_");
    };
    var setDirty = function (e) {
        this.setDirty(true, e.model);
    };

    ej.Predicate = function (field, operator, value, ignoreCase) {
        if (!(this instanceof ej.Predicate))
            return new ej.Predicate(field, operator, value, ignoreCase);

        if (typeof field === "string") {
            this.field = field;
            this.operator = operator;
            this.value = value;
            this.ignoreCase = ignoreCase;
            this.isComplex = false;

            this._comparer = ej.data.fnOperators.processOperator(this.operator);

        } else if (field instanceof ej.Predicate && value instanceof ej.Predicate || value instanceof Array) {
            this.isComplex = true;
            this.condition = operator.toLowerCase();
            this.predicates = [field];
            if (value instanceof Array)
                [].push.apply(this.predicates, value);
            else
                this.predicates.push(value);
        }
        return this;
    };

    ej.Predicate.and = function () {
        return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "and");
    };

    ej.Predicate.or = function () {
        return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "or");
    };

    // Private fn
    var pvtPredicate = {
        _combinePredicates: function (predicates, operator) {
            if (!predicates.length) return undefined;
            if (predicates.length === 1) {
                if (!instance(predicates[0], Array))
                    return predicates[0];
                predicates = predicates[0];
            }
            return new ej.Predicate(predicates[0], operator, predicates.slice(1));
        },

        _combine: function (pred, field, operator, value, condition, ignoreCase) {
            if (field instanceof ej.Predicate)
                return ej.Predicate[condition](pred, field);

            if (typeof field === "string")
                return ej.Predicate[condition](pred, new ej.Predicate(field, operator, value, ignoreCase));

            return throwError("Predicate - " + condition + " : invalid arguments");
        }
    };

    ej.Predicate.prototype = {
        and: function (field, operator, value, ignoreCase) {
            return pvtPredicate._combine(this, field, operator, value, "and", ignoreCase);
        },
        or: function (field, operator, value, ignoreCase) {
            return pvtPredicate._combine(this, field, operator, value, "or", ignoreCase);
        },
        validate: function (record) {
            var p = this.predicates, isAnd, ret;

            if (!this.isComplex) {
                return this._comparer.call(this, ej.pvt.getObject(this.field, record), this.value, this.ignoreCase);
            }

            isAnd = this.condition === "and";

            for (var i = 0; i < p.length; i++) {
                ret = p[i].validate(record);
                if (isAnd) {
                    if (!ret) return false;
                } else {
                    if (ret) return true;
                }
            }

            return isAnd;
        },
        toJSON: function () {
            var predicates, p;
            if (this.isComplex) {
                predicates = [], p = this.predicates;
                for (var i = 0; i < p.length; i++)
                    predicates.push(p[i].toJSON());
            }
            return {
                isComplex: this.isComplex,
                field: this.field,
                operator: this.operator,
                value: this.value,
                ignoreCase: this.ignoreCase,
                condition: this.condition,
                predicates: predicates
            }
        }
    };

    ej.dataUtil = {
        swap: function (array, x, y) {
            if (x == y) return;

            var tmp = array[x];
            array[x] = array[y];
            array[y] = tmp;
        },

        mergeSort: function (jsonArray, fieldName, comparer) {
            if (!comparer || typeof comparer === "string")
                comparer = ej.pvt.fnSort(comparer, true);

            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return ej.pvt.mergeSort(jsonArray, fieldName, comparer);
        },

        max: function (jsonArray, fieldName, comparer) {
            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return ej.pvt.getItemFromComparer(jsonArray, fieldName, comparer || ej.pvt.fnDescending);
        },

        min: function (jsonArray, fieldName, comparer) {
            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return ej.pvt.getItemFromComparer(jsonArray, fieldName, comparer || ej.pvt.fnAscending);
        },

        distinct: function (json, fieldName, requiresCompleteRecord) {
            var result = [], val, tmp = {};
            for (var i = 0; i < json.length; i++) {
                val = getVal(json, fieldName, i);
                if (!(val in tmp)) {
                    result.push(!requiresCompleteRecord ? val : json[i]);
                    tmp[val] = 1;
                }
            }
            return result;
        },

        sum: function (json, fieldName) {
            var result = 0, val, castRequired = typeof getVal(json, fieldName, 0) !== "number";

            for (var i = 0; i < json.length; i++) {
                val = getVal(json, fieldName, i);
                if (!isNaN(val) && val !== null) {
                    if (castRequired)
                       val = +val;
                   result += val;
                }
            }
            return result;
        },

        avg: function (json, fieldName) {
            return ej.sum(json, fieldName) / json.length;
        },

        select: function (jsonArray, fields) {
            var newData = [];

            for (var i = 0; i < jsonArray.length; i++) {
                newData.push(ej.pvt.extractFields(jsonArray[i], fields));
            }

            return newData;
        },

        group: function (jsonArray, field,agg, /* internal */ level,groupDs) {
            level = level || 1;

            if (jsonArray.GROUPGUID == ej.pvt.consts.GROUPGUID) {
                for (var j = 0; j < jsonArray.length; j++) {
                    if(!ej.isNullOrUndefined(groupDs)){
                        var indx = -1;
                        var temp = $.grep(groupDs,function(e){return e.key==jsonArray[j].key});
                        indx = groupDs.indexOf(temp[0]);
                        jsonArray[j].items = ej.group(jsonArray[j].items, field, agg, jsonArray.level + 1,groupDs[indx].items);
                        jsonArray[j].count = groupDs[indx].count;
                    }
                    else{
                        jsonArray[j].items = ej.group(jsonArray[j].items, field, agg, jsonArray.level + 1);
                        jsonArray[j].count = jsonArray[j].items.length;
                    }  
                }

                jsonArray.childLevels += 1;
                return jsonArray;
            }

            var grouped = {}, groupedArray = [];

            groupedArray.GROUPGUID = ej.pvt.consts.GROUPGUID;
            groupedArray.level = level;
            groupedArray.childLevels = 0;
            groupedArray.records = jsonArray;

            for (var i = 0; i < jsonArray.length; i++) {
                var val = getVal(jsonArray, field, i);

                if (!grouped[val]) {
                    grouped[val] = {
                        key: val,
                        count: 0,
                        items: [],
                        aggregates: {},
                        field: field
                    };
                    groupedArray.push(grouped[val]);
					if(!ej.isNullOrUndefined(groupDs)) {
                        var tempObj = $.grep(groupDs,function(e){return e.key==grouped[val].key});
                       grouped[val].count = tempObj[0].count
                    }
                }

                grouped[val].count = !ej.isNullOrUndefined(groupDs) ? grouped[val].count :  grouped[val].count += 1;
                grouped[val].items.push(jsonArray[i]);
            }
            if (agg && agg.length) {

                for (var i = 0; i < groupedArray.length; i++) {
                    var res = {}, fn;
                    for (var j = 0; j < agg.length; j++) {

                        fn = ej.aggregates[agg[j].type];
                        if(!ej.isNullOrUndefined(groupDs)) {
                            var temp = $.grep(groupDs,function(e){return e.key==groupedArray[i].key});
                            if(fn)
                                res[agg[j].field + " - " + agg[j].type] = fn(temp[0].items, agg[j].field);
                        }
                        else{
                            if (fn)
                                res[agg[j].field + " - " + agg[j].type] = fn(groupedArray[i].items, agg[j].field);
                        }

                    }
                    groupedArray[i]["aggregates"] = res;
                }
            }
            return groupedArray;
        },

        parseTable: function (table, headerOption, headerRowIndex) {
            var tr = table.rows, headerRow, headerTds = [], data = [], i;

            if (!tr.length) return [];

            headerRowIndex = headerRowIndex || 0;

            switch ((headerOption || "").toLowerCase()) {
                case ej.headerOption.tHead:
                    headerRow = table.tHead.rows[headerRowIndex];
                    break;
                case ej.headerOption.row:
                default:
                    headerRow = table.rows[headerRowIndex];
                    break;
            }

            var hTd = headerRow.cells;

            for (i = 0; i < hTd.length; i++)
                headerTds.push($.trim(hTd[i].innerHTML));

            for (i = headerRowIndex + 1; i < tr.length; i++) {
                var json = {}, td = tr[i].cells;
                for (var j = 0; j < td.length; j++) {
                    var temp = td[j].innerHTML;
                    if (typeof temp == "string" && $.isNumeric(temp))
                       json[headerTds[j]] = Number(temp);
				    else
                       json[headerTds[j]] = temp;
                }
                data.push(json);
            }
            return data;
        }
    };

    ej.headerOption = {
        tHead: "thead",
        row: "row"
    };

    ej.aggregates = {
        sum: function (ds, field) {
            return ej.sum(ds, field);
        },
        average: function (ds, field) {
            return ej.avg(ds, field);
        },
        minimum: function (ds, field) {
            return ej.min(ds, field)[field];
        },
        maximum: function (ds, field) {
            return ej.max(ds, field)[field];
        },
        truecount: function (ds, field){
            var predicate = ej.Predicate(field, "equal", true);
            return ej.DataManager(ds).executeLocal(ej.Query().where(predicate)).length;
        },
        falsecount: function (ds, field) {
            var predicate = ej.Predicate(field, "equal", false);
            return ej.DataManager(ds).executeLocal(ej.Query().where(predicate)).length;
        },
        count: function (ds, field) {
            return ds.length;
        }

    };
    ej.pvt = {
        filterQueries: filterQueries,
        mergeSort: function (jsonArray, fieldName, comparer) {
            if (jsonArray.length <= 1)
                return jsonArray;

            // else list size is > 1, so split the list into two sublists
            var middle = parseInt(jsonArray.length / 2, 10);

            var left = jsonArray.slice(0, middle),
                right = jsonArray.slice(middle);

            left = ej.pvt.mergeSort(left, fieldName, comparer);
            right = ej.pvt.mergeSort(right, fieldName, comparer);

            return ej.pvt.merge(left, right, fieldName, comparer);
        },

        getItemFromComparer: function (array, field, comparer) {
            var keyVal, current, key, i = 0,castRequired = typeof getVal(array, field, 0) == "string";
            if (array.length)
            while (ej.isNullOrUndefined(keyVal)) {
                keyVal = getVal(array, field, i);
                key = array[i++];
            }
            for (; i < array.length; i++) {
                current = getVal(array, field, i);
                if (ej.isNullOrUndefined(current))
                    continue;
                if (castRequired) {
                    keyVal = +keyVal;
                    current = +current;
                }
                if (comparer(keyVal, current) > 0) {
                    keyVal = current;
                    key = array[i];
                }
            }
            return key;
        },

        quickSelect: function (array, fieldName, left, right, k, comparer) {
            if (left == right)
                return array[left];

            var pivotNewIndex = ej.pvt.partition(array, fieldName, left, right, comparer);

            var pivotDist = pivotNewIndex - left + 1;

            if (pivotDist == k)
                return array[pivotNewIndex];

            else if (k < pivotDist)
                return ej.pvt.quickSelect(array, fieldName, left, pivotNewIndex - 1, k, comparer);
            else
                return ej.pvt.quickSelect(array, fieldName, pivotNewIndex + 1, right, k - pivotDist, comparer);
        },

        extractFields: function (obj, fields) {
            var newObj = {};

            if (fields.length == 1)
                return ej.pvt.getObject(fields[0], obj);

            for (var i = 0; i < fields.length; i++) {
                newObj[fields[i].replace('.', ej.pvt.consts.complexPropertyMerge)] = ej.pvt.getObject(fields[i], obj);
            }

            return newObj;
        },

        partition: function (array, field, left, right, comparer) {

            var pivotIndex = parseInt((left + right) / 2, 10),
                pivot = getVal(array, field, pivotIndex);

            ej.swap(array, pivotIndex, right);

            pivotIndex = left;

            for (var i = left; i < right; i++) {
                if (comparer(getVal(array, field, i), pivot)) {
                    ej.swap(array, i, pivotIndex);
                    pivotIndex++;
                }
            }

            ej.swap(array, pivotIndex, right);

            return pivotIndex;
        },

        fnSort: function (order) {
            order = order ? order.toLowerCase() : ej.sortOrder.Ascending;

            if (order == ej.sortOrder.Ascending)
                return ej.pvt.fnAscending;

            return ej.pvt.fnDescending;
        },

        fnGetComparer: function (field, fn) {
            return function (x, y) {
                return fn(ej.pvt.getObject(field, x), ej.pvt.getObject(field, y));
            }
        },

        fnAscending: function (x, y) {
            if (y === null || y === undefined)
                return -1;

            if (typeof x === "string")
                return x.localeCompare(y);

            if (x === null || x === undefined)
                return 1;

            return x - y;
        },

        fnDescending: function (x, y) {
            if (y === null || y === undefined)
                return 1;

            if (typeof x === "string")
                return x.localeCompare(y) * -1;

            if (x === null || x === undefined)
                return -1;

            return y - x;
        },

        merge: function (left, right, fieldName, comparer) {
            var result = [], current;

            while (left.length > 0 || right.length > 0) {
                if (left.length > 0 && right.length > 0) {
                    if (comparer)
                        current = comparer(getVal(left, fieldName, 0), getVal(right, fieldName, 0)) <= 0 ? left : right;
                    else
                        current = left[0][fieldName] < left[0][fieldName] ? left : right;
                } else {
                    current = left.length > 0 ? left : right;
                }

                result.push(current.shift());
            }

            return result;
        },

        getObject: function (nameSpace, from) {
            if (!from) return undefined;
            if (!nameSpace) return from;

            if (nameSpace.indexOf('.') === -1) return from[nameSpace];

            var value = from, splits = nameSpace.split('.');

            for (var i = 0; i < splits.length; i++) {

                if (value == null) break;

                value = value[splits[i]];
            }

            return value;
        },

        createObject: function (nameSpace, value, initIn) {
            var splits = nameSpace.split('.'), start = initIn || window, from = start, i;

            for (i = 0; i < splits.length; i++) {

                if (i + 1 == splits.length)
                    from[splits[i]] = value === undefined ? {} : value;
                else if (from[splits[i]] == null)
                    from[splits[i]] = {};

                from = from[splits[i]];
            }

            return start;
        },

        getFieldList: function (obj, fields, prefix) {
            if (prefix === undefined)
                prefix = "";

            if (fields === undefined || fields === null)
                return ej.pvt.getFieldList(obj, [], prefix);

            for (var prop in obj) {
                if (typeof obj[prop] === "object" && !(obj[prop] instanceof Array))
                    ej.pvt.getFieldList(obj[prop], fields, prefix + prop + ".");
                else
                    fields.push(prefix + prop);
            }

            return fields;
        }
    };

    ej.FilterOperators = {
        lessThan: "lessthan",
        greaterThan: "greaterthan",
        lessThanOrEqual: "lessthanorequal",
        greaterThanOrEqual: "greaterthanorequal",
        equal: "equal",
        contains: "contains",
        startsWith: "startswith",
        endsWith: "endswith",
        notEqual: "notequal"
    };

    ej.data = {};

    ej.data.operatorSymbols = {
        "<": "lessthan",
        ">": "greaterthan",
        "<=": "lessthanorequal",
        ">=": "greaterthanorequal",
        "==": "equal",
        "!=": "notequal",
        "*=": "contains",
        "$=": "endswith",
        "^=": "startswith"
    };

    ej.data.odBiOperator = {
        "<": " lt ",
        ">": " gt ",
        "<=": " le ",
        ">=": " ge ",
        "==": " eq ",
        "!=": " ne ",
        "lessthan": " lt ",
        "lessthanorequal": " le ",
        "greaterthan": " gt ",
        "greaterthanorequal": " ge ",
        "equal": " eq ",
        "notequal": " ne "
    };

    ej.data.odUniOperator = {
        "$=": "endswith",
        "^=": "startswith",
        "*=": "substringof",
        "endswith": "endswith",
        "startswith": "startswith",
        "contains": "substringof"
    };

    ej.data.fnOperators = {
        equal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) == toLowerCase(expected);

            return actual == expected;
        },
        notequal: function (actual, expected, ignoreCase) {
            return !ej.data.fnOperators.equal(actual, expected, ignoreCase);
        },
        lessthan: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) < toLowerCase(expected);

            return actual < expected;
        },
        greaterthan: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) > toLowerCase(expected);

            return actual > expected;
        },
        lessthanorequal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) <= toLowerCase(expected);

            return actual <= expected;
        },
        greaterthanorequal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) >= toLowerCase(expected);

            return actual >= expected;
        },
        contains: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return !isNull(actual) && !isNull(expected) && toLowerCase(actual).indexOf(toLowerCase(expected)) != -1;

            return !isNull(actual) && !isNull(expected) && actual.toString().indexOf(expected) != -1;
        },
        notnull: function (actual) {
            return actual !== null;
        },
        isnull: function (actual) {
            return actual === null;
        },
        startswith: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return actual && expected && toLowerCase(actual).startsWith(toLowerCase(expected));

            return actual && expected && actual.startsWith(expected);
        },
        endswith: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return actual && expected && toLowerCase(actual).endsWith(toLowerCase(expected));

            return actual && expected && actual.endsWith(expected);
        },

        processSymbols: function (operator) {
            var fnName = ej.data.operatorSymbols[operator];
            if (fnName) {
                var fn = ej.data.fnOperators[fnName];
                if (fn) return fn;
            }

            return throwError("Query - Process Operator : Invalid operator");
        },

        processOperator: function (operator) {
            var fn = ej.data.fnOperators[operator];
            if (fn) return fn;
            return ej.data.fnOperators.processSymbols(operator);
        }
    };

    ej.NotifierArray = function (array) {
        if (!instance(this, ej.NotifierArray))
            return new ej.NotifierArray(array);

        this.array = array;

        this._events = $({});
        this._isDirty = false;

        return this;
    };

    ej.NotifierArray.prototype = {
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },
        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },
        push: function (item) {
            var ret;

            if (instance(item, Array))
                ret = [].push.apply(this.array, item);
            else
                ret = this.array.push(item);

            this._raise("add", { item: item, index: this.length() - 1 });

            return ret;
        },
        pop: function () {
            var ret = this.array.pop();

            this._raise("remove", { item: ret, index: this.length() - 1 });

            return ret;
        },
        addAt: function (index, item) {
            this.array.splice(index, 0, item);

            this._raise("add", { item: item, index: index });

            return item;
        },
        removeAt: function (index) {
            var ret = this.array.splice(index, 1)[0];

            this._raise("remove", { item: ret, index: index });

            return ret;
        },
        remove: function (item) {
            var index = this.array.indexOf(item);

            if (index > -1) {
                this.array.splice(index, 1);
                this._raise("remove", { item: item, index: index });
            }

            return index;
        },
        length: function () {
            return this.array.length;
        },
        _raise: function (e, args) {
            this._events.triggerHandler($.extend({ type: e }, args));
            this._events.triggerHandler({ type: "all", name: e, args: args });
        },
        toArray: function () {
            return this.array;
        }
    };

    $.extend(ej, ej.dataUtil);

    // For IE8
    Array.prototype.forEach = Array.prototype.forEach || function (fn, scope) {
        for (var i = 0, len = this.length; i < len; ++i) {
            fn.call(scope, this[i], i, this);
        }
    };

    Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
        var len = this.length;

        if (len === 0) return -1;

        for (var i = 0; i < len; i++) {
            if (i in this && this[i] === searchElement)
                return i;
        }
        return -1;
    };

    Array.prototype.filter = Array.prototype.filter || function (fn) {
        if (typeof fn != "function")
            throw new TypeError();

        var res = [];
        var thisp = arguments[1] || this;
        for (var i = 0; i < this.length; i++) {
            var val = this[i]; // in case fun mutates this
            if (fn.call(thisp, val, i, this))
                res.push(val);
        }

        return res;
    };

    String.prototype.endsWith = String.prototype.endsWith || function (key) {
        return this.slice(-key.length) === key;
    };

    String.prototype.startsWith = String.prototype.startsWith || function (key) {
        return this.slice(0, key.length) === key;
    };

    if (!ej.support) ej.support = {};
    ej.support.stableSort = function () {
        var res = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16].sort(function () { return 0; });
		for(var i = 0; i < 17; i++){
		    if(i !== res[i]) return false;
		}
        return true;
    }();
    ej.support.cors = $.support.cors;

    if (!$.support.cors && window.XDomainRequest) {
        var httpRegEx = /^https?:\/\//i;
        var getOrPostRegEx = /^get|post$/i;
        var sameSchemeRegEx = new RegExp('^' + location.protocol, 'i');
        var xmlRegEx = /\/xml/i;

        // ajaxTransport exists in jQuery 1.5+
        $.ajaxTransport('text html xml json', function (options, userOptions, jqXHR) {
            // XDomainRequests must be: asynchronous, GET or POST methods, HTTP or HTTPS protocol, and same scheme as calling page
            if (options.crossDomain && options.async && getOrPostRegEx.test(options.type) && httpRegEx.test(userOptions.url) && sameSchemeRegEx.test(userOptions.url)) {
                var xdr = null;
                var userType = (userOptions.dataType || '').toLowerCase();
                return {
                    send: function (headers, complete) {
                        xdr = new XDomainRequest();
                        if (/^\d+$/.test(userOptions.timeout)) {
                            xdr.timeout = userOptions.timeout;
                        }
                        xdr.ontimeout = function () {
                            complete(500, 'timeout');
                        };
                        xdr.onload = function () {
                            var allResponseHeaders = 'Content-Length: ' + xdr.responseText.length + '\r\nContent-Type: ' + xdr.contentType;
                            var status = {
                                code: 200,
                                message: 'success'
                            };
                            var responses = {
                                text: xdr.responseText
                            };

                            try {
                                if (userType === 'json') {
                                    try {
                                        responses.json = JSON.parse(xdr.responseText);
                                    } catch (e) {
                                        status.code = 500;
                                        status.message = 'parseerror';
                                        //throw 'Invalid JSON: ' + xdr.responseText;
                                    }
                                } else if ((userType === 'xml') || ((userType !== 'text') && xmlRegEx.test(xdr.contentType))) {
                                    var doc = new ActiveXObject('Microsoft.XMLDOM');
                                    doc.async = false;
                                    try {
                                        doc.loadXML(xdr.responseText);
                                    } catch (e) {
                                        doc = undefined;
                                    }
                                    if (!doc || !doc.documentElement || doc.getElementsByTagName('parsererror').length) {
                                        status.code = 500;
                                        status.message = 'parseerror';
                                        throw 'Invalid XML: ' + xdr.responseText;
                                    }
                                    responses.xml = doc;
                                }
                            } catch (parseMessage) {
                                throw parseMessage;
                            } finally {
                                complete(status.code, status.message, responses, allResponseHeaders);
                            }
                        };
                        xdr.onerror = function () {
                            complete(500, 'error', {
                                text: xdr.responseText
                            });
                        };
						if(navigator.userAgent.indexOf("MSIE 9.0") != -1)
							xdr.onprogress = function() {};
                        xdr.open(options.type, options.url);
                        //xdr.send(userOptions.data);
                        xdr.send();
                    },
                    abort: function () {
                        if (xdr) {
                            xdr.abort();
                        }
                    }
                };
            }
        });
    }

    $.support.cors = true;

    ej.sortOrder = {
        Ascending: "ascending",
        Descending: "descending"
    };

    // privates
    ej.pvt.consts = {
        GROUPGUID: "{271bbba0-1ee7}",
        complexPropertyMerge: "_"
    };

    // private utils
    var nextTick = function (fn, context) {
        if (context) fn = $proxy(fn, context);
        (window.setImmediate || window.setTimeout)(fn, 0);
    };

    ej.support.enableLocalizedSort = false;

    var stableSort = function (ds, field, comparer, queries) {
        if (ej.support.stableSort) {
            if(!ej.support.enableLocalizedSort && typeof ej.pvt.getObject(field, ds[0] || {}) == "string" 
                && (comparer === ej.pvt.fnAscending || comparer === ej.pvt.fnDescending)
                && queries.filter(function(e){return e.fn === "onSortBy";}).length === 1)
                return fastSort(ds, field, comparer === ej.pvt.fnDescending);
            return ds.sort(ej.pvt.fnGetComparer(field, comparer));
        }
        return ej.mergeSort(ds, field, comparer);
    };

    var fastSort = function(ds, field, isDesc){
        var old = Object.prototype.toString;
        Object.prototype.toString = (field.indexOf('.') === -1) ? function(){
            return this[field];
        }:function(){
            return ej.pvt.getObject(field, this);
        };
        ds = ds.sort();
        Object.prototype.toString = old;
        if(isDesc)
            ds.reverse();
    }

    var toLowerCase = function (val) {
        return val ? val.toLowerCase ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : "";
    };

    var getVal = function (array, field, index) {
        return field ? ej.pvt.getObject(field, array[index]) : array[index];
    };

    var isHtmlElement = function (e) {
        return typeof HTMLElement === "object" ? e instanceof HTMLElement :
            e && e.nodeType === 1 && typeof e === "object" && typeof e.nodeName === "string";
    };

    var instance = function (obj, element) {
        return obj instanceof element;
    };

    var getTableModel = function (name, result, dm, computed) {
        return function (tName) {
            if (typeof tName === "object") {
                computed = tName;
                tName = null;
            }
            return new ej.TableModel(tName || name, result, dm, computed);
        };
    };

    var getKnockoutModel = function (result) {
        return function (computedObservables, ko) {
            ko = ko || window.ko;

            if (!ko) throwError("Knockout is undefined");

            var model, koModels = [], prop, ob;
            for (var i = 0; i < result.length; i++) {
                model = {};
                for (prop in result[i]) {
                    if (!prop.startsWith("_"))
                        model[prop] = ko.observable(result[i][prop]);
                }
                for (prop in computedObservables) {
                    ob = computedObservables[prop];

                    if ($.isPlainObject(ob)) {
                        if (!ob.owner) ob.owner = model;
                        ob = ko.computed(ob);
                    } else
                        ob = ko.computed(ob, model);

                    model[prop] = ob;
                }
                koModels.push(model);
            }

            return ko.observableArray(koModels);
        };
    };

    var uidIndex = 0;
    var getUid = function (prefix) {
        uidIndex += 1;
        return prefix + uidIndex;
    };

    ej.getGuid = function (prefix) {
        var hexs = '0123456789abcdef', rand;
        return (prefix || "") + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {
            rand = Math.random() * 16 | 0;
            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];
        });
    };

    var proxy = function (fn, context) {
        return function () {
            var args = [].slice.call(arguments, 0);
            args.push(this);

            return fn.apply(context || this, args);
        };
    };

    var $proxy = function (fn, context, arg) {
        if ('bind' in fn)
            return arg ? fn.bind(context, arg) : fn.bind(context);

        return function () {
            var args = arg ? [arg] : []; args.push.apply(args, arguments);
            return fn.apply(context || this, args);
        };
    };

    var dateSerialize = function (date) {
        date = JSON.parse(JSON.stringify({ val: date }, p.replacer)).val;
        return date.slice(0);
    };

    ej.merge = function (first, second) {
        if (!first || !second) return;

        Array.prototype.push.apply(first, second);
    };

    var isNull = function (val) {
        return val === undefined || val === null;
    };

    var throwError = function (er) {
        try {
            throw new Error(er);
        } catch (e) {
            throw e.message + "\n" + e.stack;
        }
    };

})(window.jQuery, window.Syncfusion, window.document);;
/**
* @fileOverview Plugin to drag the html elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    
    ej.widget("ejDraggable", "ej.Draggable", {
        
        element: null,

        
        model: null,
        validTags: ["div", "span", "a"],

        
        defaults: {
            
            scope: 'default', 
            
            handle: null,  
            
            dragArea: false,
            
            clone: false,
            
            distance: 1, 
            
            cursorAt: { top: -1, left: -2 }, 
            
            dragStart: null, 
            
            drag: null, 
            
            dragStop: null, 
            
            destroy: null, 
            
            helper: function () {
                return $('<div class="e-drag-helper" />').html("draggable").appendTo(document.body);
            }
        },

        
        _init: function () {
            this.handler = function () { },
			this.resizables = {},
			helpers = {};
            this._wireEvents();
            this._browser = ej.browserInfo();
            this._isIE8 = this._browser.name == "msie" && this._browser.version == "8.0";
            this._isIE9 = this._browser.name == "msie" && this._browser.version == "9.0";
        },

        _setModel: function (options) {

        },
        
        
        _destroy: function () {
            $(document)
                .unbind(ej.eventType.mouseUp, this._destroyHandler)
                .unbind(ej.eventType.mouseUp, this._dragStopHandler)
                .unbind(ej.eventType.mouseMove, this._dragStartHandler)
                .unbind(ej.eventType.mouseMove, this._dragHandler)
                .unbind("mouseleave", this._dragMouseOutHandler)
                .unbind('selectstart', false);

            

            ej.widgetBase.droppables[this.scope] = null;
            
        },

        _initialize: function (e) {
            var ori = e;
            e.preventDefault();
            e = this._getCoordinate(e);
            this.target = $(ori.currentTarget);
            this._initPosition = { x: e.pageX, y: e.pageY };
            
            $(document).bind(ej.eventType.mouseMove, this._dragStartHandler).bind(ej.eventType.mouseUp, this._destroyHandler);
            if (!this.model.clone) {
                var _offset = this.element.offset();
                this._relXposition = e.pageX - _offset.left;
                this._relYposition = e.pageY - _offset.top;
            }
            $(document.documentElement).trigger(ej.eventType.mouseDown, ori); // The next statement will prevent 'mousedown', so manually trigger it.
           //return false;
        },
        _setDragArea: function () {
            var _dragElement = $(this.model.dragArea)[0]; if (!_dragElement) return;
            var over = ($(_dragElement).css("overflow") != 'hidden');

            this.dragArea = [
                (parseInt($(_dragElement).css("borderLeftWidth"), 10) || 0) + (parseInt($(_dragElement).css("paddingLeft"), 10) || 0),
                (parseInt($(_dragElement).css("borderTopWidth"), 10) || 0) + (parseInt($(_dragElement).css("paddingTop"), 10) || 0),
                (over ? Math.max(_dragElement.scrollWidth, _dragElement.offsetWidth) : _dragElement.offsetWidth) - (parseInt($(_dragElement).css("borderLeftWidth"), 10) || 0) - (parseInt($(_dragElement).css("paddingRight"), 10) || 0) - this.helper.outerWidth() - this.margins.left - this.margins.right,
                (over ? Math.max(_dragElement.scrollHeight, _dragElement.offsetHeight) : _dragElement.offsetHeight) - (parseInt($(_dragElement).css("borderTopWidth"), 10) || 0) - (parseInt($(_dragElement).css("paddingBottom"), 10) || 0) - this.helper.outerHeight() - this.margins.top - this.margins.bottom
            ];
            this.relativeArea = $(this.model.dragArea);
        },
        _dragStart: function (e) {
            var ori = e;
            e = this._getCoordinate(e);
            
            this.margins = {
                left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                top: (parseInt(this.element.css("marginTop"), 10) || 0),
                right: (parseInt(this.element.css("marginRight"), 10) || 0),
                bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
            };
            this.offset = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            this.position = this._getMousePosition(ori);
            var x = this._initPosition.x - e.pageX, y = this._initPosition.y - e.pageY;
            var distance = Math.sqrt((x * x) + (y * y));

            if (distance >= this.model.distance) {
                var dragTargetElmnt = this.model.handle = this.helper = this.model.helper({ sender: ori, element: this.target });

                
                
                

                if (this.model.dragStart) {
                    var currTarget = null;
                    if (ori.type == 'touchmove') {
                        var coor = ori.originalEvent.changedTouches[0];
                        currTarget = document.elementFromPoint(coor.pageX, coor.pageY);
                    }
                    else currTarget = ori.originalEvent.target || ori.target;
                    if (this._trigger("dragStart", { event: ori, element: this.element, target: currTarget })) {
                        this._destroy();
                        return false;
                    }
                }
                if (this.model.dragArea)
                    this._setDragArea();
                
                var pos= dragTargetElmnt.offsetParent().offset();
                $(document).unbind(ej.eventType.mouseMove, this._dragStartHandler).unbind(ej.eventType.mouseUp, this._destroyHandler)
                    .bind(ej.eventType.mouseMove, this._dragHandler).bind(ej.eventType.mouseUp, this._dragStopHandler).bind("mouseleave", this._dragMouseOutHandler).bind("selectstart", false);
                ej.widgetBase.droppables[this.model.scope] = {
                    draggable: this.element,
                    helper: dragTargetElmnt.css({ position: 'absolute',  left: (this.position.left-pos.left), top: (this.position.top-pos.top) }),
                    destroy: this._destroyHandler
                }
            }
        },

        _drag: function (e) {
            this.position = this._getMousePosition(e);
            if (this.position.top < 0)
                this.position.top = 0;
            if ($(document).height() < this.position.top)
                this.position.top = $(document).height();
            if ($(document).width() < this.position.left)
                this.position.left = $(document).width();
            var helperElement = ej.widgetBase.droppables[this.model.scope].helper;
            if (this.model.drag) {
                var currTarget = null;
                if (e.type == 'touchmove') {
                    var coor = e.originalEvent.changedTouches[0];
                    currTarget = document.elementFromPoint(coor.pageX, coor.pageY);
                }
                else currTarget = e.originalEvent.target || e.target;
                this._trigger("drag", { event: e, element: this.target, target: currTarget });// Raise the dragging event
            }
            var element = this._checkTargetElement(e);
            if (!ej.isNullOrUndefined(element)) {
                e.target = e.toElement = element;
                element.object._over(e); 
                this._hoverTarget = element; 
            }
            else if (this._hoverTarget) {
                e.target = e.toElement = this._hoverTarget;
                this._hoverTarget.object._out(e);
                this._hoverTarget = null;
            }
            var helperElement = ej.widgetBase.droppables[this.model.scope].helper;
			var pos= helperElement.offsetParent().offset();			 
            helperElement.css({ left: (this.position.left-pos.left) , top: (this.position.top-pos.top)});
        },

        _dragStop: function (e) {
            if (e.type == 'mouseup' || e.type == 'touchend') 
                this._destroy(e);
            if (this.model.dragStop) {
                var currTarget = null;
                if (e.type == 'touchend') {
                    var coor = e.originalEvent.changedTouches[0];
                    currTarget = document.elementFromPoint(coor.pageX, coor.pageY);
                }
                else currTarget = e.originalEvent.target || e.target;
                this._trigger("dragStop", { event: e, element: this.target, target: currTarget });// Raise the dragstop event
            }
            this._dragEnd(e);
        },
        _dragEnd: function (e) {
            var element = this._checkTargetElement(e);
            if (!ej.isNullOrUndefined(element)) {
                e.target = e.toElement = element;
                element.object._drop(e);
            }
        },

        _dragMouseEnter: function (e) {
            $(document).unbind("mouseenter", this._dragMouseEnterHandler);
            if (this._isIE9)
                this._dragManualStop(e);
            else if (this._isIE8) {
                if (e.button == 0)
                    this._dragManualStop(e);
            }
            else if (e.buttons == 0)
                this._dragManualStop(e);
        },

        _dragManualStop: function (e) {
            if (this.model.dragStop != null)
                this._trigger("dragStop", { event: e, element: this.target, target: e.originalEvent.target || e.target });  // Raise the dragstop event
            this._destroy(e);
        },

        _dragMouseOut: function (e) {
            $(document).bind("mouseenter", this._dragMouseEnterHandler);
        },

        _checkTargetElement:function(e)
        {
            var target = e.target;
            if (this.helper && this._contains(this.helper[0], target)) {
                this.helper.hide();
                target = this._elementUnderCursor(e);
                this.helper.show();
                return this._withDropElement(target);
            }
            return this._withDropElement(target);
        },
        _withDropElement:function(target)
        {
            if (target) {
                dropObj = $(target).data('ejDroppable');
                if (ej.isNullOrUndefined(dropObj)) dropObj = this._checkParentElement($(target));
                if (!ej.isNullOrUndefined(dropObj)) {
                    return $.extend(target, { object: dropObj });
                }
            }
        },
        _checkParentElement: function (element) {
            var target = $(element).closest('.e-droppable');
            if (target.length > 0) {
                dropObj = $(target).data('ejDroppable');
                if (!ej.isNullOrUndefined(dropObj)) return dropObj;
            }
        },
        _elementUnderCursor:function(e){
            if(e.type == "touchmove" || e.type == "touchstart" || e.type == "touchend")
                return document.elementFromPoint(e.originalEvent.changedTouches[0].pageX, e.originalEvent.changedTouches[0].pageY);
            else return document.elementFromPoint(e.pageX, e.pageY);
        },
        _contains:function(parent, child) {
            try {
                return $.contains(parent, child) || parent == child;
            } catch (e) {
                    return false;
                }
        },
        _wireEvents: function () {
            this._on(this.element, ej.eventType.mouseDown, this._initialize);
            this._dragStartHandler = $.proxy(this._dragStart, this);
            this._destroyHandler = $.proxy(this._destroy, this);
            this._dragStopHandler = $.proxy(this._dragStop, this);
            this._dragHandler = $.proxy(this._drag, this);
            this._dragMouseEnterHandler = $.proxy(this._dragMouseEnter, this);
            this._dragMouseOutHandler = $.proxy(this._dragMouseOut, this);
        },
        _getMousePosition: function (event) {
            event = this._getCoordinate(event);
            var pageX = this.model.clone ? event.pageX : event.pageX - this._relXposition;
            var pageY = this.model.clone ? event.pageY : event.pageY - this._relYposition;
            if (this.dragArea) {
                if (this.relativeArea) {
                    var co = this.relativeArea.offset();
                    _area = [this.dragArea[0] + co.left, this.dragArea[1] + co.top, this.dragArea[2] + co.left, this.dragArea[3] + co.top];
                }
                else {
                    _area = this.dragArea;
                }
                if (event.pageX - this.margins.left < _area[0]) pageX = _area[0] + this.margins.left;
                if (event.pageY - this.margins.top < _area[1]) pageY = _area[1] + this.margins.top;
                if (event.pageX - this.margins.left > _area[2]) pageX = _area[2] + this.margins.left;
                if (event.pageY - this.margins.top > _area[3]) pageY = _area[3] + this.margins.top;
            }
            return { left: pageX - this.margins.left - this.model.cursorAt.left, top: pageY - this.margins.top - this.model.cursorAt.top };
        },
        _getCoordinate: function (evt) {
            var coor = evt;
            if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend")
                coor = evt.originalEvent.changedTouches[0];
            return coor;
        }
    });

})(jQuery, Syncfusion);

/**
* @fileOverview Plugin to drop the html elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDroppable", "ej.Droppable", {
        
        element: null,        
        model: null,
        validTags: ["div", "span", "a"],
        
        defaults: {
            
            accept: null,
            
            scope: 'default',
            
            drop: null,
            
            over: null,
            
            out: null
        },

        
        _init: function () {
            if (this.model.accept) $(this.element).delegate(this.accept, 'mouseup', $.proxy(this._drop, this));
            else $(this.element).bind('mouseup', $.proxy(this._drop, this));
            this._on($(document), 'touchend', this._drop);
            this._mouseOver = false;
        },

        _setModel: function (options) {

        },
        
        
        _destroy: function () {

        },

        _over: function (e) {
            if (!this._mouseOver) {
                this._trigger("mouseover", e);
                this._mouseOver = true;
            }
        },
        _out: function (e) {
            if (this._mouseOver) {
                this._trigger("mouseout", e);
                this._mouseOver = false;
            }
        },
        _drop: function (e) {
            var drag = ej.widgetBase.droppables[this.model.scope];
            var isDragged = !ej.isNullOrUndefined(drag.helper) && drag.helper.is(":visible");
            var area = this._isDropArea(e);
            if (drag && !ej.isNullOrUndefined(this.model.drop) && isDragged && area.canDrop) {
                this.model.drop($.extend(e, { dropTarget: area.target }, true), drag);
            }
        },
        _isDropArea: function (e) {
            // check for touch devices only
            var area = { canDrop: true, target: $(e.target) };
            if (e.type == "touchend") {
                var coor = e.originalEvent.changedTouches[0], _target;
                _target = document.elementFromPoint(coor.pageX, coor.pageY);
                area.canDrop = false;
                var _parents = $(_target).parents();

                for (var i = 0; i < this.element.length; i++) {
                    if ($(_target).is($(this.element[i]))) area = { canDrop: true, target: $(_target) };
                    else for (var j = 0; j < _parents.length; j++) {
                        if ($(this.element[i]).is($(_parents[j]))) {
                            area = { canDrop: true, target: $(_target) };
                            break;
                        }
                    }
                    if (area.canDrop) break;
                }
            }
            return area;
        }
    });

})(jQuery, Syncfusion);

/**
* @fileOverview Plugin to resize the Html elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    
    ej.widget("ejResizable", "ej.resizable", {
        
        element: null,        
        model: null,
        validTags: ["div", "span", "a"],
        
        defaults: {
            
            scope: 'default',
            
            handle: null,
            
            distance: 1,
            
            maxHeight: null,
            
            maxWidth: null,
            
            minHeight: 10,
            
            minWidth: 10,
            
            cursorAt: { top: 1, left: 1 },
            
            resizeStart: null,
            
            resize: null,
            
            resizeStop: null,
            
            destroy: null,
            
            helper: function () {
                return $('<div class="e-resize-helper" />').html("resizable").appendTo(document.body);
            }
        },
        
        _init: function () {
            this.target = this.element;
            this._browser = ej.browserInfo();
            this._isIE8 = this._browser.name == "msie" && this._browser.version == "8.0";
            this._isIE9 = this._browser.name == "msie" && this._browser.version == "9.0";
            if (this.handle != null) {
                $(this.target).delegate(this.handle, ej.eventType.mouseDown, $.proxy(this._mousedown, this))
                .delegate(this.handle, 'resizestart', this._blockDefaultActions);
            }
            else {
                $(this.target).bind("mousedown", $.proxy(this._mousedown, this));                                
            }
            this._resizeStartHandler = $.proxy(this._resizeStart, this);
            this._destroyHandler = $.proxy(this._destroy, this);
            this._resizeStopHandler = $.proxy(this._resizeStop, this);
            this._resizeHandler = $.proxy(this._resize, this);
            this._resizeMouseEnterHandler = $.proxy(this._resizeMouseEnter, this);
        },
        _mouseover: function (e) {
            if ($(e.target).hasClass("e-resizable")) {
                $(e.target).css({ cursor: "se-resize" });
                $(this.target).bind(ej.eventType.mouseDown, $.proxy(this._mousedown, this));
            }
            else {
                $(this.target).unbind(ej.eventType.mouseDown);
                $(this.target).css({ cursor: "" });
            }
        },
        _blockDefaultActions: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.preventDefault) e.preventDefault();
            if (e.stopPropagation) e.stopPropagation();
        },
        _setModel: function (options) {

        },
        _mousedown: function (e) {
            var ori = e;
            e = this._getCoordinate(e);
            this.target = $(ori.currentTarget);
            this._initPosition = { x: e.pageX, y: e.pageY };
            this._pageX = e.pageX;
            this._pageY = e.pageY;

            $(document).bind(ej.eventType.mouseMove, this._resizeStartHandler).bind(ej.eventType.mouseUp, this._destroyHandler);

            $(document.documentElement).trigger(ej.eventType.mouseDown, ori); // The next statement will prevent 'mousedown', so manually trigger it.
            return false;
        },

        _resizeStart: function (e) {
            if ($(e.target).hasClass("e-resizable")) {
                e = this._getCoordinate(e);
                var x = this._initPosition.x - e.pageX, y = this._initPosition.y - e.pageY, _width, _height;
                var distance = Math.sqrt((x * x) + (y * y));
                if (distance >= this.model.distance) {
                    if (this.model.resizeStart != null) 
                        if (this._trigger("resizeStart", { event: e, element: this.target }))  // Raise the resize start event
                            return;
                    var resizeTargetElmnt = this.model.helper({ element: this.target });
                    _width = (e.pageX - this._pageX) + resizeTargetElmnt.outerWidth();
                    _height = (e.pageY - this._pageY) + resizeTargetElmnt.outerHeight();
                    this._pageX = e.pageX;
                    this._pageY = e.pageY;
                    var pos = this.getElementPosition(resizeTargetElmnt);
                    $(document).unbind(ej.eventType.mouseMove, this._resizeStartHandler).unbind(ej.eventType.mouseUp, this._destroyHandler)
                        .bind(ej.eventType.mouseMove, this._resizeHandler).bind(ej.eventType.mouseUp, this._resizeStopHandler).bind("mouseenter", this._resizeMouseEnterHandler).bind("selectstart", false);
                    ej.widgetBase.resizables[this.scope] = {
                        resizable: this.target,
                        helper: resizeTargetElmnt.css({ width: _width, height: _height }),
                        destroy: this._destroyHandler
                    }
                }
            }
        },

        _resize: function (e) {
            var _width, _height, _diff;
            e = this._getCoordinate(e);
            var pos = this.getElementPosition(ej.widgetBase.resizables[this.scope].helper);
            var resizeTargetElmnt = this.model.helper({ element: this.target });
            _width = (e.pageX - this._pageX) + resizeTargetElmnt.outerWidth();
            _height = (e.pageY - this._pageY) + resizeTargetElmnt.outerHeight();
            this._pageX = e.pageX;
            this._pageY = e.pageY;
            if (_width < this.model.minWidth) {
                _diff = this.model.minWidth - _width;
                _width = this.model.minWidth;
                this._pageX = e.pageX + _diff;
            }
            if (_height < this.model.minHeight) {
                _diff = this.model.minHeight - _height;
                _height = this.model.minHeight;
                this._pageY = e.pageY + _diff;
            }
            if (this.model.maxHeight != null && _height > this.model.maxHeight) {
                _diff = _height - this.model.maxHeight;
                _height = this.model.maxHeight;
                this._pageY = e.pageY - _diff;
            }
            if (this.model.maxWidth != null && _width > this.model.maxWidth) {
                _diff = _width - this.model.maxWidth;
                _width = this.model.maxWidth;
                this._pageX = e.pageX - _diff;
            }
            ej.widgetBase.resizables[this.scope].helper.css({ width: _width, height: _height });
            this._trigger("resize", { element: this.target }) // Raise the resize event
        },

        _resizeStop: function (e) {
            if (this.model.resizeStop != null)
                this._trigger("resizeStop", { element: this.target });  // Raise the resize stop event
            if (e.type == 'mouseup' || e.type == 'touchend')
                this._destroy(e);
        },

        _resizeMouseEnter: function (e) {
            if (this._isIE9)
                this._resizeManualStop(e);
            else if (this._isIE8) {
                if (e.button == 0)
                    this._resizeManualStop(e);
            }
            else if (e.buttons == 0)
                this._resizeManualStop(e);
        },

        _resizeManualStop: function (e) {
            if (this.model.resizeStop != null)
                this._trigger("resizeStop", { element: this.target });  // Raise the resize stop event
            this._destroy(e);
        },

        
        _destroy: function (e) {
            $(document)
                .unbind(ej.eventType.mouseUp, this._destroyHandler)
                .unbind(ej.eventType.mouseUp, this._resizeStopHandler)
                .unbind(ej.eventType.mouseMove, this._resizeStartHandler)
                .unbind(ej.eventType.mouseMove, this._resizeHandler)
                .unbind("mouseenter", this._resizeMouseEnterHandler)
                .unbind('selectstart', false);            
            ej.widgetBase.resizables[this.scope] = null;
            
        },

        getElementPosition: function (elemnt) {
            if (elemnt != null && elemnt.length > 0)
                return {
                    left: elemnt[0].offsetLeft,
                    top: elemnt[0].offsetTop
                };
            else
                return null;
        },
        _getCoordinate: function (evt) {
            var coor = evt;
            if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend")
                coor = evt.originalEvent.changedTouches[0];
            return coor;
        }
    });

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html ScrollBar elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, window, undefined) {
    'use strict';

    ej.widget("ejScrollBar", "ej.ScrollBar", {
        defaults: {

            orientation: "horizontal",

            viewportSize: 0,

            height: 18,

            width: 18,

            smallChange: 57,

            largeChange: 57,

            value: 0,

            maximum: 0,

            minimum: 0,

            buttonSize: 18,

            infiniteScrolling: false
        },
        validTags: ["div"],
        type: "transclude",
        dataTypes: {
            buttonSize: "number",
            smallChange: "number",
            largeChange: "number",
        },
        observables: ["value"],
        value: ej.util.valueFunction("value"),
        _enabled: true,
        content: function () {
            if (!this._content || !this._content.length) {
                if (this.model.orientation === "horizontal") {
                    this._content = this.element.find(".e-hhandle");
                }
                else {
                    this._content = this.element.find(".e-vhandle");
                }
            }
            return this._content;
        },
        _init: function () {
            this.element.addClass("e-widget");
            this._ensureScrollers();
            this.content();
            this._setInitialValues();

        },

        _setInitialValues: function () {
            var xy = "X";
            if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal) {
                this.element.addClass("e-hscrollbar");
            }
            else {
                this.element.addClass("e-vscrollbar");
                xy = "Y";
            }
            if (this.value() !== 0 || this.model.minimum !== 0) {
                if (this.value() < this.model.minimum)
                    this.value(this.model.minimum);
                this["scroll"](this.value(), "none");
            }
        },

        _ensureScrollers: function () {
            var jqVersion = $.fn.jquery, height, width;
            if (this.model.height) {
                this.element.height(this.model.height);
            }
            if (this.model.width) {
                this.element.width(this.model.width);
            }            
            var d2;
            if (!this._scrollData) {
                if (this.model.orientation === "vertical") {
                    this._scrollData = this._createScroller("Height", "Y", "Top", "e-v");
                }
                else {
                    this._scrollData = this._createScroller("Width", "X", "Left", "e-h");
                }
            }
        },

        _setModel: function (option) {
            for (var prop in option) {
                if (prop === "value") {
                    if (this.value()) {
                        this.scroll(this.value(), "none");
                    }
                } else {
                    this.refresh();
                    break;
                }
            }
        },

        _createScroller: function (dimension, xy, position, css) {
            var height;
            var d = {};
            var jqVersion = $.fn.jquery;
            d.dimension = dimension;
            d.xy = xy;
            d.position = position;
            d.css = css;
            d.uDimension = dimension;

            this._calculateLayout(d);
            this._createLayout(d);
            var buttons = this[d.main].find(".e-button");

            this._off(buttons, "mousedown")
                ._on(buttons, "mousedown", { d: d, step: 1 }, this._spaceMouseDown);
            this._off(this[d.scroll], "mousedown")
                ._on(this[d.scroll], "mousedown", { d: d }, this._spaceMouseDown);
            this._off(this[d.handler], "mousedown touchstart")
                ._on(this[d.handler], "mousedown touchstart", { d: d }, this._mouseDown);

            return d;
        },
        _createLayout: function (d) {
            var divString = "<div class='" + d.css + "{0}' style='" + d.dimension + ":{1}px'>{2}</div>";
            var jqVersion = $.fn.jquery;
            var lit = {}, height;
            lit[d.dimension] = d.modelDim;

            var el = ej.buildTag(
                "div." + d.css + "scroll e-box",
                    String.format(divString, "up e-icon e-box e-button", d.buttonSize) +
                    String.format(divString, "handlespace", d.handleSpace,
                        String.format(divString, "handle e-box", d.handle)) +
                    String.format(divString, "down e-icon e-box e-button", d.buttonSize),
                lit
            );

            this.element.append(el);
            jqVersion === "1.7.1" || jqVersion === "1.7.2" ? height = d.uDimension.toLowerCase() : height = "outer" + d.uDimension;
            this[d.handler] = this.element.find("." + d.handler);
            this[d.handler].css("transition", "none");
            this[d.scroll] = this[d.handler].parent();
            this[d.main] = this[d.scroll].parent();
            this[d.main].find(".e-button")["outer" + d.uDimension](d.buttonSize);
        },
        _calculateLayout: function (d) {
            d.scrollDim = "scroll" + d.dimension;
            d.lPosition = d.position.toLowerCase();
            d.clientXy = "page" + d.xy;
            d.scrollVal = "scroll" + d.position;
            d.scrollOneStepBy = this.model.smallChange;
            d.modelDim = this.model[(d.dimension = d.dimension.toLowerCase())];
            d.handler = d.css + "handle";
            d.buttonSize = this.model.buttonSize;
            d.main = d.css + "scroll";
            d.scroll = d.css + "ScrollSpace";
            d.handleSpace = d.modelDim - 2 * d.buttonSize;
            d.scrollable = (this.model.maximum - this.model.minimum);
            var trackLength = this.model.height;
            if (this.model.orientation === "horizontal")
                trackLength = this.model.width;
            d.handle = (this.model.viewportSize / ((this.model.maximum - this.model.minimum) + this.model.viewportSize)) * (trackLength - 2 * this.model.buttonSize);
            var check;
            !ej.isNullOrUndefined(this.model.elementHeight) && typeof this.model.elementHeight === "string" && this.model.elementHeight.indexOf("%") != -1 ? check = true : check = false;
            if (d.handle < 20 && !check) d.handle = 20;
            d.onePx = d.scrollable / (d.handleSpace - d.handle);
            d.fromScroller = false;
            d.up = true;
            d.vInterval = undefined;
        },
        _updateLayout: function (d) {
            this.element.height(this.model.height);
            this.element.width(this.model.width);
            this.element.find("." + d.css + "scroll").css(d.dimension, d.modelDim + "px")
                .find(".e-button").css(d.dimension, this.model.buttonSize).end()
                .find("." + d.css + "handlespace").css(d.dimension, d.handleSpace + "px")
                .find("." + d.css + "handle").css(d.dimension, d.handle + "px");
        },
        refresh: function () {
            this._ensureScrollers();
            if (this.value()) {
                this.scroll(this.value(), "none");
            }
            if (this._scrollData) {
                this._calculateLayout(this._scrollData);
                this._updateLayout(this._scrollData);
            }
        },

        scroll: function (pixel, source, triggerEvent) {
            var dS = this._scrollData;
            if (!triggerEvent) {
                if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal) {
                    if (this._trigger("scroll", { source: source || "custom", scrollData: this._scrollData, scrollLeft: pixel }))
                        return;
                }
                else {
                    if (this._trigger("scroll", { source: source || "custom", scrollData: this._scrollData, scrollTop: pixel }))
                        return;
                }
            }
            this.value(pixel);
            if (this.content().length > 0) {
                if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal)
                    this.content()[0].style.left = (pixel - this.model.minimum) / this._scrollData.onePx + "px";
                else
                    this.content()[0].style.top = (pixel - this.model.minimum) / this._scrollData.onePx + "px";
            }
        },

        _changeTop: function (d, step, source) {
            var start, t;
            if (d.dimension === "height")
                start = this.value();
            else
                start = this.value();
            t = start + step;
            d.step = step;
            if ((d.enableRTL && step < 0) || (step > 0 && !d.enableRTL)) {
                if (d.enableRTL) {
                    if (t < this.model.maximum * -1)
                        t = this.model.maximum * -1;
                }
                else {
                    if (t > this.model.maximum)
                        t = this.model.maximum;
                }
            }
            else {
                if (d.enableRTL) {
                    if (t > this.model.minimum)
                        t = this.model.minimum;
                }
                else {
                    if (t < this.model.minimum)
                        t = this.model.minimum;
                }
            }
            if (t !== start || this.model.infiniteScrolling) {
                this["scroll"](t, source);
            }
            return t !== start;
        },

        _mouseUp: function (e) {
            if (!e.data) return;
            var d = e.data.d;
            e.type === "mouseup" && this[d.handler].removeClass("e-active");
            if (e.type === "mouseup" || e.type === "touchend" || (!e.toElement && !e.relatedTarget && !e.target)) {
                this._off($(document), "mousemove touchmove");
                $(document).off("mouseout mouseup touchend", ej.proxy(this._mouseUp, this));
                d.fromScroller = false;
                this[d.scroll].off("mousemove");
                this[d.handler].off("mousemove").css("transition", "");

                if (e.data.source === "thumb" && !ej.isNullOrUndefined(this.model)) {
                    $.when(this.content()).done(ej.proxy(function () {
                        this._trigger("thumbEnd", { originalEvent: e, scrollData: d });
                    }, this));
                }
            }
            d.up = true;
        },


        _mouseDown: function (down) {

            if (!this._enabled) return;
            var d = down.data.d, value, step = 0;
            d.target = down.target;
            d.fromScroller = true;
            this[d.handler].css("transition", "none");
            var prevY, top = parseInt(this[d.handler].css(d.lPosition)) || 0;
            this._on($(document), "mousemove touchmove", (function (move) {
                move.preventDefault();
                var skip = 1;
                var pageXY = move.type == "mousemove" ? move[d.clientXy] : move.originalEvent.changedTouches[0][d.clientXy];
                if (prevY && pageXY !== prevY) {
                    step = (pageXY - prevY);
                    if (this.model.infiniteScrolling) {
                        top = top + step;
                        d.step = step;
                        if (d.enableRTL ? top > 0 : top < 0) top = 0;
                        if ((top * (d.enableRTL ? -1 : 1)) + d.handle >= d.handleSpace)
                            top = (d.handleSpace - d.handle) * (d.enableRTL ? -1 : 1);
                        value = Math.ceil(top * d.onePx);
                        this["scroll"](value, "thumb");
                    }
                    else {
                        value = step * d.onePx;
                        this._changeTop(d, value, "thumb");
                    }
                    this._trigger("thumbMove", { originalEvent: move, scrollData: d });
                }
                if (skip === 1)
                    prevY = pageXY;
            }));
            this._trigger("thumbStart", { originalEvent: down, scrollData: d });
            $(document).one("mouseup touchend", { d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
            $(document).mouseout({ d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
        },

        _spaceMouseDown: function (e) {
            if (!e.data || !this._enabled) return;
            var d = e.data.d;
            if (e.which !== 1 || e.target === this[d.handler][0]) return;
            var step = e.data.step ? this.model.smallChange : this.model.largeChange, hTop = e.data.top || this[d.handler].offset()[d.lPosition];
            e[d.clientXy] = e[d.clientXy] || 0;
            if (e[d.clientXy] < hTop) step *= -1;
            d.target = e.target;
            this._changeTop(d, step, step === 3 ? "track" : "button");
            if (e.data.step !== 1) {
                this[d.scroll].mousemove(function () {
                    d.up = true;
                });
            }
            d.up = false;
            d.vInterval = setInterval(ej.proxy(function () {
                if (step < 0 ? hTop + (step / d.onePx) < e[d.clientXy] : hTop + d.handle + (step / d.onePx) > e[d.clientXy])
                    d.up = true;
                if (d.up) {
                    clearInterval(d.vInterval);
                    return;
                }
                this._changeTop(d, step, step === 3 ? "track" : "button");
                e.data ? hTop = e.data.top || this[d.handler].offset()[d.lPosition] : hTop = this[d.handler].offset()[d.lPosition];
            }, this), 150);

            $(document).one("mouseup", { d: d }, ej.proxy(this._mouseUp, this));
            $(document).mouseout({ d: d }, ej.proxy(this._mouseUp, this));
        },

        _remove: function () {
            if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal)
                this.element.find(".e-hscroll").remove();
            if (this.model.orientation === ej.ScrollBar.Orientation.Vertical)
                this.element.find(".e-vscroll").remove();
            this._scrollData = null;
            this._content = null;
        },

        _destroy: function () {
            this.element.remove();
        },
    });

    ej.ScrollBar.Orientation = {
        Horizontal: "horizontal",
        Vertical: "vertical"
    };
})(jQuery, Syncfusion, window);;

/**
* @fileOverview Plugin to style the Html Scroller elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/


(function ($, ej, window, undefined) {
    'use strict';

    ej.widget("ejScroller", "ej.Scroller", {

        defaults: {

            height: 250,

            autoHide: false,

            width: 0,

            scrollOneStepBy: 57,

            buttonSize: 18,

            scrollLeft: 0,

            scrollTop: 0,

            targetPane: null,

            scrollerSize: 18,

            enablePersistence: false,

            enableRTL: undefined,

            enableTouchScroll: true,

            enabled: true,

            create: null,

            destroy: null
        },
        validTags: ["div"],
        type: "transclude",

        dataTypes: {
            buttonSize: "number",
            scrollOneStepBy: "number"
        },
        observables: ["scrollTop", "scrollLeft"],
        scrollTop: ej.util.valueFunction("scrollTop"),
        scrollLeft: ej.util.valueFunction("scrollLeft"),

        keyConfigs: {
            up: "38",
            down: "40",
            left: "37",
            right: "39",
            pageUp: "33",
            pageDown: "34",
            pageLeft: "ctrl+37",
            pageRight: "ctrl+39"
        },

        content: function () {
            if (!this._content || !this._content.length || !this._content[0].offsetParent)
                this._content = this.element.children("div").first().addClass("e-content");

            return this._content;
        },
        _setFirst: true,
        _updateScroll: false,

        _init: function () {
            this.element.addClass("e-widget");
            this.content();
            this._browser = ej.browserInfo().name;
            this._eleHeight = this.model.height;
            if (this.model.enableRTL === undefined) {
                this.model.enableRTL = this.element.css("direction") === "rtl";
            }
            this._ensureScrollers();
            if (this.model.enableRTL) {
                this.element.addClass("e-rtl");
                this._rtlScrollLeftValue = this.content().scrollLeft();
            }
            this._on(this.content(), "scroll", this._scroll);
            this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
            if (this.scrollLeft())
                this._setScrollLeftValue(this.scrollLeft());
            if (this.scrollTop())
                this.content().scrollTop(this.scrollTop());

            if (this.model.autoHide) {
                this.element.addClass("e-autohide");
                this._on(this.element, "mouseenter mouseleave", this._scrollerHover);
                this.content().siblings().hide();
            }
            if (this.model.enabled) {
                this.enable();
            }
            else {
                this.disable();
            }
            if (!ej.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1) {
                if (!this._vScroll)
                    $(this.content()[0]).height("");
                else {
                    $(window).bind('resize', $.proxy(this._resetScroller, this));
                    this.model.height = this._convertPercentageToPixel(parseInt(this._eleHeight), this.element.parent().height());
                }
            }
        },

        _setScrollLeftValue: function (leftValue) {
            if (this.model.enableRTL) {
                if (ej.browserInfo().name == "mozilla")
                    leftValue = leftValue < 0 ? leftValue : (leftValue * -1);
                else if (!ej.isNullOrUndefined(this._rtlScrollLeftValue) && (ej.browserInfo().name == "chrome" || this._rtlScrollLeftValue > 0))
                    leftValue = leftValue < 0 ? (this._rtlScrollLeftValue + leftValue) : (this._rtlScrollLeftValue - leftValue);
                else
                    leftValue = Math.abs(leftValue);
            }
            this.content().scrollLeft(leftValue);
        },


        _ensureScrollers: function () {
            var jqVersion = $.fn.jquery, height, width, borderLeftWidth, borderRightWidth, paddingLeftWidth, paddingRightWidth;
            if (this.model.height) {
                this.element.height(this.model.height);
            }
            if (this.model.width) {
                this.element.width(this.model.width);
            }            

            this._off(this.content(), "mousedown touchstart");
            if (this.content().length > 0) {
                if (this.isVScroll()) {
                    if (!this._vScrollbar) {
                        this._vScrollbar = this._createScrollbar(ej.ScrollBar.Orientation.Vertical, this.isHScroll());
                    }
                    if (this.model.enableTouchScroll)
                        this._on(this.content(), "mousedown touchstart", { d: this._vScrollbar._scrollData }, this._mouseDownOnContent);
                } else {
                    this._vScrollbar = null;
                    this.element.children(".e-vscrollbar").remove();
                }
                if (this.isHScroll()) {
                    if (!this._hScrollbar) {
                        this._hScrollbar = this._createScrollbar(ej.ScrollBar.Orientation.Horizontal, this.isVScroll());
                    }
                    if (this.model.enableTouchScroll)
                        this._on(this.content(), "mousedown touchstart", { d: this._hScrollbar._scrollData }, this._mouseDownOnContent);
                } else {
                    this._hScrollbar = null;
                    this.element.children(".e-hscrollbar").remove();
                }

                if (!this._vScrollbar && !this._hScrollbar)
                    this.content().css({ width: "auto", height: "auto" });

                if (!(this.element.find(".e-hscroll").length > 0)) {
                    if (this._vScrollbar) {
                        this.content().outerHeight(this.content().outerHeight() - 1);
                    }
                }
                this._hScroll = this.isHScroll(), this._vScroll = this.isVScroll();
                if (this._hScroll || this._vScroll) {
                    this.content().addClass("e-content");
                    jqVersion === "1.7.1" || jqVersion === "1.7.2" ? (height = "height", width = "width") : (height = "outerHeight", width = "outerWidth");
                    this.content()[height](this.element.height() - (this._hScroll && !this.model.autoHide ? this.model.scrollerSize : 0));
                    var rect = this.element.get(0).getBoundingClientRect();
                    rect.width ? rect = rect.width : rect = rect.right - rect.left;
                    borderLeftWidth = isNaN(parseFloat(this.element.css("border-left-width"))) ? 0 : parseFloat(this.element.css("border-left-width"));
                    borderRightWidth = isNaN(parseFloat(this.element.css("border-right-width"))) ? 0 : parseFloat(this.element.css("border-right-width"));
                    paddingLeftWidth = isNaN(parseFloat(this.element.css("padding-left"))) ? 0 : parseFloat(this.element.css("padding-left"));
                    paddingRightWidth = isNaN(parseFloat(this.element.css("padding-right"))) ? 0 : parseFloat(this.element.css("padding-right"));
                    var ElementWidth = rect - (borderLeftWidth + borderRightWidth + paddingLeftWidth + paddingRightWidth);
                    this.content()[width](ElementWidth - (this._vScroll && !this.model.autoHide ? this.model.scrollerSize : 0));
                } else
                    this.content().removeClass("e-content");
            }            
        },
        _resetScroller: function () {
            this.model.height = this._convertPercentageToPixel(parseInt(this._eleHeight), this.element.parent().height());
            this.refresh();
        },
        _convertPercentageToPixel: function (ele, outer) {
            return Math.floor((ele * outer) / 100);
        },

        isHScroll: function () {
            if (this.model.width > 0) {
                var $paneObject = this.content().find(this.model.targetPane);
                if (this.model.targetPane != null && $paneObject.length)
                    return ($paneObject[0].scrollWidth + $paneObject.siblings().width()) > this.model.width;
                else
                    return this.content()[0].scrollWidth > this.model.width;
            }
            return false;
        },

        isVScroll: function () {
            if (!ej.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1)
                return this.content()[0].scrollHeight > this.element.height();
            else
                return this.model.height > 0 && this.content()[0].scrollHeight > this.model.height;
        },

        _setModel: function (option) {
            for (var prop in option) {
                if (prop === "enableRTL") {
                    if (option[prop])
                        this.element.addClass("e-rtl");
                    else
                        this.element.removeClass("e-rtl");
                } else if (prop === "scrollLeft") {
                    this._setScrollLeftValue(this.scrollLeft());
                } else if (prop === "scrollTop") {
                    this.content().scrollTop(this.scrollTop());
                } else if (prop === "touchScroll") {
                    if (!this.model.enableTouchScroll)
                        this._off(this.content(), "mousedown touchstart");
                    else {
                        if (this._vScrollbar)
                            this._on(this.content(), "mousedown touchstart", { d: this._vScrollbar._scrollData }, this._mouseDownOnContent);
                        if (this._hScrollbar)
                            this._on(this.content(), "mousedown touchstart", { d: this._hScrollbar._scrollData }, this._mouseDownOnContent);
                    }
                }
                else if (prop === "buttonSize") {
                    if (this._vScrollbar) this._vScrollbar.model.buttonSize = this.model.buttonSize;
                    if (this._hScrollbar) this._hScrollbar.model.buttonSize = this.model.buttonSize;
                    this.refresh();
                }
                else {
                    this.refresh();
                    break;
                }
            }
        },

        _createScrollbar: function (orientation, isOtherScroll) {
            var proxy = this;
            var id, viewportSize, width, height, maximum, value;
            var div = document.createElement("div");
            if (orientation === ej.ScrollBar.Orientation.Vertical) {
                width = this.model.scrollerSize;
                if (!ej.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1)
                    height = viewportSize = this.element.height() - (isOtherScroll ? this.model.scrollerSize : 0);
                else
                    height = viewportSize = this.model.height - (isOtherScroll ? this.model.scrollerSize : 0);
                maximum = this.content()[0]["scrollHeight"];
                value = this.scrollTop();
            }
            else {
                width = viewportSize = this.model.width - (isOtherScroll ? this.model.scrollerSize : 0);
                height = this.model.scrollerSize;
                var $pane = this.content().find(this.model.targetPane);
                if (this.model.targetPane != null && $pane.length)
                    maximum = $pane[0]["scrollWidth"] + $pane.parent().width() - $pane.width();
                else
                    maximum = this.content()[0]["scrollWidth"];
                value = this.scrollLeft();
            }
            if (this.element.children(".e-hscrollbar").length > 0)
                $(this.element.children(".e-hscrollbar")).before(div);
            else
                this.element.append(div);
            $(div).ejScrollBar({
                elementHeight: proxy._eleHeight,
                buttonSize: proxy.model.buttonSize,
                orientation: orientation,
                viewportSize: viewportSize,
                height: height,
                width: width,
                maximum: maximum - viewportSize,
                value: value,
                smallChange: this.model.scrollOneStepBy,
                largeChange: 3 * this.model.scrollOneStepBy,
                scroll: ej.proxy(this._scrollChanged, this),
                thumbEnd: ej.proxy(this._thumbEnd, this),
                thumbStart: ej.proxy(this._thumbStart, this),
                thumbMove: ej.proxy(this._thumbMove, this),
            });
            var scrollbar = $(div).ejScrollBar("instance");
            this._off(orientation === ej.ScrollBar.Orientation.Vertical ? this.element : scrollbar[scrollbar._scrollData.scroll], this._browser == "msie" ? "wheel mousewheel" : "mousewheel DOMMouseScroll")
                   ._on(orientation === ej.ScrollBar.Orientation.Vertical ? this.element : scrollbar[scrollbar._scrollData.scroll], this._browser == "msie" ? "wheel mousewheel" : "mousewheel DOMMouseScroll", { d: scrollbar._scrollData }, this._mouseWheel);
            if (orientation === ej.ScrollBar.Orientation.Horizontal) {
                this._scrollXdata = scrollbar._scrollData;
            }
            else
                this._scrollYdata = scrollbar._scrollData;
            if (orientation === ej.ScrollBar.Orientation.Horizontal && this.model.enableRTL) {
                scrollbar._scrollData.enableRTL = true;
            }
            scrollbar._enabled = this.model.enabled;
            return scrollbar;
        },

        _updateScrollbar: function (orientation, isOtherScroll) {
            var scrollbar = orientation === ej.ScrollBar.Orientation.Vertical ? this._vScrollbar : this._hScrollbar;
            if (scrollbar) {
                if (orientation === ej.ScrollBar.Orientation.Vertical) {
                    scrollbar.model.width = this.model.scrollerSize;
                    scrollbar.model.height = scrollbar.model.viewportSize = this.model.height - (isOtherScroll ? this.model.scrollerSize : 0);
                    scrollbar.model.maximum = (this.model.targetPane != null ? this.content().find(this.model.targetPane)[0]["scrollHeight"] : this.content()[0]["scrollHeight"]) - scrollbar.model.viewportSize;
                    scrollbar.model.value = this.scrollTop();
                }
                else {
                    scrollbar.model.width = scrollbar.model.viewportSize = this.model.width - (isOtherScroll ? this.model.scrollerSize : 0);
                    scrollbar.model.height = this.model.scrollerSize;
                    scrollbar.model.maximum = (this.model.targetPane != null ? this.content().find(this.model.targetPane)[0]["scrollWidth"] + (this.content().width() - $(this.model.targetPane).outerWidth()) : this.content()[0]["scrollWidth"]) - scrollbar.model.viewportSize;
                    if (!this.model.enableRTL)
                        scrollbar.model.value = this.scrollLeft();
                }
            }
        },

        _scrollChanged: function (e) {
            this._updateScroll = true;
            if (e.scrollTop !== undefined)
                this.scrollY(e.scrollTop, true, "", e.source);
            else if (e.scrollLeft !== undefined)
                this.scrollX(e.scrollLeft, true, "", e.source);
            this._updateScroll = false;
            var proxy = this;
            $.when(this.content()).done(ej.proxy(function () {
                proxy._trigger("scrollEnd", { scrollData: e });
            }));
        },
        _thumbStart: function (e) {
            this._trigger("thumbStart", e);
        },
        _thumbMove: function (e) {
            this._trigger("thumbMove", e);
        },
        _thumbEnd: function (e) {
            this._trigger("thumbEnd", e);
        },

        refresh: function () {
            this.element.find(">.e-content").removeAttr("style");
            this._ensureScrollers();

            this.content().scrollLeft(this.scrollLeft());
            if ((this.scrollTop() && this._vScrollbar == null) || (this._vScrollbar !== null && this._vScrollbar._scrollData != null && !this._vScrollbar._scrollData.skipChange))
                this.content().scrollTop(this.scrollTop());

            if (this._vScrollbar) {
                this._vScrollbar._scrollData.dimension = "Height";
                this._updateScrollbar(ej.ScrollBar.Orientation.Vertical, this._hScroll);
                this._vScroll && !this._vScrollbar._calculateLayout(this._vScrollbar._scrollData) && this._vScrollbar._updateLayout(this._vScrollbar._scrollData);
            }
            if (this._hScrollbar) {
                this._hScrollbar._scrollData.dimension = "Width";
                this._updateScrollbar(ej.ScrollBar.Orientation.Horizontal, this._vScroll);
                this._hScroll && !this._hScrollbar._calculateLayout(this._hScrollbar._scrollData) && this._hScrollbar._updateLayout(this._hScrollbar._scrollData);
            }
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version == "8.0")
                this.element.find(".e-hhandle").css("left", "0px");
            else
                this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
        },

        _keyPressed: function (action, target) {
            if (!this.model.enabled) return;
            if (["input", "select", "textarea"].indexOf(target.tagName.toLowerCase()) !== -1)
                return true;

            var d, iChar;

            if (["up", "down", "pageUp", "pageDown"].indexOf(action) !== -1) {
                if (this._vScrollbar)
                    d = this._vScrollbar._scrollData;
                iChar = "o";
            } else if (["left", "right", "pageLeft", "pageRight"].indexOf(action) !== -1) {
                if (this._hScrollbar)
                    d = this._hScrollbar._scrollData;
                iChar = "i";
            } else return true;
            if (!d) return true;

            return !this._changeTop(d, (action.indexOf(iChar) < 0 ? -1 : 1) * (action[0] !== "p" ? 1 : 3) * d.scrollOneStepBy, "key");
        },

        scrollY: function (pixel, noAnimation, animationSpeed, source) {
            if (noAnimation) {
                if (this._trigger("scroll", { source: source || "custom", scrollData: this._vScrollbar ? this._vScrollbar._scrollData : null, scrollTop: pixel }))
                    return;
                this.scrollTop(pixel);
                this.content().scrollTop(pixel);
                if (!this._updateScroll && this._vScrollbar)
                    this._vScrollbar["scroll"](pixel, source, true);
                return;
            }
            if (ej.isNullOrUndefined(animationSpeed) || animationSpeed == "")
                animationSpeed = 100;
            this.content().stop().animate({
                scrollTop: pixel
            }, animationSpeed, 'linear');
        },

        scrollX: function (pixel, noAnimation, animationSpeed, source) {
            if (noAnimation) {
                if (this._trigger("scroll", { source: source || "custom", scrollData: this._hScrollbar ? this._hScrollbar._scrollData : null, scrollLeft: pixel }))
                    return;
                var browserName = ej.browserInfo().name;
                if (this.model.enableRTL && browserName != "mozilla") {
                    if (pixel < 0)
                        pixel = Math.abs(pixel);
                    var content = this.model.targetPane != null ? this.content().find(this.model.targetPane)[0] : this.content()[0];
                    if (browserName == "chrome" || browserName == "webkit")
                        pixel = content.scrollWidth - content.clientWidth - pixel;
                }
                this.scrollLeft(pixel);
                if (this.model.targetPane != null)
                    this.content().find(this.model.targetPane).scrollLeft(pixel);
                else
                    this.content().scrollLeft(pixel);
                if (!this._updateScroll && this._hScrollbar)
                    this._hScrollbar["scroll"](pixel, source, true);
                return;
            }
            if (ej.isNullOrUndefined(animationSpeed) || animationSpeed == "")
                animationSpeed = 100;
            this.content().stop().animate({
                scrollLeft: pixel
            }, animationSpeed, 'linear');
        },

        enable: function () {
            var scroller = this.element.find(".e-vscrollbar,.e-hscrollbar,.e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle,.e-vscroll .e-icon,.e-hscroll .e-icon");
            if (scroller.hasClass("e-disable")) {
                scroller.removeClass("e-disable").attr({ "aria-disabled": false });
                this.model.enabled = true;
            }
            if (this._vScrollbar)
                this._vScrollbar._enabled = this.model.enabled;
            if (this._hScrollbar)
                this._hScrollbar._enabled = this.model.enabled;
        },

        disable: function () {
            var scroller = this.element.find(".e-vscrollbar,.e-hscrollbar,.e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle,.e-vscroll .e-icon,.e-hscroll .e-icon");
            scroller.addClass("e-disable").attr({ "aria-disabled": true });
            this.model.enabled = false;
            if (this._vScrollbar)
                this._vScrollbar._enabled = this.model.enabled;
            if (this._hScrollbar)
                this._hScrollbar._enabled = this.model.enabled;
        },

        _changeTop: function (d, step, source) {
            var start = this.model.targetPane != null && d.dimension != "height" ? this.content().find(this.model.targetPane)[d.scrollVal]() : this.content()[d.scrollVal](), t;

            if (d.dimension == "height" && start == 0)
                start = this.scrollTop() != 0 ? this.scrollTop() : 0;
            t = start + step;
            if (!d.enableRTL ? t > d.scrollable : t < d.scrollable) t = d.scrollable;
            if (!d.enableRTL ? t < 0 : t > 0) t = 0;

            if (t !== start) {
                this["scroll" + d.xy](t, true, "", source);
                if (d.xy === "X" && !ej.isNullOrUndefined(this._hScrollbar))
                    this._hScrollbar["scroll"](t, source, true);
                else if (!ej.isNullOrUndefined(this._vScrollbar))
                    this._vScrollbar["scroll"](t, source, true);
            }

            return t !== start;
        },

        _mouseWheel: function (e) {
            if (!e.data || !this.model.enabled) return;
            var delta = 0, data = e.data.d, ori = e;
            e = e.originalEvent;
            if (this._wheelx != 1 && (e.wheelDeltaX == 0 || e.wheelDeltaY == 0))
                this._wheelx = 1;
            if (navigator.platform.indexOf("Mac") == 0 && (this._wheelx == 0)) {
                if (this._browser == "webkit" || this._browser == "chrome")
                    return true;
            }
            if (this._browser == "mozilla")
                e.axis == e.HORIZONTAL_AXIS ? data = this._scrollXdata : this._scrollYdata;
            else if (this._browser == "msie") {
                e.deltaX ? data = this._scrollXdata : this._scrollYdata;
                delta = e.deltaX / 120;
            }
            else if (this._wheelx && e.wheelDeltaX != 0 && e.wheelDeltaY == 0 && this._scrollXdata)
                data = this._scrollXdata;
            if (e.wheelDeltaX == 0) this._wheelx = e.wheelDeltaX;
            if (e.wheelDelta) {
                delta = navigator.platform.indexOf("Mac") == 0 ? -e.wheelDelta / 3 : -e.wheelDelta / 120;
                if (window.opera) {
                    if (parseFloat(window.opera.version, 10) < 10)
                        delta = -delta;
                }
            } else if (e.detail) delta = e.detail / 3;
            if (!delta) return;
            if (this._changeTop(data, delta * data.scrollOneStepBy, "wheel")) {
                e.preventDefault ? e.preventDefault() : ori.preventDefault();
                ori.stopImmediatePropagation();
                ori.stopPropagation();
            }
            else {
                this._trigger("scrollEnd", { originalEvent: e, scrollData: ori });
                this._wheelx = 0;
            }
        },
        _scrollerHover: function (e) {
            if (e.type == "mouseenter" && !this.content().siblings().is(":visible"))
                this.content().siblings().css("display", "block");
            else if (e.type == "mouseleave")
                this.content().siblings().hide();
        },

        _mouseUp: function (e) {
            if (!e.data) return;

            var d = e.data.d;

            if (e.type === "mouseup" || e.type === "touchend" || (!e.toElement && !e.relatedTarget)) {
                this._off($(document), "mousemove touchmove");
                $(document).off("mouseout mouseup touchend", ej.proxy(this._mouseUp, this));
                d.fromScroller = false;
                if (this._mouseMoved === true && e.data.source === "thumb" && !ej.isNullOrUndefined(this.model)) {
                    $.when(this.content()).done(ej.proxy(function () {
                        this._trigger("thumbEnd", { originalEvent: e, scrollData: d });
                    }, this));
                }
            }
            d.up = true;
        },

        _mouseDownOnContent: function (down) {
            if (!this.model.enabled) return;
            var d = down.data.d;
            if (this._trigger("thumbStart", { originalEvent: down, scrollData: d }))
                return;

            if (down.which == 3 && down.button == 2) return;
            d.fromScroller = true;

            var prevY = null, skip = 1, min = 5, direction;

            this._on($(document), "mousemove touchmove", (function (move) {
                move.preventDefault();
                var pageXY = move.type == "mousemove" ? move[d.clientXy] : move.originalEvent.changedTouches[0][d.clientXy];

                if (prevY && pageXY !== prevY) {
                    this._mouseMoved = true;
                    var diff = pageXY - prevY, sTop = this.model[d.scrollVal] - (diff * d.onePx / min);

                    if (skip == 1 && Math.abs(diff) > min) {
                        direction = d.position;
                        skip = 0;
                    }
                    if (skip == 0) prevY = pageXY;

                    if (sTop >= 0 && sTop <= d.scrollable && direction === d.position) {
                        this["scroll" + d.xy](sTop, true, "", "thumb");
                        if (d.xy === "X")
                            this._hScrollbar["scroll"](sTop, "thumb", true);
                        else if (!ej.isNullOrUndefined(this._vScrollbar))
                            this._vScrollbar["scroll"](sTop, "thumb", true);
                        this.content().css("cursor", "pointer");
                        this._trigger("thumbMove", { originalEvent: move, scrollData: d });
                    }
                }
                if (prevY == null) prevY = pageXY;
            }));
            this._mouseMoved = false;
            $(document).one("mouseup touchend", { d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
            $(document).mouseout({ d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
        },


        _scroll: function (e) {
            var dS = [this._vScrollbar ? this._vScrollbar._scrollData : null, this._hScrollbar ? this._hScrollbar._scrollData : null];

            for (var i = 0; i < 2; i++) {
                var d = dS[i];
                if (!d || d.skipChange) continue;

                if (this.model.targetPane != null && i == 1)
                    d.sTop = this.content().find(this.model.targetPane)[0][d.scrollVal];
                else
                    d.sTop = e.target[d.scrollVal];
                this[d.scrollVal](d.sTop);
                if (d.fromScroller) return;
                if (i === 1) {
                    var content = this.content()[0];
                    if (this._rtlScrollLeftValue && content.scrollWidth - content.clientWidth != this._rtlScrollLeftValue)
                        this._rtlScrollLeftValue = content.scrollWidth - content.clientWidth;
                    d.sTop = (ej.browserInfo().name != "mozilla" && this.model.enableRTL) ? (this._rtlScrollLeftValue == 0 ? (d.sTop * -1) : (d.sTop - this._rtlScrollLeftValue)) : d.sTop;
                    this._hScrollbar["scroll"](d.sTop, "", true);
                } else
                    this._vScrollbar["scroll"](d.sTop, "", true);
            }
        },

        _changevHandlerPosition: function (top) {
            var scrollbar = this._vScrollbar;
            if (scrollbar) {
                top = scrollbar._scrollData != null && top >= scrollbar._scrollData.scrollable ? scrollbar._scrollData.scrollable : top;
                if (scrollbar != null && top >= 0 && top <= scrollbar._scrollData.scrollable)
                    scrollbar[scrollbar._scrollData.handler].css(scrollbar._scrollData.lPosition, (top / scrollbar._scrollData.onePx) + "px");
            }
        },

        _changehHandlerPosition: function (left) {
            var scrollbar = this._hScrollbar;
            if (scrollbar) {
                left = scrollbar._scrollData != null && left >= scrollbar._scrollData.scrollable ? scrollbar._scrollData.scrollable : left;
                if (scrollbar != null && top >= 0 && left <= scrollbar._scrollData.scrollable)
                    scrollbar[scrollbar._scrollData.handler].css(scrollbar._scrollData.lPosition, (left / scrollbar._scrollData.onePx) + "px");
            }
        },

        _destroy: function () {
            this.element.css({ "width": "", "height": "" }).find(".e-vscrollbar,.e-hscrollbar").remove();
            this.content().removeClass("e-content").css({ "width": "", "height": "" });
            $(window).unbind('resize', $.proxy(this._resetScroller, this));
        }
    });
})(jQuery, Syncfusion, window);;
(function ($, ej, undefined) {

    ej.ExcelFilter = ej.ExcelFilter || {};

    ej.excelFilter = function (options) {
        this._ctrlInstance = options["instance"];
        this.id = this._ctrlInstance._id;
        this._dialogContainer = null;
        this._showSort = options["showSortOptions"] || false;
        this._maxCount = options["maxFilterLimit"] || 1000;
        this._formatFiltering = true;
        this._locale = this._ctrlInstance.model.locale || "en-US";
        this._filterHandler = options["filterHandler"] || null;
		this._cancelHandler = options["cancelHandler"] || null;
		this._customFilterHandler = options["customFilterHandler"] || null;
        this._cssClass = options["cssClass"] || null;
        this._matchCase = options["allowCaseSensitive"] || false;
        this._title = options["title"] || this._getLocalizedLabel("title");
        this.fName = options["initFilterCol"] || null;
        this._spliter = options["valueDelimiter"] || ej.ExcelFilter.valueDelimiter;
        this._initialFName = this.fName;
        this._displayName = null;
        this._dataSource = null;
        this._isUrlAdaptor = false;
		this._$tableID = null;
        this._$blankVal = null;
        this._$selectedColors = [];
        this._$enableColor = false;
        this._$filteredByColor = "";
        this._$colType = null;
        this._$key = 0;
        this.filteredColumn = null;
        this.sortedColumns = null;        
        this._chkList = null;
        this._listsWrap = null;
        this._menuWrap = null;
        this._localJSON = null;
        this._actualCount = 0;
        this._totalRcrd = 0;
        this._enableResponsiveRow=false;
        this._searchCount = 0;
        this._currentData = null;
        this._openedFltr = null;
        this._predicates = [];
        this.cFilteredCols = this.fName!=null ? [this.fName] : [];
        this._columnsFiltered = [];
        this._noDlg = [];
        this._sepAftr = ["sortDesc","notequal", "between", "top10","endswith","contains"];
        this._posType = ["number", "date", "string", "boolean","guid"];
        this._empties = ["null", "undefined", ""];
        this._reqInProgess = false;
        this._isFiltered = false;
        this._onActionBegin = options["actionBegin"] || null;
        this._onActionComplete = options["actionComplete"] || null;
        this.enableNormalize = true; /*To clean up redundant values after formatting */
        this._selectAll = "<div class='e-ftrchk'><input type='checkbox' class='e-selectall' value='selectall' class='e-ftrchk' /><label class='e-ftrchk'>(Select All)</label></div>";
        this._blanks = "<div class='e-ftrchk'><input type='checkbox' id='blanks' class='e-ftrchk' value='null,undefined,' @/><label class='e-ftrchk' for='blanks' value=''>(Blanks)</label></div>";
        this._blank = undefined;
        this._addAtLast = false;
		 this.guidMenuOpt = [
              { id: 1, text: this._getLocalizedLabel("SortNoSmaller"), sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this._getLocalizedLabel("SortNoLarger"), sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this._getLocalizedLabel("SortByColor"),htmlAttribute: { "ejfnrole": "popup" }, child: this._getLocalizedLabel("SortColorOptions") },
              { id: 4, text: this._getLocalizedLabel("ClearFilter"), sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this._getLocalizedLabel("FilterByColor"),htmlAttribute: { "ejfnrole": "popup" }, child: this._getLocalizedLabel("FilterColorOptions") },
              { id: 6, text: this._getLocalizedLabel("GuidFilter"), htmlAttribute: { "ejfnrole": "filterpopup" }, child: this._getLocalizedLabel("GuidMenuOptions") }];
        this.numberMenuOpt = [
              { id: 1, text: this._getLocalizedLabel("SortNoSmaller"), sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this._getLocalizedLabel("SortNoLarger"), sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this._getLocalizedLabel("SortByColor"),htmlAttribute: { "ejfnrole": "popup" }, child: this._getLocalizedLabel("SortColorOptions") },
              { id: 4, text: this._getLocalizedLabel("ClearFilter"), sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this._getLocalizedLabel("FilterByColor"),htmlAttribute: { "ejfnrole": "popup" }, child: this._getLocalizedLabel("FilterColorOptions") },
              { id: 6, text: this._getLocalizedLabel("NumberFilter"), htmlAttribute: { "ejfnrole": "filterpopup" }, child: this._getLocalizedLabel("NumberMenuOptions") }];
        this.stringMenuOpt  = this.booleanMenuOpt = [
              { id: 1, text: this._getLocalizedLabel("SortTextAscending"), sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this._getLocalizedLabel("SortTextDescending"), sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this._getLocalizedLabel("SortByColor"),htmlAttribute: { "ejfnrole": "popup" }, child: this._getLocalizedLabel("SortColorOptions") },
              { id: 4, text: this._getLocalizedLabel("ClearFilter"), sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this._getLocalizedLabel("FilterByColor"),htmlAttribute: { "ejfnrole": "popup" }, child: this._getLocalizedLabel("FilterColorOptions") },
              { id: 6, text: this._getLocalizedLabel("TextFilter"), htmlAttribute: { "ejfnrole": "filterpopup" }, child: this._getLocalizedLabel("StringMenuOptions") }];
        this.dateMenuOpt = [
              { id: 1, text: this._getLocalizedLabel("SortDateOldest"), sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this._getLocalizedLabel("SortDateNewest"), sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this._getLocalizedLabel("SortByColor"),htmlAttribute: { "ejfnrole": "popup" }, child: this._getLocalizedLabel("SortColorOptions") },
              { id: 4, text: this._getLocalizedLabel("ClearFilter"), sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this._getLocalizedLabel("FilterByColor"),htmlAttribute: { "ejfnrole": "popup" }, child: this._getLocalizedLabel("FilterColorOptions") },
              { id: 6, text: this._getLocalizedLabel("DateFilter"), htmlAttribute: { "ejfnrole": "filterpopup" }, child: this._getLocalizedLabel("DateMenuOptions") }
        ];
        
        return this;
    };
    ej.excelFilter.prototype = {
        //Helpers to handle (Blanks) value.
        isNotBlank: function (key, global) {
            var e = ej.isNullOrUndefined(key) || key === "";

            if (!global && key === "")/* Handle special case - since "" string sorted before all */
                this._addAtLast = true;

            return !e;
        },   
        _checkBlank: function (key) {         

            if (this.isNotBlank(key))
                return true;
            /*Ensure Blank value added only once */
            var ret = this._blank == undefined && !this._addAtLast;

            if (ret) this._blank = true;            

            return ret;
        },
        _getValueData: function (key, data) {
            var arr = this._empties;

            if (this.isNotBlank(key, true))
                arr = ej.distinct(data, this._$foreignField || this.fName, false);

            return arr.join(this._spliter); /*Return value will be set to input element value attr*/
        },
        //Collection to predicate processing
        getPredicate: function (cols, field, updateModel) {
            this._isUrlAdaptor = this._ctrlInstance._dataSource() instanceof ej.DataManager && (this._ctrlInstance._dataSource().adaptor instanceof ej.UrlAdaptor || this._ctrlInstance._dataSource().adaptor instanceof ej.WebMethodAdaptor);
            var c, dis = field != undefined ? [field] : ej.distinct(cols, "field", false), collection, pred = {};
            for (var f = 0, flen = dis.length; f < flen; f++) {
                collection = new ej.DataManager(cols).executeLocal(new ej.Query().where("field", "equal", dis[f]));
                pred[dis[f]] = this.generatePredicate(collection);
                if (updateModel) {
                    this._predicates[this._$key] = this._predicates[this._$key] || {};
                    this._predicates[this._$key][dis[f]] = pred[dis[f]];
                }

            }
            return pred;
        },

        generatePredicate: function (cols) {
            var len = cols ? cols.length : 0, predicate, first;
            if (!len) return;
            first = this._updateDateFilter(cols[0]); 
            predicate = first.ejpredicate ? first.ejpredicate : ej.Predicate(first.field, first.operator, first.value, first.ignoreCase || !first.matchcase);
            for (var p = 1; p < len; p++) {
                cols[p] = this._updateDateFilter(cols[p]);
                if (this._isUrlAdaptor && len > 2 && p > 1 && cols[p].predicate == "or")
                    predicate.predicates.push(ej.Predicate(cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase));
                else
                    predicate = cols[p].ejpredicate ? predicate[cols[p].predicate](cols[p].ejpredicate) : predicate[cols[p].predicate](cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase);
            }
            return predicate || null;
        },
        /*Main Dialog*/
        renderDialog: function (type) {
            this._$colType = type;
            var dlgId = this.id + type + "_excelDlg";           
            //if ($("#" + dlgId).length != 0)
            //    return;
            var $dlg = ej.buildTag("div#" + dlgId + ".e-excelfilter e-dlgcontainer e-shadow");
            var $ul = ej.buildTag("ul#" + this.id + type + "_MenuItem");
            var menuData = this._getMenuData(type);
            $ul = this._createLiTag($ul, menuData, false);
            var $searchBox = ej.buildTag("span.e-searchbox e-fields").append(ej.buildTag("input#" + this.id + "_SearchBox.e-ejinputtext e-searchinput", {}, {}, { "type": "text", "placeholder":"Search" })).append(ej.buildTag("span.e-search e-icon"))
            var $lbox = ej.buildTag("div#" + this.id + type + "_CheckBoxList.e-checkboxlist e-fields").append(ej.buildTag("div"));
            var $btns = this._createBtn();
            var $sBox = ej.buildTag("div.e-searchcontainer");            
            var $status = ej.buildTag("div.e-status e-fields e-hide", this._getLocalizedLabel("CheckBoxStatusMsg"));
            $dlg.append($ul);            
            $sBox.append($searchBox);
            $sBox.append($status);
            $sBox.append($lbox);
            $sBox.append($btns);
            $dlg.append($sBox);
            $dlg.appendTo(this._ctrlInstance.element);
            $dlg.css("display", "none");
            this._renderCustomFDlg(type);
            this._dialogContainer = $dlg;
            if(this._cssClass!=null)
                $dlg.addClass(this._cssClass);
            if (!this._showSort) {
                $ul.find(".e-fnsort").closest("li").css("display", "none");
                $ul.find("li.e-separator:first").css("display", "none");
            }
            this._lsitBoxTemplate();
            this._renderSubCtrls(type);
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10)
                ej.ieClearRemover($searchBox.find("input")[0]);
            this._wireEvents();
        },
        _renderSubCtrls: function (type) {
            $("#" + this.id + type + "_MenuItem").ejMenu({ orientation: "vertical", width: 266, click: ej.proxy(this._menuHandler, this), enableRTL: this._ctrlInstance.model.enableRTL, enableSeparator: false });
            $("#" + this.id + type + "_OkBtn").ejButton({ text: this._getLocalizedLabel("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._fltrBtnHandler, this), enabled: true });
            $("#" + this.id + type + "_CancelBtn").ejButton({ text: this._getLocalizedLabel("Cancel"), showRoundedCorner: true, width: 60, click: ej.proxy(this.closeXFDialog, this) });
            $("#" + this.id + type + "_CheckBoxList").ejScroller({ height: 130, width: 234, scroll: ej.proxy(this._virtualize,this) });
            $("#" + this.id + type + "_CheckBoxList").ejWaitingPopup({ showOnInit: false });
        },
        openXFDialog: function (options) {
			var obj;
            this.fName = options["field"];
            this._dataSource = options["dataSource"];
            this._$colType = options["type"] || "string";
            this._$format = options["format"] || "";
            this._enableResponsiveRow=options["enableResponsiveRow"];
            this.filteredColumn = options["filteredColumns"] || this._ctrlInstance.model.filterSettings.filteredColumns;
            this.sortedColumns = options["sortedColumns"] || this._ctrlInstance.model.sortSettings.sortedColumns;
            this._displayName = options["displayName"];
            this._$key = options["key"] || 0;
			this._$tableID = options["tableID"];
			this._$blankVal = ej.isNullOrUndefined(this._$tableID) ? this._$blankVal : options["blank"];
            this._$selectedColors = options["selectedColors"] || [];
            this._$enableColor = options["enableColor"] || false;
            this._$filteredByColor = options["filteredByColor"] || this._$filteredByColor;
			this._$foreignField = options["foreignKeyValue"];
			this._$foreignData = options["foreignDataSource"];
            this._$foreignKey = options["foreignKey"];            
            var args = { requestType : "filterbeforeopen", filterModel : this, columnName:this.fName, columnType: this._$colType };
            if (this._ctrlInstance._trigger(this._onActionBegin, args))
                return;
            if (this._openedFltr == null || !this._openedFltr.is($("#" + this.id + this._$colType + "_excelDlg"))) {
                this.closeXFDialog();
                this._openedFltr = $("#" + this.id + this._$colType + "_excelDlg");
            }
            this._listsWrap = $("#" + this.id + this._$colType + "_CheckBoxList");
            this._menuWrap = $("#" + this.id + this._$colType + "_MenuItem");
            this._searchBox = this._openedFltr.find(".e-searchbox input");
            this._setPosition(this._openedFltr, options["position"]);
            this._openedFltr.addClass(options["cssClass"]);
            this._openedFltr.fadeIn(300, "easeOutQuad", function () {
            });
			var $sortul = $("#" + this.id + this._$colType + "_MenuItem").find(".e-shadow").eq(0);
            var $filterul = $("#" + this.id + this._$colType + "_MenuItem").find(".e-shadow").eq(1);
			if (this._$enableColor) {
                this._createDivTag($sortul, this._$selectedColors, false, "sort");
                (this._$filteredByColor == -1 || (this._$filteredByColor.length < 1 || this._$filteredByColor === this.fName)) ? this._createDivTag($filterul,this._$selectedColors, false, "filter") : $filterul.parent().addClass("e-disable-item");
            }    
            else {
                $sortul.parent().hide();
                $filterul.parent().hide();
            }
            this._isFiltered = this._predicates[this._$key] != undefined && this._predicates[this._$key][this.fName] != undefined;
            this._isFiltered = options["isFiltered"] || this._isFiltered;
			this._$format = (this._$colType == "date" && this._$format === "") ? "{0:MM/dd/yyyy hh:mm:ss}" : this._$format;
            this._processListData();
			obj = this._listsWrap.data("ejScroller");
            if(this._ctrlInstance.model.enableRTL && obj.isHScroll()){
				obj.scrollLeft(obj.content()[0].scrollWidth - obj.content()[0].clientWidth);
				obj.refresh();
			}
            this._actualCount > this._maxCount ? this._openedFltr.find("div.e-status").removeClass("e-hide") : this._openedFltr.find("div.e-status").addClass("e-hide");            
            this._setDisable();
            var args = { requestType: "filterafteropen", filterModel: this, columnName: this.fName, columnType: this._$colType };
            if (this._ctrlInstance._trigger(this._onActionComplete, args))
                return;
        },
        closeXFDialog: function (e) {
            if (e != null) {
                var $target = $(e.target);
                if ($target.closest("#"+ this.id + this._$colType + "_CustomFDlg").length)
                    return;
            }            
            if (this._openedFltr) {
                if (!this._openedFltr.hasClass("e-dlgcustom")) {
                    this._openedFltr.fadeOut(300, "easeOutQuad", function () {
                    });
                    this._listsWrap.ejWaitingPopup("hide");
                }
                else {
                    this._openedFltr.ejDialog("close");
                }
                !ej.isNullOrUndefined(this._cancelHandler) && this._cancelHandler();
                this.resetFilterModel();/*Reset private properties after filter closed*/
            }
        },
        _setPosition: function (ele, pos) {
            ele.css("position", "absolute");
            ele.css("left", pos["X"]).css("top", pos["Y"]);                      
        },
        _setDisable: function () {
            var $clr = this._menuWrap.find("li[ejfnrole='clearfilter']"), $fltr = this._menuWrap.find("li[ejfnrole='filterpopup']");
            var $sort = this._menuWrap.find("li[ejfnrole *= 'sort']"), $checked = this._listsWrap.find("input").filter(":checked:not(.e-selectall)").length;
            !this._isFiltered ? $clr.addClass("e-disable-item") : $clr.removeClass("e-disable-item");
            if (this._showSort) {
                var sQM = ej.DataManager(this.sortedColumns).executeLocal(new ej.Query().where("field", "equal", this.fName));
                ( sQM.length && sQM[0]["direction"] == "ascending") ? $sort.filter("[ejfnrole='sortAsc']").addClass("e-disable-item") : $sort.filter("[ejfnrole='sortAsc']").removeClass("e-disable-item");
                (sQM.length && sQM[0]["direction"] == "descending") ? $sort.filter("[ejfnrole='sortDesc']").addClass("e-disable-item") : $sort.filter("[ejfnrole ='sortDesc']").removeClass("e-disable-item");
            }
            var $flteredList = $fltr.find(".aschild");
            if (this.cFilteredCols.length != 0 && $.inArray(this.fName,this.cFilteredCols) != -1) {
                for (var f = 0; f < this.filteredColumn.length; f++) {
                    if (this.filteredColumn[f].field == this.fName) {
                        if ($flteredList.find("#ejFiltercheck").length == 0) {
                            $flteredList.append("<input type='checkbox' id='ejFiltercheck' />");
                            $flteredList.find("#ejFiltercheck").ejCheckBox({ checked: true });
                            $flteredList.find("#ejFiltercheck").ejCheckBox("disable");
                        }
                        if ($fltr.find(".e-shadow .e-exceltick").length > 0)
                            $fltr.find(".e-shadow .e-exceltick").remove();
                        if (this.filteredColumn[f].field == this.fName && !ej.isNullOrUndefined(this.filteredColumn[f + 1]) && this.filteredColumn[f + 1].field == this.fName) {
                            if (this.filteredColumn[f].operator == "greaterthanorequal" && this.filteredColumn[f + 1].operator == "lessthanorequal")
                                $fltr.find(".e-shadow .e-list[ejvalue=between]").find("a").append("<span class='e-exceltick e-icon' />");
                            else
                                $fltr.find(".e-shadow .e-list[ejvalue=customfilter]").find("a").append("<span class='e-exceltick e-icon' />");
                        }
                        else
                            $fltr.find(".e-shadow .e-list[ejvalue=" + this.filteredColumn[f].operator + "]").find("a").append("<span class='e-exceltick e-icon' />");
                        break;
                    }
                }
            }
            else {
                for (var f = 0; f < this.filteredColumn.length; f++) {
                    if (this.filteredColumn[f].field == this.fName) {
                        this._removeTick($fltr,$flteredList);
                        break;
                    }
                }
            }
            if (!this._isFiltered && $flteredList.find("#ejFiltercheck").length != 0) {
                 this._removeTick($fltr,$flteredList);
            }
            if (this._$colType == "boolean")
                this._menuWrap.find("li[aria-haspopup=true]").addClass("e-hide");            
            this._searchBox.val(""); this._searchBox.siblings().addClass("e-search").removeClass("e-cancel");
        },
        _removeTick: function($fltr,$flteredList){
            $flteredList.find("#ejFiltercheck").ejCheckBox("destroy");
            $fltr.find(".aschild #ejFiltercheck").remove();
            $fltr.find(".e-shadow .e-exceltick.e-icon").remove();
        },
        _createBtn: function (isCDlg) {
            var id = isCDlg ? this.id + this._$colType + "Custom" : this.id + this._$colType;
            var $divCon = ej.buildTag("div.e-btncontainer e-fields");
            var $div = ej.buildTag("div");
           $div.append(ej.buildTag("input#" + id + "_OkBtn.e-fltrbtn",{},{},{ type : "button" })).append(ej.buildTag("input#" + id + "_CancelBtn.e-fltrbtn",{},{},{ type : "button" }));
            return $divCon.append($div);
        },
        _menuHandler: function (args) {
            var $ele = $(args.element);
            var role = $ele.attr("ejfnrole");
            var arg = {};
            if (role === "filterbgcolor" || role === "filterfgcolor") {
                var fDetails = { field: this.fName, operation: role, color: $(args.element).css('background-color')};
			    arg = { originalEvent: args.event, action: "filterbycolor", filterDetails: fDetails, tableID: this._$tableID }; 
                this._isFiltered = false;
            }
            else if (role == "clearfilter") {
                var ftrDetails = { field: this.fName, operator: "", value: "", predicate: "or" };
                arg = { originalEvent: args.event, fieldName: this.fName, action: "clearfiltering", filterDetails: ftrDetails, tableID: this._$tableID };
                var indx = $.inArray(this.fName, this.cFilteredCols);
                indx!=-1 && this.cFilteredCols.splice(indx, 1);
				var $cIndx = $.inArray(this.fName, this._columnsFiltered);
                $cIndx!=-1 && this._columnsFiltered.splice($cIndx, 1);
                if (this._initialFName == this.fName)
                    this._initialFName = null;
            }
            else if(role == "popup" || role == "filterpopup") {
                return;
            }
            else if (role == "operator") {
                this._openCustomFilter($ele.attr("ejvalue"));
            }
			else{
                var sOrder, sDetails;
				if(role == "sortAsc" || role == "sortDesc"){
					sOrder = role == "sortAsc" ? "ascending" : "descending";
					sDetails = { field: this.fName, direction: sOrder };
					arg = { originalEvent: args.event, action: "sorting", sortDetails: sDetails, tableID: this._$tableID };
				}
				else{
					sDetails = { field: this.fName, direction: sOrder, operation: role, color: $(args.element).css('background-color')};
					arg = { originalEvent: args.event, action: "sortbycolor", sortDetails: sDetails, tableID: this._$tableID }; 
				}
            }
            if (role != "operator") {
                this._filterHandler(arg);
                this.closeXFDialog();
            }
        },
        _searchBoxFocus: function (e) {
            var $target = $(e.target);
            if ($target.hasClass("e-cancel")) {
                $target.prev().val("");
                $target.next().addClass("e-cancel")
                $target.addClass("e-search");
                $target.prev().trigger("keyup");
            }
            if (e.type == "focusin") {
                $target.next().addClass("e-cancel");
                $target.next().removeClass("e-search");
            }
        },
        _search: function (e) {
            var enterText = e.target.value, args = {}, parsed, operator, $target = $(e.target);
            parsed = parseFloat(enterText) ? parseFloat(enterText) : enterText;
            operator ="contains" ;
            parsed = (parsed == "" || parsed == undefined) ? undefined : parsed;
            if (this._$colType == "boolean" && this._locale != "en-US") {
                if (parsed != undefined && this._getLocalizedLabel("True").toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
                    parsed = "true";
                else if (parsed != undefined && this._getLocalizedLabel("False").toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
                    parsed = "false";
            }
            if (this._$colType == "date" || this._$colType == "dateTime") {
                parsed = Globalize.parseDate(enterText, this.replacer(this._$format, /{0:|}/g, ""));
                operator = "equal";
                if (this._previousValue == null && parsed == null)
                    return;
            }
            this._previousValue = parsed;
            this._processListData({ type: "filterchoicesearch", value: parsed, operator: operator });
            if ($target.val() == "") {
                $target.next().addClass("e-search");
                $target.next().removeClass("e-cancel");
            } else {
                $target.next().addClass("e-cancel");
                $target.next().removeClass("e-search");
            }
        },
        _getLocalizedLabel: function (property) {
            return (ej.ExcelFilter.locale[this._locale] !== undefined && ej.ExcelFilter.locale[this._locale][property] !== undefined) ? ej.ExcelFilter.locale[this._locale][property] : ej.ExcelFilter.locale["en-US"][property];
        },
        _getMenuData: function (type) {
            return type != undefined ? this[type + "MenuOpt"] : [];
        },
        /*CheckBox list*/
        _lsitBoxTemplate: function () {
            var helper = {}, temp = {};            
            helper[this.id + "isNotBlank"] = ej.proxy(this.isNotBlank, this);
            helper[this.id + "checkBlank"] = ej.proxy(this._checkBlank, this);
            helper[this.id + "_getValueData"] = ej.proxy(this._getValueData, this);            
            helper[this.id + "_checkBoxState"] = ej.proxy(this._setCheckState, this);     
            helper[this.id + "_genId"] = this._genCheckID;
            $.views.helpers(helper); 			
            var genID = this.id + this._$colType + "{{:~" + this.id + "_genId()}}";
            temp[this.id + this._$colType + "_listBox_Template"] = "{{if ~" + this.id + "checkBlank(key)}}<div class='e-ftrchk'><input type='checkbox' id='" + genID + "' value='{{html:~" + this.id + "_getValueData(key, items)}}' class='e-ftrchk' {{:~" + this.id + "_checkBoxState(~" + this.id + "_getValueData(key, items))}}/><label class='e-ftrchk' for='" + genID + "'>{{if ~" + this.id + "isNotBlank(key,'true')}} {{>key}} {{else}} (Blanks) {{/if}}</label></div>{{/if}}";
            $.templates(temp);
        },
      
        _processListData: function (params) {
            var result, promise, args = {}, query = new ej.Query(), evtArgs = {}; this._searchCount = 0;
            var predicates = this._predicates[this._$key], pred;
			var data = null, columnName = null, localJSON = null, result = null;
			if(ej.isNullOrUndefined(this._$foreignField && this._$foreignData)){
				data = this._dataSource; 
				columnName =  this.fName;
				localJSON = this._localJSON;
			}
			else{
				data = localJSON = this._$foreignData; 
				if(this._dataSource instanceof ej.DataManager)
                    data = ej.DataManager(data);
				columnName = this._$foreignField;
			}
            for (var prop in predicates) {
                if (prop == this.fName)
                    continue;
                var obj = predicates[prop], from = obj["from"];
                if (from)
                    query.skip(from == "top" ? 0 : data.length - (data.length - obj["take"])).take(obj["take"]);
                else
                    pred = pred != undefined ? pred["and"](obj) : obj;
            }
            args.columnName = columnName;           
            query.requiresCount();						
				pred && query.where(pred);
            evtArgs.requestType = params ? params.type : "filterchoicerequest",evtArgs.filterModel = this, evtArgs.query = query, evtArgs.dataSource = data;
            if (this._ctrlInstance._trigger(this._onActionBegin, evtArgs))
                return;
            if (params && params.type == "filterchoicesearch") {
                params.value && query.where(columnName, params.operator, params.value, !this._matchCase);
                promise = ej.DataManager(localJSON).executeLocal(query);               
                args.data = this._currentData = promise.result;
                args.type = params.type;
                this._totalRcrd = this._searchCount =  promise.count;
                this._setCheckBoxList(args);
            }
            else if (!(this._dataSource instanceof ej.DataManager)) {
				var result = [];
                promise = ej.DataManager(this._dataSource).executeLocal(query);
                args.type = "filterchoicerequest";
				if(this._$foreignField)
					result = this._filterForeignData(promise.result);				
				else				
					result = promise.result;
                args.data = this._localJSON = this._currentData = result;
                this._totalRcrd = promise.count;
                this._setCheckBoxList(args);
            }
            else {
                proxy = this; args.type = "filterchoicerequest";
                this._listsWrap.ejWaitingPopup("show");
                if (!this._reqInProgess) {
                    this._reqInProgess = true;
					if(this._$foreignField && pred)
                        data = this._dataSource;
                    promise = data.executeQuery(query);
                    promise.done(function (e) {
						if(proxy._$foreignField  && pred)                            
                            result = proxy._filterForeignData(e.result);
                        else
                            result = e.result;
                        args.data = proxy._localJSON = proxy._currentData = result;
                        proxy._totalRcrd = e.count;
                        proxy._listsWrap.ejWaitingPopup("hide");
                        proxy._setCheckBoxList(args);
                        proxy._reqInProgess = false;
                    });
                }
            }           
        },		
        _filterForeignData: function($results){
            var result =[], proxy = this;
            var values = ej.distinct(ej.DataManager($results).executeLocal(ej.Query().select(this.fName)));
			values.forEach(function(val){
			    result.push(ej.DataManager(proxy._$foreignData).executeLocal(ej.Query().where(proxy._$foreignKey, "equal", val))[0]);
			});
            return result;
        },
        _setCheckBoxList: function (args) {
            var evtArgs = {}, _blank ="", sortedData, flag, blank = this._blanks, $checked;
            evtArgs.requestType = args.type, evtArgs.dataSource = this._dataSource, evtArgs.filterModel = this;
            if (this._currentData.length != 0) {                
                sortedData = this.getDistinct(args.data, args.columnName, true);
                flag = this._isFiltered;                
                this._actualCount = sortedData.length; sortedData.length = this._maxCount > this._actualCount ? this._actualCount : this._maxCount;               
                this._filterdCol = ej.DataManager(this.filteredColumn).executeLocal(ej.Query().where("field", "equal", this.fName));                                    
                this._listsWrap.find("div:first").html([this._selectAll, $.render[this.id + this._$colType + "_listBox_Template"](sortedData), this._addAtLast ? this.replacer(blank, /@/g, this._setCheckState, this._empties.join(this._spliter)) : ""].join(""));
                this._chkList = this._listsWrap.find("input:checkbox").not(".e-selectall"), $inView = this._chkList.slice(0, 20);
                $inView.ejCheckBox({ change: ej.proxy(this._checkHandler, this) });
                $inView.siblings().height(14).width(14);
                this._listsWrap.find(".e-selectall").ejCheckBox({  change: ej.proxy(this._selectAllHandler, this) });
				this._listsWrap.find(".e-selectall").attr("id",this.id + this._$colType + "SelectAll");
                this._listsWrap.find(".e-selectall").siblings().height(14).width(14);
				this._listsWrap.find(".e-selectall").closest("span").siblings("label").attr("for", this.id + this._$colType + "SelectAll");
            }
            else
                this._listsWrap.find("div:first").html(ej.buildTag("div.e-ftrchk", this._getLocalizedLabel("NoResult"), {}, {}));
            if (!ej.isNullOrUndefined(this._chkList))
                $checked = this._chkList.filter(":checked").length;
            if (!this._isFiltered || this._actualCount == $checked)
                this._listsWrap.find(".e-selectall").ejCheckBox({ checked: true });
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: $checked != 0 });
            this._listsWrap.ejScroller({ scrollTop: 0 }).ejScroller("refresh");
            if (this._ctrlInstance._trigger(this._onActionComplete, evtArgs))
                return;
        },
     
        _createLiTag: function ($ul, menuData, isChild) {
            proxy = this;
            $.each(menuData, function (index, obj) {
                var $li = ej.buildTag("li", {}, {}, obj["htmlAttribute"] || (isChild && { "ejfnrole": "operator", "ejvalue": obj.value }) || {}), $child;
                var apd = (isChild && $.inArray(obj.value,proxy._noDlg)==-1) ? "..." : "";
                var $a = ej.buildTag("a", obj.text + apd, {}, {});
                obj["sprite"] != undefined && $a.append(ej.buildTag("span", {}, {}, { "class": obj["sprite"] }))
                if (obj["child"] != undefined){
                    if(obj.id != 3 && obj.id != 5)
                        $child = proxy._createLiTag(ej.buildTag("ul.e-shadow"), obj["child"], true);
                    else if(obj.id === 3 )
                        $child = proxy._createDivTag(ej.buildTag("ul.e-shadow"), obj["child"], true, "sort");
                    else
                        $child = proxy._createDivTag(ej.buildTag("ul.e-shadow"), obj["child"], true, "filter");
				}
                obj["child"] == undefined ? $ul.append($li.append($a)) : $ul.append($li.append($a).append($child))
                if ($.inArray(obj.value || (obj.htmlAttribute && obj.htmlAttribute.ejfnrole), proxy._sepAftr) != -1)
                    $ul.append(ej.buildTag("li.e-separator"));
            });
            return $ul;
        },
		
		_createDivTag: function ($ul, menuData, isChild, reqType) {
            var $li, $a, $div, bgColor = [], fgColor = [], avble = false, cellcolor = "", fontcolor = "", selCellHdr = "", selCellClr = "", selFontHdr = "", selFontClr = "";
            if (reqType == "sort") {
                cellcolor = this._getLocalizedLabel("SortByCellColor");
                fontcolor = this._getLocalizedLabel("SortByFontColor");
            }
            else{
                cellcolor = this._getLocalizedLabel("FilterByCellColor");
                fontcolor = this._getLocalizedLabel("FilterByFontColor");
            }
			selCellHdr = reqType + "colorhdr";
            selFontHdr = reqType + "fonthdr";
            selCellClr = reqType + "bgcolor";
            selFontClr = reqType + "fgcolor";
            ($ul.length > 0) && $ul.children().remove();
            if(menuData.length > 0){
			    for(var i = 0; i < menuData.length; i++){
				    for(var j = 0; j < bgColor.length; j++){
					    if(bgColor[j] == menuData[i].background){
						    avble = true;
						    break;
					    }
				    }
				    if(!avble && (!ej.isNullOrUndefined(menuData[i].background) && !menuData[i].background.startsWith('#6n'))) 
                        bgColor.push(menuData[i].background);
				    avble = false;
				    for(var j = 0; j < fgColor.length; j++){
					    if(fgColor[j] == menuData[i].foreground){
						    avble = true;
						    break;
					    }
				    }
				    if(!avble && (!ej.isNullOrUndefined(menuData[i].foreground) && !menuData[i].foreground.startsWith('#6n'))) 
                        fgColor.push(menuData[i].foreground);
				    avble = false;
			    }
                if(bgColor.length > 0){
                    $li = ej.buildTag("li.e-list e-bghdrcolor", "", "" , {"ejfnrole": selCellHdr });
                    $a = ej.buildTag("a", cellcolor, {});
                    $li.append($a);
                    $ul.append($li);
			        for(var i = 0; i < bgColor.length; i++){
                        $li = ej.buildTag("li.e-list e-valcolor", {}, {'background-color': bgColor[i]}, {"ejfnrole": selCellClr });
                        $ul.append($li);
			        }
                }
                if(fgColor.length > 0){
			        $li = ej.buildTag("li.e-list e-fghdrcolor", "", "" , {"ejfnrole": selFontHdr });
                    $a = ej.buildTag("a", fontcolor, {});
                    $li.append($a);
                    $ul.append($li);
                    for(var i = 0; i < fgColor.length; i++) {
                        $li = ej.buildTag("li.e-list e-valcolor", {}, {'background-color': fgColor[i]}, {"ejfnrole": selFontClr });
                        $ul.append($li);
                    }
                }
                (bgColor.length < 1 && fgColor.length < 1) ? $ul.parent().addClass("e-disable-item"): $ul.parent().removeClass("e-disable-item");
            }
            else {
                $ul.parent().addClass("e-disable-item");
            }
            return $ul;
        },
		
        _setCheckState: function (value) {           
            var val = value, fobj, splts = value.split(this._spliter), splen = splts.length, flag = false;           
            if (!this._isFiltered || this._searchCount)
                return "checked";
            else {
                while (splen--) { /*looped for split values*/
                    val = this.processValue(splts[splen]);

                    if (this._$foreignField)
                        val = this._getForeignFilterData(val);
                    //Date and boolean will be checked as iteration due to 
                    if (this._$colType == "date" || this._$colType == "datetime" || this._$colType == "boolean") {
                        for (var i = 0, len = this._filterdCol.length; i < len; i++) {
                            if (this._$colType == "boolean" && val !== this._filterdCol[i].value)
                                continue;
                            if((this._$colType == "date" || this._$colType == "datetime") && !this._dateComparer(val, this._filterdCol[i].value))
                                continue;
                            return this._filterdCol[i]["isCustom"] === true ? "" : "checked";
                        }
                    }
                    else {
                        var fQ = ej.DataManager(this._filterdCol).executeLocal(ej.Query().where("value", "equal", val).where("operator", "equal", "equal"));
                        if (fQ.length != 0) {
                            if (fQ[0].operator == "equal" && fQ[0].isCustom == true && this._ctrlInstance.model.currentViewData.length > 0)
                                return "checked";
                            else
                                return fQ[0]["isCustom"] === true ? "" : "checked";
                        }
                    }
                }
            }
        },
        _genCheckID: function () {
            return "CheckBox" + this.getIndex();
        },
        _formatting: function (format, value) {

            if (this._$colType == "date" && format == "")
                format = "{0:MM/dd/yyyy hh:mm:ss}";

            if (this._$colType == "boolean")                 
                return value === "" ? "" : this._getLocalizedLabel(value == true ? "True" : value == false ? "False" : "");            
           
            if (this._formatFiltering || this._$colType == "date") {
                var formatter = this._ctrlInstance.formatting;                
                return format != "" ? formatter(format, value) : value;
            } 
        },
        //Method to perform equality comparison between Date objects
        _dateComparer: function (dest, source) {
            return +dest === +source;
        },
        _updateDateFilter: function (filter) {
            if (filter.type != "date" && !(filter.value instanceof Date))
                return filter;            
            filter.value = filter.value instanceof Date ? filter.value : ej.parseJSON({ val: filter.value }).val;
            return ["equal", "notequal"].indexOf(filter.operator) == -1 ? filter : this._setDateObject(filter);
        },        
        _checkHandler: function (args) {
            $("#" + args.model.id).prop("checked", args.isChecked);
            var $checkedlist = this._listsWrap.find("input").filter(":checked:not(.e-selectall)"), clen = $checkedlist.length;
            var $selectall = this._listsWrap.find(".e-selectall"), canCheck;
            if (clen == this._chkList.length) {
                $selectall.prop("checked", true);
                canCheck = true;
            }
            else {
                $selectall.removeProp("checked");
                canCheck = false;
            }
            $selectall.ejCheckBox({ checked: canCheck });
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: clen != 0 });
        },
        _selectAllHandler: function (args) {
            
            if (args.isChecked) {
                this._chkList.filter(":not(:checked)").ejCheckBox({ checked: args.isChecked });
                this._chkList.prop("checked", true);
            }
            else {
                this._chkList.filter(function () { if ($(this).hasClass("e-checkbox") && $(this).prop("checked")) return this; }).ejCheckBox({ checked: args.isChecked });
                this._chkList.removeProp("checked"); this._chkList.removeAttr("checked");
            }
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: args.isChecked });
        },
        /*Custom Dialog*/
        _renderCustomFDlg: function (type) {
            var dlgId = this.id + type + "_CustomFDlg";
            if ($("#" + dlgId).length)
                return;
            var $dlg = ej.buildTag("div#" + dlgId + ".e-excelfilter e-dlgcustom");
            $dlg.addClass(this._cssClass);
            this._renderCDlgContent($dlg, type);
            $dlg.ejDialog({ showOnInit: false, enableResize: false, enableModal: true, allowKeyboardNavigation: false, title: this._title, width: 370, content: "#" + this.id, enableRTL: this._ctrlInstance.model.enableRTL, closeIconTooltip: "Close" });
            if (this._ctrlInstance.sfType == "ej.Grid")
                $dlg.ejDialog({ position: { Y: this._ctrlInstance._gridContentTable.offset().top } });
			$dlg.ejDialog("refresh");
        },

        _renderCDlgContent: function (content, type) {
            var $div1 = ej.buildTag("div.e-dlgfields", "Show rows where", {}, {});
            var $id = this.id + this._$colType;
            var $fset = ej.buildTag("fieldset.e-fieldset");
            var $op1 = ej.buildTag("tr.e-fields"), $op2 = ej.buildTag("tr.e-fields"), $op3 = ej.buildTag("tr.e-fields e-top");
            var $dp1 = ej.buildTag("input#" + $id + "_CustomDrop1"), $dp2 = ej.buildTag("input#" + $id + "_CustomDrop2"), $dp3 = ej.buildTag("input#" + $id + "_CustomDrop3");
            var $in1 = ej.buildTag("input#" + $id + "_CustomValue1.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" }), $in2 = ej.buildTag("input#" + $id + "_CustomValue2.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" }), $in3 = ej.buildTag("input#" + $id + "_CustomValue3.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" });
            var $pred = ej.buildTag("tr.e-predicate");
            var radioAnd = ej.buildTag("input#" + $id + "_CustomAndPredicate", {}, {}, { "type": "radio", "name": "predicate" , "value":"and" }), radioOr = ej.buildTag("input#" + $id + "_CustomOrPredicate", {}, {}, { "type": "radio", "name": "predicate", "value":"or" });
            var matchCase = ej.buildTag("input#" + $id + "_CustomMatchPredicate", {}, {}, { "type": "checkbox" });
            content.append($div1);
            var table = ej.buildTag("table.e-optable");

            $op1.append(ej.buildTag("td.e-operator").append($dp1))
                .append(ej.buildTag("td.e-value").append($in1));
            $pred.append(ej.buildTag("td", {}, {}, {}).append(radioAnd).append(ej.buildTag("label.e-caption", this._getLocalizedLabel("PredicateAnd"), {}, { "for": $id + "_CustomAndPredicate" }))
                .append(radioOr).append(ej.buildTag("label.e-caption", this._getLocalizedLabel("PredicateOr"), {}, { "for": $id + "_CustomOrPredicate" })));
            $op2.append(ej.buildTag("td.e-operator").append($dp2))
                .append(ej.buildTag("td.e-value").append($in2));
            table.append($op1)
            .append($pred)
            .append($op2);
			if(type == "string")
			    $pred.append(ej.buildTag("td", {}, {}, {}).append(matchCase).append(ej.buildTag("label.e-caption", this._getLocalizedLabel("MatchCase"), {}, { "for": $id + "_CustomMatchPredicate" })));
            if (type == "number" || type == "guid") {
                $op3.append(ej.buildTag("td.e-operator").append($dp3))
                .append(ej.buildTag("td.e-value").append($in3));
                table.append($op3)
            }
            $fset.append(ej.buildTag("legend"))
                .append(table)
            content.append(ej.buildTag("div.e-dlgfields").append($fset));
            content.append(ej.buildTag("div.e-dlgfields").append(this._createBtn(true)));
            content.appendTo("body");
            var uppertype = type.replace(type.charAt(0), type.charAt(0).toUpperCase());
            $([$dp1, $dp2]).ejDropDownList({ fields: { text: "text", value: "value" }, height: 27, width: 120, enableRTL: this._ctrlInstance.model.enableRTL });
            if (type == "number") {
				$([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
                $([$in1, $in2]).ejNumericTextbox({ showSpinButton: false, height: "27px", width: "177px", enableRTL: this._ctrlInstance.model.enableRTL, focusOut: function(args){ if(this.model.decimalPlaces == 0) this.element.prev(".e-input").val(this.model.value); } });
            }
			else if (type == "guid") {
                $([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
                $($in1).css({"height":"22px","width":"175px" });
                $($in2).css({"height":"22px","width":"177px" });
            }
            else if (type == "date") {
				$([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
                $([$in1, $in2]).ejDatePicker({ "cssClass": this._ctrlInstance.model.cssClass, height: "27px", width: "177px", "enableRTL": this._ctrlInstance.model.enableRTL, watermarkText: this._getLocalizedLabel("DatePickerWaterMark") });
            }
            else if (type == "string") {
                $([$in1, $in2]).ejAutocomplete({ "cssClass": this._ctrlInstance.model.cssClass, "enableRTL": this._ctrlInstance.model.enableRTL, enableDistinct: true, width:"177px",height:"27px" });
            }
            $([radioAnd, radioOr]).ejRadioButton({ "cssClass": this._ctrlInstance.model.cssClass, "enableRTL": this._ctrlInstance.model.enableRTL });
            matchCase.ejCheckBox({ });
            $("#" + $id + "Custom_OkBtn").ejButton({ text: this._getLocalizedLabel("Ok"), showRoundedCorner: true, width:"23.6%", click: ej.proxy(this._fltrBtnHandler, this), enabled: true });
            $("#" + $id + "Custom_CancelBtn").ejButton({ text: this._getLocalizedLabel("Cancel"), showRoundedCorner: true, width: "23.6%", click: ej.proxy(this.closeXFDialog, this) })
        },
                     
        _openCustomFilter: function (operator) {
            var oper = operator != "top10" ? this._$colType: operator;
            var type = oper.replace(oper.charAt(0), oper.charAt(0).toUpperCase());
            var id = this.id + this._$colType;
            this.closeXFDialog();
            this._openedFltr = $("#" + id + "_CustomFDlg");
            var args = { requestType: "filterbeforeopen", filterModel: this, columnName: this.fName, columnType: this._$colType, isCustomFilter: true };
            if (this._ctrlInstance._trigger(this._onActionBegin, args))
                return;
            this._openedFltr.ejDialog("open");
            this._openedFltr.ejDialog({open: function(args){
				$("#" + id + "_CustomValue1").hasClass("e-autocomplete") ? $("#" + id + "_CustomValue1").focus() : $("#" + id + "_CustomValue1").prev().focus();
			}});
            this._openedFltr.find("legend").html(this._displayName);            
            var sl = (["Number","Date"].indexOf(type) != -1) ? 6 : 5;
            $("#" + id + "_CustomDrop1").ejDropDownList({ dataSource: this._getLocalizedLabel(type + "MenuOptions").slice(0,sl) });
            $("#" + id + "_CustomDrop2").ejDropDownList({ dataSource: this._getLocalizedLabel(type + "MenuOptions").slice(0, sl) });
			if (this._$colType == "number") {
                var decimalPlace = 0;
                if(operator == "top10"){
                    this._openedFltr.find(".e-optable tr").not(".e-top").addClass("e-hide");   
                    this._openedFltr.find(".e-optable tr.e-top").removeClass("e-hide");
                    $("#" + id + "_CustomDrop3").ejDropDownList({ dataSource: this._getLocalizedLabel(type + "MenuOptions") });
                }
                else{                   
                    decimalPlace = this._$format.length != 0 ? parseInt(this._$format.replace(/\D/g,'')) : 0;                    
                    this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
                    this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide"); 
                    $("#" + id + "_CustomValue1").ejNumericTextbox("model.decimalPlaces", decimalPlace);
                    $("#" + id + "_CustomValue2").ejNumericTextbox("model.decimalPlaces", decimalPlace);
                }
            }
            else {
                this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
                this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide");
            }
            if(this._$colType == "string"){
				var fName = this._$foreignField ? this._$foreignField : this.fName;
				var data = this._$foreignData ? this._$foreignData : this._dataSource;
                this._openedFltr.find(".e-autocomplete").ejAutocomplete({
                    fields: { text: fName }, dataSource: data, focusIn: function (args) {
                        var type = this.element.closest("td").siblings().find(".e-dropdownlist").ejDropDownList("getSelectedValue");
                        var $matchCase = this.element.closest(".e-dialog-scroller").find(".e-checkbox").prop("checked");
						 this.model.caseSensitiveSearch = $matchCase;
						 this.model.filterType = type == "" ? this.model.filterType : type;
                    }
                });
            }
            if (["date", "datetime"].indexOf(this._$colType) > -1 && this._$format != "") {
                this._openedFltr.find(".e-datepicker").ejDatePicker({ dateFormat: this._$format.replace(/{0:|}/g, function () { return "" }) });
            }
            this._setFilteredData(id, operator);
			if(!ej.isNullOrUndefined(this._customFilterHandler)) 
				this._customFilterHandler();
            var args = { requestType: "filterafteropen", filterModel: this, columnName: this.fName, columnType: this._$colType, isCustomFilter: true };
            
			if (this._ctrlInstance._trigger(this._onActionComplete, args))
                return;
        },

        _setFilteredData: function ($id, op) {
            var indx = $.inArray(this.fName, this.cFilteredCols);
            var fQM = [], optrs = [], fLen;
            var between = ["greaterthanorequal", "lessthanorequal"];
            if (op == "top10")
                return;
            if (indx != -1)
                fQM = ej.DataManager(this.filteredColumn).executeLocal(ej.Query().where("field", "equal", this.fName));
            if (this._initialFName != null && this._initialFName == this.fName)
                fQM[0]["isCustom"] = true;
            fLen = fQM.length;
            var drops = this._openedFltr.find(".e-dropdownlist"), inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input"), $pred = this._openedFltr.find(".e-predicate");            
            if (indx != -1 && fLen && fQM[0]["from"]!=undefined)
                optrs = [op, ""];
			else if(op == "between" && indx != -1 && fLen )
				optrs = [fQM[0]["operator"], !ej.isNullOrUndefined(fQM[1]) ? fQM[1]["operator"] : ""];
            else if (indx != -1 && fLen && fQM[0]["isCustom"])
                optrs = [(op != "customfilter" && indx != -1) ? op : fQM[0]["operator"], op == "customfilter" && fQM[1] ? fQM[1]["operator"] : ""];
			else if(indx == -1 && op == "customfilter") 
                optrs = ["equal", ""];
            else if (op == "between" || op == "customfilter")
                optrs = op != "customfilter" ? between : ["", ""];           
            else
                optrs = [op, ""];
           
            for (var i = 0; i < (indx != -1 ? fLen : 2) ; i++) {
                var opt = /\D*/.exec(optrs[i])[0];
                $(drops[i]).prop("value", opt);
                $(drops[i]).ejDropDownList("setSelectedValue", opt);
				 $(drops[i]).ejDropDownList({ change: function(arg){ 
					this.element.closest(".e-fields").find(".e-autocomplete").val("");
				 }});
				 var value = (indx != -1 && fLen && fQM[i]["isCustom"] && (op == fQM[i]["operator"] || op == "customfilter" || op == "between")) ? fQM[i]["value"] : "";
                if ($(inputs[i]).hasClass("e-datepicker"))   
                    $("#" + inputs[i].id ).ejDatePicker("model.value", (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["value"] : null );                                
				else if($(inputs[i]).hasClass("e-numerictextbox"))
					$("#" + inputs[i].id ).ejNumericTextbox("model.value", value);					
                else
                    $(inputs[i]).val(value);
                var $pre = (indx != -1 && fLen && fQM[i]["isCustom"] && fQM[i]["predicate"] != undefined) ? fQM[i]["predicate"] : "and";
				$pred.find("input[value=" + $pre + "]").ejRadioButton({checked:  true});
				if(this._$colType == "string"){
				    var $match = (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["matchcase"] : this._matchCase;
					$pred.find("input[type='checkbox']").ejCheckBox({checked: $match});
				}
				this._openedFltr.find(".e-value input:visible:eq(0)").select();
            }            
        },
        _setDateObject: function (filterObject) {
            if (filterObject.value != null) {                
                var $prevObj = $.extend(true, {}, filterObject);
                var $nextObj = $.extend(true, {}, filterObject);
                var $prevDate = new Date($prevObj.value.setSeconds($prevObj.value.getSeconds() - 1));
                var $nextDate = new Date($nextObj.value.setSeconds($nextObj.value.getSeconds() + 2));
                $prevObj.value = $prevDate;
                $nextObj.value = $nextDate;
                filterObject.value = new Date(filterObject.value.setSeconds($nextObj.value.getSeconds() - 1));
                if (filterObject.operator == "equal") {
                    $prevObj.operator = "greaterthan";
                    $prevObj.predicate = "and";
                    $nextObj.operator = "lessthan";
                    $nextObj.predicate = "and";
                } else if (filterObject.operator == "notequal") {
                    $prevObj.operator = "lessthanorequal";
                    $prevObj.predicate = "or";
                    $nextObj.operator = "greaterthanorequal";
                    $nextObj.predicate = "or";
                }
                var predicate = ej.Predicate($prevObj.field, $prevObj.operator, $prevObj.value, !$prevObj.matchcase);
                predicate = predicate[$nextObj.predicate]($nextObj.field, $nextObj.operator, $nextObj.value, !$nextObj.matchcase);
                filterObject.ejpredicate = predicate; filterObject.type = "date";
                return filterObject;
            }
            else
                return filterObject;
        },
        _getCDlgFields: function () {
            var dropDowns = this._openedFltr.find(".e-dropdownlist:visible"), defaults;
            var $match = this._openedFltr.find(".e-checkbox"), matchcase = true,valueColl = [];
            var $inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input");
			 var $ginputs = this._openedFltr.find(".e-value input");
            for (var i = 0,len = dropDowns.length; i < len; i++) {
                var dvalue = $(dropDowns[i]).ejDropDownList("getSelectedValue"), value;
                if (this._$colType == "number")
                    value = parseFloat($inputs.eq(i).ejNumericTextbox("model.value"));
				if(this._$colType == "guid")
                    value = $ginputs.eq(i).val();
                if (this._$colType == "string") {
                    value = $inputs.eq(i).val();
                    matchcase = $match.is(":checked");
                }
                if (this._$colType == "date") 
                    value = $inputs.eq(i).ejDatePicker("model.value");
				if(this._$foreignField)
				    value = this._getForeignFilterData(value);
				defaults = { field: this.fName,predicate: this._openedFltr.find(".e-predicate input[type='radio']:checked").val(),  matchcase: matchcase, isCustom: true };
                if (dvalue == "top" || dvalue == "bottom") {
                    valueColl.push($.extend(true, { value: "", operator: "notequal", take: value, from: dvalue }, defaults));
                }
                else if (dvalue != "") {
                    var filterObj = {}; $.extend(true, filterObj,{ value: value, operator: dvalue.toLowerCase(), isCustom: true }, defaults); 
                    if (this._$colType == "date")
                        filterObj.type = "date";
                    valueColl.push((this._$colType == "date" && ["equal", "notequal"].indexOf(dvalue.toLowerCase()) != -1) ? this._setDateObject(filterObj) : filterObj);
                }
                else
                    return valueColl;
            }
            return valueColl;
        },
      
        _fltrBtnHandler: function (args) {
            var matchcase, valColl = [], arg = {}, predicate, fObj = {};
            if (!this._openedFltr.hasClass("e-dlgcustom")) {
                if (!this._isFiltered && this._listsWrap.find(".e-selectall").ejCheckBox("model.checked") && this._searchCount == 0) 
                    return this.closeXFDialog();                                  
                var checked = this._listsWrap.find("input").filter(":checked:not(.e-selectall)");
                var len = checked.length, cVal;
                var optr = this._colType == "string" ? "startswith" : "equal";
                var _isCase = this._colType == "string" ? this._matchCase : true;
                var defaults = { field: this.fName, predicate: "or", operator: optr, matchcase: _isCase };
                for (var i = 0; i < len; i++) {
                    cVal = checked[i].value;
                    if (this.enableNormalize && cVal.indexOf(this._spliter) != -1) {
                        ej.merge(valColl, this.iterateAndGetCollection(cVal, defaults));
                        continue;
                    }
                    cVal = this.processValue(cVal, this._$colType);

                    if (this._$foreignField)
                        cVal = this._getForeignFilterData(cVal);

					$.extend(true, fObj, { value: cVal }, defaults);
                    
                    valColl.push(this._$colType == "date" ? this._setDateObject(fObj) : fObj);
                     
                    fObj = {};
                }
                var cIndex = $.inArray(this.fName, this.cFilteredCols);
                if(cIndex != -1)
					this.cFilteredCols.splice(cIndex,1);
            }
            else {
                valColl = this._getCDlgFields();
                $.inArray(this.fName, this.cFilteredCols) == -1 && this.cFilteredCols.push(this.fName);
            }
            var firstVal = valColl[0], isTake = firstVal["from"];
            if (!ej.isNullOrUndefined(firstVal)) {
                predicate = firstVal["ejpredicate"] ? firstVal["ejpredicate"] : ej.Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchcase);
                for (var j = 1, jlen = valColl.length; j < jlen; j++) {
                    predicate = valColl[j].ejpredicate != undefined ? predicate[valColl[j].predicate](valColl[j].ejpredicate) : predicate[valColl[j].predicate](valColl[j].field, valColl[j].operator, valColl[j].value, !valColl[j].matchcase);
                }
                arg = { action: "filtering", filterCollection: valColl, fieldName: this.fName, ejpredicate: predicate, tableID: this._$tableID};
                if (this._predicates[this._$key] == undefined)
                    this._predicates[this._$key] = {};
                this._predicates[this._$key][this.fName] = !isTake ? predicate : { from: firstVal["from"], take: firstVal["take"] };
                if (!this._openedFltr.hasClass("e-dlgcustom") && this._listsWrap.find(".e-selectall").ejCheckBox("model.checked") && !this._searchCount && $.inArray(this.fName, this._columnsFiltered) != -1)
                    arg = { action: "clearfiltering", filterDetails: { field: this.fName, operator: "", predicate: "or", value: "" }, fieldName: this.fName, tableID: this._$tableID }
                if ($.inArray(this.fName, this._columnsFiltered) == -1)
                    this._columnsFiltered.push(this.fName);
                this.closeXFDialog();
                this._filterHandler(arg);
            }
        },
		_getForeignFilterData: function(data){
			return ej.DataManager(this._$foreignData).executeLocal(ej.Query().where(this._$foreignField, "equal", data).select(this._$foreignKey))[0];
		},
		/*Util method to perform formatted group on the inputted json*/
		getDistinct: function (json, field, fullRecord) {
		    var lookup = {}, len = json.length, result = [], current, value, fd;

		    while (len--) {
		        current = json[len], value = ej.getObject(field, current), fd = value;

		        if (this.enableNormalize)
		            fd = this._formatting(this._$format, value);

		        current["ejvalue"] = fd;

		        if (!(value in lookup))
		            result.push(fullRecord ? current : value);

		        lookup[value] = true;
		    }

		    result = ej.group(ej.mergeSort(result, field), "ejvalue"); /* sort with field and group with ejvalue */

		    return result;
		},
        /*Util method to split string and build filterobject collection */
		iterateAndGetCollection: function (valuestring, defaults) {
		    var splts = valuestring.split(this._spliter), len = splts.length, result = [], value;

		    while (len--) {
		        value = this.processValue(splts[len]);

		        if (this._$foreignField)
		            value = this._getForeignFilterData(value);

		        result.push($.extend(true, { value: value }, defaults));
		    }

		    return result;
		},
        /*Util method to perform type conversion*/
		processValue: function (val, type/* optional */) {
		    type = type || this._$colType; type = this._empties.indexOf(val) != -1 ? "empty" : type;
		    switch (type) {
		        case "empty":/*Handle blanks*/
		            val = val == "null" ? null : val == "undefined" ? undefined : "";
		            break;
		        case "date":
		        case "datetime":
		            val = new Date(val);
		            break;
		        case "number":
		            val = +val;
		            break;
		        case "boolean":		           
		            val = val === "true" ? true : false;
		            break;
		    }		    		      
		    return val;
		},
		replacer: function (input, pattern, processor, params) {
		    if (typeof processor == "function")
		        processor = processor.call(this, params)
		   return input.replace(pattern, processor);
		},
        _virtualize: function (e) {
            var height = $("#" + this.id + this._$colType + "_CheckBoxList").height();
            var chks = this._chkList.not(".e-checkbox").filter(function () { if (this.offsetTop > e.scrollTop - this.offsetHeight && e.scrollTop + height+70 > this.offsetTop + this.offsetHeight) return this; });
            if (chks.length == 0) return;
            chks.filter(":checked").ejCheckBox({ checked: true }); chks.filter(":not(:checked)").ejCheckBox({ checked: false });
            chks.ejCheckBox({ change: ej.proxy(this._checkHandler, this) });
        },
        /*Method to reset private properties*/
        resetFilterModel: function (destroy) {
            this._blank = undefined;
            this._addAtLast = false;
            this._isFiltered = false;
            this._searchCount = 0;
        },
        resetExcelFilter: function (template) {
            var _i, _type, _id = this.id,_len, _$id;
            this._predicates = [];          
            this.cFilteredCols = [];
            this.resetFilterModel();
            for (_i = 0, _len = this._posType.length; _i < _len; _i++) {
                _type = this._posType[_i], _$id = _id + _type;
                var cDlg = $("#" + _$id + "_CustomFDlg");               
                $("#" + _$id + "_CheckBoxList").ejWaitingPopup("destroy"); $("#" + _$id + "_excelDlg").remove();
                cDlg.find(".e-dropdownlist").ejDropDownList("destroy");
                cDlg.find(".e-button").ejButton("destroy");
                if (_type == "string" || _type == "boolean") cDlg.find(".e-autocomplete").ejAutocomplete("destroy");
                if (_type == "number") cDlg.find(".e-numerictextbox").ejNumericTextbox("destroy");
                if (_type == "date") cDlg.find(".e-datepicker").ejDatePicker("destroy");
                cDlg.ejDialog("destroy");
                $("#" + _$id + "_CustomFDlg").remove();
            }
        },
        _wireEvents: function () {
            this._ctrlInstance._on(this._dialogContainer, "focus click", ".e-searchbox", ej.proxy(this._searchBoxFocus, this));
            this._ctrlInstance._on(this._dialogContainer, "keyup", ".e-searchbox input", ej.proxy(this._search, this));
        }
    };

    ej.ExcelFilter.valueDelimiter = "@|@";
    ej.ExcelFilter.locale = ej.ExcelFilter.locale || {};
    ej.ExcelFilter.locale["en-US"] = {
        SortNoSmaller: "Sort Smallest to Largest",
        SortNoLarger: "Sort Largest to Smallest",
        SortTextAscending: "Sort A to Z",
        SortTextDescending: "Sort Z to A",
        SortDateOldest: "Sort by Oldest",
        SortDateNewest:"Sort by Newest",
		SortByColor: "Sort By Color",
        SortColorOptions: [{ id: 1, background: "#FFFFFF" }, {id: 2, background: "#5EABDA" }],
        SortByCellColor: "Sort by Cell Color",
        SortByFontColor: "Sort by Font Color",
        FilterByColor: "Filter By Color",
		CustomSort: "Custom Sort",
        FilterColorOptions: [{ id: 1, background: "#FFFFFF" }, {id: 2, background: "#5EABDA" }],
        FilterByCellColor: "Filter by Cell Color",
        FilterByFontColor: "Filter by Font Color",
        ClearFilter: "Clear Filter",
        NumberFilter: "Number Filters",
		GuidFilter: "Guid Filters",
        TextFilter: "Text Filters",
        DateFilter: "Date Filters",
        StringMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Starts With", value: "startswith" }, { text: "Ends With", value: "endswith" }, { text: "Contains", value: "contains" }, { text: "Custom Filter", value: "customfilter" }],
        NumberMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
        GuidMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Custom Filter", value: "customfilter" }],
		DateMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
        Top10MenuOptions: [{ text: "Top", value: "top" }, { text: "Bottom", value: "bottom" }],
        title:"Custom Filter",
        PredicateAnd: "AND",
        PredicateOr: "OR",
        Ok: "OK",
        MatchCase: "Match Case",
        Cancel: "Cancel",
        NoResult: "No Matches Found",
        CheckBoxStatusMsg: "Not all items showing",
        DatePickerWaterMark: "Select date",
		True: "true",
        False: "false"
    };

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Menu control.
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejMenu", "ej.Menu", {

        element: null,

        model: null,
        validTags: ["ul"],
        _ignoreOnPersist: ["fields", "create", "beforeOpen", "open", "close", "mouseover", "mouseout", "click", "keydown", "destroy"],
        _setFirst: false,
        _rootCss: "e-menu",
        angular: {
            terminal: false
        },


        defaults: {

            height: "",

            width: "",

            animationType: "default",

            orientation: ej.Orientation.Horizontal,

            menuType: "normalmenu",

            contextMenuTarget: null,

            htmlAttributes: {},

            cssClass: "",

            openOnClick: false,

            subMenuDirection: "none",

            enableCenterAlign: false,

            showRootLevelArrows: true,

            showSubLevelArrows: true,

            enableAnimation: true,

            enableSeparator: true,

            enabled: true,

            fields: {

                child: null,

                dataSource: null,

                query: null,

                tableName: null,

                id: "id",

                parentId: "parentId",

                text: "text",

                spriteCssClass: "spriteCssClass",

                url: "url",

                imageAttribute: "imageAttribute",

                htmlAttribute: "htmlAttribute",

                linkAttribute: "linkAttribute",

                imageUrl: "imageUrl",
            },

            enableRTL: false,

            titleText: "Menu",

            excludeTarget: null,

            beforeOpen: null,

            open: null,

            close: null,

            mouseover: null,

            mouseout: null,

            click: null,

            keydown: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            animationType: "enum",
            cssClass: "string",
            titleText: "string",
            openOnClick: "boolean",
            enabled: "boolean",
            enableCenterAlign: "boolean",
            showArrow: "boolean",
            showRootLevelArrows: "boolean",
            showSubLevelArrows: "boolean",
            enableSeparator: "boolean",
            enableRTL: "boolean",
            enableAnimation: "boolean",
            fields: {
                dataSource: "data",
                query: "data",
                child: "data"
            },
            excludeTarget: "string",
            htmlAttributes: "data"
        },


        _setModel: function (jsondata) {
            for (var key in jsondata) {
                switch (key) {
                    case "menuType":
                        jsondata[key] = this.model.menuType;
                        break;
                    case "fields":
                        this._wireEvents("_off");
                        this.element.empty().insertBefore(this.wrapper);
                        this.wrapper.remove();
                        $.extend(this.model.fields, jsondata[key]);
                        this._intializeData();
                        if (!this.model.enabled)
                            this._wireEvents("_off");
                        break;
                    case "orientation": this._setOrientation(jsondata[key]); break;
                    case "showRootLevelArrows": this._addArrow(jsondata[key], this.model.showSubLevelArrows); break;
                    case "showSubLevelArrows": this._addArrow(this.model.showRootLevelArrows, jsondata[key]); break;
                    case "enableSeparator": this._setSeparator(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "enableRTL": this._setRTL(jsondata[key]); break;
                    case "enableCenterAlign": this._centerAlign(jsondata[key]); break;
                    case "excludeTarget": this.model.excludeTarget = jsondata[key];
                        break;
                    case "enabled": this.model.enabled = jsondata[key]; this._controlStatus(jsondata[key]); break;
                    case "animationType":
                        this._setAnimation(jsondata[key]);
                        break;
                    case "enableAnimation": this.model.enableAnimation = jsondata[key]; break;
                    case "openOnClick":
                        if (jsondata[key] == true) {
                            this._hoverOpen = false;
                            this._hoverClose = false;
                        }
                        break;
                    case "subMenuDirection": this._setSubMenuDirection(this.model.subMenuDirection); break;
                    case "titleText":
                        if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical"))
                            $(this.label).text(jsondata[key]);
                        break;
                }
            }
        },

        _destroy: function () {
            this._cloneElement.insertBefore(this.wrapper);
            this._cloneElement.removeClass('e-menu e-js');
            this.wrapper.remove();
        },


        _init: function () {
            this._cloneElement = this.element.clone();
            this.element.css("visibility", "hidden");
            this._setValues();
            this._intializeData();
            this.element.css("visibility", "visible");
        },

        _setValues: function () {
            this._mouseOver = true;
            this._hoverOpen = true;
            this._hoverClose = true;
            this._isMenuOpen = false;
            this._hideSpeed = 100;
            this._showSpeed = 100;
            this._isSubMenuOpen = false;
            this._isContextMenuOpen = false;
            this._disabledMenuItems = new Array();
            this._delayMenuHover = 0;
            this._delaySubMenuHover = 0;
            this._delaySubMenuShow = 0;
            this._preventContextOpen = true;
            this._setAnimation(this.model.animationType);
            this._isFocused = true;
        },
        _intializeData: function () {
            if (!ej.isNullOrUndefined(this.model.fields) && this.model.fields["dataSource"] != null) {
                this._generateTemplate(this.model.fields["dataSource"]);
                this._renderMenu();
            }
            else {
                this._renderMenu();
                this._wireEvents("_on");
            }
        },
        _renderMenu: function () {
            this._renderControl();
            this._addArrow(this.model.showRootLevelArrows, this.model.showSubLevelArrows);
            this._intializeMenu();
        },

        _renderControl: function () {
            var label, checkBox, checkObj, list, spanlist, i;
            if (this.model.menuType == "normalmenu") {
                this.wrapper = ej.buildTag("div");
                this.wrapper.addClass(this.model.cssClass + " e-menu-wrap");
            } else
                this.wrapper = ej.buildTag("div.e-menu-wrap");
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
                this.resWrap = ej.buildTag('span.e-menu-res-wrap');
                this.inResWrap = ej.buildTag('span.e-in-wrap e-box e-menu-res-in-wrap');
                this.label = ej.buildTag('span.e-res-title', this.model.titleText);
                this.check = ej.buildTag('span.e-check-wrap e-icon');
                this.checkBox = ej.buildTag('input#responsive.e-res-icon', '', { "opacity": 0 }, { type: 'checkbox' });
                this.wrapper.append(this.resWrap)
                this.resWrap.append(this.inResWrap);
                this.inResWrap.append(this.label).append(this.check);
                this.check.append(this.checkBox);
            }
            if (this.model.menuType != ej.MenuType.ContextMenu) {
                this.wrapper.insertBefore(this.element);
                this.wrapper.append(this.element);
                if (this.checkBox != null) {
                    this.checkBox.ejCheckBox({ size: "medium", change: this._oncheck });

                }
            }
            this.element.addClass("e-menu e-widget e-box").attr({ "role": "menu", "tabindex": 0 });
            this._addAttr(this.model.htmlAttributes);
            if (this.model.enableRTL) this._setRTL(this.model.enableRTL);
            this._setSubMenuDirection(this.model.subMenuDirection);
            if (this.model.menuType == "normalmenu") {
                this.model.orientation == "horizontal" ? this.element.addClass("e-horizontal") : this.element.addClass("e-vertical");
            }
            //For ContextMenu Mode
            else this._contextMenu_Template();
            //Adding arrows to items with sub items
            this.element.find('li:has("> ul")').find('> a,> span').addClass('aschild');
            this.element.find('>li').addClass('e-list').attr({ "role": "menuitem" });
            list = this.element.find('.e-list a.aschild');
            spanlist = this.element.find('.e-list span.aschild');
            for (i = 0; i < list.length; i++) {
                $(list[i]).siblings().attr({ "aria-hidden": true });
                $(list[i]).parent().attr({ "aria-haspopup": true, "role": "menu" });
                $(list[i]).parent().addClass("e-haschild");
                $(list[i]).siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
            for (i = 0; i < spanlist.length; i++) {
                $(spanlist[i]).siblings().attr({ "aria-hidden": true });
                $(spanlist[i]).parent().attr({ "aria-haspopup": true, "role": "menu" });
                $(spanlist[i]).parent().addClass("e-haschild");
                $(spanlist[i]).siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
            if (this.model.enableCenterAlign) this._centerAlign(this.model.enableCenterAlign);
            if (this.model.enableSeparator) this._setSeparator(true);
            this._controlStatus(this.model.enabled);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else proxy.element.attr(key, value)
            });
        },

        _oncheck: function (e) {
            var obj = this.element.parents('.e-menu-wrap').children('.e-menu');
            e.isChecked ? obj.removeClass('e-res-hide').addClass('e-res-show') : obj.removeClass('e-res-show').addClass('e-res-hide');
        },

        _generateTemplate: function (data) {
            var proxy = this, queryPromise;
            if (data instanceof ej.DataManager) {
                queryPromise = data.executeQuery(this._columnToSelect(this.model.fields));
                queryPromise.done(function (e) {
                    proxy._odataFlag = true;
                    proxy._generateItemTemplate(e.result);
                    proxy._wireEvents("_on");
                });
            } else {
                proxy._odataFlag = false;
                this._generateItemTemplate(proxy.model.fields['dataSource']);
                this._wireEvents("_on");
            }
        },

        _generateItemTemplate: function (items) {
            for (var i = 0; i < items.length; i++) {
                if ((items[i][this.model.fields.parentId] == null) || (items[i][this.model.fields.parentId] == 0)) {
                    var subItem = this._menuTemplate(items[i], items, this.model.fields);
                    this.element.append(subItem);
                }
            }
        },

        _menuTemplate: function (item, tableData, mapper) {
            var liTag, aTag, imgTag, spanTag;
            liTag = $(document.createElement('li'));
            liTag.attr("class", 'e-list');
            if (item[mapper.htmlAttribute]) this._setAttributes(item[mapper.htmlAttribute], liTag);

            if (item[mapper.id]) {
                aTag = $(document.createElement('a'));
                if (item[mapper.imageUrl] && item[mapper.imageUrl] != "") {
                    imgTag = $(document.createElement('img'));
                    imgTag.attr('src', item[mapper.imageUrl]);
                    if (item[mapper.imageAttribute]) this._setAttributes(item[mapper.imageAttribute], imgTag);
                    aTag.append(imgTag);
                }
                else if (item[mapper.spriteCssClass] && item[mapper.spriteCssClass] != "") {
                    spanTag = $(document.createElement('span'));
                    spanTag.addClass(item[mapper.spriteCssClass]);
                    aTag.append(spanTag);
                }
                aTag.append(item[mapper.text]);
                if (item[mapper.linkAttribute]) this._setAttributes(item[mapper.linkAttribute], aTag);
                if (item[mapper.url])
                    aTag.attr('href', item[mapper.url]);
                liTag.append(aTag);
            }
            if (item[mapper.id]) {
                liTag.prop("id", item[mapper.id]);
            }
            if (!ej.isNullOrUndefined(mapper["child"])) {
                this._odataFlag = true;
                if (mapper["child"]["dataSource"] instanceof ej.DataManager) {
                    var proxy = this, queryManager = ej.Query();
                    queryManager = this._columnToSelect(mapper["child"]);
                    queryManager.where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]);
                    var queryPromise = mapper["child"]["dataSource"].executeQuery(queryManager);
                    queryPromise.done(function (e) {
                        var childItems = e.result;
                        if (childItems && childItems.length > 0) {
                            var ul = $(document.createElement('ul'));
                            for (var i = 0; i < childItems.length; i++) {
                                var liItem = proxy._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                                ul.append(liItem);
                            }
                            liTag.append(ul);
                            $(liTag).children('a').addClass('aschild');
                            if ($(liTag).parent().hasClass('e-menu') && (proxy.model.showRootLevelArrows))
                                $(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
                            else if (proxy.model.showSubLevelArrows)
                                $(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
                        }
                    });
                }
                else {
                    var childItems = ej.DataManager(mapper["child"]["dataSource"]).executeLocal(ej.Query().where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]));
                    if (childItems && childItems.length > 0) {
                        var ul = $(document.createElement('ul'));
                        for (var i = 0; i < childItems.length; i++) {
                            var liItem = this._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                            ul.append(liItem);
                        }
                        liTag.append(ul);
                    }
                }
            }
            else if (!this._odataFlag) {
                var childItems = ej.DataManager(mapper["dataSource"]).executeLocal(ej.Query().where(mapper["parentId"], ej.FilterOperators.equal, item[mapper.id]));
                if (childItems && childItems.length > 0) {
                    var ul = ej.buildTag('ul');
                    for (var i = 0; i < childItems.length; i++) {
                        var liItem = this._menuTemplate(childItems[i], mapper["dataSource"], mapper);
                        ul.append(liItem);
                    }
                    liTag.append(ul);
                }
            }
            return liTag;
        },

        _setAttributes: function (data, element) {
            for (var key in data) {
                if (key == "class")
                    element.addClass(data[key]);
                else
                    element.attr(key, data[key]);
            }
        },

        _addArrow: function (topArrows, bottomArrows) {
            if (topArrows)
                this.element.find('>li.e-list:has("> ul")').children('a,span').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
            else {
                this.element.find('>li.e-list:has("> ul")').children('a,span').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

            if (bottomArrows)
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a,span').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
            else {
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a,span').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

        },

        _intializeMenu: function () {
            if (this.model.height != 0) this._setHeight(this.model.height);
            if (this.model.width != 0) this._setWidth(this.model.width);
            if (this.model.menuType == "contextmenu")
                this.model.openOnClick = false;
            if (this.model.openOnClick) {
                this._hoverOpen = false;
                this._hoverClose = false;
            }
        },

        _setOrientation: function (val) {
            if (val == "horizontal") {
                this.element.removeClass("e-vertical e-horizontal").addClass("e-horizontal");
            } else {
                this.element.removeClass("e-horizontal e-vertical").addClass("e-vertical");
            }
        },

        _setHeight: function (value) {
            if (this.model.orientation == "horizontal") {
                value = typeof value === "number" ? value + "px" : value;
                this.element.find('> li').find('>a:first').css("line-height", value);
                if (this.model.showRootLevelArrows)
                    this.element.find('> li').find('>a:first').find('> span:first').css({ "line-height": value, "top": "0px" })
            }
            else
                this.element.height(value);
        },

        _setWidth: function (value) {
            this.element.css("width", value);
            if (this.model.orientation === "horizontal")
                this.resWrap.css("width", value);
        },

        _setRTL: function (isRTL) {
            if (isRTL) {
                this.element.removeClass("e-rtl").addClass("e-rtl");
            } else {
                this.element.removeClass("e-rtl");
            }
            if (isRTL && this.model.orientation === "horizontal")
                this.wrapper.removeClass("e-menu-rtl").addClass("e-menu-rtl");
            else
                this.wrapper.removeClass("e-menu-rtl");
        },

        _setSubMenuDirection: function (direction) {
            if (direction != "left" && direction != "right")
                this.model.subMenuDirection = this.model.enableRTL ? "left" : "right";
        },

        _setAnimation: function (value) {
            value === "none" ? (this._showAnim = "none", this._hideAnim = "none") : (this._showAnim = "slideDown", this._hideAnim = "slideUp");
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _centerAlign: function (enableCenterAlign) {
            if (this.model.orientation == "horizontal" && enableCenterAlign)
                this.element.css('text-align', 'center');
            else
                this.element.css('text-align', 'inherit');
        },
        _columnToSelect: function (mapper) {
            var column = [], queryManager = ej.Query();
            if (ej.isNullOrUndefined(mapper.query)) {
                for (var col in mapper) {
                    if (col !== "tableName" && col !== "child" && col !== "dataSource" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!this.model.fields["dataSource"].dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else
                queryManager = mapper.query;
            return queryManager;
        },


        _max_zindex: function () {
            var parents, bodyEle, maxZ;
            if (this.model.menuType == "contextmenu") {
                parents = $(this._targetElement).parents();
                parents.push(this._targetElement);
            }
            else
                parents = $(this.element).parents();
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });
            maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;

        },

        _recursiveFunction: function (items, menuText) {
            var context = this;
            var isFound = false;
            $.each(items, function (key, value) {
                if (value.Text == menuText) {
                    context.selectedItem = value;
                    isFound = true;
                    return false;
                }
                else if (value.ChildItems != null) {
                    context._recursiveFunction(value.ChildItems, menuText);
                }
                if (isFound)
                    return false;
            });
        },

        _contextMenu_Template: function () {
            var oldWrapper = $(".e-menu-wrap #" + this.element.context.id).get(0);
            if (oldWrapper)
                $(oldWrapper.parentElement).remove();
            this.model.orientation = "vertical";
            this.element.addClass(this.model.cssClass + " e-context");
			 this.element.css("display", "none");
            $("body").append(this.element);
            this.wrapper.insertBefore(this.element);
            this.wrapper.append(this.element);
        },

        _closeMenu: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
        },

        _onMenuIntent: function (element, obj, canOpen) {
            obj._delayMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == true && canOpen) {
                    var showanim = obj._showAnim;
                    var hideanim = obj._hideAnim;
                    var showSpeed = obj._showSpeed;
                    var hideSpeed = obj._hideSpeed;
                    obj._show(element, showanim, hideanim);
                }
            }, this._showSpeed);
        },

        _onHide: function (element, obj, canHide) {
            obj._delaySubMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == false && canHide) {
                    var id = obj._id;
                    var hideanim = obj._hideAnim;
                    var hideSpeed = obj._hideSpeed;
                    obj._closeAll();
                }

            }, obj._hideSpeed);
        },

        _subMenuPos: function (element, direction) {
            var parentPos = $(this.wrapper).parent().offset();
            var pos = $(element).offset();
            var posLeft = pos.left - parentPos.left;
            var subMenu = $('ul:first', element);
            var menuWidth = $(element).outerWidth();
            if (pos == null || pos == undefined)
                return false;
            var submenuWidth = subMenu.outerWidth() + 1; // +1 for the space between menu and submenu
            var left = document.documentElement.clientWidth + $(document).scrollLeft();
            if (this.model.menuType == "normalmenu") {
                if ($(element.parentNode).is(this.element)) {
                    if (this.model.orientation == "horizontal")
                        subMenu.css("top", $(element).outerHeight() + "px");
                    else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth))
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                    else {
                        subMenu.css("left", ($(element).outerWidth() + 4) + "px");
                    }
                } else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth)) {
                    subMenu.css("left", -(submenuWidth + 4) + "px");
                }
                else
                    subMenu.css("left", ($(element).outerWidth() + 4) + "px");
            }
            else {
                left -= (pos.left + (2 * submenuWidth) + 4);
                if (left < 0) {
                    var menuLeftPos = (submenuWidth == null) ? "-206.5px" : "-" + (submenuWidth + 5) + "px";
                    subMenu.css("left", menuLeftPos);
                }
                else {
                    if (subMenu.parent('li.e-list').parent('ul').width() && direction == "right") {
                        subMenu.css("left", (subMenu.parent('li.e-list').parent('ul').width() + 4) + "px");
                    }
                    else if (pos.left > submenuWidth)
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                }
                var submenuHeight = subMenu.outerHeight();
                if ((pos.top + submenuHeight > $(window).height())) {
                    var top = -(submenuHeight) + $(element).outerHeight();
                    if (submenuHeight > (pos.top + ($(element).outerHeight() / 2))) {
                        subMenu.css("top", -(submenuHeight / 2) + "px");
                    }
                    else
                        subMenu.css("top", top + "px");
                }
                else
                    subMenu.css("top","0px");
            }
        },


        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin + " e-menu-wrap");
        },

        _setSeparator: function (separator) {
            if (separator)
                this.element.addClass("e-separator");
            else this.element.removeClass("e-separator");
        },

        _contextMenuEvents: function (action) {
            this[action]($(this.model.contextMenuTarget), "mouseup taphold", this._ContextMenuHandler);
            this[action](this.element, "contextmenu", this._onDefaultPreventer);
            this[action]($(this.model.contextMenuTarget), "contextmenu", this._onDefaultPreventer);
            this[action]($(document), "mousedown", this._onContextClose);
        },

        _show: function (element, showanim, hideanim) {
            var siblingElement;
            var sibling = $('> ul', element);
            sibling.attr({ "aria-hidden": false });
            this._hideAnimation($(element).siblings().find(' > ul:visible'), hideanim);
            if (!($.inArray(this._disabledMenuItems, element) > -1)) {
                if (sibling.css('display') != "none") {
                    siblingElement = this.model.openOnClick ? $(sibling) : sibling.children().find('> ul');
                    this._hideAnimation(siblingElement, hideanim);
                }
                else $('> ul', element).children().find('> ul').hide();
                this._subMenuPos(element, this.model.subMenuDirection);
                sibling.css({ "z-index": this._max_zindex() + 1 });
                if ($('> ul', element).css('display') != 'block' && !$(element).hasClass("e-disable-item"))
                    this._showAnimation(sibling, showanim);
                if ($(element).siblings("li.e-active").length > 0)
                    $(element).siblings("li.e-active").removeClass("e-active");
                sibling.closest('li').addClass('e-active');
            }
        },

        _closeAll: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
            this._hideAnimation(this.element.find('> ul:visible'), this._hideAnim);
        },

        _showAnimation: function (element, anim) {
            switch (anim) {
                case "slideDown":
                    element.slideDown(this.model.enableAnimation ? 200 : 0, "easeOutQuad"); break;
                case "none":
                    element.css("display", "block"); break;
            }
        },

        _hideAnimation: function (element, anim) {
            switch (anim) {
                case "slideUp":
                    $(element).attr({ "aria-hidden": true });
                    element.slideUp(this.model.enableAnimation ? 100 : 0, "easeOutQuad"); break;
                case "none":
                    element.css("display", "none"); break;
            }
            element.closest('li').removeClass('e-active');
        },

        _removeValue: function (text, disableList) {
            var $browInfo = ej.browserInfo(), elementText;
            $browInfo.version === "8.0" && $browInfo.name === "msie" ? elementText = text[0].outerText : elementText = text[0].textContent;
            var count = $(disableList).length, i = 0;
            var childEle = $(disableList).children('a').length == 0 ? $(disableList).children('span') : $(disableList).children('a');
            while (i <= count) {
                if ($(childEle[i]).text() === elementText)
                    return i;
                i++;
            }
        },

        _createSubLevelItem: function (target, element) {
            var ulTag;
            ulTag = $(document.createElement('ul'));
            ulTag.append(element);
            target.append(ulTag);
            target.attr({ 'role': 'menu', 'aria-haspopup': 'true' });
            target.addClass("e-haschild");
            this.element.find('li:has("> ul")').find('> a,>span').addClass('aschild e-arrow-space');
            this._insertArrows(ulTag);
        },

        _insertArrows: function (ulTag) {
            if (this.model.showRootLevelArrows)
                ulTag.find('>a,>span').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
            else
                ulTag.find('>a,>span').removeClass("e-arrow-space").find('>span.e-icon').remove();

            if (this.model.showSubLevelArrows)
                ulTag.parent('li.e-list:has(>ul)').children('a,span').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
            else
                ulTag.parent('li.e-list:has(>ul)').children('a,span').removeClass("e-arrow-space").find('>span.e-icon').remove();
        },

        _createMenuItem: function (item) {
            var liTag, aTag, imgTag, spanTag;
            liTag = $(document.createElement('li'));
            liTag.attr({ "class": 'e-list', "role": "menuitem" });
            if (item["htmlAttribute"]) this._setAttributes(item["htmlAttribute"], liTag);
            if (item["text"] && item["text"] != "") {
                aTag = $(document.createElement('a'));
                if (item["imageUrl"] && item["imageUrl"] != "") {
                    imgTag = $(document.createElement('img'));
                    imgTag.attr('src', item["imageUrl"]);
                    if (item["imageAttribute"]) this._setAttributes(item["imageAttribute"], imgTag);
                    aTag.append(imgTag);
                }
                else if (item["spriteCssClass"] && item["spriteCssClass"] != "") {
                    spanTag = $(document.createElement('span'));
                    spanTag.addClass(item["spriteCssClass"]);
                    aTag.append(spanTag);
                }
                aTag.append(item["text"]);
                if (item["linkAttribute"]) this._setAttributes(item["linkAttribute"], aTag);
                if (item["url"])
                    aTag.attr('href', item["url"]);
                liTag.append(aTag);
            }
            if (item["id"]) {
                liTag.prop("id", item["id"]);
            }
            if (!this.model.enabled)
                liTag.addClass("e-disable-item");
            return liTag;
        },

        _insertNode: function (itemCollection, targetNode, operation) {
            var item = 0, targetList = 0, target = 0, targetCollection = [];
            if ($(targetNode).is(this.element))
                targetCollection.push(this.element);
            else
                typeof (targetNode) === "string" ? targetCollection.push(this.element.find(targetNode)) : typeof (targetNode) === "undefined" ? targetCollection.push(this.element) : targetCollection.push(targetNode);
            for (targetList = 0; targetList < targetCollection.length; targetList++) {
                for (target = 0; target < targetCollection[targetList].length; target++)
                    for (item = 0; item < itemCollection.length && !ej.isNullOrUndefined(itemCollection[item]) ; item++)
                        this._addItem(itemCollection[item], targetCollection[targetList][target], operation);
            }
        },

        _addItem: function (item, target, operation) {
            var element, targetElement;
            this._wireEvents("_off");
            element = this._createMenuItem(item);
            target = target === "default" ? $("#" + item["parentId"]) : $(target);
            switch (operation) {
                case "insert":
                    $(target).is(this.element) ? targetElement = target : targetElement = target.children('ul');
                    targetElement.length != 0 ? targetElement.append(element) : this._createSubLevelItem(target, element);
                    break;
                case "insertBefore":
                    if (!$(target).is(this.element))
                        element.insertBefore(target);
                    else
                        target.prepend(element);
                    break;
                case "insertAfter":
                    if (!$(target).is(this.element))
                        element.insertAfter(target);
                    else
                        target.append(element);
                    break;
            }
            this._wireEvents("_on");
        },

        _removeItem: function (item) {
            if (item.siblings('li').length == 0) {
                item.closest("ul").siblings('a.aschild').removeClass("aschild e-arrow-space").children('span.e-icon').remove();
                !item.closest("ul").hasClass("e-menu") ? item.closest("ul").remove() : item.remove();
            }
            else
                item.remove();
        },

        insert: function (item, target) {
            this._insertNode(item, target, "insert");
        },

        insertBefore: function (item, target) {
            this._insertNode(item, target, "insertBefore");
        },

        insertAfter: function (item, target) {
            this._insertNode(item, target, "insertAfter");
        },

        remove: function (targetCollection) {
            var target = 0, innerTarget = 0;
            for (target = 0; target < targetCollection.length; target++) {
                targetCollection[target] = typeof (targetCollection[target]) === "string" ? (this.element.find(targetCollection[target])) : targetCollection[target];
                for (innerTarget = 0; innerTarget < targetCollection[target].length; innerTarget++)
                    (targetCollection[target][innerTarget].tagName === "LI" || targetCollection[target][innerTarget].tagName === "UL") ? this._removeItem($(targetCollection[target][innerTarget])) : targetCollection[target][innerTarget].remove();
            }
        },

        showContextMenu: function (locationX, locationY, targetElement, e, update) {
            this._closeMenu();
            this._eventArgs = e;
            if (!ej.isNullOrUndefined(e) && this._checkForExclusion(e.target)) return;
            if (this._trigger("beforeOpen", { target: targetElement, events: e })) return false;
            if (this._preventContextOpen) {
                if (!ej.isNullOrUndefined(targetElement))
                    this._targetElement = targetElement;
                else if (!ej.isNullOrUndefined(target))
                    this._targetElement = target;
                else
                    this._targetElement = this.element;
                if (update) {
                    var position = this._calculateContextMenuPosition(e);
                    locationX = position.X;
                    locationY = position.Y;
                }
                this.element.css({ "left": locationX, "top": locationY });
                this.element.css({ "z-index": this._max_zindex() + 1 });
                this._showAnimation(this.element, this._showAnim);
                this._isContextMenuOpen = true;
                this.element.focus();

                this._trigger("open", { target: targetElement });
                this._on(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
            }
            return false;
        },

        _checkForExclusion: function (e) {
            if (!ej.isNullOrUndefined(this.model.excludeTarget)) {
                var excludeTargets = this.model.excludeTarget.split(",");
                for (var target = 0; target < excludeTargets.length; target++) {
                    if ($(e).closest(this.model.excludeTarget).is($.trim(excludeTargets[target])))
                        return true;
                }
            }
        },


        hideContextMenu: function (e) {
            this._closeMenu();
            this.element.find(".e-mhover").removeClass("e-mhover");
            this.element.find(".e-mfocused").removeClass("e-mfocused");
            this._hideAnimation(this.element, this._hideAnim);
            this._isContextMenuOpen = false;

            this._trigger("close", $.extend({ events: e }, e));
            this._off(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
        },


        disableItem: function (itemToDisable) {
            var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return $.trim($(this).text()) === itemToDisable; });
            if (isMenuItem.length > 0 && !($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().addClass("e-disable-item").attr({ "aria-disabled": true });
                isMenuItem.parent().find('>a.aschild span.e-icon.e-arrows').addClass("e-disable");
                this._disabledMenuItems.push(isMenuItem.parent()[0]);
            }
        },


        disableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToDisable = this.element.find("#" + itemId) ? this.element.find("#" + itemId)[0] : undefined;
                if (itemToDisable && !($.inArray(itemToDisable, this._disabledMenuItems) > -1)) {
                    $(itemToDisable).addClass("e-disable-item").attr({ "aria-disabled": true });
                    $(itemToDisable).find('>a.aschild span.e-icon.e-arrows').addClass("e-disable");
                    this._disabledMenuItems.push(itemToDisable);
                }
            }
        },

        enableItem: function (itemToEnable) {
            var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return $.trim($(this).text()) === itemToEnable; });
            if (isMenuItem.length > 0 && ($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().removeClass("e-disable-item").attr({ "aria-disabled": false });
                isMenuItem.parent().find('>a.aschild span.e-icon.e-arrows').removeClass("e-disable");
                var index = this._removeValue(isMenuItem, this._disabledMenuItems);
                this._disabledMenuItems.splice(index, 1);
            }
        },


        enableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToEnable = this.element.find("#" + itemId)[0];
                if (itemToEnable && ($.inArray(itemToEnable, this._disabledMenuItems) > -1)) {
                    $(itemToEnable).removeClass("e-disable-item").attr({ "aria-disabled": false });
                    $(itemToEnable).find('>a.aschild span.e-icon.e-arrows').removeClass("e-disable");
                    for (var i = this._disabledMenuItems.length - 1; i >= 0; i--) {
                        if (this._disabledMenuItems[i].id == itemId) {
                            this._disabledMenuItems.splice(i, 1);
                        }
                    }
                }
            }
        },


        disable: function () {
            this.model.enabled = false;
            var menuItemCollection = this.element.find('>li[class!=e-separator]');
            var proxy = this;
            $.each(menuItemCollection, function (key, value) {
                $(value).addClass("e-disable-item").attr({ "aria-disabled": true });
                $(value).find('>a.aschild span.e-icon.e-arrows').addClass("e-disable");
                proxy._disabledMenuItems.push(value);
            });
        },


        enable: function () {
            var proxy = this;
            this.model.enabled = true;
            var menuItemCollection = this.element.find('li.e-disable-item');
            $.each(menuItemCollection, function (key, value) {
                $(value).removeClass("e-disable-item").attr({ "aria-disabled": false });
                $(value).find('>a.aschild span.e-icon.e-arrows').removeClass("e-disable");
                proxy._disabledMenuItems.pop(value);
            });
        },

        show: function (locationX, locationY, targetElement, e) {
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu")
                this.showContextMenu(locationX, locationY, targetElement, e, false);
            else
                this.element.css("display", "block");
        },

        hide: function (e) {
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu")
                this.hideContextMenu(e);
            else {
                this._closeMenu();
                this.element.css("display", "none");
            }
        },

        _wireEvents: function (action) {
            this[action](this.element.find("li.e-list"), "mouseout", this._mouseOutHandler);
            this[action](this.element.find("li.e-list"), "mouseover", this._mouseOverHandler);
            this[action](this.element, "click", this._onClickHandler);
            this[action](this.element, "keydown", this._onKeyDownHandler);
            this[action](this.element, "focus", this._OnFocusHandler);
            this[action](this.element, "blur", this._OnFocusOutHandler);
            if (this.model.menuType == "contextmenu" && $(this.model.contextMenuTarget)[0] != null) {
                this._contextMenuEvents(action);
            }
            if (this.model.menuType != "contextmenu") {
                this[action]($(document), "click", this._onDocumentClick);
                this[action](this.element, "mousedown", this._onMouseDownHandler);
            }

        },

        _mouseOverHandler: function (event) {
            var element, itemId = "";
            this.element.find(".e-mhover").removeClass("e-mhover e-mfocused");
            event.currentTarget = $(event.target).closest("li")[0];
            if (!$(event.currentTarget).hasClass('e-disable-item'))
                $(event.currentTarget).addClass("e-mhover e-mfocused");
            else this._isFocused = false;
            if (event.stopPropagation)
                event.stopPropagation();
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delaySubMenuHover);
            }
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delayMenuHover);
            }
            this._mouseOver = true;
            this._isMenuOpen = true;
            if ($(event.currentTarget.parentNode.parentNode).is(this.element)) {
                this._isSubMenuOpen = false;
            }
            else {
                this._isSubMenuOpen = true;
            }
            if (event.currentTarget.nodeName == "LI" && !$(event.currentTarget).hasClass('e-separator'))
                element = event.currentTarget;
            else if (event.currentTarget.parentNode) {
                if (event.currentTarget.parentNode.nodeName == "LI" && !$(event.currentTarget.parentNode).hasClass('e-separator'))
                    element = event.currentTarget.parentNode;
                else
                    return false;
            }
            else {
                event.preventDefault();
                return false;
            }
            if (!$(event.currentTarget).hasClass('e-disable-item'))
                this._onMenuIntent(element, this, this._hoverOpen);
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();
                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "ID": itemId };

                this._trigger("mouseover", $.extend({ events: eventArgs }, eventArgs));
            }
        },

        _onMouseDownHandler: function (e) {
            this._isFocused = false;
        },


        _mouseOutHandler: function (event) {
            var element, itemId = "";
            $(event.currentTarget).removeClass("e-mhover e-mfocused");
            if (event.stopPropagation)
                event.stopPropagation();
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delaySubMenuHover);
            }
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delayMenuHover);
            }
            this._mouseOver = false;
            this._isMenuOpen = false;

            if (event.currentTarget.nodeName == "LI" && !$(event.currentTarget).hasClass('e-separator'))
                element = event.currentTarget;
            else if (event.currentTarget.parentNode) {
                if (event.currentTarget.parentNode.nodeName == "LI" && !$(event.currentTarget.parentNode).hasClass('e-separator'))
                    element = event.currentTarget.parentNode;
                else
                    return false;
            }
            else {
                event.preventDefault();
                return false;
            }
            this._onHide(element, this, this._hoverClose);
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();
                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "ID": itemId };

                this._trigger("mouseout", $.extend({ events: eventArgs }, eventArgs));
            }
        },

        _onClickHandler: function (event) {
            var element, itemId = "";
            this._isFocused = true;
            var openOnClickStart = false;
            if (!$(event.target).closest("li.e-list").hasClass('e-separator') && !$(event.target).closest("li.e-list").hasClass('e-disable-item') && $(event.target).closest("li.e-list").length > 0) {
                element = $(event.target).closest("li.e-list")[0];
                if ($(element).is(this.element.find(">li.e-list")))
                    this._activeElement = element;
            }
            else {
                if ($(event.target).is(this.element))
                    this._activeElement = this.element.find(">li:first");
                return;
            }
            if ($(event.target).is("a") && $(element).find(">a,>span").hasClass('aschild') && this.model.openOnClick) {
                this._isFocused = false;
            }
            if (!this._hoverOpen && $(element).find(">a,>span").hasClass('aschild')) {
                this._show(element, this._showAnim, this._hideAnim);
                this._hoverOpen = false;
                openOnClickStart = true;
            }
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                //Check if Context Menu, then hide the context menu firing the events
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen) {
                        this._hideAnimation(this.element, this._hideAnim);
                        this._isContextMenuOpen = false;

                        this._trigger("close", $.extend({ events: event }, event));
                    }
                }
                if (!openOnClickStart) {



                    if (!$(element).find(">a,>span").hasClass("aschild")) {
                        this._closeMenu();
                        if (this.model.openOnClick)
                            this._hoverOpen = false;
                    }
                }
                var menuText = $(element).children('a,span').text();
                var parent = $(element).closest("ul").parent("li");
                if (parent.length != 0) {
                    parentId = parent.attr("id");
                    parentText = parent.children('a,span').text();
                }
                else {
                    parentId = $(element).attr("id");
                    parentText = menuText;
                }
                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "selectedItem": this.selectedItem, "ID": itemId, "parentId": parentId, "parentText": parentText };
                this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                this.selectedItem = null;
                if (this.model.openOnClick && this.model.menuType != "contextmenu")
                    this.element.focus();
            }
        },


        _onKeyDownHandler: function (e) {
            if (this.model.menuType == "contextmenu" && !this._isContextMenuOpen)
                return;
            var element, itemId = "", hoverElement = this.element.find(".e-mhover"), focusedElement = this.element.find(".e-mfocused");
            if (!$(hoverElement).length > 0 && $(this._activeElement).length > 0)
                hoverElement = focusedElement = $(this._activeElement);

            if (e.keyCode == 9) {
                this._isFocused = false;
                this._OnFocusOutHandler();
            }
            else if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40)
                e.preventDefault();

            if (e.keyCode == 40) {
                if (this.model.orientation != "horizontal" && $(hoverElement).length > 0) {
                    focusedElement.removeClass("e-mfocused");
                    if (hoverElement.next().hasClass("e-separator"))
                        hoverElement.next().next().addClass("e-mfocused");
                    else if (hoverElement.is(':last-child')) {
                        hoverElement.siblings().first().addClass("e-mfocused");
                    }
                    else
                        hoverElement.next().addClass("e-mfocused");
                }
                else {
                    if (this.model.menuType == "contextmenu")
                        this.element.find("li").first().addClass("e-mfocused e-mhover");
                }
                if (this.model.orientation == "horizontal" && (this.element.find(">li.e-mhover").children("ul").length > 0 || $(this._activeElement).length > 0)) {
                    if ($(hoverElement).children("ul").css('display') === "none")
                        this._show(hoverElement[0], this._showAnim, this._hideAnim);
                    hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
                    if ($(this._activeElement).length > 0)
                        $(this._activeElement).addClass("e-mfocused");
                }
                else {
                    if (hoverElement.is(':last-child')) {
                        hoverElement.removeClass("e-mhover").siblings().first().addClass("e-mhover");
                    }
                    else if (hoverElement.next().hasClass("e-separator"))
                        hoverElement.removeClass("e-mhover").next().next().addClass("e-mhover");
                    else {
                        hoverElement.removeClass("e-mhover").next().addClass("e-mhover");
                    }
                }
            }
            if (e.keyCode == 39) {
                if (this.model.orientation == "horizontal" && (this.element.find(">li.e-list").hasClass("e-mhover") || $(this._activeElement).length > 0)) {
                    this._closeAll();
                    if (hoverElement.is(":last-child")) {

                        hoverElement.removeClass("e-mhover e-mfocused");
                        if (this.element.find("li.e-list").first().hasClass("e-separator")) this.element.find("li.e-list").first().next().addClass("e-mhover e-mfocused");
                        else this.element.find("li.e-list").first().addClass("e-mhover e-mfocused");
                    }
                    else if (hoverElement.next().hasClass("e-separator")) {

                        hoverElement.removeClass("e-mhover e-mfocused").next().next().addClass("e-mhover e-mfocused");
                    }
                    else {

                        hoverElement.removeClass("e-mhover e-mfocused").next().addClass("e-mhover e-mfocused");
                    }
                }
                else if ($(hoverElement).children("ul").length > 0) {
                    this._show(hoverElement[0], this._showAnim, this._hideAnim);
                    hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
                }
                else if (hoverElement.children("ul").length <= 0) {
                    this._closeMenu();
                    hoverElement.removeClass("e-mhover");
                    if (focusedElement.next().hasClass("e-separator")) {
                        focusedElement.removeClass("e-mfocused").next().next().addClass("e-mhover e-mfocused");

                    } else if (focusedElement.next().length <= 0) {
                        focusedElement.removeClass("e-mfocused").siblings().first().addClass("e-mhover e-mfocused");
                    } else focusedElement.removeClass("e-mfocused").next().addClass("e-mhover e-mfocused");
                }
            }

            if (e.keyCode == 38) {
                if (this.model.orientation != "horizontal" && $(hoverElement).length > 0) {
                    hoverElement.children("ul").hide();
                    focusedElement.removeClass("e-mfocused");
                    if (hoverElement.prev().hasClass("e-separator"))
                        hoverElement.prev().prev().addClass("e-mfocused");
                    else if (hoverElement.is(':first-child')) {
                        hoverElement.siblings().last().addClass("e-mfocused");
                    }
                    else
                        hoverElement.prev().addClass("e-mfocused");
                }
                else {
                    if (this.model.menuType == "contextmenu")
                        this.element.find("li").last().addClass("e-mfocused e-mhover");
                }
                if (hoverElement.is(':first-child')) {
                    hoverElement.removeClass("e-mhover e-mfocused").siblings().last().addClass("e-mhover");
                }
                else if (hoverElement.prev().hasClass("e-separator"))
                    hoverElement.removeClass("e-mhover").prev().prev().addClass("e-mhover");
                else
                    hoverElement.removeClass("e-mhover").prev().addClass("e-mhover");

            }

            if (e.keyCode == 37) {
                if (this.model.orientation == "horizontal" && (this.element.find(">li.e-list").hasClass("e-mhover") || $(this._activeElement).length > 0)) {
                    this._closeAll();
                    if (hoverElement.is(":first-child")) {
                        hoverElement.removeClass("e-mhover e-mfocused");
                        if (this.element.find(">li.e-list").last().hasClass("e-separator"))
                            this.element.find(">li.e-list").last().prev().addClass("e-mhover e-mfocused");
                        else
                            this.element.find(">li.e-list").last().addClass("e-mhover e-mfocused");
                    }
                    else if (hoverElement.prev().hasClass("e-separator")) {
                        hoverElement.removeClass("e-mhover e-mfocused").prev().prev().addClass("e-mhover e-mfocused");
                    }
                    else {
                        hoverElement.removeClass("e-mhover e-mfocused").prev().addClass("e-mhover e-mfocused");
                    }
                }
                else if ($(hoverElement).length > 0) {
                    if (!hoverElement.parent().hasClass("e-context")) {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.parent().closest("li.e-list").addClass("e-mhover");
                        hoverElement.removeClass("e-mhover");
                    }
                }
                else {
                    this._hideAnimation(hoverElement, this._showAnim, this._hideAnim);
                    hoverElement.removeClass("e-mhover").parent().addClass("e-mhover");
                }
            }
            if (e.keyCode == 13) {
                var menuText = $(hoverElement).children('a,span').text();
                itemId = !ej.isNullOrUndefined($(hoverElement)[0]) ? $(hoverElement)[0].id : "";
                var eventArgs = { "menuId": this.element[0].id, "text": menuText, "selectedItem": focusedElement, "ID": itemId };
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen && hoverElement.length > 0 && !focusedElement.hasClass("e-disable-item")) {
                        if (this.model.click)
                            this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                        this.selectedItem = null;
                        this.hideContextMenu(e);
                    }
                } else {
                    if (hoverElement.length > 0 && !hoverElement.hasClass("e-disable-item")) {
                        if ($(hoverElement).find(">a,>span").hasClass('aschild') && $(hoverElement).children("ul").css('display') === "none") {
                            this._show(hoverElement[0], this._showAnim, this._hideAnim);
                            hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
                        }
                        else {
                            this.element.find(".e-mhover >a,.e-mhover >span ").focus();
                            this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                            this._closeAll();
                        }
                        if (ej.isNullOrUndefined($(hoverElement).find(">a").attr("href")))
                            this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                    }
                }
            }
            if (e.keyCode == 27) {
                if (this.model.menuType == "contextmenu")
                    this.hideContextMenu(e);
                else
                    this._closeAll();
            }
            if (e.target.nodeName == "DIV" && $(e.target).children().is(this.element))
                element = $(e.target).children()[0];
            else if (e.target.nodeName == "LI" && !$(e.target).hasClass('e-separator'))
                element = e.target;
            else if (e.target.parentNode) {
                if (e.target.parentNode.nodeName == "LI" && !$(e.target.parentNode).hasClass('e-separator'))
                    element = e.target.parentNode;
            }
            else
                return false;
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();

                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": e, "ID": itemId };

                this._trigger("keydown", $.extend({ events: eventArgs }, eventArgs));
            }
            this._activeElement = null; focusedElement = this.element.find(".e-mfocused");
        },

        _OnFocusHandler: function (event) {
            if (this.model.menuType != "contextmenu" && !this.element.find(">li:first").hasClass("e-disable-item") && this._isFocused && this.element.find(".e-mhover").length == 0) {
                this.element.find(">li:first").addClass("e-mhover e-mfocused");
            }
            else this._isFocused = true;
            if (this.model.menuType != "contextmenu")
                this._activeElement = this.element.find(">li:first");
        },

        _OnFocusOutHandler: function () {
            if (!this._isFocused) {
                this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                this._closeAll();
            }
            this._isFocused = true;
        },

        _onDocumentClick: function (event) {
            if (this.model.openOnClick)
                this._hoverOpen = false;
            if (!$(event.target).parents("ul.e-menu").is(this.element)) {
                this._isFocused = false;
                this._OnFocusOutHandler();
            }
        },


        _ContextMenuHandler: function (e) {
            var isRightClick = false;
            if (e.type == "taphold")
                isRightClick = true;
            else if (e.button)
                isRightClick = (e.button == 2);
            else if (e.which)
                isRightClick = (e.which == 3); //for Opera
            var targetElement = e.target;
            if (isRightClick) {
                var evt = e;
                if (e.type == "taphold") {
                    if (e.options.type == "touchstart") evt = e.options.touches[0];
                    else evt = e.options;
                }
                var showSpeed = this._showSpeed;
                this.showContextMenu(null, null, targetElement, evt, true);
            }
            else {
                if (this._isContextMenuOpen) {
                    var hideanim = this._hideAnim;
                    var hideSpeed = this._hideSpeed;
                    this.hideContextMenu(e, hideanim, hideSpeed);
                }
            }
        },

        _calculateContextMenuPosition: function (e) {
            locationX = (e.clientX + this.element.width() < $(window).width()) ? e.pageX : e.pageX - this.element.width();
            locationY = (e.clientY + this.element.height() < $(window).height() || e.clientY < this.element.height()) ? e.pageY : e.pageY - this.element.height();
            var bodyPos = $("body").css("position") != "static" ? $("body").offset() : { left: 0, top: 0 };
            locationX -= bodyPos.left, locationY -= bodyPos.top;
            return {
                X: locationX,
                Y: locationY
            };
        },


        _onDefaultPreventer: function (e) {
            e.preventDefault();
            e.stopPropagation();
            return false;
        },


        _onContextClose: function (e) {
            var proxy = this;
            if (this._isContextMenuOpen) {
                var isRightClick = false;
                if (e.button)
                    isRightClick = (e.button == 2);
                else if (e.which)
                    isRightClick = (e.which == 3); //for Opera
                if (($(e.target).is(this.model.contextMenuTarget) || $(e.target).parents().is(this.model.contextMenuTarget) ||
                    $(e.target).is(this.element) || $(e.target).parents(".e-context").is(this.element)) &&
                    !this._checkForExclusion(e.target))
                    isRightClick = true;
                else
                    isRightClick = false;
                if (!isRightClick) {
                    var hideanim = this._hideAnim;
                    var hideSpeed = this._hideSpeed;
                    this.hideContextMenu(e, hideanim, hideSpeed);
                    var parentElements = $(e.target).parents();
                    $.each(parentElements, function (index, value) {
                        if (value.id == proxy._ContextTargetId) {
                            return;
                        }
                    });

                }
            }
        }

    });


    ej.MenuType = {
        /**  support for list of items appears as normal menu in horizontal or vertical direction. */
        NormalMenu: "normalmenu",
        /**  support for list of items appears as menu when right clicked on target area, thereby preventing browser’s default right click.. */
        ContextMenu: "contextmenu"
    };

    ej.Direction = {
        /**  support for Render sub menu popup in left direction. */
        Left: "left",
        /**  support for Render sub menu popup in Right direction. */
        Right: "right",
        /** Default opening direction of menu sub items */
        None: "none",
    };

    ej.AnimationType = {
        /**  support for disable the AnimationType while hover or click an menu items. */
        None: "none",
        /**  support for enable the AnimationType while hover or click an menu items. */
        Default: "default"
    };

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to craete a Timepicker with the Html input element
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejTimePicker", "ej.TimePicker", {

        element: null,

        model: null,
        validTags: ["input"],
        _rootCSS: "e-timepicker",
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            priority: 1
        },

        defaults: {

            cssClass: "",

            timeFormat: "",

            value: null,

            enableAnimation: true,

            locale: "en-US",

            htmlAttributes: {},

            readOnly: false,

            showPopupButton: true,

            enableStrictMode: false,

            interval: 30,

            hourInterval: 1,

            minutesInterval: 1,

            secondsInterval: 1,

            height: "",

            width: "",

            minTime: "12:00:00 AM",

            maxTime: "11:59:59 PM",

            showRoundedCorner: false,

            enableRTL: false,

            popupHeight: "191px",

            popupWidth: "auto",

            enabled: true,

            enablePersistence: false,

            focusIn: null,

            focusOut: null,

            beforeChange: null,

            change: null,

            select: null,

            create: null,

            destroy: null,

            beforeOpen: null,

            open: null,

            close: null
        },


        dataTypes: {
            timeFormat: "string",
            minTime: "string",
            maxTime: "string",
            readOnly: "boolean",
            interval: "number",
            showPopupButton: "boolean",
            locale: "string",
            hourInterval: "number",
            minutesInterval: "number",
            secondsInterval: "number",
            enabled: "boolean",
            enablePersistence: "boolean",
            enableAnimation: "boolean",
            enableStrictMode: "boolean",
            htmlAttributes: "data"
        },

        observables: ["value"],

        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
				this.element.removeAttr("disabled");
                this.model.enabled = true;
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (this.model.showPopupButton) {
                    this.timeIcon.removeClass("e-disable").attr("aria-disabled", false);
                    this.popupList.removeClass("e-disable").attr("aria-disabled", false);
                }
                if (this._isIE8) this.timeIcon.children().removeClass("e-disable");
            }
        },


        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
				this.element.attr("disabled","disabled");
                this.element.addClass("e-disable").attr("aria-disabled", true);
                if (this.model.showPopupButton) {
                    this.timeIcon.addClass("e-disable").attr("aria-disabled", true);
                    this.popupList.addClass("e-disable").attr("aria-disabled", true);
                }
                if (this._isIE8) this.timeIcon.children().addClass("e-disable");
                this._hideResult();
            }
        },


        getValue: function () {
            return this.element.val();
        },


        setCurrentTime: function () {
            if (!this.model.readOnly) this._setMask();
        },

        _timeFormat: function (format) {
            var validatedformat = this._validateTimeFormat(format);
            if (validatedformat) {
                this.model.timeFormat = validatedformat;
                this.model.value = this._localizeTime(this.getValue());
                this.element.val(this.model.value);
            }
            return validatedformat;
        },

        _getTimeFormat: function () {
            this.model.timeFormat = Globalize.culture(this.model.locale).calendar.patterns.t || "h:mm tt";
            this.seperator = this._getSeperator();
        },

        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            if (this.popupList) this.popupList.removeClass(this.model.cssClass).addClass(skin);
        },

        _localize: function (culture) {
            var currentTime = this._createObject(this.element.val());
            this.model.locale = culture;
            this._getTimeFormat()

            this.model.value = this._localizeTime(currentTime);
            this.element.val(this.model.value);
            this._getAmPm();
        },


        _init: function () {
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._initialize();
            this._render();
            this._wireEvents();
        },

        _setModel: function (options) {
            var change = false, prev = this.model.value;
            if (!ej.isNullOrUndefined(options["minTime"]) || !ej.isNullOrUndefined(options["maxTime"])) {
                if (!ej.isNullOrUndefined(options["minTime"]) && $.trim(options["minTime"]) && this._isValid(options["minTime"])) {
                    this.model.minTime = options["minTime"];
                    this._validateTimes();
                }
                if (!ej.isNullOrUndefined(options["maxTime"]) && $.trim(options["maxTime"]) && this._isValid(options["maxTime"])) {
                    this.model.maxTime = options["maxTime"];
                    this._validateTimes();
                }

                this._validateMinMax();
                if (!ej.isNullOrUndefined(options["minTime"])) options["minTime"] = this.model.minTime;
                if (!ej.isNullOrUndefined(options["maxTime"])) options["maxTime"] = this.model.maxTime;

                if (this.model.showPopupButton) this._reRenderDropdown();
                if (options["value"] == undefined) this._enableMask();
                change = true;
            }

            var option;
            for (option in options) {
                switch (option) {
                    case "timeFormat":
                        this._preTimeformat = this.model.timeFormat;
                        this._setModelOption = true;
                        var newFormat = this._timeFormat(options[option]);
                        options[option] = this.model.timeFormat;
                        if (newFormat) {
                            this.seperator = this._getSeperator();
                            if (this.model.showPopupButton) this._reRenderDropdown();
                        }
                        break;
                    case "locale":
                        this._localize(options[option]);
                        if (this.model.showPopupButton) this._reRenderDropdown();
                        break;
                    case "interval":
                        this.model.interval = options[option];
                        if (this.model.showPopupButton) this._reRenderDropdown();
                        break;
                    case "showPopupButton": this._showButton(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "height":
                        this._setHeight(options[option]); break;
                    case "width":
                        this.wrapper.width(options[option]);
                        this._setListWidth();
                        break;
                    case "value":
                        if (!this.model.enableStrictMode) {
                            if (this._isValid(options[option])) {
                                this.model.value = options[option];
                                this._enableMask();
                            }
                        }
                        else {
                            this.model.value = options[option];
                            this._enableMask();
                        }
                        options[option] = this.model.value;
                        change = true;
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = options[option];
                        break;
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "enabled": if (options[option]) this.enable(); else this.disable(); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                }
            }
            if (change) this._raiseChangeEvent(prev);
            this._checkErrorClass();
        },


        _destroy: function () {
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            this.element.removeClass("e-input").removeAttr("ondragstart draggable").val("");
            if (this.popupList) this.popupList.remove();
        },

        _initialize: function () {
            this.target = this.element[0];
            this.timeIcon = null;
            this.popupList = null;
            this.focused = false;
            this.start = 0;
            this.end = 0;
            this.min = null;
            this.max = null;
            this.incomplete = false;
            this.downPosition = 0;
            this._getAmPm();
            this.showDropdown = false;
            this._activeItem = 0;
            this.isValidState = true;
            this._manualFocus = false;
            this._isIE7 = this._checkIE7();
            if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "")
                this.model.value = this.element[0].value;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            // _getInternalEvents is used when TimePicker used as a subcontrol of DateTimePicker 
            this._getInternalEvents = false;
            if (!this.model.timeFormat) this._getTimeFormat();
            else this.seperator = this._getSeperator();
        },

        _render: function () {
            this._renderWrapper();
            this._setDimentions();
            this._renderTimeIcon();
            this._validateTimes();
            this._renderDropdown();
            this._addAttr(this.model.htmlAttributes);
            this._checkProperties();
            this._enableMask();
            this._checkErrorClass();
            this.element.attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "aria-readonly": this.model.readOnly, "value": this.model.value });
            if (this.model.showPopupButton || !ej.isNullOrUndefined(this.popupList))
                this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false });
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr("tabindex", "0");
            this.wrapper = ej.buildTag("span.e-timewidget e-widget " + this.model.cssClass + "#" + this.target.id + "_timewidget").insertAfter(this.element);
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else if (key == "readOnly" && value == "readOnly") proxy.model.readOnly = true;
                else proxy.wrapper.attr(key, value);
            });
        },
        _renderTimeIcon: function () {
            if (this.model.showPopupButton) {
                this.timeIcon = ej.buildTag("span.e-select").attr({ 'role': 'button', 'aria-label': 'select' });
                var icon = ej.buildTag("span.e-icon e-time").attr('role', 'presentation');
                if (this._isIE8) {
                    this.timeIcon.attr("unselectable", "on");
                    icon.attr("unselectable", "on");
                }
                this.timeIcon.append(icon);
                this.container.append(this.timeIcon).addClass("e-padding");
                this._on(this.timeIcon, "mousedown", this._timeIconClick);
            }
        },

        _renderDropdown: function () {
            var oldWrapper = $("#" + this.element.context.id + "_popup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            if (!this.model.showPopupButton || this.popupList) return false;
            this.popupList = ej.buildTag("div.e-time-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_popup", "", {}, { 'tabindex': 0, 'aria-activedescendant': '' });
            this.popup = this.popupList;
            this.ul = ej.buildTag("ul.e-ul");
            if (this._isIE8)
                this.ul.attr("unselectable", "on");
            var scrollDiv = ej.buildTag("div").append(this.ul);
            $('body').append(this.popupList.append(scrollDiv));
            this._renderLiTags();
            this._setListHeight();
            this._setListWidth();
            this.popupList.ejScroller({ height: this.popupList.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.popupList.ejScroller("instance");
            this.popupList.css("display", "none");
            this._listSize = this.ul.find("li").size();
        },
        _renderLiTags: function () {
            if (this.model.interval < 1) return false;
            var start, end, timeVal, interval = this.model.interval * 60000
            start = (this.model.minTime) ? this._createObject(this.model.minTime) : this._createObject("12:00:00 AM");
            end = (this.model.maxTime) ? this._createObject(this.model.maxTime) : this._createObject("11:59:59 PM");

            while (this._compareTime(end, start, true)) {
                timeVal = this._localizeTime(start);
                var litag = ej.buildTag("li", timeVal);
                if (this._isIE8)
                    litag.attr("unselectable", "on");
                this.ul.append(litag);
                start = this._createObject(start).getTime() + interval;
            }

            var liTags = this.ul.find("li");
            this._on(liTags, "mouseenter", $.proxy(this._OnMouseEnter, this));
            this._on(liTags, "mouseleave", $.proxy(this._OnMouseLeave, this));
            this._on(liTags, "click", $.proxy(this._OnMouseClick, this));
        },
        _reRenderDropdown: function () {
            this.ul.empty();
            this._renderLiTags();
            this._refreshScroller();
            this._changeActiveEle();
        },
        _refreshScroller: function () {
            var flag = this.popupList.css("display") == "none" ? true : false;
            this.popupList.css("height", "auto");
            this.popupList.find(".e-content, .e-vscroll").removeAttr("style");
            this.popupList.find(".e-vscroll div").removeAttr("style");

            if (flag) this.popupList.css("display", "block");
            this.scrollerObj.model.height = this.popupList.height();
            this.scrollerObj.model.scrollTop = 0;
            this.scrollerObj.refresh();
            if (this._isIE8) {
                $("#" + this.scrollerObj._id).children('.e-vscroll').children().attr("unselectable", "on");
                $("#" + this.scrollerObj._id).find('.e-vhandle').attr("unselectable", "on");
            }
            if (flag) this.popupList.css("display", "none");
        },

        _setListWidth: function () {
            if (this.popupList) {
                var width = this.model.popupWidth;
                if (width && width != "auto") this.popupList.css({ "width": width });
                else this.popupList.css({ "width": this.wrapper.width() });
            }
            if (this.scrollerObj) {
                this._refreshScroller();
                this._updateScrollTop();
            }
        },
        _setListHeight: function () {
            if (this.popupList) this.popupList.css({ "max-height": this.model.popupHeight || "191px" });
            if (this.scrollerObj) {
                this._refreshScroller();
                this._updateScrollTop();
            }
        },
        _updateScrollTop: function () {
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
        },
        _refreshPopup: function () {
            if (this.model.popupWidth == "auto") this.popupList.css({ "width": this.wrapper.width() });
            this._setListPosition();
            this._refreshScroller();
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popupList.outerHeight(),
            popupWidth = this.popupList.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupList.outerWidth() - elementObj.outerWidth();
            this.popupList.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popupList);
        },

        _enableMask: function () {
            if (this.model.value) {
                var flag = false;
                if ((this.model.minTime && this._compareTime(this.model.minTime, this.model.value)) ||
                    this.model.maxTime && this._compareTime(this.model.value, this.model.maxTime))
                    this.isValidState = false;
                else this.isValidState = true;

                this._setTime(this.model.value);
                if (this._getInternalEvents && !this.isValidState) this._trigger("outOfRange");
            }
            else this._setMask();
            this._changeActiveEle();
            this._preVal = this.element.val();
        },
        _setTime: function (time) {
            var modifiedTime = this._localizeTime(time);
            this.element.val(modifiedTime);
            this.model.value = modifiedTime;
        },
        _setMask: function () {
            this.model.value = new Date();
            this._enableMask();
        },

        _validateTimes: function () {
            var validatedformat = this._validateTimeFormat(this.model.timeFormat);
            if (validatedformat) this.model.timeFormat = validatedformat;
            else this.model.timeFormat = "h:mm tt";
            if (!this._isValid(this.model.minTime)) this.model.minTime = "12:00:00 AM";
            if (!this._isValid(this.model.maxTime)) this.model.maxTime = "11:59:59 PM";
            if (!this._isValid(this.model.value)) this.model.value = null;
            if (!this._checkMinMax(this.model.value) && !this.model.enableStrictMode)
                this.model.value = this.model.minTime;
            this._validateMinMax();
        },
        _validateMinMax: function () {
            if (this.model.minTime && this.model.maxTime && this._compareTime(this.model.minTime, this.model.maxTime)) {
                this.model.minTime = this.model.maxTime;
            }
        },
        _checkProperties: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.disable();
            }
            else if (this.model.enabled && this.element.hasClass("e-disable")) {
                this.model.enabled = false;
                this.enable();
            }
            this._addProperty();
            this._checkAttributes();
        },
        _addProperty: function () {
            this._setRtl(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                if (this.popupList) this.popupList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                if (this.popupList) this.popupList.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner");
                if (this.popupList) this.popupList.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                if (this.popupList) this.popupList.removeClass("e-corner");
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderTimeIcon();
                this._renderDropdown();
                this._addProperty();
            }
            else {
                this.container.removeClass("e-padding");
                this.timeIcon.remove();
                this.popupList.remove();
                this.timeIcon = this.popupList = null;
            }
        },
        _checkAttributes: function () {
            if (!this.element.attr("name"))
                this.element.attr({ "name": this.element[0].id });
            if ('ondragstart' in document.createElement('input'))
                this.element.attr({ "ondragstart": "return false" });
            if ('draggable' in document.createElement('input'))
                this.element.attr({ "draggable": "false" });
        },

        _getAmPm: function () {
            this.ttAM = $.trim(this._localizeMeridian("00:00"));
            this.ttPM = $.trim(this._localizeMeridian("23:00"));
        },

        _setDimentions: function () {
            this._setHeight(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
        },
        _setHeight: function (height) {
            if (height) this.wrapper.height(height);
            if (this._isIE7) this.element.height(this.container.height());
        },

        _validateTimeFormat: function (timeFormat) {
            var parts = timeFormat.split(" "), format = "";
            if (parts.length == 1 || parts.length == 2) {
                $(parts).each(function (i, part) {
                    format += $.trim(part) + " ";
                });
                return $.trim(format);
            }
            else return null;
        },

        _getSeperator: function () {
            var p = this._getElePlace(), formats = this.model.timeFormat.split(" ")[p.time];
            var regex = new RegExp("^[a-zA-Z0-9]+$");

            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats.charAt(i))) return formats.charAt(i);
            }
        },

        _checkInComplete: function () {
            var pos = this._getCaretSelection(), cursor = this._getStartEnd(pos);
            var replace = "00", selected = this._getSelectedValue(cursor), category = this._getCategory(cursor);
            if (pos.end - pos.start == this.element.val().length) this._checkAll();

            if (category && category != "tt") {
                this._findCategoryPosition(category);
                if (selected == "__") {
                    if (category == "h" || category == "hh") replace = "12";
                    this._changeToDefault(replace);
                }
                else if (category.length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.target.value, this.start, this.end, selected));
                }
            }
        },
        _checkAll: function () {
            var i, p = this._getElePlace(), categories = this.model.timeFormat.split(" ")[p.time].split(this.seperator);
            for (i = 0; i < categories.length; i++) {
                this._findCategoryPosition(categories[i]);
                var selected = this._getSelectedValue({ start: this.start, end: this.end });

                if (categories[i].length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.element.val(), this.start, this.end, selected));
                }
            }
        },

        _changeToDefault: function (replace) {
            this.incomplete = true;
            var preVal = this.element[0].value
            this.element[0].value = this._replaceAt(this.target.value, this.start, this.end, replace);
            var timeValue = this._checkExceedRange(this.target.value);
            if (!!timeValue) {
                this._setTime(this.model[timeValue]);
            }
            this._setSelection(this.start, this.end);
            this._raiseChangeEvent(preVal);
        },

        _setSelection: function (start, end) {
            var element = this.element[0];

            if (element.setSelectionRange)
                element.setSelectionRange(start, end);
            else if (element.createTextRange) {
                // For lower version browsers (IE8, IE7 ...)
                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', end);
                element.moveStart('character', start);
                element.select();
            }
        },

        _getSelectedValue: function (cursor) {
            return this.target.value.substring(cursor.start, cursor.end);
        },

        _getMinMax: function (currPart, keydown) {
            if (currPart == "hh" || currPart == "h") {
                this.min = 1; this.max = 11;
                if (keydown) this.max = 12;
            }
            else if (currPart == "HH" || currPart == "H") {
                this.min = 0; this.max = 23;
            }
            else if (currPart == "mm" || currPart == "m" || currPart == "ss" || currPart == "s") {
                this.min = 0; this.max = 59;
            }
        },

        _focusElement: function () {
            this._manualFocus = true;
            this.element.focus();
        },
        _targetFocus: function (e) {
            e.preventDefault();
            this.focused = true;
            this.element.bind('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
            this.wrapper.addClass("e-focus").removeClass("e-error").attr('aria-invalid', "false");
            if (!this._manualFocus) {
                this._findCategoryPosition(this._getLeast(false));
                this._setSelection(this.start, this.end);
            }
            this._manualFocus = false;
            this._prevTimeVal = this.element.val();
            this._raiseEvent("focusIn");
        },
        _targetBlur: function () {
            this.focused = false;
            this.element.unbind('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
            this.wrapper.removeClass("e-focus");
            this._checkInComplete();
            if (!this._checkMinMax(this.target.value)) {
                if (!this.model.enableStrictMode) {
                    this.element.val(this._prevTimeVal);
                    this.model.value = this._prevTimeVal;
                    this.isValidState = true;
                }
                else
                    this.isValidState = false;
            }
            else this.isValidState = true;
            this._checkErrorClass();
            this._raiseChangeEvent();
            this._raiseEvent("focusOut");
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error").attr('aria-invalid', "false");
            else this.wrapper.addClass("e-error").attr('aria-invalid', "true");
        },

        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;
            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }
            // For lower version browsers (IE8, IE7 ...)
            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },

        _mouseDownOnInput: function (e) {
            if (!this.focused) this._focusElement();
            this.downPosition = this._getCaretSelection();
            this._checkInComplete();
            $(document).bind("mouseup", $.proxy(this._mouseUpOnInput, this));
        },

        _mouseUpOnInput: function (e) {
            e.preventDefault();
            $(document).unbind("mouseup", $.proxy(this._mouseUpOnInput, this));
            var pos = this._getCaretSelection();

            if (this.incomplete) {
                this.incomplete = false;
                pos = this.downPosition;
            }
            var cursor = this._getStartEnd(pos);
            this._setSelection(cursor.start, cursor.end);
        },

        _getCategoryPosition: function (category) {
            var s = 0, e = 0, parts = this.target.value.split(" "), p = this._getElePlace(), sep = this.seperator, valid = false;
            var fParts = this.model.timeFormat.split(" ")[p.time].split(sep);
            var tParts = parts[p.time].split(sep);
            if (fParts.length > tParts.length) return { start: s, end: e, isValid: valid };

            if (category == "tt") {
                if (parts[p.tt] == this.ttAM || parts[p.tt] == this.ttPM) {
                    if (p.tt == 0) s = 0;
                    else s = parts[p.time].length + 1;
                    e = s + parts[p.tt].length;
                    valid = true;
                }
            }
            else {
                if (p.time == 0) s = 0;
                else s = parts[p.tt].length + 1;

                var index = fParts.indexOf(category);
                if (index != -1) {
                    for (var i = 0; i < fParts.length; i++) {
                        e = tParts[i].length + 1;
                        if (i == index) break;
                        else s += e;
                    }
                    e += s - 1;
                    valid = true;
                }
            }
            return { start: s, end: e, isValid: valid };
        },
        _getCategory: function (cursor) {
            var parts = this.model.timeFormat.split(" "), sep = this.seperator;
            var p = this._getElePlace();
            if (cursor.isTT) return parts[p.tt];
            else return parts[p.time].split(sep)[cursor.index];
        },

        _getStartEnd: function (pos) {
            var sep = this.seperator;
            var value = this.element.val(), parts = value.split(" "), s = 0, e = 0, place = tt = null, i, j;

            for (j = 0; j < parts.length; j++) {
                if (parts[j] != this.ttAM && parts[j] != this.ttPM) {
                    var time = parts[j].split(sep), tempS = s, tempE = s + time[0].length;
                    for (i = 0; i < time.length; i++) {
                        e = time[i].length + s;
                        if (pos.start <= e) {
                            place = i;
                            tt = false;
                            j = parts.length;
                            break;
                        }
                        else s += time[i].length + 1;
                    }
                }
                else {
                    if (pos.start <= s + parts[j].length) {
                        e = parts[j].length + s;
                        place = 0;
                        tt = true;
                        j = parts.length;
                        break;
                    }
                    else s += parts[j].length + 1;
                }
            }
            if (place == null) s = tempS, e = tempE, place = 0, tt = false;

            return { start: s, end: e, index: place, isTT: tt };
        },

        _modifyValue: function (isIncrement) {
            this._checkInComplete();
            var pos = this._getCaretSelection(), cursor;
            if (pos.start == pos.end) {
                var cate = this._getLeast(true);
                var position = this._getCategoryPosition(cate);
                cursor = this._getStartEnd(position);
            }
            else cursor = this._getStartEnd(pos);
            this.start = cursor.start; this.end = cursor.end;

            this._changeValue(cursor, isIncrement);
        },

        _keyUpOnInput: function (e) {
            e.preventDefault();
            if (this._preVal != this.element.val()) {
                this._preVal = this.element.val();
            }
        },

        _getNextCategory: function (cate, direction) {
            var categories = [], sep = this.seperator;
            var fParts = this.model.timeFormat.split(" ");
            $(fParts).each(function (i, part) {
                if (part == "tt") categories.push(part);
                else {
                    var inner = part.split(sep);
                    categories = inner.concat(categories);
                }
            });
            var index = categories.indexOf(cate), ix;
            if (index != -1) {
                if (direction) {
                    if (index == 0) ix = categories.length - 1;
                    else ix = index - 1;
                }
                else {
                    if (index == categories.length - 1) ix = 0;
                    else ix = index + 1;
                }
                return categories[ix];
            }
            return cate;
        },
        _getElePlace: function () {
            var fParts = this.model.timeFormat.split(" "), time, tt;
            if (fParts[0] == "tt") time = 1, tt = 0;
            else time = 0, tt = 1;
            return { time: time, tt: tt };
        },
        _movePosition: function (pos, direction) {
            var cursor = this._getStartEnd(pos);
            var currCate = this._getCategory(cursor);
            if (!currCate) currCate = this._getLeast(direction);
            var next = this._getNextCategory(currCate, direction);
            var cursor = this._getCategoryPosition(next);

            if (cursor.isValid) {
                this._setSelection(cursor.start, cursor.end);
            }
        },

        _keyDownOnInput: function (e) {
            if (this.model.readOnly && !this._readOnlyKeys(e)) return false;
            var pos, cursor, category, key = e.keyCode;
            // _getInternalEvents is set to true when TimePicker used inside DateTimePicker control
            // in DateTimePicker control it allows Up, Down, Home, End, Tab keys only
            if (this._getInternalEvents && key != 38 && key != 40 && key != 36 && key != 35 && key != 9) return false;
            // Up, Down, Esc
            if (this.showDropdown && key != 38 && key != 40 && key != 27 && !this._readOnlyKeys(e)) return false;
            else if (this.showDropdown && (key == 37 || key == 39)) e.keyCode = (key == 37) ? 38 : 40;

            pos = this._getCaretSelection();
            cursor = this._getStartEnd(pos);
            category = this._getCategory(cursor);

            switch (e.keyCode) {
                case 38:
                    e.preventDefault();
                    if (!this.showDropdown)
                        this._modifyValue(true);
                    else {
                        if (this._activeItem > 1) this._activeItem -= 1;

                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 40:
                    e.preventDefault();
                    if (e.altKey && this.model.showPopupButton)
                        this._showhidePopup();
                    else if (!this.showDropdown)
                        this._modifyValue(false);
                    else {
                        if (this._activeItem < this._listSize) this._activeItem += 1;

                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 37:
                    e.preventDefault();
                    this._checkInComplete();
                    if (pos.start == pos.end) this._setSelection(pos.start - 1, pos.start - 1);
                    else this._movePosition(pos, true);
                    break;
                case 39:
                    e.preventDefault();
                    this._checkInComplete();
                    if (pos.start == pos.end) this._setSelection(pos.start + 1, pos.start + 1);
                    else this._movePosition(pos, false);
                    break;

                case 36:
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var homecate = this._firstlastVal(true);
                        var hPos = this._getCategoryPosition(homecate);
                        if (hPos.isValid) this._setSelection(hPos.start, hPos.end);
                    }
                    else {
                        this._activeItem = 1;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 35:
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var endcate = this._firstlastVal(false);
                        var ePos = this._getCategoryPosition(endcate);
                        if (ePos.isValid) this._setSelection(ePos.start, ePos.end);
                    }
                    else {
                        this._activeItem = this._listSize;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 9:
                    if (this._getInternalEvents) break;
                    this._hideResult();
                    var flag = null;
                    if (e.shiftKey && pos.start > 0) flag = true;
                    else if (!e.shiftKey && pos.end < this.element.val().length) flag = false;
                    if (flag != null) {
                        e.preventDefault();
                        this._checkInComplete();
                        this._movePosition(pos, flag);
                    }
                    break;
                case 13:
                    if (!this.showDropdown) {
                        this._checkInComplete();
                        this._raiseChangeEvent();
                        break;
                    }
                case 27:
                    e.preventDefault();
                    this._hideResult();
                    break;
                case 8:
                case 46:
                    e.preventDefault();
                    if (category && category != "tt") {
                        this._findCategoryPosition(category);
                        var _doBackspace = (key == 8 && pos.start != this.start), _doDelete = (key == 46 && pos.end != this.end), len;
                        len = this.end - this.start;

                        if ((pos.start != pos.end || len == 1) && (_doBackspace || _doDelete || pos.start != pos.end)) {
                            var s1 = this.start, s2 = this.end, te;
                            this.element[0].value = this._replaceAt(this.target.value, s1, s2, "__");
                            te = (s2 - s1 != 2) ? s2 + 1 : s2;
                            this._setSelection(s1, te);
                        }
                        else {
                            if (_doBackspace) {
                                this.element[0].value = this._replaceAt(this.target.value, pos.start - 1, pos.start, "");
                                this._setSelection(pos.start - 1, pos.start - 1);
                            }
                            else if (_doDelete) {
                                this.element[0].value = this._replaceAt(this.target.value, pos.end, pos.end + 1, "");
                                this._setSelection(pos.end, pos.end);
                            }
                        }
                    }
                    break;
            }

            var currSelection = this._getSelectedValue(cursor);
            var unicode = e.keyCode ? e.keyCode : e.charCode, actualkey;

            if (e.keyCode > 47 && e.keyCode < 58)
                actualkey = String.fromCharCode(unicode);
            else if (e.keyCode > 95 && e.keyCode < 106)
                actualkey = String.fromCharCode(unicode - 48);
            if (category == "tt" && ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 64 && e.keyCode < 91) || (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106))) {
                e.preventDefault();
                var ttPos = this._getCategoryPosition(category);
                this.start = ttPos.start;
                this.end = ttPos.end;
                this._changeAmPm(currSelection);
                this._raiseChangeEvent();
            }
            if ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
                if (category != "tt") {
                    this._getMinMax(category, true);
                    if (pos.start == pos.end) {
                        this._findCategoryPosition(category);
                        var newVal;
                        if (pos.start == this.start) newVal = actualkey + currSelection;
                        else newVal = currSelection + actualkey;
                        if (newVal.length > 2 || !(Number(newVal) >= this.min && this.max >= Number(newVal)))
                            e.preventDefault();
                    }
                    else if (!(Number(actualkey) >= this.min && this.max >= Number(actualkey)))
                        e.preventDefault();
                }
            }
            else if (!this._allowKeyCodes(e))
                !this.model.enableStrictMode ? e.preventDefault() : e.stopPropagation();
        },

        _allowKeyCodes: function (e) {
            if ((e.ctrlKey && (e.keyCode == 65 || e.keyCode == 67 || e.keyCode == 90 || e.keyCode == 89))
                || e.keyCode == 9 || e.keyCode == 116 || e.keyCode == 13)
                return true;
            return false;
        },
        _readOnlyKeys: function (e) {
            if (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || this._allowKeyCodes(e))
                return true;
            return false;
        },

        _firstlastVal: function (initial) {
            var parts = this.model.timeFormat.split(" "), sep = this.seperator;
            if (initial) {
                if (parts[0] != "tt") return parts[0].split(sep)[0];
                return "tt";
            }
            else {
                if (parts[0] != "tt") return "tt";
                else if (parts[1]) {
                    var lastItem = parts[1].split(sep);
                    return lastItem.length ? lastItem[lastItem.length - 1] : "tt";
                }
                return "tt";
            }
        },

        _mouseWheel: function (event) {
            event.preventDefault();
            if (this.model.readOnly) return false;
            var delta, rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._modifyValue(true);
            else if (delta < 0)
                this._modifyValue(false);
        },

        _addListHover: function () {
            this._addSelected();
            this._updateScrollTop();
        },
        _addSelected: function () {
            this.ul.find("li").removeClass("e-active");
            var activeItem = this._getActiveItem();
            activeItem.addClass("e-active");
        },
        _getActiveItem: function () {
            return $(this.ul.find("li")[this._activeItem - 1]);
        },

        _timeIconClick: function (event) {
            event.preventDefault();
            if (!this.model.enabled || this.model.readOnly || this.ul.find("li").length < 1) return false;
            this._showhidePopup();
            var len = this.element.val().length;
            this._setSelection(len, len);
        },
        _showhidePopup: function () {
            if (this._getInternalEvents) return false;
            if (!this.showDropdown)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            this._raiseEvent("beforeOpen");
            this._refreshPopup();
            if (!this.focused) this._focusElement();
            this._changeActiveEle();
            var proxy = this, sTop = this._vissibleAndCalculateTop();
            this.popupList.slideDown(this.model.enableAnimation ? 200 : 0, "easeOutQuad", function () {
                $(document).bind("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
            });
            this.scrollerObj.setModel({ "scrollTop": sTop });
            this.showDropdown = true;
            this._listSize = this.ul.find("li").size();
            $(window).bind("resize", $.proxy(this._OnWindowResize, this));
            this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._raiseEvent("open");
            this.wrapper.addClass("e-active");
        },
        _hideResult: function () {
            if (this.showDropdown && !this._getInternalEvents) {
                this.showDropdown = false;
                this.popupList.slideUp(this.model.enableAnimation ? 100 : 0, "easeOutQuad");
                $(document).unbind("mousedown", $.proxy(this._OnDocumentClick, this));
                $(window).unbind("resize", $.proxy(this._OnWindowResize, this));
                this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
                this._raiseEvent("close");
                this.wrapper.removeClass("e-active");
            }
        },

        _vissibleAndCalculateTop: function () {
            this.popupList.css({ "display": "block" });
            var scrollTop = this._calcScrollTop();
            this.popupList.css({ "display": "none" });
            return scrollTop;
        },
        _calcScrollTop: function () {
            var ulH = this.ul.outerHeight(), liH = this.ul.find("li").outerHeight(), index, top;
            index = this.ul.find("li.e-active").index();
            top = (liH * index) - ((this.popupList.outerHeight() - liH) / 2);
            return top;
        },
        _changeActiveEle: function () {
            if (!this.model.showPopupButton || !this.popupList) return false;
            var elements = this.ul.find("li");
            var currTime = this.element.val(), firstTime = elements.first().html(), index;
            index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
            index = Math.round(index);
            this._activeItem = (index == elements.length) ? index : index + 1;
            if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem)) this._activeItem = 1;
            this._addListHover();
        },

        _OnDocumentClick: function (e) {
            if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-time-popup").is(this.popupList) &&
                !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-timewidget").is(this.wrapper)) {
                this._hideResult();
            }
            else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-time-popup").is(this.popupList))
                e.preventDefault();
        },
        _OnWindowResize: function (e) {
            this._refreshPopup();
        },

        _OnMouseEnter: function (e) {
            var targetEle = e.target;
            this.ul.find("li").removeClass("e-hover");
            $(targetEle).addClass("e-hover");
        },
        _OnMouseLeave: function (e) {
            this.ul.find("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            e.preventDefault();
            if (this.model.enabled && !this.model.readOnly) {
                this._activeItem = $(e.target).index() + 1;
                this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false });
                $(e.target).attr({ 'aria-selected': true, 'tabindex': 0 });
                this._addSelected();
                this._selectTimeItem($(e.target));
            }
            this._showhidePopup();
        },
        _selectTimeItem: function (ele) {
            this._beforeChange(ele);
            var flag = this._raiseChangeEvent();
            if (flag)
                this._trigger("select", { value: this.model.value, prevTime: this._previousValue });
        },

        _findCategoryPosition: function (category) {
            if (category == "least") category = this._getLeast(true);
            var pos = this._getCategoryPosition(category);
            this.start = pos.start;
            this.end = pos.end;
        },

        _getLeast: function (lower) {
            var formats = this.model.timeFormat.split(" "), sep = this.seperator, res = null;
            $(formats).each(function (i, e) {
                if (e != "tt") {
                    var times = e.split(sep);
                    if (lower) res = times[times.length - 1];
                    else res = times[0];
                }
            });
            return res;
        },

        _changeValue: function (cursor, isIncrement) {
            var preVal = this.target.value, currValue, category = this._getCategory(cursor);
            if (!category) return false;
            this._setSelection(this.start, this.end);
            currValue = this.target.value.substring(this.start, this.end);
            if (this._checkMinMax(this.target.value)) {
                if (currValue != this.ttAM && currValue != this.ttPM) {
                    currValue = this._changeCurrentValue(currValue, category, isIncrement);
                    if (category.length != 1) currValue = this._changeWhole(currValue);
                    this._findCategoryPosition(category);
                    this.model.value = this._replaceAt(this.target.value, this.start, this.end, currValue);
                    this.element.val(this.model.value);
                    this.end = this.start + currValue.toString().length;
                    this._setSelection(this.start, this.end);
                }
                else this._changeAmPm(currValue);
            }
            else {
                var timeValue = this._checkExceedRange(this.target.value);
                this._setTime(this.model[timeValue]);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }

            if (!this._checkMinMax(this.target.value)) {
                this.element.val(preVal);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }
            else this._raiseChangeEvent(preVal);
        },

        _checkMinMax: function (value) {
            var res = this._checkExceedRange(value);
            return !res;
        },
        _checkExceedRange: function (value) {
            if (this.model.minTime && !this._compareTime(value, this.model.minTime, true)) return "minTime";
            if (this.model.maxTime && !this._compareTime(this.model.maxTime, value, true)) return "maxTime";
            return null;
        },

        _changeWhole: function (currValue) {
            return currValue > 9 ? "" + currValue : "0" + currValue;
        },
        _changeAmPm: function (ampm) {
            ampm = ampm == this.ttAM ? this.ttPM : this.ttAM;
            this.element.val(this._replaceAt(this.target.value, this.start, this.end, ampm));
            this._setSelection(this.start, this.end);
        },
        _changeMinute: function (isIncrement) {
            var formats = ["mm", "m"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var minute = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (minute == this.max) {
                        minute = this.min;
                        this._changeHour();
                    }
                    else minute += 1;
                }
                else {
                    if (minute == this.min) {
                        minute = this.max;
                        this._changeHour();
                    }
                    else minute -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) minute = this._changeWhole(minute);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, minute));
            }
        },
        _changeHour: function (isIncrement) {
            var formats = ["hh", "h", "HH", "H"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var hour = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (hour == this.max) {
                        hour += 1;
                        this._changeMeridian();
                    }
                    else if (hour > this.max) hour = this.min;
                    else hour += 1;
                }
                else {
                    if (hour == this.min) hour = this.max + 1;
                    else if (hour > this.max) {
                        hour = this.max;
                        this._changeMeridian();
                    }
                    else hour -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) hour = this._changeWhole(hour);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, hour));
            }
        },
        _getExactFormat: function (cate) {
            var tFormat = this.model.timeFormat;
            for (var i = 0; i < cate.length; i++) {
                if (tFormat.indexOf(cate[i]) != -1) return cate[i];
            }
            return null;
        },
        _changeMeridian: function () {
            var start = this.model.timeFormat.indexOf("tt");
            if (start != -1) {
                this._findCategoryPosition("tt");
                var meridian = this.target.value.substring(this.start, this.end);
                meridian = (meridian == this.ttAM) ? this.ttPM : this.ttAM;
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, meridian));
            }
        },
        _changeCurrentValue: function (current, category, isIncrement) {
            current = Number(current);
            var c = category, step = 1, change = true;
            this._getMinMax(c);

            if (c == "hh" || c == "h" || c == "HH" || c == "H") step = this.model.hourInterval;
            else if (c == "mm" || c == "m") step = this.model.minutesInterval;
            else if (c == "ss" || c == "s") step = this.model.secondsInterval;
            if (step <= 0) return current;

            if (isIncrement) {
                if ((c == "hh" || c == "h") && current > this.max) current = this.min - 1 + step;
                else if (current < this.max) current += step;
                else {
                    change = false;
                    if (c != "hh" && c != "h") current = this.min - 1 + step;
                    else current += step;
                    this._changeAdjacent(c, isIncrement);
                }
                if ((c == "hh" || c == "h") && current == this.max + 1)
                    change && this._changeAdjacent(c, isIncrement);
                else if (current > this.max + 1) {
                    current = current - (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
                if ((c != "hh" && c != "h") && current == this.max + 1) {
                    current = this.min;
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            else {
                if ((c != "hh" && c != "h") && current > this.min) current -= step;
                else if ((c == "hh" || c == "h") && current > this.min && current <= this.max) current -= step;
                else if ((c == "hh" || c == "h") && current == this.min) current = this.max + 2 - step;
                else {
                    change = false;
                    current = this.max + 1 - step;
                    this._changeAdjacent(c, isIncrement);
                }
                if (current < this.min) {
                    current = current + (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            return current;
        },
        _changeAdjacent: function (c, isIncrement) {
            if (c == "ss" || c == "s") this._changeMinute(isIncrement);
            else if (c == "mm" || c == "m") this._changeHour(isIncrement);
            else if (c == "hh" || c == "h" || c == "HH" || c == "H") this._changeMeridian();
        },

        _valueChange: function (e) {
            this._raiseChangeEvent();
        },

        _beforeChange: function (ele) {
            if (!this._raiseEvent("beforeChange")) {
                this.element.val(ele.text());
            }
            return true;
        },

        _raiseChangeEvent: function (prev) {
            prev = (prev == undefined) ? this.model.value : prev;
            this._previousValue = prev;
            if (prev == this.target.value) return false;
            if (this._checkMinMax(this.target.value)) this.isValidState = true;
            else this.isValidState = false;
            this.model.value = this.target.value;
            this._raiseEvent("change", { prevTime: this._previousValue });
            this._raiseEvent("_change", { prevTime: this._previousValue });
            return true;
        },
        _raiseEvent: function (name) {
            return (this._trigger(name, { value: this.model.value, prevTime: this._previousValue }));
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _replaceAt: function (mainString, from, to, replace) {
            return mainString.substring(0, from) + replace + mainString.substring(to);
        },
        _localizeTime: function (value) {
            return $.trim(Globalize.format(this._createObject(value), this.model.timeFormat, this.model.locale));
        },
        _localizeMeridian: function (value) {
            return $.trim(Globalize.format(this._createObject(value), "tt", this.model.locale));
        },
        _compareTime: function (time1, time2, orEqual) {
            orEqual = (!orEqual) ? false : true;
            if (orEqual) return this._parse(time1) >= this._parse(time2);
            else return this._parse(time1) > this._parse(time2);
        },
        _isValid: function (time) {
            time = this._createObject(time);
            return time && typeof time.getTime === "function" && isFinite(time.getTime());
        },
        _parse: function (time) {
            return Date.parse(this._createObject(time));
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _createObject: function (value) {
            if (typeof value === "string" || value == null) {
                var format = this._setModelOption ? this._preTimeformat : this.model.timeFormat;
                var obj = Globalize.parseDate("1/1/2000 " + value, Globalize.culture(this.model.locale).calendar.patterns.d + " " + format);
                this._setModelOption = false;
                if (!obj) {
                    var isJSONString = new Date(value);
                    if (!isNaN(Date.parse(isJSONString)) && !ej.isNullOrUndefined(value))
                        return this._setEmptyDate(value);
                    else
                        obj = new Date("1/1/2000 " + value);
                }
                return obj;
            }
            else if (typeof value === "number")
                return new Date(value);
            else if (value instanceof Date)
                return this._setEmptyDate(value);
        },


        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.element, "mousedown", this._mouseDownOnInput);
            this._on(this.element, "keydown", this._keyDownOnInput);
            this._on(this.element, "keyup", this._keyUpOnInput);
        }
    });
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Waiting pop elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejWaitingPopup", "ej.WaitingPopup", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,
        _rootCSS: "e-waitingpopup",


        defaults: {

            showOnInit: false,

            target: null,

            showImage: true,

            htmlAttributes: {},

            cssClass: "",

            text: null,

            template: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            showOnInit: "boolean",
            showImage: "boolean",
            cssClass: "string"
        },

        show: function () {
            this._refreshPanel();
            this.maindiv.css("display", "block");
            this.model.showOnInit = true;
        },

        hide: function () {
            this.maindiv.css("display", "none");
            this.model.showOnInit = false;
        },

        refresh: function () {
            this._refreshPanel();
        },

        _setText: function (text) {
            if (text) {
                if (this.popupText) this.popupText.html(text);
                else {
                    this._generateTextTag(text);
                    this._setContentPosition();
                }
            }
            else if (this.popupText) {
                this.popupText.remove();
                this.popupText = null;
            }
        },

        _showImage: function (boolean) {
            if (boolean) {
                this.popupImage = ej.buildTag("span.e-image");
                if (this.popupText) this.popupImage.insertBefore(this.popupText);
                else this.maindiv.append(this.popupImage);
            }
            else if (this.popupImage) {
                this.popupImage.remove();
                this.popupImage = null;
            }
        },

        _setTemplate: function () {
            var template = this.model.template;
            if (typeof template === "string") template = $(template);
            if (typeof template === "object" && typeof template.css === "function")
                this.templateObj = template;
            else
                this.templateObj = ej.buildTag("div", "", { "text-align": "center" }).append(template);

            this.templateObj.css({ "visibility": "visible", "display": "block" });
            this.maindiv.append(this.templateObj);
        },

        _setTheme: function (skin) {
            this.maindiv.removeClass(this.model.cssClass).addClass(skin);
        },



        _init: function () {
            this._initialize();
            this._render();
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "text": this._setText(options[option]); break;
                    case "cssClass ": this._setTheme(options[option]); break;
                    case "htmlAttributes ": this._addAttr(options[option]); break;
                    case "showOnInit": this._setVisibility(options[option]); break;
                    case "showImage": this._showImage(options[option]); this._setContentPosition(); break;
                    case "target": this.model.target = options[option]; this._setTarget(); this.refresh(); break;
                    case "template":
                        this.maindiv.empty();
                        if (options[option]) {
                            this.model.template = options[option];
                            this._setTemplate();
                        }
                        else {
                            this.model.template = options[option] = null;
                            this._showImage(this.model.showImage);
                            if (this.model.text) this._generateTextTag(this.model.text);
                        }
                        this._setContentPosition();
                        break;
                }
            }
        },
        _setTarget: function () {
            this.targetElement = this.model.target ? $(this.model.target) : this.element;
        },
        _destroy: function () {
            this.maindiv.remove();
        },

        _initialize: function () {
            this.maindiv = null;
            this.popupText = null;
            this.popupImage = null;
            this.templateObj = null;
            this.targetElement = null;
        },


        _render: function () {
            this._setTarget();
            var oldWrapper = $("#" + this.element.context.id + "_WaitingPopup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.maindiv = ej.buildTag("div.e-waitpopup-pane e-widget " + this.model.cssClass + "#" + this.element[0].id + "_WaitingPopup");
            if (this.model.template) {
                this._setTemplate();
            }
            else {
                this._showImage(this.model.showImage);
                if (this.model.text) {
                    this._generateTextTag(this.model.text);
                }
            }
            $('body').append(this.maindiv);
            this._setVisibility(this.model.showOnInit);
            this._addAttr(this.model.htmlAttributes);
        },

        _refreshPanel: function () {
            this.maindiv.width(this.targetElement.outerWidth());
            this.maindiv.height(this.targetElement.outerHeight());
            this._setPanelPosition();
            this._setContentPosition();
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.maindiv.addClass(value);
                else proxy.maindiv.attr(key, value)
            });
        },


        _setPanelPosition: function () {
            var location = ej.util.getOffset(this.targetElement);
            this.maindiv.css({
                "position": "absolute",
                "left": Math.ceil(location.left) + "px",
                "top": Math.ceil(location.top) + "px",
                "z-index": this._maxZindex() + 1
            });
        },

        _setContentPosition: function () {
            if (this.model.template == null) {
                var textHeight = 0, imgHeight = 0, targetHeight, top = null;
                targetHeight = this.targetElement.outerHeight();
                if (this.popupText) textHeight = this.popupText.outerHeight();
                if (this.popupImage) imgHeight = this.popupImage.outerHeight();

                if (this.popupImage) {
                    top = Math.ceil((targetHeight - (imgHeight + textHeight)) / 2);
                    this.popupImage.css("top", top + "px");
                }
                if (this.popupText) {
                    if (!top) top = Math.ceil((targetHeight - textHeight) / 2);
                    this.popupText.css("top", top + "px");
                }
            }
            else {
                this.templateObj.css({
                    "position": "relative",
                    "left": Math.ceil((this.targetElement.outerWidth() - this.templateObj.outerWidth()) / 2),
                    "top": Math.ceil((this.targetElement.outerHeight() - this.templateObj.outerHeight()) / 2)
                });
            }
        },

        _generateTextTag: function (text) {
            this.popupText = ej.buildTag("div.e-text", text);
            this.maindiv.append(this.popupText);
        },

        _setVisibility: function (showOnInit) {
            if (showOnInit) this.show();
            else this.hide();
        },

        _maxZindex: function () {
            return ej.util.getZindexPartial(this.element);
        }
    });
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejButton", "ej.Button", {

        element: null,

        model: null,
        validTags: ["button", "input"],
        _setFirst: false,

        _rootCSS: "e-button",

        defaults: {

            size: "normal",

            type: "submit",

            height: "",

            width: "",

            enabled: true,

            htmlAttributes: {},

            text: null,

            contentType: "textonly",

            imagePosition: "imageleft",

            showRoundedCorner: false,

            cssClass: "",

            prefixIcon: null,

            suffixIcon: null,

            enableRTL: false,

            repeatButton: false,

            timeInterval: "150",

            create: null,

            click: null,

            destroy: null
        },


        dataTypes: {
            size: "enum",
            enabled: "boolean",
            type: "enum",
            showRoundedCorner: "boolean",
            text: "string",
            contentType: "enum",
            imagePosition: "enum",
            prefixIcon: "string",
            suffixIcon: "string",
            cssClass: "string",
            repeatButton: "boolean",
            enableRTL: "boolean",
            timeInterval: "string",
            htmlAttributes: "data"
        },

        disable: function () {
            this.element.addClass("e-disable").attr("aria-disabled", true);
            this.model.enabled = false;
        },

        enable: function () {
            this.element.removeClass("e-disable").attr("aria-disabled", false);
            this.model.enabled = true;
        },

        _init: function () {
            this._initialize();
            this._render();
            this._controlStatus(this.model.enabled);
            this._wireEvents(this.model.repeatButton);
            this._addAttr(this.model.htmlAttributes);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else proxy.element.attr(key, value);
                if (key == "disabled" && value == "disabled") proxy.disable();
            });
        },

        _destroy: function () {
            this.element.removeClass(this.model.cssClass + " e-btn e-select e-disable e-corner e-widget");
        },


        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "size":
                        this._setSize(options[option]);
                        break;
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "contentType":
                        this._setContentType(options[option]);
                        break;
                    case "imagePosition":
                        this._setImagePosition(options[option]);
                        break;
                    case "text":
                        this._setText(options[option]);
                        break;
                    case "prefixIcon":
                        this._setMajorIcon(options[option]);
                        break;
                    case "suffixIcon":
                        this._setMinorIcon(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "timeInterval":
                        this.model.timeInterval = options[option];
                        break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                }
            }
        },


        _setSize: function (val) {
            this.element.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal');
            this.element.addClass("e-btn-" + val);
        },
        _setType: function (val) {
            this.element.prop({ "type": val });
        },

        _setHeight: function (val) {
            this.element.css('height', val);
        },

        _setWidth: function (val) {
            this.element.css('width', val);
        },

        _setText: function (val) {
            if (this.buttonType == "inputButton") {
                this.element.val(val);
            } else {
                if (this.model.contentType == ej.ContentType.TextOnly) {
                    this.element.text(val);
                } else {
                    this.textspan.text(val);
                }
            }
            this.model.text = val;
        },

        _setMajorIcon: function (val) {
            this.majorimgtag.removeClass(this.model.prefixIcon);
            this.majorimgtag.addClass(val);
            this.model.prefixIcon = val;
        },

        _setMinorIcon: function (val) {
            this.minorimgtag.removeClass(this.model.suffixIcon);
            this.minorimgtag.addClass(val);
            this.model.suffixIcon = val;
        },

        _setContentType: function (val) {
            if (val != this.model.contentType) {
                this.element.empty();
                this.model.contentType = val;
                this._renderButtonNormal();
            }
        },

        _setImagePosition: function (val) {
            if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
                this.element.empty();
                this.model.imagePosition = val;
                this._renderButtonNormal();
            }
        },

        _setRTL: function (val) {
            if (val) {
                this.element.addClass("e-rtl");
            } else {
                this.element.removeClass("e-rtl");
            }
        },

        _controlStatus: function (value) {
            if (!value) {
                this.disable();
            } else {
                this.enable();
            }
        },

        _setSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
        },

        _initialize: function () {
            if (this.element.is("input")) {
                this.buttonType = "inputButton";
            }
            else if ((this.element.is("a")) || (this.element.is("button"))) {
                this.buttonType = "tagButton";
            }
            else {
                this.element.removeClass("e-button");
            }
            if (this.element.attr("type")) {
                this.model.type = this.element.attr("type");
            }
            else
                this._setType(this.model.type);
            this._timeout = null;
        },


        _render: function () {
            this._setSize(this.model.size);
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            this._setRTL(this.model.enableRTL);
            this.element.addClass(this.model.cssClass + " e-btn e-select e-widget").attr("role", "button");
            if (this.buttonType == "inputButton") {
                this.element.addClass("e-txt");
                if ((this.model.text != null) && (this.model.text != "")) {
                    this.element.val(this.model.text);
                } else {
                    this.model.text = this.element.val();
                }
            } else { this._renderButtonNormal(); }
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.text)
                this.element.attr("aria-describedby", this.model.text);
        },

        _renderButtonNormal: function () {
            if ((this.model.text == null) || (this.model.text == "")) {
                this.model.text = this.element.text();
            }
            this.element.empty();
            /*Image and Text*/
            this.textspan = ej.buildTag('span.e-btntxt', this.model.text);
            if (this.model.contentType.indexOf("image") > -1) {
                this.majorimgtag = ej.buildTag('span.e-icon ' + this.model.prefixIcon);
                this.minorimgtag = ej.buildTag('span.e-icon ' + this.model.suffixIcon);
                this.imgtxtwrap = ej.buildTag('div');
            }

            if (this.model.contentType == ej.ContentType.TextAndImage) {
                switch (this.model.imagePosition) {
                    case ej.ImagePosition.ImageRight:
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageLeft:
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                    case ej.ImagePosition.ImageBottom:
                        this.majorimgtag.attr("style", "display:inherit");
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageTop:
                        this.majorimgtag.attr("style", "display:inherit");
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                }
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageTextImage) {
                this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageBoth) {
                this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageOnly) {
                this.imgtxtwrap.append(this.majorimgtag);
                this.element.append(this.imgtxtwrap);
            } else {
                this.element.addClass("e-txt");
                this.element.text(this.model.text);
            }
        },

        _roundedCorner: function (value) {
            value == true ? this.element.addClass('e-corner') : this.element.removeClass('e-corner');
        },

        _wireEvents: function (val) {
            if (val) {
                this._on(this.element, "mousedown", this._btnRepatMouseClickEvent);
                this._on($(document), 'mouseup', this._mouseUpClick);
                this._on(this.element, "keyup", this._btnRepatKeyUpEvent);
                this._on($(document), "keypress", this._btnRepatKeyDownEvent);

            }
            this._on(this.element, "click", this._btnMouseClickEvent);
        },

        _btnMouseClickEvent: function (e) {
            var self = this;
            if (!self.element.hasClass("e-disable")) {
                // here aregument 'e' used in serverside events 
                var args = { status: self.model.enabled, e: e };
                self._trigger("click", args);
            } 
        },

        _btnRepatMouseClickEvent: function (e) {
            var self = this;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if ((e.button == 0) || (e.which == 1)) {

                    self._timeout = setInterval(function () { self._trigger("click", { target: e.currentTarget, status: self.model.enabled }); }, this.model.timeInterval);
                }
            }
        },

        _mouseUpClick: function (event) {
            clearTimeout(this._timeout);
        },

        _btnRepatKeyDownEvent: function (e) {
            var self = this;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if ((e.keyCode == 32) || (e.keyCode == 13)) {
                    self._trigger("click", args);
                }
            }
        },

        _btnRepatKeyUpEvent: function (e) {
            if ((e.keyCode == 32) || (e.keyCode == 13)) {
                clearTimeout(this._timeout);
            }
        },
    });


    ej.ContentType = {
		/**  Supports only for text content only */
		TextOnly: "textonly", 
		/** Supports only for image content only */
		ImageOnly: "imageonly", 
		/** Supports image for both ends of the button */
		ImageBoth: "imageboth", 
		/** Supports image with the text content */
		TextAndImage: "textandimage", 
		/** Supports image with both ends of the text */
        ImageTextImage: "imagetextimage"
    };


    ej.ImagePosition = {
		/**  support for aligning text in left and image in right. */
		ImageRight: "imageright", 
		/**  support for aligning text in right and image in left. */
		ImageLeft: "imageleft",
		/**  support for aligning text in bottom and image in top. */
		ImageTop: "imagetop", 
		/**  support for aligning text in top and image in bottom. */
		ImageBottom: "imagebottom"
    };

    ej.ButtonSize = {
		/**  Creates button with inbuilt default size height, width specified */
		Normal : "normal",
		/**  Creates button with inbuilt mini size height, width specified */
		Mini: "mini", 
		/**  Creates button with inbuilt small size height, width specified */
		Small: "small",
		/**  Creates button with inbuilt medium size height, width specified */
		Medium:"medium", 
		/**  Creates button with inbuilt large size height, width specified */
        Large: "large"
    };

    ej.ButtonType = {
		/**  Creates button with inbuilt button type specified */
		Button : "button",
		/**  Creates button with inbuilt reset type specified */
		Reset: "reset", 
		/**  Creates button with inbuilt submit type specified */
		Submit: "submit"
    };
})(jQuery, Syncfusion);
;
/**
* @fileOverview Plugin to style the Html CheckBox elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejCheckBox", "ej.CheckBox", {
        _rootCSS: "e-checkbox",

        element: null,

        model: null,
        validTags: ["input"],
        _setFirst: false,
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },


        defaults: {

            id: null,

            name: null,

            value: null,

            htmlAttributes: {},

            checked: false,

            enabled: true,

            enableTriState: false,

            showRoundedCorner: false,

            enablePersistence: false,

            cssClass: "",

            text: "",

            enableRTL: false,

            idPrefix: "ej",

            size: "small",

            checkState: null,

            validationRules: null,

            validationMessage: null,

            beforeChange: null,

            change: null,

            create: null,

            destroy: null

        },

        dataTypes: {
            id: "string",
            name: "string",
            enablePersistence: "boolean",
            enableTriState: "boolean",
            size: "enum",
            checkState: "enum",
            enabled: "boolean",
            idPrefix: "string",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data"
        },
        observables: ["checked"],
        checked: ej.util.valueFunction("checked"),

        _init: function () {
            var browserInfo = ej.browserInfo();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            this._setValue();
            this._renderControl();
            this.model.enableRTL && this._setRTL();
            if (this.model.enabled)
                this._wireEvents();
            this._setEnabled(this.model.enabled);
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            this._addAttr(this.model.htmlAttributes);            
        },
        _setRTL:function(){
            this.maindiv.addClass("e-rtl");
        },
        _initValidator: function () {
            var proxy = this;
            this.wrapper.closest("form").validate({
                ignore: ".e-hidden",
                errorClass: 'e-validation-error',
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    $container = element.closest(".e-widget").next().is("label") ? element.closest(".e-widget").next() : element.closest(".e-widget");
                    $(error).insertAfter($container);
                },
            });
        },
        _setValidation: function () {
            this.wrapper.find('input').rules("add", this.model.validationRules);
            var validator = this.wrapper.closest("form").validate();
            name = this.wrapper.find('input').attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.span.addClass(value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._setEnabled(false);
                else if (key == "checked" && value == "checked") {
                    if (proxy.checked() instanceof Array)
                        proxy._updateCheckedItem();
                    else
                        proxy._checked(true);
                }
                else proxy.span.attr(key, value)
            });
        },

        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "checked":
                        if (ej.util.getVal(options[prop]) instanceof Array) {
                            var checkedItemArray = ej.util.getVal(options[prop]);
                            var lastVal = checkedItemArray[checkedItemArray.length - 1];
                            if (this.model.value == lastVal) {
                                this._checked();
                                this._isChecked = true;
                            }
                        }
                        else {
                            this._isChecked = ej.util.getVal(options[prop]);
                            if (this._isChecked)
                                this._checked();
                            else
                                this._unChecked();
                            this.checked(ej.util.getVal(options[prop]));
                        }
                        break;
                    case "enableTriState":
                        if (options[prop]) {
                            this._indeterminateState = options[prop];
                            this._setIndeterminate(this._indeterminateState);
                        }
                        break;
                    case "checkState":
                        if (this.model.enableTriState) {
                            this.model.checkState = options[prop];
                            this._changeState(this.model.checkState);
                            if (this.checked() instanceof Array)
                                this._updateCheckedItem();
                            else if (options[prop] = "check") this._hiddenInput.removeAttr("name")
                            else this._hiddenInput.attr("name", this.model.name);
                        }
                        break;
                    case "cssClass": this._changeSkin(options[prop]); break;
                    case "enableRTL":
                        (options[prop]) ? this._setRTL() : this.maindiv.removeClass("e-rtl");
                        break;
                    case "text": this._setText(options[prop]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.wrapper.find('input').rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = options[prop];
                        this._setValidation();
                        break;
                    case "validationMessage":
                        this.model.validationMessage = options[prop];
                        this._setValidation(); break;
                    case "id": this._setIdAttr(options[prop]); break;
                    case "name": this.element.attr('name', options[prop]);
                        if (!this._isChecked || this.spanImg.hasClass("e-chk-indeter")) this._hiddenInput.attr('name', options[prop]);
                        this.model.name = options[prop];
                        break;
                    case "value": this.element.attr('value', options[prop]); break;
                    case "size": this._setSize(options[prop]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[prop]); break;
                    case "enabled": this._setEnabled(options[prop]); break;
                    case "htmlAttributes": this._addAttr(options[prop]); break;
                }
            }
        },

        _destroy: function () {
            this.element.removeClass("e-checkbox e-input");
            this.element.insertBefore(this.wrapper);
            this.wrapper.remove();
        },

        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.wrapper.removeClass(this.model.cssClass).addClass(skin);
                $("#" + this.model.idPrefix + this.model.id + "_wrapper").removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _setValue: function () {
            this._indeterminateState = false;
            this._isChecked = false;
            !ej.isNullOrUndefined(this.element.attr("id")) && (this.model.id = this.element.attr('id'));
            !ej.isNullOrUndefined(this.element.attr('name')) && (this.model.name = this.element.attr('name'));
            if (!ej.isNullOrUndefined(this.element.attr('value')) && this.element.attr('value') != "") this.model.value = this.element.attr('value');
            if (!this.checked() && !ej.isNullOrUndefined(this.element.attr('checked'))) this._isChecked = true;
            ej.isNullOrUndefined(this.model.name) && (this.model.name = this.model.id);
        },

        _setSize: function (val) {
            if (val == ej.CheckboxSize.Medium)
                this.innerdiv.removeClass('e-chkbox-small').addClass('e-chkbox-medium');
            else
                this.innerdiv.removeClass('e-chkbox-medium').addClass('e-chkbox-small');
        },

        _setRoundedCorner: function (val) {
            if (val)
                this.span.addClass("e-corner");
            else
                this.span.removeClass("e-corner");
        },

        _setEnabled: function (val) {
            if (val) {
                this.enable();
            } else {
                this.disable();
            }
        },
        _setCheckBoxState: function () {
            if (this.model.enableTriState) {
                if (this.model.checkState == "indeterminate")
                    this._indeterminateState = true
                else if (this.model.checkState == "check")
                    this._isChecked = true;
                else if (this.model.checkState == "uncheck")
                    this._isChecked = false;
            }
        },

        _renderControl: function () {
            this._setCheckBoxState();
            this.maindiv = ej.buildTag("span.e-chkbox-wrap e-widget " + this.model.cssClass + "#" + this.model.idPrefix + this.model.id, "", {}, { "role": "checkbox", tabindex: 0 });
            this.innerdiv = $('<div></div>');
            this._setSize(this.model.size);
            this.span = $('<span></span>');
            this.spanImg = $('<span class="e-chk-image e-icon"></span>').attr("role", "presentation");
            this.element.addClass("e-input");
            this.model.name = ej.isNullOrUndefined(this.model.name) ? this.model.id : this.model.name;
            this.model.value = ej.isNullOrUndefined(this.model.value) ? true : this.model.value;
            this.element.attr({ "id": this.model.id, "name": this.model.name, "value": this.model.value });
            this._hiddenInput = ej.buildTag("input#" + this.model.name + "_hidden", "", {}, { type: "hidden", value: false });

            this._setRoundedCorner(this.model.showRoundedCorner);
            if (this.checked())
                this._setCheckedItem(this.checked());
            if (this._isChecked) {
                this.spanImg.addClass("e-chk-activeicon");
                this.span.addClass("e-chk-act");
                this.maindiv.attr({ "aria-checked": true });
            }
            else {
                this.span.addClass("e-chk-inact");
                this.maindiv.attr({ "aria-checked": false });
                this._hiddenInput.attr("name", this.model.name);
            }
            if (!(this.checked() instanceof Array))
                this.checked(this._isChecked);
            this.span.append(this.spanImg);
            this.innerdiv.append(this.span);
            this.maindiv.insertBefore(this.element);
            this.maindiv.append(this.element);
			this.maindiv.append(this._hiddenInput);
            this.maindiv.append(this.innerdiv);
			this.wrapper = this.maindiv;
            this._setTextWrapper(this.model.text);
            this.chkbx = this.element;
            if (this.model.enableTriState == true && this._indeterminateState == true)
                this._setIndeterminate(this._indeterminateState);
            if (this.checked() instanceof Array)
                this._updateCheckedItem();
        },
        _changeState: function (state) {
            if (state == "indeterminate") {
                this.spanImg.removeClass("e-chk-activeicon").addClass("e-chk-indetericon");
                this.span.removeClass("e-chk-act").removeClass("e-chk-inact").addClass("e-chk-indeter");
                this.wrapper.attr({ "aria-checked": "mixed" });
                this.wrapper.find('input').prop('enableTriState', true);
                if (!(this.checked() instanceof Array))
                    this.checked(null);
            }
            else if (state == "check") {
                this.spanImg.removeClass("e-chk-indetericon").addClass("e-chk-activeicon");
                this.span.removeClass("e-chk-act").removeClass("e-chk-inact").removeClass("e-chk-indeter").addClass("e-chk-act");
                this.wrapper.attr({ "aria-checked": true });
            }
            else if (state == "uncheck") {
                this.spanImg.removeClass("e-chk-activeicon").removeClass("e-chk-indetericon");
                this.span.removeClass("e-chk-act").removeClass("e-chk-indeter").addClass("e-chk-inact");
                this.wrapper.attr({ "aria-checked": false });
            }
        },

        _setIndeterminate: function (indeter) {
            if (indeter) {
                this.spanImg.removeClass("e-chk-activeicon").addClass("e-chk-indetericon");
                this.span.removeClass("e-chk-act").removeClass("e-chk-inact").addClass("e-chk-indeter");
                this.wrapper.attr({ "aria-checked": "mixed" });
                this.wrapper.find('input').prop('enableTriState', true);
                this.model.checkState = "indeterminate";
                if (!(this.checked() instanceof Array))
                    this.checked(null);
                this._hiddenInput.attr("name", this.model.name);
            }
            else {
                this.wrapper.find(".e-chk-indeter").removeClass("e-chk-indeter");
                this.wrapper.find(".e-chk-image").removeClass("e-chk-indetericon");
                this.wrapper.find('input').removeAttr('enableTriState');
                this.wrapper.find('input').prop('enableTriState', false);
                if (this.checked())
                    this._checked();
                else
                    this._unChecked();
            }
        },

        _setTextWrapper: function (val) {
            if (val != "") {
                this.txtSpan = ej.buildTag("div.e-text", val);
                this.wrapper.append(this.txtSpan);
                this.model.enableRTL && this._setRTL();
            }
        },

        _setText: function (val) {
            if ((this.model.text == "") && (val != "")) {
                this._setTextWrapper(val);
            } else {
                this.txtSpan.html(val);
            }
        },

        _setIdAttr: function (val) {
            $("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
            this.element.attr('id', val);
        },

        _wireEvents: function () {
            this._on(this.wrapper, "click", this._checkedHandler);
            if (this._isIE8) {
                this._on($("label[for=" + this.model.id + "]"), "click", function () { this.wrapper.click(); });
            }
            this._on(this.wrapper, "focus", this._focusIn);
            this._on(this.wrapper, "focusout", this._focusOut);
        },


        _unWireEvents: function () {
            this._off(this.wrapper, "click");
            if (this._isIE8) {
                this._off($("label[for=" + this.model.id + "]"), "click");
            }
            this._off(this.wrapper, "focus");
            this._off(this.wrapper, "focusout");
        },
        _focusIn: function (evt) {
            $(this.wrapper).addClass("e-focus");
            $(this.wrapper).bind("keydown", $.proxy(this._checkUnCheck, this));
        },
        _focusOut: function (evt) {
            $(this.wrapper).removeClass("e-focus");
            $(this.wrapper).unbind("keydown", $.proxy(this._checkUnCheck, this));
        },
        _checkUnCheck: function (evt) {
            //Space bar to check and uncheck
            if (evt.keyCode == 32) {
                evt.preventDefault();
                this._checkedHandler();
            }
        },
        _checkedHandler: function (evt) {
            var data = { isChecked: this._isChecked, event: evt };
            if (true == this._trigger("beforeChange", data)) {
                return false;
            }
            if (this.wrapper.find("span:first").hasClass("e-chk-inact")) {
                this._checked();
                if (!(this.checked() instanceof Array))
                    this.checked(true);
                if (this.model.enableTriState) {
                    this._indeterminateState = true;
                }
            }
            else if (this.wrapper.find("span:first").hasClass("e-chk-act")) {
                if ((this.model.enableTriState == true) && (this._indeterminateState == true)) {
                    this._setIndeterminate(true);
                    if (!(this.checked() instanceof Array))
                        this.checked(true);
                } else {
                    this._unChecked();
                    if (!(this.checked() instanceof Array))
                        this.checked(false);
                }
            }
            else if (this.wrapper.find("span:first").hasClass("e-chk-indeter")) {
                if (!(this.checked() instanceof Array))
                    this.checked(false);
                else
                    this._isChecked = false;
                this._setIndeterminate(false);
                this._indeterminateState = false;
            }
            if (this.checked() instanceof Array)
                this._updateCheckedItem();
            else
                this._isChecked = this.checked();
            var data = { isChecked: this._isChecked,checkState:this.model.checkState,event: evt };
            this._trigger("change", data);
            return true;
        },


        _checked: function () {
            this.wrapper.find("span:first").removeClass("e-chk-inact").addClass("e-chk-act");
            this.wrapper.find(".e-chk-image").removeClass("e-chk-indetericon").addClass("e-chk-activeicon");
            this.wrapper.attr({ "aria-checked": true });
            this.wrapper.find('input[type=checkbox]').prop('checked', true);
            this.model.checkState = "check";
            this._hiddenInput.removeAttr("name");
        },


        _unChecked: function () {
            this.wrapper.find("span:first").removeClass("e-chk-act").addClass("e-chk-inact");
            this.wrapper.attr({ "aria-checked": false });
            this.wrapper.find(".e-chk-image").removeClass("e-chk-activeicon").removeClass("e-chk-indetericon");
            this.wrapper.find('input[type=checkbox]').removeAttr('checked');
            this.model.checkState = "uncheck";
            this._hiddenInput.attr("name", this.model.name);
        },

        _setCheckedItem: function (value) {
            if (!ej.isNullOrUndefined(value) && value != "" && !(value instanceof Array))
                this._isChecked = true;
            else if (value instanceof Array && !ej.isNullOrUndefined(this.model.value) && this.model.value != "") {
                for (var item = 0; item < value.length; item++) {
                    if (value[item] == this.model.value)
                        this._isChecked = true;
                }
            }
        },

        _updateCheckedItem: function () {
            if (!ej.isNullOrUndefined(this.model.value) && this.model.value != "" && !this.wrapper.find("span:first").hasClass("e-chk-indeter")) {
                if (($.inArray(this.model.value, this.checked()) < 0) && this.wrapper.find("span:first").hasClass("e-chk-act")) {
                    this.checked().push(this.model.value);
                    this._isChecked = true;
                    this._hiddenInput.removeAttr("name");
                }
                else if (($.inArray(this.model.value, this.checked()) > -1) && this.wrapper.find("span:first").hasClass("e-chk-inact")) {
                    this.checked().splice($.inArray(this.model.value, this.checked()), 1);
                    this._isChecked = false;
                    this._hiddenInput.attr("name", this.model.name);
                }
            }
        },


        disable: function () {
            if (!this.wrapper.hasClass("e-disable")) {
                this.wrapper.addClass("e-disable").attr("aria-disabled", true);
				this.element.attr("disabled","disabled");
                if (this._isIE8) this.span.addClass("e-disable");
                this._unWireEvents();
                this.model.enabled = false;
            }
        },

        enable: function () {
            if (this.wrapper.hasClass("e-disable")) {
                this.wrapper.removeClass("e-disable").attr("aria-disabled", false);
				this.element.removeAttr("disabled");
                if (this._isIE8) this.span.removeClass("e-disable");
                this._wireEvents();
                this.model.enabled = true;
            }
        },

        isChecked: function () {
            if ((this._isChecked != null) && (this._isChecked != undefined))
                return this._isChecked;
        }
    });

    ej.CheckboxSize = {
        /**  Creates checkbox with inbuilt small size height, width specified */
        Small: "small",
        /**  Creates checkbox with inbuilt medium size height, width specified */
        Medium: "medium"
    };

    ej.CheckState = {
        /**  Specifies the Check attribute of the Checkbox */
        Check: "check",
        /**  Specifies the Uncheck attribute of the Checkbox */
        Uncheck: "uncheck",
        /**  Specifies the Indeterminate state of the Checkbox */
        Indeterminate: "indeterminate"
    };
})(jQuery, Syncfusion);;;
/**
* @fileOverview Plugin to style the Html Radiobutton elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejRadioButton", "ej.RadioButton", {
        _rootCSS: "e-radiobtn",

        element: null,

        model: null,
        validTags: ["input"],
        _setFirst: false,
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },

        defaults: {

            id: null,

            name: null,

            value: null,

            checked: false,

            cssClass: "",

            text: "",

            enableRTL: false,

            htmlAttributes: {},

            enablePersistence: false,

            idPrefix: "ej",

            size: "small",

            enabled: true,

            validationRules: null,

            validationMessage: null,

            beforeChange: null,

            change: null,

            create: null,

            destroy: null
        },


        dataTypes: {
            id: "string",
            name: "string",
            checked: "boolean",
            enablePersistence: "boolean",
            size: "enum",
            enabled: "boolean",
            idPrefix: "string",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data"
        },


        _init: function () {
            var browserInfo = ej.browserInfo();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            this._setValue();
            this._renderControl();
            if (this.isChecked)
                this._checkedHandler();
            this._setEnabled(this.model.enabled);
            this._addAttr(this.model.htmlAttributes);
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            this._wireEvents();
            this.initialRender = false;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.div.addClass(value);
                else if(key == "name") proxy.radbtn.attr(key, value);
                else if (key == "required") proxy.radbtn.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else if (key == "checked" && value == "checked") proxy._checkedChange(true);
                else proxy.div.attr(key, value);
            });
        },

        _initValidator: function () {
            var proxy = this;
            this.element.closest("form").validate({
                ignore: ".e-hidden",
                errorClass: 'e-validation-error',
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    $container = element.closest(".e-widget").next().is("label") ? element.closest(".e-widget").next() : element.closest(".e-widget");
                    $(error).insertAfter($container);
                },
            });
        },
        _setValidation: function () {
            this.element.find("input").rules("add", this.model.validationRules);
            var validator = this.element.closest("form").validate();
            name = this.element.find('input').attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },


        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "cssClass": this._changeSkin(options[prop]); break;
                    case "enableRTL":
                        if (this.model.text)
                            (options[prop]) ? this.textWrapDiv.addClass("e-rtl") : this.textWrapDiv.removeClass("e-rtl");
                        else 
	                    	(options[prop]) ? this.element.closest('.e-radiobtn-wrap').addClass('e-rtl') : this.element.closest('.e-radiobtn-wrap').removeClass('e-rtl');
                        break;
                    case "text": this._setText(options[prop]); break;
                    case "size": this._setSize(options[prop]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.find('input').rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = options[prop];
                        this._setValidation();
                        break;
                    case "validationMessage":
                        this.model.validationMessage = options[prop];
                        this._setValidation(); break;
                    case "checked": this.model.checked = options[prop]; this._checkedChange(this.model.checked); break;
                    case "enabled": this._setEnabled(options[prop]); break;
                    case "id": this._setIdAttr(options[prop]); break;
                    case "name": this.radbtn.attr('name', options[prop]); break;
                    case "value": this.radbtn.attr('value', options[prop]); break;
                    case "htmlAttributes": this._addAttr(options[prop]); break;
                }
            }
        },

        _destroy: function () {
            this.radbtn.removeClass("e-radiobtn e-input");
            this.radbtn.insertBefore(this.element);
            this.element.remove();
            this.element = this.radbtn;
        },

        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass).addClass(skin);
                this.textWrapDiv.removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _setValue: function () {
            if (!ej.isNullOrUndefined(this.element.attr("id")))
                this.model.id = this.element.attr("id");
            if (!ej.isNullOrUndefined(this.element.attr("name")))
                this.model.name = this.element.attr("name");
            if (!ej.isNullOrUndefined(this.element.attr("value")))
                this.model.value = this.element.attr("value");
            this.element.attr({ "id": this.model.id, "name": this.model.name, "value": this.model.value });
            if (!this.model.checked && !ej.isNullOrUndefined(this.element.attr('checked')))
                this.model.checked = this.isChecked = true;
            else
                this.isChecked = this.model.checked;
        },

        _setIdAttr: function (val) {
            $("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
            $("#" + this.model.idPrefix + this.model.id).attr('id', this.model.idPrefix + val);
            this.radbtn.attr('id', val);
        },

        _setSize: function (val) {
            if (val == ej.RadioButtonSize.Medium)
                this.span.removeClass('e-radsmaller').addClass('e-radmedium');
            else
                this.span.removeClass('e-radmedium').addClass('e-radsmaller');
        },

        _setEnabled: function (val) {
            if (val) {
                this.enable();
            } else {
                this.disable();
            }
        },

        _renderControl: function () {
            this.initialRender = true;
            var browserInfo = ej.browserInfo();
            if (browserInfo.name == 'msie' && browserInfo.version == '8.0')
                this.div = $('<div class="e-radiobtn-wrap e-widget e-rad-outer" ></div>');
            else
                this.div = $('<div class="e-radiobtn-wrap e-widget" ></div>');
            this.div.attr({ 'id': this.model.idPrefix + this.model.id, "role": "radio", "tabindex": 0, "aria-checked": false });
            this.span = $('<span></span>');
            this.span.addClass("e-spanicon");
            this._setSize(this.model.size);
            this.spanImg = $('<span class="e-rad-icon e-icon e-rad-select"></span>', "", {}, { "role": "presentation" });
            this.element.addClass("e-input");
            this.model.name = ej.isNullOrUndefined(this.model.name) ? this.model.id : this.model.name;
            this.element.attr({ "id": this.model.id, "name": this.model.name, "value": this.model.value });
            this.div.addClass(this.model.cssClass);
            this.span.append(this.spanImg);
            this.div.insertBefore(this.element);
            this.div.append(this.element);
            this.div.append(this.span);
            this._setTextWrapper(this.model.text);
            this.radbtn = this.element;
            this.element = this.div;
            if (this.isChecked) {
                this.element.find(".e-input").attr('checked', true);
            }
        },

        _setTextWrapper: function (val) {
            if (val != "") {
                this.textWrapDiv = ej.buildTag("div.e-radiobtn-wrap " + this.model.cssClass + "#" + this.model.idPrefix + this.model.id + "_wrapper");
                this.div.wrapAll(this.textWrapDiv);
                this.txtSpan = ej.buildTag("div.e-text", this.model.text);
                this.textWrapDiv = $("#" + this.model.idPrefix + this.model.id + "_wrapper");
                this.textWrapDiv.append(this.txtSpan);
                if (this.model.enableRTL)
                    this.textWrapDiv.addClass("e-rtl");
            } else if (this.model.enableRTL)
                this.element.closest('.e-radiobtn-wrap').addClass('e-rtl');
        },

        _setText: function (val) {
            if ((this.model.text == "") && (val != "")) {
                this._setTextWrapper(val);
            } else {
                this.txtSpan.html(val);
            }
        },

        _wireEvents: function () {
            this._on(this.element, "click", this._checkedHandler);
            this._on(this.element, "focus", this._focusIn);
            this._on(this.element, "focusout", this._focusOut);
        },
        _focusIn: function (evt) {
            $(this.element).addClass("e-focus");
            $(this.element).bind("keydown", $.proxy(this._checkUnCheck, this));
        },
        _focusOut: function (evt) {
            $(this.element).removeClass("e-focus");
            $(this.element).unbind("keydown", $.proxy(this._checkUnCheck, this));
        },

        _checkUnCheck: function (evt) {
            //Space bar,and arrow keys to check and uncheck
            if (evt.keyCode == 32 || evt.keyCode == 37 || evt.keyCode == 38 || evt.keyCode == 39 || evt.keyCode == 40) {
                evt.preventDefault();
                this._checkedHandler();
            }
        },
        _checkedHandler: function (evt) {
            if (!this.element.hasClass('e-disable')) {
                this.isChecked = this.element.find('input.e-radiobtn:radio').attr('checked') == 'checked' ? true : false;
                if (!$(this.element).find(".e-rad-icon").hasClass("e-rad-active")) this._changeEvent();
            }
        },

        _checkedChange: function (val) {
            this.isChecked = val;
            if ((this.isChecked) && (this.model.enabled))
                this._changeEvent();
        },

        _changeEvent: function () {
            var data = { isChecked: this.isChecked };
            if (!this.initialRender) {
                if (true == this._trigger("beforeChange", data))
                    return false;
            }
            if (!$(this.element).find(".e-rad-icon").hasClass("e-rad-active")) {
                var curname = this.element.find(".e-input").attr('name'),
                input = $('input.e-radiobtn[name=' + curname + ']:radio'),
                proxy = this,
                currElement = this.element.find('.e-input'),
                currObj = $(currElement).data("ejRadioButton");
                if (data.isChecked) {
                    this.spanImg.addClass("e-rad-active").removeClass('e-rad-select');
                    this.div.attr({ "tabindex": 0, "aria-checked": true });
                }
                $.each(input, function (i, obj) {
                    $(obj).closest(".e-radiobtn-wrap").find(".e-rad-icon").removeClass("e-rad-active").addClass("e-rad-select");
                    $(obj).closest(".e-radiobtn-wrap").attr({ "tabindex": 0, "aria-checked": false });
                    var prevObj = $(obj).data("ejRadioButton");
                    if (prevObj != null) {
                        prevObj.model.checked = false;
                    }
                });
                if (currObj != null)
                    currObj.model.checked = true;
                this.element.find(".e-rad-icon").addClass("e-rad-active").removeClass("e-rad-select");
                this.div.attr({ "tabindex": 0, "aria-checked": true });
                this.element.find(".e-input").click();
                this.isChecked = true;
            }
            var data = { isChecked: this.isChecked };
            if (!this.initialRender)
                this._trigger("change", data);

        },

        disable: function () {
            if (!this.element.hasClass("e-disable")) {
                this.element.addClass("e-disable");
			this.radbtn.attr("disabled","disabled");
			}
            if (this._isIE8) this.span.addClass("e-disable");
            this.div.attr("aria-disabled", true);
            this.model.enabled = false;
        },

        enable: function () {
            if (this.element.hasClass("e-disable")) {
                this.element.removeClass("e-disable");
				this.radbtn.removeAttr("disabled");
			}
            if (this._isIE8) this.span.removeClass("e-disable");
            this.div.attr("aria-disabled", false);
            this.model.enabled = true;
        }
    });

    ej.RadioButtonSize = {
        /**  Creates radio button with inbuilt small size height, width specified */
        Small: "small",
        /**  Creates radio button with inbuilt medium size height, width specified */
        Medium: "medium"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejAutocomplete", "ej.Autocomplete", {

        element: null,

        model: null,
        validTags: ["input"],
        _ignoreOnPersist: ["fields", "dataSource", "query", "focusIn", "focusOut", "change", "select", "create", "destroy"],
        _setFirst: false,

        _rootCSS: "e-autocomplete",
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            priority: 1
        },


        defaults: {

            dataSource: null,

            query: null,

            fields: {

                text: null,

                key: null,

                category: null,

                htmlAttributes: null
            },

            template: null,

            allowGrouping: false,

            enableDistinct: false,

            allowSorting: true,

            sortOrder: "ascending",

            htmlAttributes: {},

            multiSelectMode: "none",

            delimiterChar: ',',

            allowAddNew: false,

            addNewText: "Add New",

            showRoundedCorner: false,

            readOnly: false,

            cssClass: "",

            watermarkText: null,

            value: "",

            selectValueByKey: null,

            filterType: "startswith",

            caseSensitiveSearch: false,

            showLoadingIcon: true,

            itemsCount: 0,

            minCharacter: 1,

            delaySuggestionTimeout: 200,

            showPopupButton: false,

            highlightSearch: false,

            enableAutoFill: false,

            enableRTL: false,

            enabled: true,

            visible: true,

            height: "",

            width: "",

            emptyResultText: "No suggestions",

            showEmptyResultText: true,

            enablePersistence: false,

            popupHeight: "152px",

            popupWidth: "auto",

            autoFocus: false,

            validationRules: null,

            validationMessage: null,

            focusIn: null,

            focusOut: null,

            change: null,

            select: null,

            create: null,

            open: null,

            close: null,

            destroy: null
        },

        dataTypes: {
            cssClass: "string",
            filterType: "enum",
            caseSensitiveSearch: "boolean",
            showLoadingIcon: "boolean",
            template: "string",
            allowGrouping: "boolean",
            enableDistinct: "boolean",
            allowSorting: "boolean",
            sortOrder: "enum",
            allowAddNew: "boolean",
            addNewText: "string",
            showRoundedCorner: "boolean",
            readOnly: "boolean",
            itemsCount: "number",
            minCharacter: "number",
            showPopupButton: "boolean",
            highlightSearch: "boolean",
            enableAutoFill: "boolean",
            enableRTL: "boolean",
            multiSelectMode: "enum",
            delimiterChar: "string",
            emptyResultText: "string",
            showEmptyResultText: "boolean",
            enabled: "boolean",
            visible: "boolean",
            enablePersistence: "boolean",
            dataSource: "data",
            query: "data",
            fields: "data",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
        },
        observables: ["value"],

        enable: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.target.disabled = false;
                this.element.removeClass("e-disable").attr({ "aria-disabled": false });
				this.element.removeAttr("disabled");
                if (this.model.showPopupButton) this.dropdownbutton.removeClass("e-disable").attr({ "aria-disabled": false });
                if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable").attr({ "aria-disabled": false });
            }
        },

        disable: function () {
            if (this.model.enabled) {
                this._hideResult();
                this.model.enabled = false;
                this.target.disabled = true;
				this.element.attr("disabled","disabled");
                this.element.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.showPopupButton) this.dropdownbutton.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.multiSelectMode == "visualmode") this._ulBox.addClass("e-disable").attr({ "aria-disabled": true });
            }
        },

        clearText: function () {
            if (this.model.multiSelectMode == "visualmode")
                this._deleteBox(this._ulBox.children("li"));
            this.element.val("");
            this._valueChange();
            if (this._isFocused) this.element.blur();
            else this._targetBlur();
        },

        getValue: function () {
            if (this.model.multiSelectMode == "visualmode")
                return this._hiddenInput.val();
            return this.target.value;
        },

        getSelectedItems: function () {
            return this._selectedItems;
        },
        _setValue: function (value) {
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            if (typeof value === "object" || (typeof value === "number" && isNaN(value))) value = "";
            value = $.trim(value);
            if (this.model.multiSelectMode == "visualmode")
                this._hiddenInput.val("");
            this.element.val("");
            if (value) {
                if (this.model.multiSelectMode == "visualmode") {
                    this._selectedItems = [];
                    this._deleteBox(this._ulBox.children("li"));
                    this._hiddenInput.val(value);
                    var values = value.split(this.model.delimiterChar);

                    if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
                        this._createBoxForObjectType(values);
                    }
                    else {
                        this.suggestionListItems = this.model.dataSource;
                        if (typeof this.suggestionListItems[0] != "object") {
                            for (var i = 0; i < values.length; i++) {
                                if (values[i]) {
                                    this._ulBox.append(this._createBox(values[i]));
                                    this._selectedItems.push(values[i]);
                                }
                            }
                        }
                        else this._createBoxForObjectType(values);
                    }
                }
                else {
                    this.element.val(value);
                    this._updateSelectedItemArray();
                }
            }
            this.model.value = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
            this._preVal = this.element.val();
            !this._isWatermark && this._setWatermarkTxt();
            return value;
        },
        _createBoxForObjectType: function (values) {
            var dataQuery, promise, mapper, strData, proxy = this;
            mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null };
            mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
            for (var data = 0; data < values.length; data++) {
                var _val = $.trim(values[data]);
                if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
                    dataQuery = this._getQuery().where(mapFld._text, "equal", _val, false);
                    promise = (this.model.dataSource).executeQuery(dataQuery);
                    promise.done(function (e) {
                        var res = e.result;
                        strData = res instanceof Array && res.length ? res[0] : _val;
                        proxy._selectedItems.push(strData);
                    }).fail(function (e) {
                        proxy._selectedItems.push(_val);
                    });
                }
                else {
                    dataQuery = ej.Query().where(mapFld._text, "equal", _val, false);
                    promise = ej.DataManager(this.suggestionListItems).executeLocal(dataQuery);
                    strData = promise instanceof Array && promise.length ? promise[0] : _val;
                    this._selectedItems.push(strData);
                }
                if (this.model.multiSelectMode == "visualmode")
                    this._ulBox.append(this._createBox(_val));
            }
        },


        selectValueByKey: function (key) {
            var proxy = this;
            key = key.toString();
            var result = key.split(",");
            if (Object.prototype.toString.call(result) === '[object Array]') {
                $.each(result, function (index, value) {
                    proxy._setOperation($.trim(value), "key");
                });
            }
        },

        selectValueByText: function (text) {
            this._setOperation(text, "text");
        },


        _setOperation: function (source, value) {
            if (!this.model.enabled) return false;
            var bindTo = "", promise, dataQuery, proxy = this, list = this.model.dataSource;
            if (ej.isNullOrUndefined(list)) return false;
            if (typeof list[0] == "object" || list instanceof ej.DataManager) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper[value]) ? mapper[value] : value;
            } else if (value == "key")
                return false;
            if (ej.DataManager && list instanceof ej.DataManager) {
                dataQuery = this._getQuery().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = (list).executeQuery(dataQuery);
                promise.done(function (e) {
                    proxy._setText(e.result[0]);
                });
            }
            else {
                if ((!list || !list.length || list.length < 1)) return false;
                dataQuery = ej.Query().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = ej.DataManager(list).executeLocal(dataQuery);
                this._setText(promise[0]);
            }
        },

        _setText: function (data) {
            if (!data) return false;
            var currentValue, mapper = this.model.fields;
            if ((typeof this.model.dataSource[0] == "object") || (typeof data == "object"))
                currentValue = (mapper && mapper["text"]) ? data[mapper["text"]] : data["text"];
            else currentValue = data;
            if (currentValue) {
                if (this.model.multiSelectMode == "visualmode" && this._removeDuplicates(data)) return false;
                this._valueToTextBox(currentValue, data, true);
                this.model.value = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
            }
        },

        _valueToTextBox: function (currentValue, data, flag) {
            var delimiterIndex;
            if (this.model.multiSelectMode == "visualmode") {
                if (this._addNewTemplate) currentValue = currentValue.substr(0, currentValue.length - this._addNewTemplate.length);
                delimiterIndex = this._hiddenInput.val() ? this.model.delimiterChar : "";
                this._hiddenInput.val(this._hiddenInput.val() + delimiterIndex + (data.key || currentValue));
                this.element.val("");
                this._ulBox.append(this._createBox(currentValue));
            }
            else if (this.model.multiSelectMode == "delimiter") {
                delimiterIndex = (this.target.value).lastIndexOf(this.model.delimiterChar)
                if (this._typed || this.element.val() == "" || flag || !this.model.showPopupButton) {
                    if (flag)
                        this.element.val(this.element.val() == "" ? (currentValue) : (this.element.val() + this.model.delimiterChar + currentValue));
                    else
                        this.element.val(this._queryString.substr(0, delimiterIndex + 1) + currentValue + this.model.delimiterChar);
                }
                else {
                    if (this._checkDeli())
                        this.element.val(this._queryString.substr(0, delimiterIndex) + this.model.delimiterChar + currentValue + this.model.delimiterChar);
                    else
                        this.element.val(this.element.val() + this.model.delimiterChar + currentValue + this.model.delimiterChar);
                }
                this._typed = false;
            }
            else {
                this.element.val(currentValue);
                this.model.selectValueByKey = this._getField(data, this.model.fields.key).toString();
                this._selectedItems = [];
            }
            this._selectedItems.push(data);
            this._moveCaretToEnd(this.element[0]);
        },

        _removeDuplicates: function (currentValue) {
            if (this._selectedItems.length == 0) return false;
            if (this._selectedItems.indexOf(currentValue) != -1) return true;
        },

        search: function () {
            if (this.model.enabled && this._checkDelimiter()) {
                this._hideResult();
                this._autoFill = false;
                this._queryString = $.trim(this._queryString);
                if (this._queryString.length > 0) this._OnTextEnter();
            }
        },
        setVisible: function (value) {
            if (value)
                this.wrapper.show();
            else
                this.wrapper.hide();
        },

        hide: function () {
            this._hideResult();
        },

        _changeWatermark: function (text) {
            if (this._isWatermark) this.element.attr("placeholder", text);
            else this._hiddenSpan.text(text);
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.suggestionList.removeClass(this.model.cssClass).addClass(skin);
        },
        _setDropdown: function (boolean) {
            this.model.showPopupButton = boolean;
            if (boolean) this._renderDropdown();
            else this._destroyDropdown();
        },
        _changeHeight: function (height) {
            this.wrapper.height(height);
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },


        _init: function () {
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._initialize();
            this._render();
            this._wireEvents();
            this.initialRender = false;
			if(this.model.validationRules != null) {
			this._initValidator();
			this._setValidation();
         }			
        },

        _initValidator: function () {
            var proxy = this;
            this.element.closest("form").validate({
                ignore: ".e-hidden",
                errorClass: 'e-validation-error',
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    $(error).insertAfter(element.closest(".e-widget"));
                },
            });
        },
        _setValidation: function () {
            var element = this.model.multiSelectMode == "visualmode" ? this._hiddenInput : this.element;
            element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").validate();
            name = element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },


        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": this.model.dataSource = null; break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "delaySuggestionTimeout": this.model.delaySuggestionTimeout = parseInt(options[option]); break;
                    case "value":
                        options[option] = this._setValue(options[option]);
                        this._valueChange();
                        break;
                    case "showPopupButton": this._setDropdown(options[option]); break;
                    case "enableRTL": this._RightToLeft(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "readOnly": this._checkReadOnly(options[option]); break;
                    case "delimiterChar": var delchar = this.model.delimiterChar; options[option] = this._validateDelimiter(options[option]);
                        this.model.delimiterChar = options[option]; this.element.val(this.model.value.replace(new RegExp(delchar, 'g'), this.model.delimiterChar));
                        this.model.value = this.element.val();
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = options[option];
                        this._setValidation();
                        break;
                    case "validationMessage":
                        this.model.validationMessage = options[option];
                        this._setValidation(); break;
                    case "multiSelectMode":
                        this.model.multiSelectMode = options[option];
                        if (options[option] == "visualmode") {
                            if (this.model.validationRules != null)
                                this.element.rules('remove');
                            this._renderBoxModel();
                        }
                        else if (this.element.hasClass("e-visual-mode"))
                            this._destroyBoxModel();
                        this._setValue(this.model.value);
                        this._setValidation();
                        break;
                    case "enabled": this._disabled(!options[option]); break;
                    case "visible":
                        this.setVisible(options[option]);
                        break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "itemsCount ": if (options[option] <= 0 || isNaN(options[option])) options[option] = 0; break;
                    case "popupHeight": this.suggestionList.css({ "max-height": options[option] }); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "selectValueByKey": this.selectValueByKey(options[option]); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                }
            }
        },

        _destroy: function () {
            this.element.insertAfter(this.wrapper);
            if (this.model.multiSelectMode == "visualmode")
                this.element.attr("name", this._hiddenInput.attr("name"));
            this.wrapper.remove();
            this.element.removeClass("e-input").val("");
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.suggestionList.remove();
        },

        _initialize: function () {
            this.model.value = this.model.value === "" ? this.element[0].value : this.model.value;
            this.element.attr("role", "combobox").attr("aria-label", "Autocomplete textbox").attr("aria-expanded", false).attr("tabindex", 0).attr("aria-autocomplete", "list").attr("value", this.model.value);
            this.target = this.element[0];
            this.dropdownbutton = null;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            this.showSuggestionBox = false;
            this.noresult = true;
            this._queryString = null;
            this.suggLen = 0;
            this._selectedItems = [];

            this._activeItem = 0;
            this.ctrlKeyPressed = false;
            this._isFocused = false;
            this._isOpened = false;
            this._typed = false;
            this._cancelEvent = false;
            this._isWatermark = this._checkWatermarkSupport();
        },

        _render: function () {
            this._renderWrapper();
            this._addAttr(this.model.htmlAttributes);
            this._setDimentions();
            this._renderDropdown();
            this._checkProperties();
            this._isWatermark ? this._setWatermark() : this._setWatermarkTxt();
            this._renderSuggestionList();
            this._RightToLeft(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
            this.setVisible(this.model.visible);
            this._setListPosition();
        },
        _renderWrapper: function () {
            this.initialRender = true;
            this.element.addClass("e-input").attr("autocomplete", "off");
            this.wrapper = ej.buildTag("span.e-atc e-widget " + this.model.cssClass + "#" + this.target.id + "_wrapper").insertAfter(this.element);
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
            if (!this._isWatermark) {
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this.model.watermarkText);
                this._hiddenSpan.css("display", "none");
                var proxy = this;
                this._hiddenSpan.click(function (event) {
                    if (!this._isFocused) proxy.element.focus();
                });
            }
        },

        _renderDropdown: function () {
            if (this.model.showPopupButton) {
                var span = ej.buildTag("span.e-icon e-search").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                this.dropdownbutton = ej.buildTag("span.e-select#" + this.target.id + "_dropdown").attr((this._isIE8) ? { 'unselectable': 'on' } : {}).append(span);
                this.container.append(this.dropdownbutton).addClass("e-padding");
                this.dropdownbutton.bind("mousedown", $.proxy(this._OnDropdownClick, this));
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "required") proxy.element.attr(key, value);
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy._disabled(false);
                else if (key == "readOnly" && value == "readOnly") proxy._checkReadOnly(true);
                else proxy.wrapper.attr(key, value);
            });
        },
        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },

        _renderBoxModel: function () {
            this._ulBox = ej.buildTag("ul.e-ul e-boxes");
            this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            this._hiddenInput.attr("name", this.element.attr("name"));
            this.element.val("").removeAttr("name").addClass("e-visual-mode");
            this.element.width(1);
            this.container.prepend(this._hiddenInput, this._ulBox);
            this.wrapper.height("auto");

            this._on(this.container, "mousedown", function (e) {
                if (!this.model.enabled) return false;
                var $target = $(e.target);
                if (!$target.is(this.element)) {
                    e.preventDefault();
                    if (!this._isFocused) this.element.focus();
                    if ($target.hasClass("e-options")) {
                        if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
                        if ($target.hasClass("e-active")) $target.removeClass("e-active");
                        else $target.addClass("e-active");
                    }
                    else this._moveCaretToEnd(this.element[0]);
                }
                if (!e.ctrlKey && ($target.hasClass("e-boxes") || $target.hasClass("e-input"))) this._removeActive();
            });
        },
        _destroyBoxModel: function () {
            this.container.prepend(this.element);
            this.element.attr({ name: this._hiddenInput.attr("name") }).removeAttr("style").removeClass("e-visual-mode");
            this.wrapper.height(this.model.height);
            this._hiddenInput.remove();
            this._ulBox.remove();
            this._off(this.container, "mousedown");
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children();
            var item = items.last(), flag = item.hasClass("e-active");
            this._removeActive();
            flag ? this._deleteBox(item) : item.addClass("e-active");
        },
        _deleteBox: function (items) {
            for (var i = 0; i < items.length; i++) {
                var boxes = this._ulBox.children();
                var index = boxes.index(items[i]);
                this._selectedItems.splice(index, 1);

                var deli = this.model.delimiterChar;
                var values = this._hiddenInput.val().split(deli);
                values.splice(index, 1);
                this._hiddenInput.val(values.join(deli));
                $(items[i]).remove();
            }
            if (this.showSuggestionBox) this._refreshPopup();
            this._valueChange();
        },
        _removeActive: function () {
            this._ulBox.children("li.e-active").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = ej.buildTag("span", this.element.val()), wid, minWidth;
            this.container.append(tempSpan);
            minWidth = 30;  //  some additional width for textbox in visualmode
            wid = tempSpan.width() + minWidth;
            if (this.element.width() != wid)
                this.element.width(wid);
            tempSpan.remove();
        },

        _checkProperties: function () {
            this._checkReadOnly(this.model.readOnly);
            this.model.delimiterChar = this._validateDelimiter(this.model.delimiterChar);
            if (!this.model.enabled) {
                this.model.enabled = true;
                this._disabled(true);
            }
            else if (this.model.enabled && $(this.element).hasClass("e-disable")) {
                this.model.enabled = false;
                this._disabled(false);
            }
            this._checkNameAttr();
            if (this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            this.model.value = this._setValue(this.model.value);
            if (this.model.selectValueByKey != null)
                this.selectValueByKey(this.model.selectValueByKey);
        },

        _checkNameAttr: function () {
            if (!this.element.attr("name"))
                this.element.attr("name", this.element[0].id);
        },

        _disabled: function (boolean) {
            if (boolean) this.disable();
            else this.enable();
        },

        _destroyDropdown: function () {
            this.dropdownbutton.unbind("mousedown", $.proxy(this._OnDropdownClick, this));
            this.dropdownbutton.remove();
            this.dropdownbutton = null;
            this.container.removeClass("e-padding");
        },

        _validateDelimiter: function (deli) {
            if ($.trim(deli).length == 1) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },

        _checkWatermarkSupport: function () {
            return 'placeholder' in document.createElement('input');
        },
        _setWatermark: function () {
            if (this._isWatermark) this.element.attr("placeholder", this.model.watermarkText);
        },
        _setWatermarkTxt: function () {
            if (this.model.watermarkText != null && $.trim(this.element.val()) == "" && (this.model.multiSelectMode != "visualmode" || $.trim(this._hiddenInput.val()) == "")) {
                this._hiddenSpan.css("display", "block").text(this.model.watermarkText);
            }
        },

        _renderSuggestionList: function () {
            var oldWrapper = $("#" + this.element.context.id + "_suggestion").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.suggestionList = ej.buildTag("div.e-atc-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_suggestion", "", { "display": "none" }).attr("role", "listbox");
            this.element.attr("aria-owns", this.target.id + "_suggestion");
            this.popup = this.suggestionList;
            var scrollerDiv = ej.buildTag("div");
            this.ul = ej.buildTag("ul.e-ul").attr("role", "listbox");
            this.ul.on({
                mouseenter: $.proxy(this._OnMouseEnter, this),
                mouseleave: $.proxy(this._OnMouseLeave, this),
                click: $.proxy(this._OnMouseClick, this)
            }, "li:not('.e-category')");
            scrollerDiv.append(this.ul);
            this.suggestionList.append(scrollerDiv);
            $('body').append(this.suggestionList);
            this._setListWidth();
            this._setListHeight();
            this.suggestionList.ejScroller({ height: this.suggestionList.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.suggestionList.ejScroller("instance");
        },

        _checkEmptyList: function () {
            if (this.model.multiSelectMode == "visualmode") this._removeRepeated();
            if (this.suggestionListItems.length == 0) {
                this.suggestionListItems.push(this.model.emptyResultText);
                this.noresult = true;
            }
            else this.noresult = false;
        },
        _showSuggestionList: function () {
            this._checkEmptyList();
            this._addNewTemplate = null;
            if (this.noresult && this.model.multiSelectMode == "visualmode" && this.model.allowAddNew && this.element.val() != "") {
                this.noresult = false;
                this.suggestionListItems.pop();
                this._addNewTemplate = "   (" + this.model.addNewText + ")";
                this.suggestionListItems.push(this.element.val() + this._addNewTemplate);
                this._checkEmptyList();
            }

            if (!this.noresult || this.model.showEmptyResultText)
                this._generateSuggestionList();
        },

        _generateSuggestionList: function () {
            var list = this.suggestionListItems, i, suggList = [];
            this.ul.empty();

            if (typeof list[0] != "object") {

                if (this.model.enableDistinct) list = ej.dataUtil.distinct(list, "", true);
                for (i = 0; i < list.length; i++) {
                    var _txt = (this.model.highlightSearch && !this.noresult) ? this._highlightSuggestion(list[i]) : list[i];
                    this.ul.append(ej.buildTag("li", _txt).attr("role", "option").attr((this._isIE8) ? { 'unselectable': 'on' } : {}));
                }
                this._currList = list;
                this._mapper = { txt: null, key: null };
            }
            else {
                var mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null };
                mapFld._key = (mapper && mapper.key) ? mapper["key"] : "key";
                mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
                mapFld._attr = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
                this._mapper = { txt: mapFld._text, key: mapFld._key }, this._currList = [];
                if (this.model.enableDistinct) list = ej.dataUtil.distinct(list, mapFld._text, true);

                if (this.model.allowGrouping) {
                    var mapCateg = (mapper && mapper.category) ? mapper["category"] : "category", groupedList, _query;
                    _query = ej.Query().group(mapCateg);
                    this._addSortingQuery(_query, "key");
                    groupedList = ej.DataManager(list).executeLocal(_query);
                    this._swapUnCategorized(groupedList);
                    for (i = 0; i < groupedList.length; i++) {
                        if (groupedList[i].key)
                            this.ul.append(ej.buildTag("li.e-category", groupedList[i].key).attr("role", "option").attr((this._isIE8) ? { 'unselectable': 'on' } : {}));
                        this._generateLi(groupedList[i].items, mapFld);
                    }
                }
                else this._generateLi(list, mapFld);
            }
            if (this._getLiTags().length > 0) this._showResult();
        },

        _swapUnCategorized: function (list) {
            $(list).each(function (i, obj) {
                if (!obj.key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = obj;
                    return false;
                }
            });
        },

        _generateLi: function (list, mapFld) {
            for (var j = 0; j < list.length; j++) {
                var _text = this._getField(list[j], mapFld._text);
                var _key = this._getField(list[j], mapFld._key);
                if (!ej.isNullOrUndefined(_text)) {
                    if (this.model.highlightSearch) _text = this._highlightSuggestion(_text);
                    if (this.model.template) _text = this._getTemplatedString(list[j], mapFld._text, _text);

                    var li = document.createElement("li");
                    li.innerHTML += _text;
                    if (_key)
                        li.setAttribute("id", _key);
                    this._setAttributes(this._getField(list[j], mapFld._attr), li);
                    this.ul[0].appendChild(li);
                    this._currList = $.merge(this._currList, [list[j]]);
                }
            }
        },

        _getLiTags: function () {
            return this.ul.children("li:not('.e-category')");
        },

        _getTemplatedString: function (list, searchLabl, searchTxt) {
            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                var replace = this._getField(list, field);
                // if highlightSearch is enabled, it replaces the highlighted search text
                if (searchLabl == field) replace = searchTxt;
                if (!replace) replace = "";
                str = str.split(content).join(replace);
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },

        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },

        _setAttributes: function (data, element) {
            if (data) {
                for (var key in data)
                    element.setAttribute(key, data[key]);
            }
        },

        _setListWidth: function () {
            var width = this.model.popupWidth;
            if (width && width != "auto") this.suggestionList.css({ "width": width });
            else this.suggestionList.css({ "width": this.wrapper.width() });
        },

        _setListHeight: function () {
            this.suggestionList.css({ "max-height": this.model.popupHeight });
        },

        _refreshPopup: function () {
            if (this.model.popupWidth == "auto" && this.wrapper.outerWidth() != this.suggestionList.outerWidth()) {
                this.suggestionList.css({ "width": this.wrapper.width() });
                this._refreshScroller();
            }
            this._setListPosition();
        },

        _showResult: function () {
            this._refreshScroller();
            this._refreshPopup();
            if (this._isOpened)
                $(document).bind("mousedown", $.proxy(this._OnDocumentClick, this));
            else {
                this.suggestionList.css("display", "none");
                var tis = this;
                clearTimeout(this._typing);
                this._typing = setTimeout(function () {
                    tis.suggestionList.slideDown(200, "easeOutQuad", function () {
                        $(document).bind("mousedown", $.proxy(tis._OnDocumentClick, tis));
                    });
                }, this.model.delaySuggestionTimeout);
                this._trigger("open");
                this.wrapper.addClass("e-active");
            }

            this._isOpened = true;
            this.showSuggestionBox = true;
            var _suggestionListItems = this._getLiTags();
            this._listSize = _suggestionListItems.size();

            
            $(window).bind("resize", $.proxy(this._OnWindowResize, this));
            this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
        },

        _hideResult: function () {
            if (this.showSuggestionBox) {
                this.showSuggestionBox = false;
                this._activeItem = 0;
                this.element.attr("aria-expanded", false);
                if (this._isOpened) {
                    this.suggestionList.css("display", "none");
                    this._trigger("close");
                }
                else this.suggestionList.slideUp(100, "easeOutQuad");
                $(document).unbind("mousedown", $.proxy(this._OnDocumentClick, this));
                $(window).unbind("resize", $.proxy(this._OnWindowResize, this));
                this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
                this.wrapper.removeClass("e-active");
            }
        },

        _refreshScroller: function () {
            this.suggestionList.css("height", "auto");
            this.suggestionList.find(".e-content, .e-vscroll").removeAttr("style");
            this.suggestionList.find(".e-vscroll div").removeAttr("style");
            this.suggestionList.find(".e-content, .e-vhandle").removeAttr("style");
            this.suggestionList.find(".e-vhandle div").removeAttr("style");

            this.suggestionList.css("display", "block");

            if (this.suggestionList.height() > (parseInt(this.model.popupHeight.replace("px", "")) - 4)) {
                this.scrollerObj.model.height = this.suggestionList.height();
                this.scrollerObj.refresh();
                this.scrollerObj.option("scrollTop", 0);
                this.suggestionList.addClass("e-scroller")
            }
            else
                this.suggestionList.removeClass("e-scroller")
            this.suggestionList.css("height", "auto");
            if (this._isIE8)
                this.suggestionList.find('.e-vscroll div, .e-hscroll div').attr("unselectable", "on");
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.suggestionList.outerHeight(),
            popupWidth = this.suggestionList.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.suggestionList.outerWidth() - elementObj.outerWidth();
            this.suggestionList.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },
        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.suggestionList);
        },

        _targetFocus: function () {
            var minWidth = 30;  //  minimum width for textbox in visualmode
            if (this.model.multiSelectMode == "visualmode") this.element.width(minWidth);
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.wrapper.addClass("e-focus");
            this._isFocused = true;


            this._trigger("focusIn", { value: this.model.value });
        },

        _targetBlur: function () {
            this._isFocused = false;
            this.wrapper.removeClass("e-focus");
            !this._isWatermark && this._setWatermarkTxt();
            this._removeSelection();

            if (this.model.multiSelectMode == "visualmode") {
                this._removeActive();
                this.element.val("").width(1);
                this._preVal = "";
            }
            else {
                if (this.model.multiSelectMode == "delimiter") {
                    if (this._checkDeli())
                        this._valueChange();
                }
                this._updateSelectedItemArray();
            }
            this._trigger("focusOut", { value: this.model.value });
        },

        _checkDeli: function () {
            var val, deli, last;
            val = this.element.val();
            deli = this.model.delimiterChar;
            last = val.substr(val.length - deli.length, val.length);
            if (last == deli) {
                this.element.val(val.substr(0, val.length - deli.length));
                return true;
            }
            else return false;
        },
        _removeSelection: function () {
            if (this.model.enableAutoFill) {
                this.element.attr("aria-autocomplete", "both");
                var selection = this._getCaretSelection();
                if (selection.end - selection.start != 0 && selection.end - selection.start != this.element.val().length)
                    this.target.value = this.target.value.substr(0, selection.start);
            }
        },

        _removeListHover: function () {
            this._getLiTags().removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = $(this._getLiTags()[this._activeItem - 1]);
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
            activeItem.focus();
        },

        _calcScrollTop: function () {
            var ulH = this.ul.outerHeight(), li = this.ul.find("li"), liH = 0, index, top, i;
            index = this.ul.find("li.e-hover").index();
            liH = li.eq(0).outerHeight() * index;
            top = liH - ((this.suggestionList.outerHeight() - li.eq(index).outerHeight()) / 2);
            return top;
        },

        _getActiveText: function () {
            if (this._mapper.txt) return this._getField(this._currList[this._activeItem - 1], this._mapper.txt);
            else return this._currList[this._activeItem - 1];
        },

        _getUniqueKey: function () {
            var key = null;
            if (this._mapper.key) key = this._getField(this._currList[this._activeItem - 1], this._mapper.key);
            ej.isNullOrUndefined(key) && (key = null);
            return key;
        },

        _setTextBoxValue: function () {
            if (this._activeItem && !this.noresult) {
                var currentValue, selection, val, text;
                currentValue = this._getActiveText();
                selection = this._getCaretSelection();
                this.suggLen = selection.start;
                val = this.target.value.substr(0, this.suggLen);

                if (val && val.toLowerCase() == currentValue.substr(0, this.suggLen).toLowerCase()) {
                    if (this.model.multiSelectMode == "delimiter") {
                        var _deliIndex = (this.target.value).lastIndexOf(this.model.delimiterChar);
                        var query = $.trim(val.substr(_deliIndex + 1, this.suggLen));
                        text = val + currentValue.substr(query.length, currentValue.length);
                    }
                    else {
                        text = val + currentValue.substr(val.length, currentValue.length);
                    }
                    this.element.val(text);
                    this._autofilSelection();
                    if (this.model.multiSelectMode == "visualmode")
                        this._adjustWidth();
                    if (this.model.autoFocus && !this.noresult) this._addListHover();
                }
                else this._removeSelection();
            }
        },

        _enterTextBoxValue: function () {
            if (this._activeItem && !this.noresult && !this.model.readOnly) {
                var currentValue = this._getActiveText(), currItem = this._currList[this._activeItem - 1];
                this._valueToTextBox(currentValue, currItem, false);
                var _value = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();

                this._trigger("select", { value: _value, text: currentValue, key: this._getUniqueKey() });
                this._valueChange();
            }
            this._trigger("close");
        },

        _createBox: function (value) {
            var span = ej.buildTag("span.e-icon e-close");
            var li = ej.buildTag("li.e-options", value).append(span);

            this._on(span, "click", function (e) {
                if (!this.model.enabled) return false;
                this._deleteBox($(e.target).parent());
            });
            return li;
        },

        _addLoadingClass: function () {
            if (this.model.showLoadingIcon)
                this.element.addClass("e-load");
        },

        _removeLoadingClass: function () {
            this.element.removeClass("e-load");
        },


        _highlightSuggestion: function (suggestion) {
            if ($.trim(this._queryString) != "") {
                var caseSensitive, tempQueryString, RegEx, mch, split, query, str;
                caseSensitive = this.model.caseSensitiveSearch ? "g" : "gi";
                query = $.trim(this._queryString);
                tempQueryString = this.model.filterType == "startswith" ? "^" + query : query;
                RegEx = new RegExp(tempQueryString, caseSensitive);

                if (RegEx.test(suggestion)) {
                    mch = suggestion.match(RegEx);
                    //for IE-8 the regEx doesnt returns the empty string.So manually we replace string to return empty string.
                    str = suggestion.replace(RegEx, "~^");
                    split = str.split("~^");
                    suggestion = "";
                    $(split).each(function (i, val) {
                        if (mch[i])
                            suggestion += val + "<span class='e-hilight-txt'>" + mch[i] + "</span>";
                        else
                            suggestion += val;
                    });
                }
            }
            return suggestion;
        },

        _RightToLeft: function (value) {
            if (value) {
                this.wrapper.addClass("e-rtl");
                this.suggestionList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                this.suggestionList.removeClass("e-rtl");
            }
        },

        _setRoundedCorner: function (value) {
            if (value) {
                this.container.addClass("e-corner");
                this.suggestionList.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                this.suggestionList.removeClass("e-corner");
            }
        },

        _checkReadOnly: function (value) {
            this.model.readOnly = value;
            if (this.model.readOnly) {
                this.element.attr({ "readonly": "readonly", "aria-readonly": true });
                this._off(this.element, "keydown", this._OnKeyDown);
                this._off(this.element, "keyup", this._OnKeyUp);
            }
            else {
                this.element.removeAttr("readonly").removeAttr("aria-readonly");
                this._on(this.element, "keydown", this._OnKeyDown);
                this._on(this.element, "keyup", this._OnKeyUp);
            }
        },

        _OnKeyDown: function (e) {
            if (this.model.filterType != "startswith")
                this.model.enableAutoFill = false;

            switch (e.keyCode) {
                case 37:
                case 35:
                case 36:
                    this._removeSelection();
                case 39:
                    break;
                case 38:
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem > 1)
                            this._activeItem -= 1;
                        else
                            this._activeItem = this._listSize;
                        this._addListHover();
                        if (this.model.enableAutoFill) {
                            this.element.attr("aria-autocomplete", "both");
                            this._queryString = this.target.value;
                            this._setTextBoxValue();
                        }
                    }
                    this._PreventDefaultAction(e);
                    break;
                case 40:
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem < this._listSize)
                            this._activeItem += 1;
                        else
                            this._activeItem = 1;
                        this._addListHover();
                        if (this.model.enableAutoFill) {
                            this.element.attr("aria-autocomplete", "both");
                            this._queryString = this.target.value;
                            this._setTextBoxValue();
                        }
                    }
                    this._PreventDefaultAction(e);
                    break;
                case 8:
                    if ($.trim(this.element.val()) == "") this._isOpened = false;
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteLastBox();
                    }
                    break;
                case 17:
                    this.ctrlKeyPressed = true;
                    break;
                case 13:
                    e.preventDefault();
                    break;
                case 9:
                    if (this.showSuggestionBox) {
                        this._queryString = this.element.val();
                        this._enterTextBoxValue();
                        this._hideResult();
                        this._isOpened = false;
                        this._PreventDefaultAction(e);
                    }
                    break;
                case 27:
                    this._isOpened = false;
                    this._hideResult();
                    this._PreventDefaultAction(e);
                    break;
            }
            if (this.model.multiSelectMode == "visualmode") {
                if (e.keyCode != 17 && e.keyCode != 8 && e.keyCode != 46) this._removeActive();
                this._adjustWidth();
            }
        },


        _PreventDefaultAction: function (e) {

            e.preventDefault();
            if (!this._cancelEvent) {
                e.stopPropagation();
                e.cancelBubble = true;
                e.returnValue = true;
            }

        },
        _bubbleEvent: function (cancelevent) {

            if (typeof cancelevent == "boolean")
                this._cancelEvent = cancelevent;
            return this._cancelEvent;
        },


        _OnKeyUp: function (e) {
            this._keyDownComplete();
            if (this.ctrlKeyPressed) {
                if (e.keyCode == 17)
                    this.ctrlKeyPressed = false;
                return false;
            }

            if ($.trim(this.element.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                this._hideResult();
                return false;
            }
            if (!this._checkDelimiter()) return false;
            this._queryString = $.trim(this._queryString);

            switch (e.keyCode) {
                case 38:
                case 40:
                case 37:
                case 39:
                case 20:
                case 16:
                case 17:
                case 18:
                case 35:
                case 36:
                case 144:
                case 9:
                case 27: break;

                case 13:
                    e.preventDefault();
                    this._queryString = this.element.val();
                    this._enterTextBoxValue();
                    if (this.model.enableAutoFill) {
                        this.element.attr("aria-autocomplete", "both");
                        this.suggLen = this.element.val().length;
                        this._autofilSelection();
                    }
                    this._isOpened = false;
                    this._hideResult();
                    break;

                case 46:
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteBox(this._ulBox.children("li.e-active"));
                        break;
                    }
                case 8:
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = false;
                        this._OnTextEnter();
                    }
                    else {
                        this.noresult = true;
                        this._hideResult();
                        if ($.trim(this.element.val()) == "") {
                            this._isOpened = false;
                            this._trigger("close");
                        }
                    }
                    break;

                default:
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = true;
                        this._OnTextEnter();
                    }
                    else this.noresult = true;
                    this._typed = true;
                    break;
            }
        },

        _getFilteredList: function (list) {
            if (!list || !list.length || list.length < 1) this.suggestionListItems = [];
            else {
                var tempQuery = ej.Query();
                this._addQuery(tempQuery, typeof list[0] == "object");
                this.suggestionListItems = ej.DataManager(list).executeLocal(tempQuery);
            }
            this._doneRemaining();
        },

        _performSearch: function () {
            var source = this.model.dataSource;
            if (ej.DataManager && source instanceof ej.DataManager) {
                if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
                    window.clearTimeout(this.timer);
                    var proxy = this;

                    this.timer = window.setTimeout(function () {
                        proxy._fetchRemoteDat(source);
                    }, 700);
                }
                else this._getFilteredList(source.dataSource.json);
            }
            else this._getFilteredList(source);
        },

        _fetchRemoteDat: function (source) {
            var proxy = this, queryPromise, tempQuery = this._getQuery();
            this._addQuery(tempQuery, true);
            queryPromise = source.executeQuery(tempQuery);
            queryPromise.fail(function (e) {
                proxy.suggestionListItems = null;
                proxy._removeLoadingClass();
            }).done(function (e) {
                proxy.suggestionListItems = e.result;
                proxy._doneRemaining();
            });
        },

        _addSortingQuery: function (query, key) {
            if (this.model.allowSorting) {
                var order = (this.model.sortOrder == "descending") ? true : false;
                query.sortBy(key, order);
            }
        },

        _addQuery: function (_query, checkMapper) {
            var bindTo = "";
            if (checkMapper) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
            }
            if (this._queryString) _query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);
            this._addSortingQuery(_query, bindTo);
            if (this.model.itemsCount > 0) _query.take(this.model.itemsCount);
        },

        _getQuery: function () {
            if (ej.isNullOrUndefined(this.model.query)) {
                var column = [], queryManager = ej.Query(), mapper = this.model.fields;
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!this.model.dataSource.dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else queryManager = this.model.query.clone();
            return queryManager;
        },

        _OnTextEnter: function () {
            this._addLoadingClass();
            this.element.attr("aria-expanded", false);
            this._performSearch();
        },

        _doneRemaining: function () {
            this._showSuggestionList();
            this.element.attr("aria-expanded", true).attr("aria-haspopup", true);
            if (this.model.enableAutoFill && this._autoFill && !this.noresult || this.model.autoFocus) {
                this.element.attr("aria-autocomplete", "both");
                this._activeItem = 1;
                this._queryString = this.target.value;
            }
            if (this.model.enableAutoFill && this._autoFill && !this.noresult) this._setTextBoxValue();
            if (this.model.autoFocus && !this.noresult) this._addListHover();
            this._removeLoadingClass();
            if (this.noresult && !this.model.showEmptyResultText)
                this._hideResult();
        },

        _removeRepeated: function () {
            var results = this.suggestionListItems;
            if (!results || results.length == 0 || this._selectedItems.length == 0)
                return false;
            for (var i = 0; i < this._selectedItems.length; i++) {
                var index = results.indexOf(this._selectedItems[i]);
                if (index != -1) this.suggestionListItems.splice(index, 1);
            }
        },

        _checkDelimiter: function () {
            this._queryString = this.element.val();
            var _deliIndex = (this.model.multiSelectMode != "delimiter") ? -1 : this._queryString.lastIndexOf(this.model.delimiterChar);


            if (_deliIndex == -1) {
                return true;
            }
            else if (_deliIndex + 1 == this._queryString.length) {
                this._hideResult();
                return false;
            }
            else {
                this._queryString = this._queryString.substr(_deliIndex + 1, this._queryString.length);
                return true;
            }
        },

        _autofilSelection: function () {
            var element = this.element[0], totLen = this.element.val().length;

            if (element.setSelectionRange)
                element.setSelectionRange(this.suggLen, totLen);
            else if (element.createTextRange) {

                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', totLen);
                element.moveStart('character', this.suggLen);
                element.select();
            }
        },

        _OnDropdownClick: function (e) {
            if (this.model.enabled && !this.model.readOnly) {
                e.preventDefault();
                this._addLoadingClass();
                if (this.showSuggestionBox) {
                    this._isOpened = false;
                    this._hideResult();
                    this._removeLoadingClass();
                }
                else this._showFullList();
            }
        },

        _showFullList: function () {
            if (!this._isFocused)
                this.element.focus();
            this._queryString = null;
            this._autoFill = false;
            this._performSearch();
        },

        _OnMouseEnter: function (e) {
            var targetEle = e.target;
            if (e.target.tagName != "LI") targetEle = $(e.target).parents("li");
            this._getLiTags().removeClass("e-hover");
            $(targetEle).addClass("e-hover");

            this._queryString = this.element.val();
            this._activeItem = this._getLiTags().index($(targetEle)) + 1;
        },

        _OnMouseLeave: function (e) {
            this._getLiTags().removeClass("e-hover");
            if (this.model.highlightSearch)
                this._getLiTags().find(".e-hilight-txt").removeClass("e-hover");
        },

        _OnMouseClick: function (e) {
            if (!this.noresult) {
                this._enterTextBoxValue();
                this._isOpened = false;
                this._hideResult();
            }
        },

        _OnDocumentClick: function (e) {
            if (!$(e.target).is(this.suggestionList) && !$(e.target).parents(".e-atc-popup").is(this.suggestionList) &&
                !$(e.target).is(this.element) && !$(e.target).parents(".e-atc").is(this.wrapper)) {
                this._isOpened = false;
                this._hideResult();
                this._trigger("close");
            }
            else if ($(e.target).is(this.suggestionList) || $(e.target).parents(".e-atc-popup").is(this.suggestionList))
                e.preventDefault();
        },

        _OnWindowResize: function (e) {
            this._refreshPopup();
        },

        _valueChange: function () {
            var currValue = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
            if (this.model.value != currValue) {
                this.model.value = currValue;
                if (!this.initialRender) {
                    this._trigger("change", { value: currValue });
                    this._trigger("_change", { value: currValue });
                }
            }
        },

        _updateSelectedItemArray: function (e) {
            var value = this.getValue(), values = [];
            this._selectedItems = [];
            this.suggestionListItems = this.model.dataSource;
            if (this.model.multiSelectMode == "delimiter") {
                values = value.split(this.model.delimiterChar);
                if ((ej.DataManager && this.model.dataSource instanceof ej.DataManager) || ((!ej.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object"))) {
                    for (var i = 0; i < values.length; i++) {
                        if (values[i])
                            this._selectedItems.push(values[i]);
                    }
                }
                else
                    this._createBoxForObjectType(values);
            }
            else if (this.model.multiSelectMode == "none" && value) {
                values.push(value);
                if ((ej.DataManager && this.model.dataSource instanceof ej.DataManager) || ((!ej.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object")))
                    this._selectedItems.push(value);
                else
                    this._createBoxForObjectType(values);
            }
        },

        _keyDownComplete: function () {
            var currValue = this.element.val();
            if (this._preVal != currValue) {
                this._preVal = currValue;
                if (this.model.multiSelectMode == "visualmode") this._adjustWidth();
                this._valueChange();
            }
        },

        _moveCaretToEnd: function (el) {
            if (typeof el.selectionStart == "number") {
                el.selectionStart = el.selectionEnd = el.value.length;
            } else if (typeof el.createTextRange != "undefined") {
                var range = el.createTextRange();
                range.collapse(false);
                range.select();
            }
        },

        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;

            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }

            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },



        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
        }
    });

    ej.filterType = {
        /**  Supports to search text with startswith  */
        StartsWith: "startswith",
        /**  Supports to search text with contains */
        Contains: "contains",
        /**  Supports to search text with endswith */
        EndsWith: "endswith",
        /**  Supports only for number lessthan only */
        LessThan: "lessthan",
        /**  Supports only for number greaterthan only */
        GreaterThan: "greaterthan",
        /**  Supports only for number lessthanorequal only */
        LessThanOrEqual: "lessthanorequal",
        /**  Supports only for number greaterthanorequal only */
        GreaterThanOrEqual: "greaterthanorequal",
        /**  Supports only for number equal only */
        Equal: "equal",
        /** Supports only for number notequal only */
        NotEqual: "notequal"
    };

    ej.SortOrder = {
        /** Supports to sorts with ascending only */
        Ascending: "ascending",
        /** Supports to sorts with descending only */
        Descending: "descending"
    };

    ej.MultiSelectMode = {
        /** Supports to selection mode with none only */
        None: "none",
        /** Supports to selection mode with delimitter only */
        Delimiter: "delimiter",
        /** Supports to selection mode with visualmode only */
        VisualMode: "visualmode"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin provides support to display calendar within your web page and allows to pick the date.
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDatePicker", "ej.DatePicker", {

        element: null,
        _rootCss: "e-datepicker",

        model: null,
        validTags: ["input", "div", "span"],
        _setFirst: false,
        _cancelValue: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            priority: 1
        },


        defaults: {

            dayHeaderFormat: "min",

            showPopupButton: true,

            enableAnimation: true,

            showFooter: true,

            displayInline: false,

            htmlAttributes: {},

            dateFormat: '',

            watermarkText: "Select date",

            value: null,

            minDate: new Date(1900, 01, 01),

            maxDate: new Date(2099, 12, 31),

            startLevel: "month",

            depthLevel: "",

            cssClass: "",

            startDay: -1,

            stepMonths: 1,

            locale: "en-US",

            showOtherMonths: true,

            enableStrictMode: false,

            enablePersistence: false,

            enabled: true,

            width: "",

            height: "",

            enableRTL: false,

            showRoundedCorner: false,

            headerFormat: 'MMMM yyyy',

            buttonText: 'Today',

            readOnly: false,

            specialDates: null,

            fields: {

                date: "date",

                tooltip: "tooltip",

                iconClass: "iconClass",
            },

            showTooltip: true,

            highlightSection: "none",

            highlightWeekend: false,

            validationRules: null,

            validationMessage: null,

            allowEdit: true,
            tooltipFormat: "ddd MMM dd yyyy",
            allowDrilDown: true,
            beforeDateCreate: null,

            open: null,

            close: null,

            select: null,

            change: null,

            focusIn: null,

            focusOut: null,

            beforeOpen: null,
            beforeClose:null,
            create: null,

            destroy: null

        },


        dataTypes: {
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            displayInline: "boolean",
            showPopupButton: "boolean",
            locale: "string",
            readOnly: "boolean",
            cssClass: "string",
            dateFormat: "string",
            watermarkText: "string",
            headerFormat: "string",
            buttonText: "string",
            specialDates: "data",
            showTooltip: "boolean",
            highlightSection: "enum",
            highlightWeekend: "boolean",
            enableAnimation: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
            tooltipFormat: "string",
            allowEdit: "boolean",
            allowDrilDown: "boolean"
        },

        _setModel: function (jsondata) {
            var callRefresh = false, start = false, validate = false;
            for (var key in jsondata) {
                switch (key) {
                    case "dayHeaderFormat":
                        this.model.dayHeaderFormat = jsondata[key];
                        callRefresh = true;
                        start = true;
                        break;
                    case "showPopupButton":
                        this._renderDateIcon(jsondata[key], true);
                        break;
                    case "displayInline":
                        this._setDisplayInline(jsondata[key]);
                        if (!this.model.allowEdit && !jsondata[key] && this._isInputBox())                            
                            this.element.bind("mousedown", $.proxy(this._showDatePopUp, this));
                        break;
                    case "value":
                        if (ej.isNullOrUndefined(jsondata["minDate"]) && ej.isNullOrUndefined(jsondata["maxDate"])) {
                            this._setDateValue(jsondata[key]);
                            jsondata[key] = this.model.value;
                        }
                        else
                            this._updateDateValue(jsondata[key]);
                        validate = true;
                        start = true;
                        callRefresh = true;
                        break;
                    case "specialDates":
                        this.model.specialDates = jsondata[key];
                        this._createSpecialDateObject();
                        callRefresh = true;
                        start = true;
                        break;
                    case "fields":
                        this.model.fields = jsondata[key];
                        this._mapField = this._getMapper();
                        callRefresh = true;
                        start = true;
                        break;
                    case "showTooltip":
                        this.model.showTooltip = jsondata[key];
                        callRefresh = true;
                        start = true;
                        break;
                    case "highlightWeekend":
                        this.model.highlightWeekend = jsondata[key];
                        callRefresh = true;
                        start = true;
                        break;
                    case "highlightSection":
                        this.model.highlightSection = jsondata[key];
                        callRefresh = true;
                        start = true;
                        break;
                    case "dateFormat":
                        this.model.dateFormat = jsondata[key];
                        this._setDateValue(this.model.value);
                        break;
                    case "minDate":
                        this._setMinDate(jsondata[key]);
                        jsondata[key] = this.model.minDate;
                        validate = true;
                        callRefresh = true;
                        start = true;
                        break;
                    case "maxDate":
                        this._setMaxDate(jsondata[key]);
                        jsondata[key] = this.model.maxDate;
                        validate = true;
                        callRefresh = true;
                        start = true;
                        break;
                    case "locale":
                        this.model.locale = jsondata[key];
                        this.model.startDay = ((ej.isNullOrUndefined(this._options.startDay)) && (this.model.startDay === this.culture.calendar.firstDay))
                            ? -1 : this.model.startDay;
                        this.model.dateFormat = ((ej.isNullOrUndefined(this._options.dateFormat)) && (this.model.dateFormat === this.culture.calendar.patterns.d))
                            ? '' : this.model.dateFormat;
                        this._setCulture(jsondata[key]);
                        this._setDateValue(this.model.value);
                        jsondata[key] = this.model.locale;
                        callRefresh = true;
                        start = true;
                        break;
                    case "showOtherMonths":
                        this.model.showOtherMonths = jsondata[key];
                        this._otherMonthsVisibility();
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = jsondata[key];
                        validate = true;
                        callRefresh = true;
                        start = true;
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = jsondata[key];
                        this._setValidation();
                        break;
                    case "validationMessage":
                        this.model.validationMessage = jsondata[key];
                        this._setValidation(); break;
                    case "readOnly":
                        this.model.readOnly = jsondata[key];
                        this._disbleMaualInput();
                        break;
                    case "width":
                        this._setWidth(jsondata[key]);
                        break;
                    case "height":
                        this._setHeight(jsondata[key]);
                        break;
                    case "cssClass":
                        this._setSkin(jsondata[key]);
                        break;
                    case "enableRTL":
                        this._setRTL(jsondata[key]);
                        break;
                    case "showRoundedCorner":
                        this._setRoundedCorner(jsondata[key]);
                        break;
                    case "enabled":
                        if (!jsondata[key]) this.disable();
                        else this.enable();
                        break;
                    case "buttonText":
                        this._setFooterText(jsondata[key]);
                        break;
                    case "showFooter":
                        this._enableFooter(jsondata[key]);
                        break;
                    case "watermarkText":
                        this.model.watermarkText = jsondata[key]; this._setWaterMark();
                        break;
                    case "startDay":
                        if (parseInt(jsondata[key]) < 0 || parseInt(jsondata[key]) > 6) jsondata[key] = 0;
                        this.model.startDay = jsondata[key];
                        callRefresh = true;
                        start = true;
                        break;
                    case "startLevel":
                        this.model.startLevel = jsondata[key];
                        callRefresh = true;
                        start = true;
                        break;
                    case "headerFormat":
                        this.model.headerFormat = jsondata[key];
                        callRefresh = true;
                        start = true;
                        break;
                    case "depthLevel":
                        this.model.depthLevel = jsondata[key];
                        callRefresh = true;
                        start = true;
                        break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "allowEdit": this._changeEditable(jsondata[key]); break;
                    case "tooltipFormat":
                        this.model.tooltipFormat = jsondata[key];
                        callRefresh = true;
                        start = true;
                        break;
                    case "allowDrilDown":
                        this._allowQuickPick(jsondata[key]);
                        callRefresh = true;
                        start = true;
                        break;
                }
            }
            if (validate) {
                this._validateMinMaxDate();
                jsondata["value"] = this.model.value;
                jsondata["maxDate"] = this.model.maxDate;
                jsondata["minDate"] = this.model.minDate;
            }
            this._setWaterMark();

            if (callRefresh && this.isValidState)
                this._refreshDatepicker();
            if(start)this._startLevel(this.model.startLevel);
            this._triggerChangeEvent();
            this._checkErrorClass();
        },
        observables: ["value"],

        _destroy: function () {
            if (this._isOpen)
                this.hide();
            this.sfCalendar.remove();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
            }
            this.element.removeClass('e-datepicker e-input');
        },

        _init: function (options) {
            this._options = options;
            this._dt_drilldown = false;
            this.animation = {
                open: { type: "easeOutQuad", duration: 200 },
                close: { type: "easeOutQuad", duration: 100 }
            };
            this._animating = false;
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            this._checkAttribute();
            this._setValues();
            this._createDatePicker();
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
        },



        _initValidator: function () {
            var proxy = this;
            this.element.closest("form").validate({
                ignore: ".e-hidden",
                errorClass: 'e-validation-error',
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    $(error).insertAfter(element.closest(".e-widget"));
                },
            });
        },
        _setValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").validate();
            name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
        _checkAttribute: function () {
            var attr = ["min", "max", "readonly", "disabled"], propName = ["minDate", "maxDate", "readOnly", "enabled"], value, propValue;
            for (var i = 0; i < attr.length; i++) {
                value = this.element.attr(attr[i]); propValue = propName[i];
                if (!ej.isNullOrUndefined(value)) {
                    if (ej.isNullOrUndefined(this._options))
                        this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                    else if (ej.isNullOrUndefined(this._options[propValue]))
                        this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                }
            }
        },
        _updateDateValue: function (value) {
            var date = this._checkDateObject(value);
            if (date != null) {
                this.isValidState = true;
                if (date == "") {
                    this.element.val("");
                    this.model.value = "";
                } else {
                    this.model.value = date;
                    this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
                }
            }
            else {
                (typeof date === "string" && this.model.enableStrictMode) ? this.element.val(value) : this.element.val("");
                this.model.value = "";
                this.isValidState = (this.element.val() == "") ? true : false;
            }
            this._removeWatermark();
        },
        _changeEditable: function (bool) {
            var action = bool ? "_on" : "_off";
            if (this.element.is(":input")) {
                if (bool) {
                    if (!this.model.readOnly) this.element.attr("readonly", false);
                    this.element.unbind("mousedown", $.proxy(this._showDatePopUp, this));
                }
                else {
                    if (!this.model.readOnly) this.element.attr("readonly", "readonly");
                    if (!this.model.displayInline) this.element.bind("mousedown", $.proxy(this._showDatePopUp, this));
                }
                this[action](this.element, "blur", this._onFocusOut);
                this[action](this.element, "focus", this._onFocusIn);
                this[action](this.element, "keyup", this._keyUp);
            }
        },
        _allowQuickPick: function (value) {           
            $('.e-datepicker-headertext', this.sfCalendar)[value ? "on" : "off"]("click", $.proxy(this._forwardNavHandler, this));
        },
        _setValues: function () {
            this.Date = new Date();
            this._id = this.element[0].id;
            this.isValidState = true;
            this._setCulture(this.model.locale);
            this._setMinDate(this.model.minDate);
            this._setMaxDate(this.model.maxDate);
            this._calendarDate = this._zeroTime(new Date());
            if (this.model.startDay < 0 || this.model.startDay > 6) this.model.startDay = 0;
            this.Date.firstDayOfWeek = this.model.startDay;
            this.Date.fullYearStart = '20';
            this._showHeader = true;
            if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "")
                this.model.value = this.element[0].value;
            this._validateMinMaxDate();
            this._dateValue = new Date(this._calendarDate.toString());
            this._isIE7 = this._checkIE7();
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            this._isIE9 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "9.0") ? true : false;
            // this variable is set to true in DateTimePicker control
            this._getInternalEvents = false;
            this._flag = true;
            this._ejHLWeekEnd = false;
            this._isOpen = false;
            this._prevDate = null;
            this._isFocused = false;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "required") proxy.element.attr(key, value);
                else if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else if (key == "readOnly" && value == "readOnly") proxy.model.readOnly = true;
                else proxy.wrapper.attr(key, value);

            });
        },
        _createDatePicker: function () {
            this._createWrapper();
            this._wireEvents();
            if (this.model.displayInline)
                this.show();
            if (this.model.enableRTL) this._setRTL(true);
            if (this.model.showRoundedCorner) this._setRoundedCorner(true);
        },
        _checkNameAttr: function () {
            if (!this.element.attr("name") && this._isInputBox())
                this.element.attr("name", this.element[0].id);
            if (this.model.displayInline && !this._isInputBox())
                this._hiddenInput.attr("name", this.element[0].id);
        },
        _createWrapper: function () {
            this._mapField = this._getMapper();
            if (this.model.specialDates) {
                this._createSpecialDateObject();
            }
            if (this._isInputBox()) {
                this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'tabindex': '0' });
                this.wrapper = ej.buildTag("span.e-datewidget e-widget " + this.model.cssClass);
                this.innerWrapper = ej.buildTag("span.e-in-wrap e-box");
                this.wrapper.append(this.innerWrapper).insertBefore(this.element);
                this.innerWrapper.append(this.element);
                this.innerWrapper.addClass('e-padding');
                this.dateIcon = ej.buildTag("span.e-select#" + this._id + "-img", "", {}, (this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(ej.buildTag("span.e-icon e-date", "", {}, { 'aria-label': 'Select' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})).insertAfter(this.element);
            }
            if (!this._isSupport || (this.model.displayInline && !this._isInputBox())) {
                this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                if (this._isInputBox()) this._hiddenInput.val(this.model.watermarkText);
                this._hiddenInput.css("display", "block");
                var proxy = this;
                $(this._hiddenInput).focus(function () {
                    proxy.element.focus();
                });
            }
            this._checkNameAttr();
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            if (this._id)
                $("#e-" + this._id).remove();
            this.sfCalendar = ej.buildTag('div.e-datepicker e-popup e-widget ' + this.model.cssClass + ' e-calendar ' + (this.model.specialDates ? (this.model.specialDates[0][this._mapField._icon] ? 'e-icons ' : '') : ''), "", {}, { id: (this._id ? 'e-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                .insertBefore(this.element);
            if (this.model.displayInline && !this.element.is("input"))
                this.sfCalendar.addClass('e-inline');
            this.popup = this.sfCalendar;
            this._resizeCalender();
            this._setDateValue(this.model.value);
            this._preValue = this._parseDate(this.element.val(), this.model.dateFormat);
            this._setWaterMark();
            this._dateValue = new Date(this._calendarDate.toString());
            this._createCalender();
            this._setDisplayInline(this.model.displayInline);
            if (this.model.readOnly) this._disbleMaualInput();
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && $(this.element).hasClass("e-disable")) this.enable();
            this._layoutChanged();
            this._checkErrorClass();
            this._addAttr(this.model.htmlAttributes);
        },
        _isInputBox: function () {
            return (this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type')));
        },

        _renderDateIcon: function (bool, reRender) {
            if (reRender && this.model.showPopupButton == bool) return;
            if (!bool && this.dateIcon) {
                this._bindInputEvent();
                this.dateIcon.css('display', 'none');
                this.innerWrapper.removeClass('e-padding');
            }
            else {
                if (this.innerWrapper) {
                    this.innerWrapper.addClass('e-padding');
                    this.dateIcon.css('display', 'block');
                }
                if (!this.model.displayInline)
                    this._bindDateButton();
            }
            this.model.showPopupButton = bool;
        },

        _resizeCalender: function () {
            if ((this.model.dayHeaderFormat == "short") || (this.model.dayHeaderFormat == "min") || (this.model.dayHeaderFormat == "none"))
                this.sfCalendar.removeClass("e-headerlong");
            else if (this.model.dayHeaderFormat == "long") {
                this.sfCalendar.addClass("e-headerlong");
            }
        },

        _setWidth: function (value) {
            if (value) {
                if (this.wrapper) this.wrapper.width(value);
                else this.element.width(value);
            }
            else
                this.model.width = this.wrapper ? this.wrapper.outerWidth() : this.element.width();
        },
        _setHeight: function (value) {
            if (value) {
                if (this.wrapper) this.wrapper.height(value);
                else this.element.height(value);
            }
            else
                this.model.height = this.wrapper ? this.wrapper.outerHeight() : this.element.height();
            if (this._isIE7) this.element.height(this.innerWrapper.height());
        },
        _setRTL: function (isRTL) {
            if (isRTL) {
                if (this.wrapper) {
                    this.wrapper.addClass("e-rtl");
                }
                this.sfCalendar.addClass("e-rtl");
            }
            else {
                if (this.wrapper) {
                    this.wrapper.removeClass("e-rtl");
                }
                this.sfCalendar.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (bool) {
            if (bool) {
                if (this.innerWrapper)
                    this.innerWrapper.addClass("e-corner");
                this.sfCalendar.addClass("e-corner");
            }
            else {
                if (this.innerWrapper)
                    this.innerWrapper.removeClass("e-corner");
                this.sfCalendar.removeClass("e-corner");
            }
        },

        _refreshDatepicker: function () {            
            var _currentVal = this.element.val();
            //  For checking the year maximum range....
            var currentValue = this._parseDate(_currentVal, this.model.dateFormat);
            currentValue = this._validateYearValue(currentValue);
            this._setDateValue(currentValue);
            $(".e-datepicker-headertext", this.sfCalendar).text(this._formatter(this._calendarDate, this.model.headerFormat));
            this._resizeCalender();
            this._dateValue = new Date(this._calendarDate.toString());
            this._hoverDate = this._calendarDate.getDate() - 1;
            this._renderCalendar(this, this._dateValue);
            this._setFooterText(this.model.buttonText);
            this._enableFooter(this.model.showFooter);
            this._layoutChanged();
        },
        _validateYearValue: function (value) {
            if (value != null) {
                var twoDigitYearMax = Globalize.culture(this.model.locale).calendars.standard.twoDigitYearMax;
                twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
                if (this._calendarDate.getFullYear() - value.getFullYear() == 100) {
                    if (this._calendarDate.getFullYear() > twoDigitYearMax)
                        value.setFullYear(this._calendarDate.getFullYear())
                }
            }
            return value;
        },
        _setFooterText: function (footerText) {
            $('.e-footer-text', this.sfCalendar).html(footerText);
        },
        _setSkin: function (skin) {
            if (this.wrapper) {
                this.wrapper.removeClass(this.model.cssClass);
                this.wrapper.addClass(skin);
            }
            else {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
            this.sfCalendar.removeClass(this.model.cssClass);
            this.sfCalendar.addClass(skin);
        },
        _setDisplayInline: function (isDisplayInline) {
            this.model.displayInline = isDisplayInline;
            if (isDisplayInline && this._isInputBox()) {
                this.sfCalendar.insertAfter(this.wrapper);
                this._setDatePickerPosition();
            }
            else if (isDisplayInline) {
                this.element.append(this.sfCalendar);
                if (!this._isSupport || !this._isInputBox()) this._hiddenInput.css("display", "none");
            }
            else {
                this.sfCalendar.css('display', 'none');
                $('body').append(this.sfCalendar);
                this._isOpen = false;
            }
            if (isDisplayInline) {
                this.show();
                this._off(this.dateIcon, "mousedown", this._showDatePopUp);
                this.element.unbind("mousedown", $.proxy(this._showDatePopUp, this));
            }
            else if (this._isInputBox()) this._renderDateIcon(this.model.showPopupButton, false);
        },

        _disbleMaualInput: function () {
            if (this.model.readOnly) {
                $(this.element).attr("readonly", "readonly");
                if (!this.model.displayInline) this.hide();
            }
            else if (this.model.allowEdit)
                $(this.element).removeAttr("readonly");
            
        },
        _checkDateObject: function (date) {
            if (!date || (typeof JSON === "object" && JSON.stringify(date) === "{}")) return date = "";
            else if (!(date instanceof Date)) {
                var val = this._parseDate(date);
                date = (val != null) ? val : new Date(date);
            }
            if (!isNaN(Date.parse(date))) return this._dateValue = this._calendarDate = this._zeroTime(date);
            return null;
        },
        _checkInstanceType: function (date) {
            date = this._stringToObject(date);
            if (!date) return null;
            else if (!(date instanceof Date)) {
                date = this._parseDate(date);
            }
            if (!isNaN(Date.parse(date))) return this._zeroTime(date);
            return null;
        },
        _stringToObject: function (value) {
            if (typeof value === "string") {
                var val = Globalize.parseDate(value, this.model.dateFormat);
                value = (val != null) ? val : new Date(value);
            }
            return value;
        },
        _validateMinMaxDate: function () {
            var dateChange = false, valueExceed = false;
            if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
            if (!this.model.enableStrictMode) {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.value = this.model.minDate;
                        dateChange = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.value = this.model.maxDate;
                        dateChange = true;
                    }
                }
                else {
                    this.element.val("");
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
                this.isValidState = true;
            }
            else {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.minDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.maxDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else this.isValidState = true;
                }
                else {
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
            }
            if (dateChange) this.element.val(this._formatter(this.model.value, this.model.dateFormat));
            if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
        },
        _setCulture: function (culture) {
            this.culture = Globalize.culture(culture);
            if (this.culture) {
                this.model.locale = this.culture.name == "en" ? "en-US" : this.culture.name;
                this.Date.dayNames = this.culture.calendar.days.names;
                this.Date.dayNamesMin = this.culture.calendar.days.namesShort;
                this.Date.abbrDayNames = this.culture.calendar.days.namesAbbr;
                this.Date.monthNames = this.culture.calendar.months.names;
                this.Date.abbrMonthNames = this.culture.calendar.months.namesAbbr;
                this.Date.format = this.culture.calendar.patterns.d;
                if (this.model.dateFormat == '') this.model.dateFormat = this.culture.calendar.patterns.d;
                if (this.model.startDay == -1) this.model.startDay = this.culture.calendar.firstDay;
            }
            this._separator = this._getSeparator();
        },

        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input")) {
                if (this.model.watermarkText && this.element.val() == "") {
                    this.isValidState = true;
                    this._checkErrorClass();
                }
                if ((!this._isSupport) && this.element.val() == "")
                    this._hiddenInput.css("display", "block").val(this.model.watermarkText);
                else
                    $(this.element).attr("placeholder", this.model.watermarkText);
                return true;
            }
        },

        _setDatePickerPosition: function () {
            if (!this.model.displayInline || this._isInputBox()) {
                var elementObj = this.element.is('input') ? this.wrapper : this.element;
                var pos = this._getOffset(elementObj), winWidth,
                winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
                winTopHeight = pos.top - $(document).scrollTop(),
                popupHeight = this.sfCalendar.outerHeight(),
                popupWidth = this.sfCalendar.outerWidth(),
                left = pos.left,
                totalHeight = elementObj.outerHeight(),
                border = (totalHeight - elementObj.height()) / 2,
                maxZ = this._getZindexPartial(), popupmargin = 3,
                topPos = (popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin; // popupmargin denotes space b/w the element and the popup.
                winWidth = $(document).scrollLeft() + $(window).width() - left;
                if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth()) && !ej.isNullOrUndefined(this.wrapper)) left += this.wrapper.width() - this.sfCalendar.width();
                this.sfCalendar.css({
                    "left": left + "px",
                    "top": topPos + "px",
                    "z-index": maxZ
                });
            }
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.sfCalendar);
        },

        _setMinDate: function (d) {
            this.model.minDate = this._checkInstanceType(d);
            if (!this.model.minDate) {
                this.model.minDate = (new Date('11/31/1899'));
            }
        },

        _setMaxDate: function (d) {
            this.model.maxDate = this._checkInstanceType(d);
            if (!this.model.maxDate) {
                this.model.maxDate = (new Date('12/31/2099')); // using the JS Date.parse function which expects mm/dd/yyyy
            }
        },
        _setDateValue: function (date) {
            var newDate = this._checkDateObject(date);
            if (newDate != null) {
                this.isValidState = true;
                if (newDate == "") {
                    this.element.val("");
                    this.model.value = "";
                } else {
                    this.model.value = new Date(newDate.toString());
                    this._validateMinMaxDate();
                    this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
                }
            }
            else {
                (typeof date === "string" && this.model.enableStrictMode) ? this.element.val(date) : this.element.val("");
                this.model.value = "";
                this.isValidState = (this.element.val() == "") ? true : false;
            }
            this._removeWatermark();
        },
        _updateInputVal: function () {
            var val = this._validateValue();
            if (val != null && this.sfCalendar.find('.e-datepicker-days').is(':visible'))             
                    this._refreshDatepicker();            
        },
        _validateInputVal: function () {
            var val = this._validateValue();
            if (val != null) {
                if (!this.model.enableStrictMode) {
                    if (val <= this.model.maxDate && val >= this.model.minDate)
                        this.isValidState = true;
                    else {
                        this.model.value = "";
                        this.isValidState = true;
                    }
                }
            }
        },

        _validateValue: function () {
            var value = this._parseDate(this.element.val());
            return this._validateYearValue(value);
        },
        _getSeparator: function () {
            if (this.culture) {
                formats = this.culture.calendar.patterns.d;
            }
            else formats = this.model.dateFormat;
            var regex = new RegExp("^[a-zA-Z0-9]+$");
            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats[i])) return formats[i];
            }
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },

        //Date formatter - Convert date object to specific date format
        _formatter: function (date, format) {
            var newFormat = this._checkFormat(format);
            return Globalize.format(date, newFormat, this.model.locale);
        },
        _parseDate: function (date) {
            var newFormat = this._checkFormat(this.model.dateFormat);
            return Globalize.parseDate(date, newFormat, this.model.locale);
        },
        _checkFormat: function (format) {
            var proxy = this;
            var dateFormatRegExp = this._regExp();
            return format.replace(dateFormatRegExp, function (match) {
                match = match === "/" ? Globalize.culture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
                return match;
            });
        },
        _regExp: function () {
            return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
        },

        isLeapYear: function (year) {
            return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
        },
        //Sets the time component of this Date to zero for cleaner, easier comparison of dates where time is not relevant.
        _zeroTime: function (date) {
            var newDate = typeof date === "string" ? this._parseDate(date) : new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },
        //Convert date object to specific format
        _formatDate: function (date) {
            return this._formatter(date, this.Date.format);
        },

        _getDaysInMonth: function (date) {
            return [31, (this.isLeapYear(date) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][date.getMonth()];
        },

        _addDays: function (d, number) {
            d.setDate(d.getDate() + number);
            return d;
        },

        _addYears: function (d, number) {
            d.setFullYear(d.getFullYear() + number);
            return d;
        },

        _addMonths: function (d, number) {
            var tempDatedateMonth = d.getDate();
            d.setMonth(d.getMonth() + number);
            if (tempDatedateMonth > d.getDate())
                this._addDays(d, -d.getDate());
            return d;
        },
        //Checks if the day is a weekend day (Sat or Sun).
        _isWeekend: function (date) {
            return date.getDay() == 0 || date.getDay() == 6;
        },

        _isSpecialDates: function (dates) {
            if (this.model.specialDates) {
                for (var i = 0; i < this.model.specialDates.length; i++) {
                    if (this.model.specialDates[i]) {
                        if (dates.getDate() == this.model.specialDates[i][this._mapField._date].getDate() && dates.getMonth() == this.model.specialDates[i][this._mapField._date].getMonth() && dates.getFullYear() == this.model.specialDates[i][this._mapField._date].getFullYear()) {
                            this._getIndex = i;
                            return true;
                        }
                    }
                }
            }
            return false;
        },
        _getMapper: function () {
            var mapper = this.model.fields, mapFld = { _date: null, _tooltip: null, _icon: null };
            mapFld._date = (mapper && mapper.date) ? mapper["date"] : "date";
            mapFld._tooltip = (mapper && mapper.tooltip) ? mapper["tooltip"] : "tooltip";
            mapFld._icon = (mapper && mapper.iconClass) ? mapper["iconClass"] : "iconClass";
            return mapFld;
        },
        _createSpecialDateObject: function () {
            for (var i = 0; i < this.model.specialDates.length; i++) {
                this.model.specialDates[i][this._mapField._date] = this._checkInstanceType(this.model.specialDates[i][this._mapField._date]);
            }
        },

        _getMonthName: function (abbreviated, date) {
            return abbreviated ? this.Date.abbrMonthNames[date.getMonth()] : this.Date.monthNames[date.getMonth()];
        },



        _displayNewMonth: function (m, y) {
            this._setDisplayedMonth(this.displayedMonth + m, this.displayedYear + y, true);
            return false;
        },

        _setDisplayedMonth: function (m, y, rerender) {
            if (this.model.minDate == undefined || this.model.maxDate == undefined) {
                return;
            }
            var s = new Date(this.model.minDate.getTime());
            s.setDate(1);
            var e = new Date(this.model.maxDate.getTime());
            e.setDate(1);

            var t;
            if ((!m && !y) || (isNaN(m) && isNaN(y))) {

                t = this._zeroTime(new Date());
                t.setDate(1);
            } else if (isNaN(m)) {

                t = new Date(y, this.displayedMonth, 1);
            } else if (isNaN(y)) {

                t = new Date(this.displayedYear, m, 1);
            } else {

                t = new Date(y, m, 1);
            }

            if (t.getTime() < s.getTime()) {
                t = s;
            } else if (t.getTime() > e.getTime()) {
                t = e;
            }
            var oldMonth = this.displayedMonth;
            var oldYear = this.displayedYear;
            this.displayedMonth = t.getMonth();
            this.displayedYear = t.getFullYear();
            var tempDate = t;
            if (rerender && (this.displayedMonth != oldMonth || this.displayedYear != oldYear)) {
                this._renderCalendar(this, tempDate);
                this._dateValue = tempDate;
                this._trigger("monthChanged", [this.displayedMonth, this.displayedYear]);
            }
        },
        _clearSelected: function () {
            this.numSelected = 0;
            if (this.model.highlightSection == "week") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').attr('aria-selected', false).parent().removeClass('e-selected-week');
            }
            else if (this.model.highlightSection == "month") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').attr('aria-selected', false).parent().parent().removeClass('e-selected-month');
            }
            else if (this.model.highlightSection == "workdays") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').attr('aria-selected', false).parent().removeClass('e-work-week');
            }
            else
                $('td.e-active', this.sfCalendar).removeClass('e-active').attr('aria-selected', false);

        },
        _addSelected: function () {
            if (this.model.highlightSection == "week") {
                $('td.e-active', this.sfCalendar).parent().addClass('e-selected-week');
            }
            else if (this.model.highlightSection == "month") {
                $('td.e-active, this.sfCalendar').parent().parent().addClass('e-selected-month');
            }
            else if (this.model.highlightSection == "workdays") {
                $('td.e-active', this.sfCalendar).parent().addClass('e-work-week');
            }
        },

        _hideOtherMonths: function (sfCalendar) {
            $('td.other-month', sfCalendar).css("visibility", "hidden");
        },
        _showOtherMonths: function (sfCalendar) {
            $('td.other-month', sfCalendar).css({ 'visibility': 'visible' });
        },
        _otherMonthsVisibility: function () {
            if (this.model.showOtherMonths)
                this._showOtherMonths(this.sfCalendar);
            else
                this._hideOtherMonths(this.sfCalendar);
        },

        _createCalender: function () {
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-left-arrow').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-datepicker-headertext").text(this._formatter(this._calendarDate, this.model.headerFormat)).attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-right-arrow').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .appendTo(this.sfCalendar);
            this._enableHeader(this._showHeader);
            var table = ej.buildTag("table.e-dp-viewdays", "", {}, { 'cellspacing': 2 }).data("e-table", "data").attr({ 'role': 'grid', 'aria-activedescendant': '' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.sfCalendar.append(table);
            this._renderCalendar(this);
            this._startLevel(this.model.startLevel);
            ej.buildTag("div.e-footer")
                .append(ej.buildTag("span.e-footer-icon"))
                .append(ej.buildTag("span.e-footer-text"))
                .appendTo(this.sfCalendar);
            $('.e-footer-text', this.sfCalendar).html(this.model.buttonText);
            this._enableFooter(this.model.showFooter);
        },
        _enableHeader: function (show) {
            if (show) $(".e-header", this.sfCalendar).show();
            else $(".e-header", this.sfCalendar).hide();
        },
        _enableFooter: function (show) {
            if (show) $('.e-footer', this.sfCalendar).show();
            else $('.e-footer', this.sfCalendar).hide();
        },


        _checkArrows: function (min, max) {
            this._preArrowCondition(min, this.model.minDate.getFullYear());
            this._nextArrowCondition(max, this.model.maxDate.getFullYear());
        },
        _checkDateArrows: function () {
            this._preArrowCondition(this._tempMinDate, this.model.minDate);
            this._nextArrowCondition(this._tempMaxDate, this.model.maxDate);
        },
        _preArrowCondition: function (val1, val2) {
            if (val1 <= val2) this.sfCalendar.find(".e-left-arrow").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-left-arrow").removeClass("e-disable").attr({ "aria-disabled": false });
        },
        _nextArrowCondition: function (val1, val2) {
            if (val1 >= val2) this.sfCalendar.find(".e-right-arrow").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-right-arrow").removeClass("e-disable").attr({ "aria-disabled": false });
        },

        _previousNextHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrevDate(progress);
        },
        _processNextPrevDate: function (progress) {
            if (progress && this.sfCalendar.find(".e-left-arrow").hasClass("e-disable")) return false;
            else if (!progress && this.sfCalendar.find(".e-right-arrow").hasClass("e-disable")) return false;

            var currentTable = $("table", this.sfCalendar), temp;
            var tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case 'e-dp-viewdays':
                    var step = this.model.stepMonths;
                    if (progress) {
                        if (this._dateValue <= this.model.minDate) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (this._dateValue >= this.model.maxDate) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addMonths(this._dateValue, (progress ? -step : step));
                    if (this._clickedDate)
                        this._calendarDate = this._clickedDate;
                    this._dateValue = this._dateValue < this.model.minDate ? new Date(this.model.minDate.toString()) :this._dateValue; 
                    this._dateValue = this._dateValue > this.model.maxDate ? new Date(this.model.maxDate.toString()) : this._dateValue;
                    this._renderCalendar(this, this._dateValue);
                    $('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
                    this._addFocus('day', this._hoverDate);
                    var dateRange = this._findFirstLastDay(new Date(this._dateValue.toString()));
                    this._preArrowCondition(dateRange.firstDay, this.model.minDate);
                    this._nextArrowCondition(dateRange.lastDay, this.model.maxDate);
                    break;
                case 'e-dp-viewmonths':
                    var dateValue = this._dateValue;
                    dateValue.setFullYear($('.e-datepicker-headertext', this.sfCalendar).text())
                    if (progress) {
                        if (dateValue.getFullYear() <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (dateValue.getFullYear() >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addYears(dateValue, (progress ? -1 : 1));
                    this._renderCalendar(this, dateValue);
                    temp = dateValue.getFullYear();
                    $('.e-datepicker-headertext', this.sfCalendar).text(temp);
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-months').hide();
                    $($(currentTable).find('.e-datepicker-months')).show();
                    this._addFocus('month', this._hoverMonth);
                    this._checkArrows(temp, temp);
                    break;
                case 'e-dp-viewyears':
                    var yearValue;
                    yearValue = this._dateValue
                    yearValue.setFullYear($(currentTable).find(".e-state-hover").text());
                    if (progress) {
                        if (parseInt($('td.e-year-first:first').text()) <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (parseInt($('td.e-year-last:first').prev().text()) >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    if (($(currentTable).find(".e-state-hover").hasClass('e-year-first') && progress) || ($(currentTable).find(".e-state-hover").hasClass('e-year-last') && !progress))
                        this._dateValue.setFullYear(yearValue.getFullYear());
                    else if (($(currentTable).find(".e-state-hover").hasClass('e-year-first') && !progress))
                        this._dateValue.setFullYear(yearValue.getFullYear() + 11);
                    else if (($(currentTable).find(".e-state-hover").hasClass('e-year-last') && progress))
                        this._dateValue.setFullYear(yearValue.getFullYear() - 11);
                    else
                        this._dateValue.setFullYear(yearValue.getFullYear() + (progress ? -10 : 10));
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    $(".e-datepicker-headertext", this.sfCalendar).text((setYear + 1) + ' - ' + (setYear + 10));
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-years').hide();
                    $($(currentTable).find('.e-datepicker-years')).show();
                    this._addFocus('year', this._hoverYear);
                    this._checkArrows(setYear + 1, setYear + 10);
                    break;
                case 'e-dp-viewallyears':
                    var headYears;
                    if (progress) {
                        headYears = parseFloat($('td.e-allyear-first', currentTable.get(0)).text().split('-')[1]);
                        if (headYears <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else {
                            this._flag = true;
                        }

                    } else {
                        headYears = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                        if (headYears >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else
                            this._flag = true;
                    }
                    this._dateValue.setFullYear(headYears + (progress ? -10 : 10));
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 100) + 1);
                    temp = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                    $('.e-datepicker-headertext', this.sfCalendar).text((setYear + 1) + ' - ' + temp);
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-allyears').hide();
                    $($(currentTable).find('.e-datepicker-allyears')).show();
                    this._addFocus('allyear', this._hoverAllYear);
                    this._checkArrows(setYear + 1, temp);
                    break;
            }
            this._layoutChanged();
        },
        _addFocus: function (selection, index) {
            var cls = 'e-current-' + selection;
            if (selection == 'day') cls = 'current-month';
            var items = this.sfCalendar.find('tbody tr td.' + cls);
            if (selection == "month") {
                $(items).each(function (i, ele) {
                    if (parseInt($(ele).attr("index")) == parseInt(index)) {
                        index = i;
                        return;
                    }
                });
            }
            var cell = items[index];
            if (!cell) cell = items.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            $(cell).addClass("e-state-hover");
            this._setActiveState(selection);           
            return index;
        },       
        _setActiveState: function (selection) {
            if (!(this.model.value instanceof Date)) return;
            var items = this.sfCalendar.find('tbody tr td.e-current-' + selection), cell, proxy = this;
            var indx = -1;
            switch (selection) {
                case "month":
                    if (this.model.value.getFullYear() === parseInt($('.e-text', this.sfCalendar).text())) {
                        $(items).each(function (i, ele) {
                            if (parseInt($(ele).attr("index")) == parseInt(proxy.model.value.getMonth())) {
                                indx = i;
                                return;
                            }
                        });
                    }
                    break;
                case "year":
                    var value = this.model.value.getFullYear();
                    $(items).each(function (i, ele) {
                        if (parseInt(ele.innerHTML) == parseInt(value)) {
                            indx = i;
                            return;
                        }
                    });
                    break;
                case "allyear":
                    var start = parseInt(this.model.value.getFullYear()) - ((parseInt(this.model.value.getFullYear()) % 10) + 1);
                    var active = (start + 1) + ' - ' + (start + 10);
                    $(items).each(function (i, ele) {
                        if (parseInt(ele.innerHTML) == parseInt(active)) {
                            indx = i;
                            return;
                        }
                    });
                    break;
            }
            cell = items[indx];
            if (cell) {
                this.sfCalendar.find('table td').removeClass("e-active");
                $(cell).addClass("e-active");
            }
        },
        _setFocusByName: function (name, value) {
            var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name), index, cell;
            $(allValues).each(function (i, ele) {
                if (parseInt(ele.innerHTML) == parseInt(value)) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            $(cell).addClass("e-state-hover");
            this._setActiveState(name);
            return index;
        },
        _getHeaderTxt: function () {
            return this.sfCalendar.find(".e-datepicker-headertext").text();
        },
        _findFirstLastDay: function (value) {
            y = value.getFullYear(), m = value.getMonth();
            var firstDay = new Date(y, m, 1);
            var lastDay = new Date(y, m + 1, 0);
            return { firstDay: firstDay, lastDay: lastDay }
        },
        _forwardNavHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (event) event.preventDefault();

            var currentTable = $("table", this.sfCalendar);
            var tclassName = $("table", this.sfCalendar).get(0).className, proxy = this, headerTxt;
            switch (tclassName) {
                case 'e-dp-viewdays':
                    this._hoverMonth = this._getDateObj(currentTable.find(".e-state-hover")).getMonth() ||
                                this._getDateObj(currentTable.find(".e-active")).getMonth() || 0;
                    this._startLevel("year");
                    this._addFocus('month', this._hoverMonth);
                    break;
                case 'e-dp-viewmonths':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("decade");
                    this._hoverYear = this._setFocusByName('year', headerTxt);
                    break;
                case 'e-dp-viewyears':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("century");
                    this._hoverAllYear = this._setFocusByName('allyear', headerTxt);
                    break;
            }
            this._layoutChanged();
        },
        _cellSelection: function () {
            var currentTable = $("table", this.sfCalendar);
            var tclassName = $("table", this.sfCalendar).get(0).className;
            switch (tclassName) {
                case 'e-dp-viewmonths':
                    this._hoverMonth = this._addFocus('month', this._dateValue.getMonth());
                    break;
                case 'e-dp-viewyears':
                    var dateValue = new Date(this._dateValue.toString());
                    // Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
                    this._navigationToPrevNext('year');
                    // Reasssign the old value
                    this._dateValue = dateValue;
                    this._hoverYear = this._setFocusByName('year', this._dateValue.getFullYear());
                    break;
                case 'e-dp-viewallyears':
                    var dateValue = new Date(this._dateValue.toString());
                    // Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
                    this._navigationToPrevNext('allyear');
                    // Reasssign the old value
                    this._dateValue = dateValue;
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    this._hoverAllYear = this._setFocusByName('allyear', setYear + 1 + ' - ' + setYear + 10);
                    break;
            }
            this._layoutChanged();
        },
        _navigationToPrevNext: function (name) {
            var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name), index, cell;
            var value = this._dateValue.getFullYear();
            $(allValues).each(function (i, ele) {
                if (parseInt(ele.innerHTML) == parseInt(value)) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (cell) {
                if ($(cell).hasClass('e-'+name+'-last'))
                    this._processNextPrevDate(false)
                else if ($(cell).hasClass('e-'+name+'-first'))
                    this._processNextPrevDate(true);
            }           
        },
        _backwardNavHandler: function (event) {
            this._animating = true;
            if (this.model.readOnly || !this.model.enabled) return false;
            var element;
            if (event.type) {
                event.preventDefault();
                element = $(event.currentTarget);
            }
            else element = event;
            var cTable = $("table", this.sfCalendar), temp;
            var tclassName = $("table", this.sfCalendar).get(0).className, proxy = this;
            switch (tclassName) {
                case 'e-dp-viewmonths':
                    cTable.removeClass("e-dp-viewmonths").addClass("e-dp-viewdays");
                    this._dateValue = new Date(this._dateValue.getFullYear(), parseInt($(element).attr('index')), 1);
                    this._renderCalendar(this, this._dateValue);
                    $('tbody', cTable).not('.e-datepicker-days,.e-week-header').hide();
                    $($(cTable).find('.e-datepicker-days,.e-week-header')).fadeIn("fast", function () {
                        proxy._addFocus('day', proxy._hoverDate || 0);
                        proxy._animating = false;
                    });
                    $('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
                    break;
                case 'e-dp-viewyears':
                    cTable.removeClass("e-dp-viewyears").addClass("e-dp-viewmonths");
                    this._dateValue.setFullYear(parseInt(element.text()));
                    this._renderCalendar(this, this._dateValue);
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-months').hide();
                    if (ej.isNullOrUndefined(this._hoverMonth) && !ej.isNullOrUndefined(this._dateValue)) this._hoverMonth = this._dateValue.getMonth();
                    $($(cTable).find('.e-datepicker-months')).fadeIn("fast", function () {
                        proxy._addFocus('month', proxy._hoverMonth || 0);
                        proxy._animating = false;
                    });
                    temp = element.text();
                    $('.e-datepicker-headertext', this.sfCalendar).text(temp);
                    this._checkArrows(temp, temp);
                    break;
                case 'e-dp-viewallyears':
                    var headYears = element.text().split('-');
                    cTable.removeClass("e-dp-viewallyears").addClass("e-dp-viewyears");
                    if (headYears[0] < this.model.minDate.getFullYear()) headYears[0] = this.model.minDate.getFullYear().toString();
                    else if (headYears[0] > this.model.maxDate.getFullYear()) headYears[0] = this.model.maxDate.getFullYear().toString();
                    this._renderCalendar(this, (new Date(headYears[0], 0, 1)));
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    $($(cTable).find('.e-datepicker-years')).fadeIn("fast", function () {
                        proxy._addFocus('year', proxy._hoverYear || 0);
                        proxy._animating = false;
                    });
                    $('.e-datepicker-headertext', this.sfCalendar).text(headYears[0] + ' - ' + headYears[1]);
                    this._checkArrows(headYears[0], headYears[1]);
                    break;
                default:
                    this._clearSelected();
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    element.not('td.other-month').addClass('e-active').attr('aria-selected', true);
                    this._addSelected();

                    this._hoverDate = this._getDateObj(element).getDate() - 1;
                    this._dateValue = new Date(element.attr('date'));
                    this._clickedDate = new Date(element.attr('date'));
                    this._animating = false;
                    break;
            }
            this._layoutChanged();
        },

        _startLevel: function (start) {
            var cTable = $("table", this.sfCalendar);
            var headerText = $(".e-datepicker-headertext", this.sfCalendar), s, e;
            var dateValue = this._dateValue;
            switch (start) {
                case "decade":
                    cTable.removeClass("e-dp-viewallyears e-dp-viewmonths e-dp-viewdays").addClass("e-dp-viewyears");
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    $($(cTable).find('.e-datepicker-years')).show();
                    if (this.model.enableStrictMode && this._calendarDate < this._dateValue) dateValue = this._calendarDate;
                    else dateValue = dateValue;
                    var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
                    s = setYear + 1;
                    e = setYear + 10;
                    headerText.text(s + ' - ' + e);
                    this._checkArrows(s, e);
                    this._hoverYear = this._setFocusByName('year', dateValue.getFullYear());
                    break;
                case "century":
                    if (!(this._calendarDate < this._dateValue)) this._renderCalendar(this, dateValue);
                    cTable.removeClass("e-dp-viewyears e-dp-viewdays e-dp-viewmonths").addClass("e-dp-viewallyears");
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-allyears').hide();
                    $($(cTable).find('.e-datepicker-allyears')).show();
                    s = parseFloat($('td.e-allyear-first', cTable.get(0)).text().split('-')[1]) + 1;
                    e = parseFloat($('td.e-allyear-last', cTable.get(0)).prev().text().split('-')[1]);
                    var headYears = s + ' - ' + e;
                    headerText.text(headYears);
                    this._checkArrows(s, e);
                    var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
                    this._hoverAllYear = this._setFocusByName('allyear', (setYear + 1) + ' - ' + (setYear + 10));
                    break;
                case "year":
                    cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewdays").addClass("e-dp-viewmonths");
                    $('tbody,tr.e-week-header', cTable).hide();
                    $($(cTable).find('.e-datepicker-months')).show();
                    if (this.model.enableStrictMode && this._calendarDate < this._dateValue) s = this._calendarDate.getFullYear();
                    else s = dateValue.getFullYear();
                    headerText.text(s);
                    this._checkArrows(s, s);
                    this._hoverMonth = dateValue.getMonth();
                    this._addFocus('month', this._hoverMonth);
                    break;
                case "month":
                    cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewmonths").addClass("e-dp-viewdays ");
                    break;
            }
        },
        _depthLevel: function (depth) {
            var calendarTable = this.sfCalendar;
            switch (depth) {
                case "year":
                    $(calendarTable.find('.e-current-year,.e-current-allyear')).bind("click", $.proxy(this._backwardNavHandler, this));
                    this._on($('.e-current-month', this.sfCalendar), "click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "decade":
                    $(calendarTable.find('.e-current-allyear')).bind("click", $.proxy(this._backwardNavHandler, this));
                    $('.e-current-year', this.sfCalendar).bind("click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "century":
                    $(calendarTable.find('.e-current-allyear')).bind("click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "month":
                    this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                    this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
            }
        },
        _onDepthSelectHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if ($(e.target).hasClass("e-current-month"))
                this._dateValue = new Date(this._dateValue.setMonth(parseInt(e.target.attributes["index"].value)));
            else if ($(e.target).hasClass("e-current-year"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            else if ($(e.target).hasClass("e-current-allyear"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            this._onSetCancelDateHandler(e);
        },

        _datepickerMonths: function (tbody, calendarTable, currentDate) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var month = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(dc('td'))
                        .addClass('e-current-month e-state-default')
                        .attr({ 'index': month }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .html(this.Date.abbrMonthNames[month++]);
                    if (currentDate.getFullYear() < this.model.minDate.getFullYear() || currentDate.getFullYear() > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-month');
                    }
                    else if ((currentDate.getFullYear() <= this.model.minDate.getFullYear() && month < this.model.minDate.getMonth() + 1) ||
                        (currentDate.getFullYear() >= this.model.maxDate.getFullYear() && month > this.model.maxDate.getMonth() + 1)) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-month');
                    }
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            var s = currentDate.getFullYear();
            this._checkArrows(s, s);
        },

        _datepickerYears: function (tbody, calendarTable, currentYear) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 10) + 1);
            var years = [];
            for (var j = 0; j < 12; j++) {
                years.push(Year + j);
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(dc('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0)                     
                        td.addClass('e-year-first e-current-year ');
                     else if (year == 11)                      
                        td.addClass('e-year-last e-current-year ');
                     else
                        td.addClass('e-current-year e-state-default');
                    if (years[year] < this.model.minDate.getFullYear() || years[year] > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-year');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            this._checkArrows(years[0], years[years.length]);
        },

        _datepickerAllYears: function (tbody, calendarTable, currentYear) {
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 100) + 10);
            var headYear = Year;
            var years = [], newline = this._isIE8 || this._isIE9 ? "" : "\n";

            for (var j = 0; j < 12; j++) {
                years.push(parseInt(Year) + " -" + newline + (parseInt(Year+9) < this.model.maxDate.getFullYear() ? parseInt(Year+9): this.model.maxDate.getFullYear()));
                Year = Year + 10;
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(document.createElement('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(document.createElement('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0)                       
                        td.addClass('e-allyear-first e-current-allyear ');
                     else if (year == 11)                      
                        td.addClass('e-allyear-last e-current-allyear ');
                     else
                        td.addClass('e-current-allyear e-state-default');
                    if (parseInt(years[year].split('-\n')[1]) < this.model.minDate.getFullYear() || parseInt(years[year].split('-\n')[0]) > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-allyear');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
        },
        _renderHeader: function (dpObject) {
            var thead = $(document.createElement('thead'));
            var cultureObj = Globalize.culture(this.model.locale).calendars.standard.days;
            if (dpObject.model.dayHeaderFormat != "none") {
                var headRow = ej.buildTag("tr.e-week-header").attr({ 'role': 'columnheader' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                for (var i = this.Date.firstDayOfWeek; i < this.Date.firstDayOfWeek + 7; i++) {
                    var weekday = i % 7;
                    var day = cultureObj.names[weekday];
                    var headerday;
                    if (dpObject.model.dayHeaderFormat == "short")
                        headerday = cultureObj.namesAbbr[weekday];
                    else if (dpObject.model.dayHeaderFormat == "long") headerday = day;
                    else headerday = cultureObj.namesShort[weekday];
                    var th = ej.buildTag("th", "", {}, { 'scope': 'col', 'abbr': day, 'date': day, 'title': this._formatter(day, "dddd"), 'class': (weekday == 0 || weekday == 6 ? 'e-week-end' : 'e-week-day') }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                            .html(headerday);
                    headRow.append(th);
                }
            };
            return thead.append(headRow);
        },

        _renderCalendar: function (dpObject, date) {
            var proxy = this, today;
            dpObject = $.extend({}, ej.DatePicker.prototype.defaults, dpObject);
            this.Date.firstDayOfWeek = this.model.startDay;
            if (date) today = date;
            else if (this._calendarDate) today = this._calendarDate;
            else today = proxy._zeroTime(new Date());
            var calendarTable = $('table', this.sfCalendar);
            calendarTable.empty();

            calendarTable.append(this._renderHeader(dpObject));

            var tbody = ej.buildTag('tbody.e-datepicker-allyears', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerAllYears(tbody, calendarTable, today.getFullYear());

            tbody = ej.buildTag("tbody.e-datepicker-years", "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerYears(tbody, calendarTable, today.getFullYear());
            var month = dpObject.model.month == undefined ? today.getMonth() : dpObject.model.month;
            var year = dpObject.model.year || today.getFullYear();
            var currentDate = (new Date(year, month, 1, 0, 0, 0));
            var firstDayOffset = this.Date.firstDayOfWeek - currentDate.getDay() + 1;
            if (firstDayOffset > 1) firstDayOffset -= 7;
            var weeksToDraw = Math.ceil(((-1 * firstDayOffset + 1) + this._getDaysInMonth(currentDate)) / 7);
            this._addDays(currentDate, (firstDayOffset - 1));
            var newdate = proxy._zeroTime(new Date());
            var selected = this._calendarDate;
            tbody = ej.buildTag('tbody.e-datepicker-months', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            this._datepickerMonths(tbody, calendarTable, today);

            tbody = ej.buildTag('tbody.e-datepicker-days', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var w = 0, _first = true, _last = true;
            while (w++ < weeksToDraw) {
                var r = jQuery(document.createElement('tr'));
                for (var i = 0; i < 7; i++) {
                    var thisMonth = currentDate.getMonth() == month;
                    var checkSpecialDate = this._isSpecialDates(currentDate);
                    var index = this._getIndex;
                    var d = $(document.createElement('td')).
                        html(checkSpecialDate ? '<span></span>' + currentDate.getDate() : currentDate.getDate() + '')
                        .attr({

                            'date': currentDate.toDateString(),
                            'title': (this.model.showTooltip ? (checkSpecialDate && this.model.specialDates[index][this._mapField._tooltip] ? this.model.specialDates[index][this._mapField._tooltip] : this._formatter(currentDate, this.model.tooltipFormat)) : ''),
                            'aria-selected': false,
                            'role': 'gridcell'
                        }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .addClass((thisMonth ? 'current-month e-state-default ' : 'other-month e-state-default ') +
                            (this._isWeekend(currentDate) ? (this._ejHLWeekEnd ? 'e-dp-weekend e-week-end ' : (this.model.highlightWeekend ? 'e-week-end ' : '')) : 'e-week-day ') +                           
                            (thisMonth && currentDate.getTime() == newdate.getTime() ? 'today ' : ''));
                     
                    d.find('span:first-of-type').addClass((checkSpecialDate ? (this.model.specialDates[index][this._mapField._icon] ? 'e-special-date-icon ' + this.model.specialDates[index][this._mapField._icon] + ' ' : 'e-special-day') : ''));

                    if (selected.getTime() == currentDate.getTime() && thisMonth) {
                        d.addClass('e-active').attr({ 'aria-selected': true });
                        if (this.model.highlightSection == "week") {
                            r.addClass('e-selected-week');
                        }
                        if (this.model.highlightSection == "month") {
                            tbody.addClass('e-selected-month');
                        }
                        if (this.model.highlightSection == "workdays") {
                            r.addClass('e-work-week');
                        }

                        if (!this._hoverDate) {
                            d.addClass('e-state-hover');
                            this._hoverDate = currentDate.getDate() - 1;
                        }
                    }
                    var cond = true;
                    if (currentDate < this.model.minDate || currentDate > this.model.maxDate) {
                        d.addClass('e-hidedate');
                        d.removeClass('current-month');
                        if (this.model.showOtherMonths) d.removeClass('other-month');
                        cond = _last = false;
                    }
                    if (thisMonth) {
                        if (cond && _first) {
                            this._tempMinDate = currentDate;
                            _first = false; _last = true;
                        }
                        if (_last) this._tempMaxDate = currentDate;
                    }
                    this._trigger("beforeDateCreate", { date: currentDate, element: d });
                    r.append(d);
                    currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1, 0, 0, 0);
                }
                tbody.append(r);
            }
            calendarTable.append(tbody);
            (this._isIE8 || this._isIE7) ? $(tbody).css("display", "block") : $(tbody).fadeIn("fast");
            if (this.model.startLevel === this.model.depthLevel)
                this._depthLevel(this.model.depthLevel);
            else if (this.model.depthLevel != "month" && this.model.depthLevel != "") {
                if (this.model.startLevel == "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "year" && this.model.depthLevel != "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else {
                    this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                    this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
                }
            }
            else {
                this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
            }

            this._otherMonthsVisibility();
            this._checkDateArrows();
        },



        _keyboardNavigation: function (e) {
            if (this._animating) return false;
            if ((this._isOpen) && (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this.sfCalendar.find('tbody tr td.e-state-hover').index();
                t.row = this.sfCalendar.find('tbody tr td.e-state-hover').parent().index();

                t.col = (t.col != -1) ? t.col + 1 : this.sfCalendar.find('tbody tr td.e-active').index() + 1;
                t.row = (t.row != -1) ? t.row + 1 : this.sfCalendar.find('tbody tr td.e-active').parent().index() + 1;

                var tableClass = this.sfCalendar.find('table')[0].className, next, rowLength = 3, colLength = 4;
                switch (tableClass) {
                    case "e-dp-viewallyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "yearall", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverAllYear = this.sfCalendar.find('tbody.e-datepicker-allyears tr td').index(next);
                        break;
                    case "e-dp-viewyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "year", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverYear = this.sfCalendar.find('tbody.e-datepicker-years tr td').index(next);
                        break;
                    case "e-dp-viewmonths":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "month", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverMonth = this.sfCalendar.find('tbody.e-datepicker-months tr td').index(next);
                        break;
                    case "e-dp-viewdays":
                        rowLength = this.sfCalendar.find('tbody.e-datepicker-days tr').length, colLength = 7;
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "day", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverDate = this._getDateObj(next).getDate() - 1;
                        break;
                }
                if (!e.ctrlKey) {
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
            else if (!this.model.displayInline && (e.keyCode == 27 || e.keyCode == 9)) { this.hide(); e.stopPropagation(); }
            else if (e.altKey && e.keyCode == 40) { this.show(); return false; }
        },
        _changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
            var eleClass, cls = { parent: null, child: null };
            switch (target) {
                case "day": eleClass = "tbody.e-datepicker-days tr td.current-month";
                    cls.parent = ".e-datepicker-days", cls.child = ".current-month";
                    break;
                case "month": eleClass = "tbody.e-datepicker-months tr td.e-current-month";
                    cls.parent = ".e-datepicker-months", cls.child = ".e-current-month";
                    break;
                case "year": eleClass = "tbody.e-datepicker-years tr td.e-current-year";
                    cls.parent = ".e-datepicker-years", cls.child = ".e-current-year";
                    break;
                case "yearall": eleClass = "tbody.e-datepicker-allyears tr td.e-current-allyear";
                    cls.parent = ".e-datepicker-allyears", cls.child = ".e-current-allyear";
                    break;
            }
            if (t.row <= 0 && t.col <= 0)
                return this.sfCalendar.find(eleClass + ':first');
            var cell, proxy = this;
            switch (key) {
                case 36:
                    return this.sfCalendar.find(eleClass + ':first');
                    break;
                case 35:
                    return this.sfCalendar.find(eleClass + ':last');
                    break;
                case 38:
                    if (ctrlKey && this.model.allowDrilDown) {
                        this._forwardNavHandler();
                    }
                    else if (t.row > 1) {
                        t.row -= 1;
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "up");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                    }
                    return cell;
                    break;
                case 37:
                    if (ctrlKey) {
                        this._processNextPrevDate(true);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col > 1)
                        t.col -= 1;
                    else if (t.row > 1) {
                        t = { row: t.row - 1, col: cols }
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "left");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                    }
                    return cell;
                    break;
                case 39:
                    if (ctrlKey) {
                        this._processNextPrevDate(false);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col < cols)
                        t.col += 1;
                    else if (t.row < rows) {
                        t = { row: t.row + 1, col: 1 }
                    }
                    else {
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "right");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                    }
                    return cell;
                    break;
                case 40:
                    if (!ctrlKey) {
                        if (t.row < rows) {
                            t.row += 1;
                        }
                        else {
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                            return cell;
                        }
                        cell = this._getCell(t, cls);
                        if (cell.length <= 0) {
                            cell = this._findVisible(t, cls, "down");
                            if (cell !== null) return cell;
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                        }
                        return cell;
                        break;
                    }
                case 13:
                    var tclassName = $("table", this.sfCalendar).get(0).className, ele, element;
                    ele = this._getCell(t, cls); element = $(ele)[0];
                    if (tclassName == "e-dp-viewmonths" && this.model.startLevel == "year" && this.model.depthLevel == "year") {
                        this._dateValue = new Date(this._dateValue.setMonth(parseInt(element.attributes["index"].value)));
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else if ((tclassName == "e-dp-viewyears" && this.model.startLevel == "decade" && this.model.depthLevel == "decade") ||
                        (tclassName == "e-dp-viewallyears" && this.model.startLevel == "century" && this.model.depthLevel == "century")) {
                        this._dateValue = new Date(this._dateValue.setFullYear(parseInt(element.innerHTML)));
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else if (tclassName == "e-dp-viewdays") {
                        this._backwardNavHandler(ele);
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else
                        this._backwardNavHandler(ele);
                    break;
            }
            return this._getCell(t, cls);
        },
        _findVisible: function (t, cls, key) {
            var cols = t.col, rows = t.row, requiredClass = cls.child.slice(1, cls.child.length);
            for (i = 0; i >= 0; i++) {
                nextElement = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
                if (nextElement.length <= 0) {
                    return null;
                }
                if (nextElement.hasClass('e-disable') || !nextElement.is(":visible")) {
                    key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
                    if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                    // Column exceeds the range. 
                    if (cols > this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
                        //move to next row and select first column
                        rows++;
                        cols = 1;
                    }
                    if (cols <= 0) {
                        //move to previous row and select last column
                        rows--;
                        cols = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
                    }
                    // Row exceeds the range.
                    if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                } else if (nextElement.hasClass('other-month')) {
                    return null;
                } else if (nextElement.hasClass(requiredClass)) {
                    t.col = cols; t.row = rows;
                    return nextElement;
                }
            }
        },
        _getCell: function (t, cls) {
            return this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child + ':nth-child(' + t.col + ')');
        },
        _getDateObj: function (element) {
            return new Date(element.attr("date"));
        },
        _touchCalendar: function (e) {
            var tableClass = this.sfCalendar.find('table')[0].className;
            switch (e.type) {
                case "pinchin":
                    if (tableClass != "e-dp-viewdays")
                        this._keyboardNavigation({ keyCode: 13 });
                    break;
                case "pinchout":
                    if (tableClass != "e-dp-viewallyears" && this.model.allowDrilDown)
                        this._forwardNavHandler();
                    break;
                case "swipeleft":
                    this._processNextPrevDate(false);
                    break;
                case "swiperight":
                    this._processNextPrevDate(true);
                    break;
            }
        },

        show: function (e) {
            if (this._isOpen) return false;
            var proxy = this;
            this._popupOpen = true;
            var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
            if (!this.model.enabled) return;
            if (!this.model.displayInline) this._setDatePickerPosition();
            if (this._trigger("beforeOpen", { element: this.sfCalendar, events: e })) return false;
            this.sfCalendar.attr({ 'aria-hidden': 'false' });
            proxy._isOpen = true;
            this.sfCalendar.slideDown(this.model.enableAnimation ? this.animation.open.duration : 0, this.animation.open.type, function () {
                if (!proxy.model.displayInline)
                    $(document).bind("mousedown", $.proxy(proxy._onDocumentClick, proxy));
            });
            if (this.element.val() !== "") this._updateInputVal();                   
            this._refreshLevel(previous);
            this._trigger("open", { prevDate: this._prevDate, value: this._formatter(this.model.value, this.model.dateFormat) });
            $(window).bind("resize", $.proxy(this._OnWindowResize, this));
            if (!this.model.displayInline)
                this._on(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            this._isInputBox() && this.wrapper.addClass("e-active");
        },


        hide: function (e) {
            if (!this._isOpen || this._getInternalEvents) return false;
            if (this._trigger("beforeClose", { element: this.sfCalendar, events: e })) return false;
            var proxy = this;
            this._popupOpen = false;
            this.sfCalendar.attr({ 'aria-hidden': 'true' });
            this.sfCalendar.slideUp(this.model.enableAnimation ? this.animation.close.duration : 0, this.animation.close.type , function () {
                proxy._isOpen = false;
                $(document).unbind("mousedown", $.proxy(proxy._onDocumentClick, proxy));
                proxy._setWaterMark();
            });
            if (this.element.val() != "") this._validateInputVal();
            this._trigger("close", { prevDate: this._prevDate, value: this._formatter(this.model.value, this.model.dateFormat) });
            $(window).unbind("resize", $.proxy(this._OnWindowResize, this));
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            this._isInputBox() && this.wrapper.removeClass("e-active");
        },


        enable: function () {
            this.model.enabled = true;
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
			this.element.removeAttr("disabled");
            if (this.dateIcon) this.dateIcon.removeClass('e-disable').attr({ "aria-disabled": false });
            if (this._isIE8 && this.dateIcon) this.dateIcon.children().removeClass("e-disable");
            this.element.removeAttr("disabled");
            if (!this._isSupport)
                this._hiddenInput.removeAttr("disabled");
            this.sfCalendar.removeClass('e-disable').attr({ "aria-disabled": false });
        },


        disable: function () {
            this.model.enabled = false;
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
			this.element.attr("disabled","disabled");
            if (this.dateIcon) this.dateIcon.addClass('e-disable').attr({ "aria-disabled": true });
            if (this._isIE8 && this.dateIcon) this.dateIcon.children().addClass("e-disable");
            this.element.attr("disabled", "disabled");
            if (!this._isSupport)
                this._hiddenInput.attr("disabled", "disabled");
            this.sfCalendar.addClass('e-disable').attr({ "aria-disabled": true });
            if (this._isOpen) {
                if (this.element.is(':input')) this.element.blur();
                if (!this.model.displayInline) this.hide();
            }
        },

        getValue: function () { return this._formatter(this.model.value, this.model.dateFormat); },

        _wireEvents: function () {
            this._allowQuickPick(this.model.allowDrilDown);
            this._on($('.e-next', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));
            this._on($('.e-prev', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));

            if (this.element.is(":input") && (this.model.allowEdit)) {
                this._on(this.element, "blur", this._onFocusOut);
                this._on(this.element, "focus", this._onFocusIn);
                this._on(this.element, "keyup", this._keyUp);
            }

            if (!this.model.allowEdit) {
                this.element.attr("readonly", "readonly");
                this.element.bind("mousedown", $.proxy(this._showDatePopUp, this));
            }

            if (this.model.showFooter)
                this._on($('.e-footer', this.sfCalendar), "click", this._setCurrDate);
            this._on(this.sfCalendar, "pinchin pinchout swipeleft swiperight", $.proxy(this._touchCalendar, this));
        },
        _bindDateButton: function () {
            this._on(this.dateIcon, "mousedown", this._showDatePopUp);
            if (this.model.allowEdit)
                this.element.unbind("mousedown", $.proxy(this._showDatePopUp, this));
        },
        _bindInputEvent: function () {
            this._off(this.dateIcon, "mousedown", this._showDatePopUp);
        },

        _onFocusOut: function (e) {
            this._isFocused = false;
            var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
            this._validateOnFocusOut(this._validateValue(), e);
            this.wrapper.removeClass("e-focus");
            if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
            if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
            if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) { this._validateInputVal(); }
            this.element.unbind("keydown", $.proxy(this._keyboardNavigation, this));
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            var _currentVal = this.element.val();
            var data = { prevDate: this._prevDate, value: _currentVal };
            this._trigger("focusOut", data);
            this._checkErrorClass();
        },
        _onFocusIn: function (e) {
            if (this._isSupport) {
                e.preventDefault();
                this._isFocused = true;
            }
            this.wrapper.removeClass('e-error').attr('aria-invalid', "false");
            this.isValidState = true;
            this.wrapper.addClass("e-focus");
            if (this.model.readOnly)
                return;
            if (!this._isSupport) this._hiddenInput.css("display", "none");
            this.element.bind("keydown", $.proxy(this._keyboardNavigation, this));
            if (!this.model.showPopupButton && !this.model.readOnly) this.show(e);
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
            this._trigger("focusIn", { value: this.model.value });
        },
        _elementClick: function (e) {
            if (!this._popupOpen) this.show(e);
        },
        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport)
                this._hiddenInput.css("display", "none");
        },
        _refreshPopup: function () {
            this._refreshDatepicker();
            this._startLevel(this.model.startLevel);
        },
        _refreshLevel: function (previous) {
            if ((this.model.startLevel == this.model.depthLevel) && this.model.startLevel != "month") {
                var val = this._stringToObject(this.element.val());
                val = this._validateYearValue(val);
                if (val)
                    if (!this._compareDate(previous, val))
                        this._refreshPopup();
            }
        },
        _validateOnFocusOut: function (val, e) {
            var calenderDate = this._formatter(this._calendarDate, this.model.dateFormat);
            var currDate = this._formatter(this._parseDate(this._formatter(new Date(), "MM/dd/yyyy")), this.model.dateFormat);
            var dateChange = false, valueExceed = false;
            if (val != null && !this.model.enableStrictMode) {
                if (ej.isNullOrUndefined(this.model.value))
                    this.model.value = this._parseDate(this.element.val());
                if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
                if (!this.model.enableStrictMode) {
                    if (val) {
                        if ((val < this.model.minDate) || (val > this.model.maxDate)) {
                            dateChange = true,
                            this._calendarDate = val = val < this.model.minDate ? this.model.minDate : this.model.maxDate
                        }
                    }
                    else {
                        this.element.val("");
                        if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                        else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                    }
                    this.isValidState = true;
                }
                if (dateChange) this.element.val(this._formatter(val, this.model.dateFormat));
                if (!this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._triggerChangeEvent(e);
            }
            else if (val == null && !this.model.enableStrictMode) {
                if (this._preTxtValue == null || this.element.val() == "") {
                    this.element.val("");
                    if (!this._isSupport) this._hiddenInput.css("display", "block");
                } else
                    this.element.val(calenderDate);
                this._triggerChangeEvent(e);
            }
            else {
                if (val) {
                    if ((val < this.model.minDate) || (val > this.model.maxDate)) {
                        this.isValidState = false, valueExceed = true,
                        this._calendarDate = val < this.model.minDate ? this.model.minDate : this.model.maxDate
                    }
                    else
                        this.isValidState = true;
                    this._triggerChangeEvent(e);
                    if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
                }
                else {
                    this.isValidState = false;
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
            }
        },
        _keyUp: function (e) {
            if (e.keyCode === 13) {
                var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
                this._validateOnFocusOut(this._validateValue(), e);
                if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
                if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
                if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) { this._validateInputVal(); }
                this._checkErrorClass();
            }
        },
        _showhidePopup: function (e) {
            if (!this.model.enabled) return false;
            if (this._isOpen) {
                if (!this._isFocused && this.element.is(':input')) this.element.focus();
                if (!this._cancelValue) this.hide(e);
            }
            else {
                if (!this._isFocused && this.element.is(':input')) this.element.focus();
                this.show(e);
            }
        },
        _compareDate: function (first, second) {
            var result = (+first === +second) ? true : false;
            return result;
        },
        _triggerChangeEvent: function (e) {
            var _currentVal = this.element.val();
            this._prevDate = this._formatter(this._preValue, this.model.dateFormat);
            var data = { prevDate: this._prevDate, value: _currentVal };
            var currentValue = this._parseDate(_currentVal, this.model.dateFormat);
            currentValue = this._validateYearValue(currentValue);
            if (!this._compareDate(this._preValue, currentValue)) {
                this._preValue = this.model.value = currentValue;
                if (this.model.displayInline && !this._isInputBox()) this._hiddenInput.attr('value', _currentVal);
                this._trigger("change", data);
                this._trigger("_change", data);
                this._checkErrorClass();
            }
        },

        _triggerSelectEvent: function (e) {
            var val = this.element.val();
            if (this._parseDate(val)) {
                var data = { prevDate: this._prevDate, value: val, isSpecialDay: this._isSpecialDates(this.model.value) };               
                if (this._prevDate != val) {
                    if (this._parseDate(data.value) && (this.model.value >= this.model.minDate && this.model.value <= this.model.maxDate)) {
                        this._cancelValue = this._trigger("select", data);
                    }
                }
                if (this._dt_drilldown) this._trigger("dt_drilldown", data);
            }
        },

        _onDocumentClick: function (e) {
            if (this.model) {
                if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-popup").is(this.popup) &&
                    !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datewidget").is(this.wrapper)) {                   
                        this.hide(e);
                }
                else if ($(e.target).is(this.popup) || $(e.target).parents(".e-popup").is(this.popup)) {
                    e.preventDefault();
                }
            }
        },

        _OnWindowResize: function (e) {
            this._setDatePickerPosition();
        },

        _showDatePopUp: function (e) {
            if (!this._isSupport && !this.model.showPopupButton) {
                e.preventDefault();
                this._onFocusIn();
            }
            if (this.model.readOnly) return;
            e.preventDefault();
            if (!this.model.enabled && this.model.displayInline) return false;
            this._showhidePopup(e);
        },
        _layoutChanged: function (e) {
            // this event internally used to observe the layout change in "DateTimePicker" control
            if (this._getInternalEvents) this._trigger("layoutChange");
        },
        _setCurrDate: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e) e.preventDefault();
            var proxy = this;
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._dateValue = this._zeroTime(new Date());
            this.model.value = this._calendarDate = new Date(this._dateValue.toString());
            this._setDateValue(this.model.value);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            this._refreshDatepicker();
            this._changeDayClass();
            this._startLevel(this.model.startLevel);
            this._onSetCancelDateHandler(e);
            this._layoutChanged();
        },
        _changeDayClass: function () {
            var className = this.popup.children("table")[0].className;
            if (className != "e-dp-viewdays") {
                this.popup.children("table").removeClass(className).addClass("e-dp-viewdays");
            }
        },

        _onSetCancelDateHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && $(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();
            this.model.value = this._parseDate(this.element.val());

            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._setDateValue(this._dateValue);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            this._dateValue = new Date(this.model.value.toString());
            if (this.element.is(':input') && !this.model.displayInline) {
                this._showhidePopup(e);
            }
            if (e && $(e.currentTarget).hasClass("other-month"))
                this._refreshDatepicker();
            this._cellSelection();
        },
        _closeCalendar: function (ele) {
            if (!ele || ele == this.element) {
                this.sfCalendar.empty().remove();
            }
        },
        //Error class for input value validation
        _checkErrorClass: function () {
            if (this.wrapper) {
                if (this.isValidState) this.wrapper.removeClass("e-error").attr('aria-invalid', "false");
                else this.wrapper.addClass("e-error").attr('aria-invalid', "true");
            }
        }
    });


    ej.DatePicker.Header = {
        /**  Removes the day header */
        None: "none",
        /**  Shows the day header format in short like Sun, Mon, Tue … */
        Short: "short",
        /**  Shows the day header format in min like Su, Mo, Tu … */
        Min: "min",
        /**  Shows the day header format in long like Sunday, Monday, Tuesday … */
        Long: "long"
    };

    ej.DatePicker.HighlightSection = {
        /**  Highlight the Current Month. */
        Month: "month",
        /**  Highlight the Current Week. */
        Week: "week",
        /**  Highlight the Current WorkDays. */
        WorkDays: "workdays",
        /** Don't Highlight Anything. */
        None: "none"
    };


    ej.DatePicker.Level = {
        /**  Starts from month level view. */
        Month: "month",
        /**  Starts from year level view. */
        Year: "year",
        /**  Starts from year decade level view. */
        Decade: "decade",
        /**  Starts from century level view.  */
        Century: "century"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to select the date and time values.
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDateTimePicker", "ej.DateTimePicker", {

        element: null,

        model: null,
        validTags: ["input"],
        _setFirst: false,
        _rootCSS: "e-datetimepicker",
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            priority: 1
        },


        defaults: {

            cssClass: "",

            locale: "en-US",

            readOnly: false,

            showRoundedCorner: false,

            enableRTL: false,

            htmlAttributes: {},

            enabled: true,

            value: "",

            minDateTime: new Date("1/1/1900 12:00:00 AM"),

            maxDateTime: new Date("12/31/2099 11:59:59 PM"),

            height: "",

            width: "",

            dateTimeFormat: "",

            showPopupButton: true,

            enableStrictMode: false,

            buttonText: {

                today: "Today",

                timeNow: "Time Now",

                done: "Done",

                timeTitle: "Time"
            },

            enablePersistence: false,

            interval: 30,

            timeDisplayFormat: "",

            timePopupWidth: 100,
			popupPosition:"bottom",

            dayHeaderFormat: "short",

            startLevel: "month",

            depthLevel: "",

            startDay: 0,

            stepMonths: 1,

            showOtherMonths: true,

            enableAnimation: true,

            headerFormat: 'MMMM yyyy',

            validationRules: null,

            validationMessage: null,
            timeDrillDown: {
                enabled: false,
                interval: 5,
                showMeridian: false
            },
            open: null,

            close: null,

            change: null,

            create: null,

            destroy: null,

            focusIn: null,

            focusOut: null

        },


        dataTypes: {
            cssClass: "string",
            locale: "string",
            readOnly: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            enabled: "boolean",
            enableAnimation: "boolean",
            dateTimeFormat: "string",
            showPopupButton: "boolean",
            buttonText: "data",
            enablePersistence: "boolean",
            enableStrictMode: "boolean",
            interval: "number",
            timeDrillDown: "data",
            timeDisplayFormat: "string",
            dayHeaderFormat: "string",
            startLevel: "string",
            depthLevel: "string",
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            headerFormat: "string",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data"
        },

        _setModel: function (options) {
            var option, validate = false;
            for (option in options) {
                switch (option) {
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "locale": this._localize(options[option]); break;
                    case "readOnly": this._readOnly(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = options[option];
                        this._setValidation();
                        break;
                    case "validationMessage":
                        this.model.validationMessage = options[option];
                        this._setValidation(); break;
                    case "value":
                        options[option] = this._setValue(options[option]);
                        validate = true; break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = options[option];
                        validate = true;
                        break;
                    case "minDateTime":
                        var temp = this._stringToObject(options[option]);
                        var mintime = this._getFormat(temp, "HH:mm:ss");
                        if (this._isValidDate(temp)) {
                            this.datePicker.option("minDate", temp);
                            this.timePicker.option("minTime", mintime);
                            options[option] = temp;
                        }
                        else options[option] = this.model[option];
                        validate = true; break;
                    case "maxDateTime":
                        var temp = this._stringToObject(options[option]);
                        var maxtime = this._getFormat(options[option], "HH:mm:ss");
                        if (this._isValidDate(temp)) {
                            this.datePicker.option("maxDate", temp);
                            this.timePicker.option("maxTime", maxtime);
                            options[option] = temp;
                        }
                        else options[option] = this.model[option];
                        validate = true; break;
                    case "height": this.wrapper.height(options[option]); break;
                    case "width": this.wrapper.width(options[option]); break;
                    case "dateTimeFormat":
                        this.model.dateTimeFormat = options[option];
                        if (this.isValidState) this._setValue(this.model.value);
                        break;
                    case "showPopupButton": this._showButton(options[option]); break;
                    case "buttonText": this._buttonText(options[option]); break;
                    case "interval":
                        this._updateTimeHeight();
                        this.timePicker.option("interval", options[option]); break;
                    case "timeDisplayFormat":
                        this._updateTimeHeight();
                        this.timePicker.option("timeFormat", options[option]); break;
                    case "timePopupWidth":
                        this._updateTimeHeight();
                        this.timePicker.option("popupWidth", options[option]);
                        break;
                    case "dayHeaderFormat": this.datePicker.option("dayHeaderFormat", options[option]); break;
                    case "startLevel": this.datePicker.option("startLevel", options[option]); break;
                    case "depthLevel": this.datePicker.option("depthLevel", options[option]); break;
                    case "startDay": this.datePicker.option("startDay", options[option]); break;
                    case "stepMonths": this.datePicker.option("stepMonths", options[option]); break;
                    case "showOtherMonths": this.datePicker.option("showOtherMonths", options[option]); break;
                    case "headerFormat": this.datePicker.option("headerFormat", options[option]); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "popupPosition": this.model.popupPosition = options[option]; this._setListPosition(); break;
                    case "timeDrillDown":

                        // For timeDrillDown.enabled
                        if (!ej.isNullOrUndefined(options[option].enabled)) {
                            this.model.timeDrillDown.enabled = options[option].enabled; this._changeDesign();
                }

                        // For timeDrillDown.interval
                        if (!ej.isNullOrUndefined(options[option].interval)) {
                            this.model.timeDrillDown.interval = options[option].interval;
                            this._generateMins($.trim(Globalize.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));
            }

                        // For timeDrillDown.showMeridian
                        if (!ej.isNullOrUndefined(options[option].showMeridian)) {
                            this.model.timeDrillDown.showMeridian = options[option].showMeridian;
                            this._sfTimeHour.empty(); this._renderHourTable();
                        }
                        break;

                }
            }
            if (validate) this._validateMinMax();
            this._valueChange();
            this._checkErrorClass();
        },
        observables: ["value"],

        _destroy: function () {
            if (this.isPopupOpen)
                this._hideResult();
            this.element.insertAfter(this.wrapper);
            this.element.removeClass("e-input").val("");
            this.wrapper.remove();
            this.popup.remove();
        },


        _init: function (options) {
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._options = options;
            this._validateMeridian();
            this._initialize();
            this._initial = true;
            this._interval = 60;
            this._render();
            this._wireEvents();
            this._addAttr(this.model.htmlAttributes);
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            this._changeDesign();
        },

        _changeDesign: function () {
            if (this.model.timeDrillDown.enabled) {
                this.popup.addClass("e-drill-down");
                this._timeContainer.css("display", "none");
                this._buttonContainer.css("display", "none");
                this.datePicker.option("showFooter", true);
            }
            else {
                this.popup.removeClass("e-drill-down");
                this._sfTimeHour.hide();
                this._sfTimeMins.hide();
                this._updateTimeHeight();
                this._dateContainer.show();
                this._timeContainer.show();
                this._buttonContainer.show();
                this.datePicker.option("showFooter", false);
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();                
            }
        },
        _initValidator: function () {
            var proxy = this;
            this.element.closest("form").validate({
                ignore: ".e-hidden",
                errorClass: 'e-validation-error',
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    $(error).insertAfter(element.closest(".e-widget"));
                },
            });
        },
        _setValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").validate();
            name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "required") proxy.element.attr(key, value);
                else if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy._enabled(false);
                else if (key == "readOnly" && value == "readOnly") proxy._readOnly(true);
                else proxy.wrapper.attr(key, value);
            });
        },
        _validateMeridian: function () {
            var culture = Globalize.culture(this.model.locale);
            if (culture) this.model.locale = culture.name == "en" ? "en-US" : culture.name;
            if (!ej.isNullOrUndefined(this._options.timeDrillDown)) {
            if (ej.isNullOrUndefined(this._options.timeDrillDown.showMeridian))
                this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(Globalize.culture(this.model.locale).calendars.standard["AM"]) ? false : true;
            }
            else
                this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(Globalize.culture(this.model.locale).calendars.standard["AM"]) ? false : true;
        },
        _initialize: function () {
            this.popup = null;
            this.isPopupOpen = false;
            this.isValidState = true;
            this.model.value = this.model.value === "" ? this.element[0].value : this.model.value;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            if (!this.model.dateTimeFormat || !this.model.timeDisplayFormat) this._getDateTimeFormat();
            if (typeof this.model.value == "string" && typeof this.model.value != "") {
                var val = this._stringToObject(this.model.value);
                if (val) this.model.value = val;
            }
            var min = this.model.minDateTime = this._stringToObject(this.model.minDateTime);
            if (!min || !this._isValidDate(min)) this.model.minDateTime = this.defaults.minDateTime;
            var max = this.model.maxDateTime = this._stringToObject(this.model.maxDateTime);
            if (!max || !this._isValidDate(max)) this.model.maxDateTime = this.defaults.maxDateTime;
        },

        _render: function () {
            this._renderWrapper();
            this._renderIcon();
            this._setDimentions();
            this._renderDropdown();
            this._checkProperties();
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "tabindex": "0", "value": this.model.value });
            this.wrapper = ej.buildTag("span.e-datetime-wrap e-widget " + this.model.cssClass + "#" + this.element[0].id + "_wrapper").insertAfter(this.element);
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
        },
        _renderIcon: function () {
            if (!this.model.showPopupButton) return false;
            this.datetimeIcon = ej.buildTag("span.e-select", "", {}).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var icon = ej.buildTag("span.e-icon e-datetime", "", {}, { "aria-label": "select" }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.datetimeIcon.append(icon);
            this.container.append(this.datetimeIcon).addClass("e-padding");
            this._on(this.datetimeIcon, "click", this._iconClick);
            this._on(this.datetimeIcon, "mousedown", function (e) { e.preventDefault(); });
        },
        _setDimentions: function () {
            if (this.model.height) this.wrapper.height(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
        },

        _renderDropdown: function () {
            var oldWrapper = $("#" + this.element.context.id + "_popup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.popup = ej.buildTag("div.e-datetime-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.element[0].id + "_popup").css("visibility", "hidden");
            $('body').append(this.popup);
            this._renderControls();
            
            var _timeTitle, _dateContainer, popupContainer, _today, _now, _done;

            _timeTitle = ej.buildTag("div.e-header", this.model.buttonText.timeTitle).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._dateContainer = ej.buildTag("div.e-datecontainer").append(this.datePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});            
            this._timeContainer = ej.buildTag("div.e-timecontainer").append(_timeTitle, this.timePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._drillDownContainer = ej.buildTag("div.e-drillDowncontainer").append().attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            popupContainer = ej.buildTag("div.e-popup-container").append(this._dateContainer, this._timeContainer, this._drillDownContainer).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            _today = ej.buildTag("div.e-dt-button e-dt-today", this.model.buttonText.today).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _now = ej.buildTag("div.e-dt-button e-dt-now", this.model.buttonText.timeNow).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _done = ej.buildTag("div.e-dt-button e-dt-done", this.model.buttonText.done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._buttonContainer = ej.buildTag("div.e-button-container").append(_today, _now, _done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._renderDrillDown();
            this.popup.append(popupContainer, this._buttonContainer);
            this._checkForResponsive();
            this._updateTimeHeight();

            this._bindOperations();
            this._updateValues();
            this.popup.css({ "visibility": "visible", "display": "none" });

            this._on(_today, "click", this._todayClick);
            this._on(_now, "click", this._nowClick);
            this._on(_done, "click", this._doneClick);
        },
        _renderControls: function () {
            this._renderDateControl();
            this._renderTimeControl();

            var tempContainer = ej.buildTag("span").append(this.datePicker.wrapper, this.timePicker.wrapper);
            tempContainer.find("span").css("display", "none");
            this.popup.append(tempContainer);
        },
        _renderDrillDown: function () {
            this._renderHourPopup();
            this._renderMinsPopup();
        },
        _renderHourPopup: function () {
            var table;
            this._sfTimeHour = ej.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-hours ', "", {}, { id: (this._id ? 'e-hours-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
            this._drillDownContainer.append(this._sfTimeHour);
            this._renderHourTable();
        },
        _renderHourTable: function () {
            // Rendering header template
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                   .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-left-arrow').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-hours-headertext").text("October 2015").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-right-arrow').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .appendTo(this._sfTimeHour);

            // Render meridian calendar popup.
            if (this._interval < 1) return false;
            var start, end, timeVal, interval = this._interval * 60000;
            var tableCount = this.model.timeDrillDown.showMeridian ? 2 : 1; rowCount = this.model.timeDrillDown.showMeridian ? 6 : 4;
            var timeDisplayFormat = this.model.timeDrillDown.showMeridian ? "hh" : "HH:00";
            var meridianText = ["AM", "PM"], count = 0, meridianClass = "";

            start = this.timePicker._createObject("12:00:00 AM");
            end = this.model.timeDrillDown.showMeridian ? this.timePicker._createObject("11:59:59 AM") : this.timePicker._createObject("11:59:59 PM");

            for (i = 0; i < tableCount; i++) {
                if (this.model.timeDrillDown.showMeridian) {
                    meridianClass = meridianText[i].toLowerCase();
                    var txt = !ej.isNullOrUndefined(Globalize.culture(this.model.locale).calendars.standard[meridianText[i]]) ? Globalize.culture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
                    ej.buildTag("div.e-header-" + meridianClass).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                      .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-hours-meridiantxt-" + meridianClass).text(txt)
                      .attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                      .appendTo(this._sfTimeHour);
                }

                // Table for Time Value
                table = ej.buildTag("table.e-dp-viewhours", "", {}, { 'cellspacing': 2 }).data("e-table", "data").attr({ 'role': 'grid', 'aria-activedescendant': '' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                this._sfTimeHour.append(table);

                tbody = ej.buildTag('tbody.e-timepicker-hours').attr((this._isIE8) ? { 'unselectable': 'on' } : {});

                tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});

                while (this.timePicker._compareTime(end, start, true)) {
                    timeVal = this._localizeTime(start, timeDisplayFormat);
                    var tdtag = ej.buildTag("td.e-hour e-state-default", timeVal);
                    this.model.timeDrillDown.showMeridian && tdtag.addClass("e-hour-" + meridianClass);
                    if (this._isIE8) tdtag.attr("unselectable", "on");
                    tr.append(tdtag);
                    count++;
                    if (count >= rowCount) {
                        count = 0;
                        tbody.append(tr);
                        tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    }
                    start = this.timePicker._createObject(start).getTime() + interval;
                }

                //tbody.append(tr);
                table.append(tbody);

                if (this.model.timeDrillDown.showMeridian) {
                    start = this.timePicker._createObject("12:00:00 PM");
                    end = this.timePicker._createObject("11:59:59 PM");
                }
            }

            // Rendering the footer template
            ej.buildTag("div.e-footer")
              .append(ej.buildTag("span.e-footer-icon"))
              .append(ej.buildTag("span.e-footer-text"))
              .appendTo(this._sfTimeHour);
            $('.e-footer-text', this._sfTimeHour).html(this.model.buttonText.timeNow);
            $(".e-hours-headertext", this._sfTimeHour).text(Globalize.format(this.datePicker.model.value, "dd MMM yyyy"));

            // Bind action to the item.
            this._on(this._sfTimeHour.find('.e-hour'), "click", $.proxy(this._hourNavHandler, this));
            this._on($('.e-next', this._sfTimeHour), "click", $.proxy(this._prevNextHourHandler, this));
            this._on($('.e-prev', this._sfTimeHour), "click", $.proxy(this._prevNextHourHandler, this));
            this._on($('.e-footer', this._sfTimeHour), "click", this._todayBtn);
            $('.e-hours-headertext', this._sfTimeHour).on("click", $.proxy(this._forwardNavHandler, this));

            this._sfTimeHour.hide();
        },
        _localizeTime: function (value, format) {
            return $.trim(Globalize.format(this.timePicker._createObject(value), format, this.model.locale));
        },
        _renderMinsPopup: function () {
            this._sfTimeMins = ej.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-minitues ', "", {}, { id: (this._id ? 'e-time-minitues-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
            this._drillDownContainer.append(this._sfTimeMins);

            // Rendering header template
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                   .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-left-arrow').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-minitues-headertext").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-right-arrow').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .appendTo(this._sfTimeMins);

            // Meridian Header template
            ej.buildTag("div.e-mins-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                          .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-minitues-meridiantxt").text("AM")
                          .attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                          .appendTo(this._sfTimeMins);

            // Table for Time Value
            var table = ej.buildTag("table.e-dp-viewmins", "", {}, { 'cellspacing': 2 }).data("e-table", "data").attr({ 'role': 'grid', 'aria-activedescendant': '' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._sfTimeMins.append(table);

            tbody = ej.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            // Render Time value
            if (this._intervall < 1) return false;
            var start, end, timeVal, interval = this._interval * 60000;
            start = this.timePicker._createObject("12:00:00 AM");
            end = this.timePicker._createObject("11:59:59 PM");
            tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var count = 0;
            while (this.timePicker._compareTime(end, start, true)) {
                timeVal = this._localizeTime(start, "HH:00");
                var tdtag = ej.buildTag("td.e-mins e-state-default", timeVal);
                if (this._isIE8)
                    tdtag.attr("unselectable", "on");
                tr.append(tdtag);
                count++;
                if (count >= 4) {
                    count = 0;
                    tbody.append(tr);
                    tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                }
                start = this.timePicker._createObject(start).getTime() + interval;
            }
            //tbody.append(tr);
            table.append(tbody);
            $('.e-minitues-headertext', this._sfTimeMins).text($('.e-hours-headertext', this._sfTimeHour).text());

            // Rendering the footer template
            ej.buildTag("div.e-footer")
               .append(ej.buildTag("span.e-footer-icon"))
               .append(ej.buildTag("span.e-footer-text"))
               .appendTo(this._sfTimeMins);
            $('.e-footer-text', this._sfTimeMins).html(this.model.buttonText.timeNow);
            $(".e-minitues-headertext", this._sfTimeMins).text(Globalize.format(this.datePicker.model.value, "dd MMM yyyy"));
            !this.model.timeDrillDown.showMeridian && $(".e-mins-header", this._sfTimeMins).css("display", "none");

            // Bind action to the item.
            this._on(table.find('.e-mins'), "click", $.proxy(this._minsNavHandler, this));
            this._on($('.e-next', this._sfTimeMins), "click", $.proxy(this._prevNextMinsHandler, this));
            this._on($('.e-prev', this._sfTimeMins), "click", $.proxy(this._prevNextMinsHandler, this));
            this._on($('.e-footer', this._sfTimeMins), "click", this._todayBtn);
            $('.e-minitues-headertext', this._sfTimeMins).on("click", $.proxy(this._forwardNavHandler, this));
            this._sfTimeMins.hide();
        },
        _todayBtn: function () {
            this._nowClick();
            this._hideResult();
        },
        _hourNavHandler: function (e) {
            var value;
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && $(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();

            $("table", this._sfTimeHour).find("td").removeClass("e-active");
            $(e.target).addClass("e-active");
           
            this._sfTimeHour.hide();
            this._sfTimeMins.show();
            this._addFocus(this._sfTimeMins);
            if (this.model.timeDrillDown.showMeridian) {
                var txt = $(e.target).hasClass("e-hour-am") ? "AM" : "PM";
                value =  $(e.target).text() + ":00 " + txt;
            }
            else
                value = $(e.target).text();
            this._generateMins(value);
            var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
            var val = $.trim(Globalize.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
            var val2 = $.trim(Globalize.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));
            index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
            index = Math.ceil(index);
            this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);
        },
        _minsNavHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && $(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();
            $("table", this._sfTimeMins).find("td").removeClass("e-active").removeClass("e-state-hover");
            $(e.target).addClass("e-active");
            if (this.model.timeDrillDown.showMeridian) {
                value = $(e.target).text() + " " + Globalize.format(this._datetimeValue,"tt","en-US");
                value = this.timePicker._localizeTime(value)
            }
            else
                value = $(e.target).text();
            this.timePicker.option("value", value);
            this.datePicker.option("value", this._datetimeValue);
            this._datetimeValue = new Date(this.model.value.toString());
        },
        _generateMins: function (value) {
            var minsTable = $('table', this._sfTimeMins);
            minsTable.empty();
            this.model.timeDrillDown.showMeridian ? $(".e-mins-header", this._sfTimeMins).show() : $(".e-mins-header", this._sfTimeMins).hide()
            var displayFormat = this.model.timeDrillDown.showMeridian ? "hh:mm" : "HH:mm";
            $('.e-minitues-headertext', this._sfTimeMins).text($('.e-hours-headertext', this._sfTimeHour).text());
            tbody = ej.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var start, end, timeVal, count = 0, interval = this.model.timeDrillDown.interval * 60000;
            start = this.timePicker._createObject(value);
            this._datetimeValue.setHours(start.getHours());
            end = this.timePicker._createObject(start).getTime() + 59 * 60000;
            tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            tbody.append(tr);
            while (this.timePicker._compareTime(end, start, true)) {
                if (count >= 4) {
                    count = 0;
                    tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    tbody.append(tr);
                }
                timeVal = this._localizeTime(start, displayFormat);
                var tdtag = ej.buildTag("td.e-mins e-state-default", timeVal);
                if (this._isIE8)
                    tdtag.attr("unselectable", "on");
                tr.append(tdtag);
                count++;                
                start = this.timePicker._createObject(start).getTime() + interval;
            }
            minsTable.append(tbody);
            $(".e-mins-header", this._sfTimeMins).find('.e-minitues-meridiantxt').text(Globalize.format(this._datetimeValue, "tt",this.model.locale))
            this._disableRange("mins");
            this._on(minsTable.find('.e-mins'), "click", $.proxy(this._minsNavHandler, this));
        },
        _prevNextHourHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrev(progress, this._sfTimeHour);
        },
        _prevNextMinsHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrev(progress, this._sfTimeMins);
        },
        _processNextPrev: function (progress,wrapper) {
            if (progress && wrapper.find(".e-left-arrow").hasClass("e-disable")) return false;
            else if (!progress && wrapper.find(".e-right-arrow").hasClass("e-disable")) return false;
            var currentTable = $("table", wrapper), temp;
            var tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case "e-dp-viewhours":
                    incVal = progress ? -1 : 1;
                    this._datetimeValue.setDate(this._datetimeValue.getDate() + incVal);
                    this._disableRange("hour");

                    this._hoverHour = this._setFocusByIndex("hour", this._hoverHour, this._sfTimeHour);                   
                    $(".e-hours-headertext", this._sfTimeHour).text(Globalize.format(this._datetimeValue, "dd MMM yyyy"));
                    $(".e-minitues-headertext", this._sfTimeMins).text(Globalize.format(this._datetimeValue, "dd MMM yyyy"));
                    break;
                case "e-dp-viewmins":
                    incVal = progress ? -1 : 1;
                    this._datetimeValue.setHours(this._datetimeValue.getHours() + incVal);
                    this._generateMins($.trim(Globalize.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));

                    var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
                    var val = $.trim(Globalize.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
                    var val2 = $.trim(Globalize.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

                    index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
                    index = Math.ceil(index);

                    this._disableRange("mins");

                    this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);

                    $(".e-hours-headertext", this._sfTimeHour).text(Globalize.format(this._datetimeValue, "dd MMM yyyy"));
                    $(".e-minitues-headertext", this._sfTimeMins).text(Globalize.format(this._datetimeValue, "dd MMM yyyy"));
                    break;
            }
        },
        _forwardNavHandler: function (event,table) {
            if (this.model.readOnly || !this.model.enabled) return false;
            var hclassName, proxy = this;
            if (event) event.preventDefault();
            if (event)
                hclassName = $(event.currentTarget).get(0).className;
            else
                hclassName = table.find(".e-text>span").get(0).className;
               
            switch (hclassName) {
                case "e-hours-headertext":                   
                    this._sfTimeHour.css("display", "none");
                    this._dateContainer.css("display", "block");
                    this._addFocus(this._dateContainer.find('.e-datepicker'));
                    break;
                case "e-minitues-headertext":
                    this._sfTimeMins.css("display", "none");
                    this._disableRange("hour");

                    start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
                    var val = $.trim(Globalize.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
                    indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
                    indx = Math.floor(indx);

                    this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

                    $(".e-hours-headertext", this._sfTimeHour).text(Globalize.format(this._datetimeValue, "dd MMM yyyy"));
                    $(".e-minitues-headertext", this._sfTimeMins).text(Globalize.format(this._datetimeValue, "dd MMM yyyy"));
                    this._sfTimeHour.css("display", "block");
                    this._addFocus(this._sfTimeHour);
                    break;
            }
        },
        _renderDateControl: function () {
            var dateInput = ej.buildTag("input#" + this.element[0].id + "_date", "", {}, { "type": "text" });
            this.popup.append(dateInput);

            dateInput.ejDatePicker({

                height: "0px", width: "0px",
                displayInline: true,
                showDateIcon: false,
                showFooter: this.model.timeDrillDown.enabled,
                enableStrictMode: true,
                buttonText:this.model.buttonText.today,

                minDate: this._stringToObject(this.model.minDateTime),
                maxDate: this._stringToObject(this.model.maxDateTime),

                dayHeaderFormat: this.model.dayHeaderFormat,
                startLevel: this.model.startLevel,
                depthLevel: this.model.depthLevel,
                startDay: this.model.startDay,
                stepMonths: this.model.stepMonths,
                showOtherMonths: this.model.showOtherMonths,
                headerFormat: this.model.headerFormat,
                buttonText: this.model.buttonText.today,

                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale
            });
            this.datePicker = dateInput.data("ejDatePicker");
            this.datePicker._getInternalEvents = true;
            this.datePicker._dt_drilldown = true;
            this.datePicker.popup.css({ "position": "static", "display": "block" });
        },
        _renderTimeControl: function () {
            var timeInput = ej.buildTag("input#" + this.element[0].id + "_time", "", {}, { "type": "text" });
            this.popup.append(timeInput);

            timeInput.ejTimePicker({
                height: "0px", width: "0px",
                interval: this.model.interval,
                timeFormat: this.model.timeDisplayFormat,
                popupWidth: this.model.timePopupWidth,
                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale
            });
            this.timePicker = timeInput.data("ejTimePicker");
            this.timePicker._getInternalEvents = true;
            this.timePicker.showDropdown = true;
            this.timePicker.popup.css({ "position": "static", "display": "block" });
            var min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
            var max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;
            if (this.model.value == "") {
                if (+this.datePicker.model.value == +this.datePicker._zeroTime(this.model.minDateTime))
                    this.timePicker.option("minTime", this._getFormat(min, "HH:mm:ss"));
                if (+this.datePicker.model.value == +this.datePicker._zeroTime(this.model.maxDateTime))
                    this.timePicker.option("maxTime", this._getFormat(max, "HH:mm:ss"));
            }
        },
        _updateTimeHeight: function () {
            var height = this.datePicker.popup.outerHeight() - this.popup.find(".e-header").outerHeight() - 2;
            height = this.popup.hasClass("e-dt-responsive") ? "98px" : height;
            this.timePicker.option("popupHeight", height);
        },

        _bindOperations: function () {
            var proxy = this;
            this.datePicker.option("layoutChange", function () { proxy._updateTimeHeight(); });
            this.datePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.timePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.datePicker.option("change", function (a) {
                proxy._refreshTimes(a);
                //proxy.model.allowDrillDown && proxy._updateInput();
            });
            this.datePicker.option("select", function (e) {               
                proxy._updateInput(e);
            });
            this.datePicker.option("dt_drilldown", function (e) {
                if (proxy.model.timeDrillDown.enabled) {
                    proxy._updateInput(e);
                    proxy._switchToDrilDown(e);
                }
            });
            this.timePicker.option("select", function () { proxy._updateInput(); });
            this.model.timeDrillDown.enabled && this.timePicker.option("change", function () { proxy._updateInput(); });
        },
        _switchToDrilDown: function (e) {
            this._dateContainer.hide();
            this._sfTimeHour.show();
            this._addFocus(this._sfTimeHour);
            var selected = new Date(this.model.value.toString());
            this._datetimeValue = new Date(selected.setHours(this._datetimeValue.getHours(), this._datetimeValue.getMinutes(), this._datetimeValue.getSeconds(), this._datetimeValue.getMilliseconds()));
           
            // To hide the hours that exceeds the min and max.
            this._disableRange("hour");

            start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
            var val = $.trim(Globalize.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
            indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
            indx = Math.floor(indx);

            this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

            $(".e-hours-headertext", this._sfTimeHour).text(Globalize.format(this._datetimeValue, "dd MMM yyyy"));
            $(".e-minitues-headertext", this._sfTimeMins).text(Globalize.format(this._datetimeValue, "dd MMM yyyy"));
        },
        _disableRange: function (view) {
            var interval = view == "hour" ? this._interval : this.model.timeDrillDown.interval, table = view == "hour" ? this._sfTimeHour : this._sfTimeMins
            var addClassName = view == "hour" ? "e-hide-hour e-disable" : "e-hide-mins e-disable";
            table.find('tbody tr td.e-' + view).removeClass(addClassName);
            table.find('.e-left-arrow').removeClass("e-disable");
            table.find('.e-right-arrow').removeClass("e-disable");
            start = view == "hour" ? this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00") :
                this._localizeTime($.trim(Globalize.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)), "HH:00");

            if (this._compareDate(this.model.minDateTime, this._datetimeValue)) {
                if (view == "mins")
                    if (!(this.model.minDateTime.getHours() === this._datetimeValue.getHours())) return false;
                var val = $.trim(Globalize.format(this.timePicker._createObject(this.model.minDateTime), "HH:mm", this.model.locale));
                indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
                indx = view == "hour" ? Math.floor(indx) : Math.ceil(indx);
                for (i = 0; i < indx; i++) {
                    var allValues = table.find('tbody tr td.e-' + view), cell;
                    cell = allValues[i];
                    $(cell).addClass(addClassName);
                }
                table.find('.e-left-arrow').addClass("e-disable");
            }
            if (this._compareDate(this.model.maxDateTime, this._datetimeValue)) {
                if (view == "mins")
                    if (!(this.model.maxDateTime.getHours() === this._datetimeValue.getHours())) return false;
                var val = $.trim(Globalize.format(this.timePicker._createObject(this.model.maxDateTime), "HH:mm", this.model.locale));
                indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
                indx = Math.floor(indx) + 1;
                var length = table.find('tbody tr td.e-' + view).length
                for (i = indx; i < length; i++) {
                    var allValues = table.find('tbody tr td.e-' + view), cell;
                    cell = allValues[i];
                    $(cell).addClass(addClassName);
                }
                table.find('.e-right-arrow').addClass("e-disable");
            }
        },
        _setFocusByName: function (name, value, table) {
            var allValues = table.find('tbody tr td.e-' + name), index, cell;
            $(allValues).each(function (i, ele) {
                if (ele.innerHTML == value) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            table.find('table td').removeClass("e-state-hover").removeClass('e-active');
            if (!$(cell).hasClass("e-hide-" + name))
                $(cell).addClass("e-state-hover");
            this._setActiveState(name, table);
            return index;
        },

        _setFocusByIndex: function (name, index, table) {
            var allValues = table.find('tbody tr td.e-' + name), cell;
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            table.find('table td').removeClass("e-state-hover").removeClass('e-active');
            if (!$(cell).hasClass("e-hide-" + name))
                $(cell).addClass("e-state-hover");
            this._setActiveState(name, table);
            return index;
        },

        _setActiveState: function (selection, table) {
            var items = table.find('tbody tr td.e-' + selection), cell, proxy = this;
            var indx = -1;
            switch (selection) {
                case "hour":
                    if (this._compareDate(this.model.value, this._datetimeValue)) {

                        start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
                        var val = $.trim(Globalize.format(this.timePicker._createObject(this.model.value), "HH:00", this.model.locale));
                        indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
                        indx = Math.floor(indx);

                    }
                    break;
                case "mins":
                    if (this._compareDate(this.model.value, this._datetimeValue) && (this.model.value.getHours() === this._datetimeValue.getHours())) {

                        var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
                        var val = $.trim(Globalize.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
                        var val2 = $.trim(Globalize.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

                        indx = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
                        indx = Math.ceil(indx);
                    }
                    break;
            }
            cell = items[indx];
            if (cell) {
                table.find('table td').removeClass("e-active");
                $(cell).removeClass("e-state-hover").addClass("e-active");
            }
        },

        _compareDate: function (first, second) {
            var val1 = new Date(first.toString()).setHours(0, 0, 0, 0);
            var val2 = new Date(second.toString()).setHours(0, 0, 0, 0);
            var result = (+val1 === +val2) ? true : false;
            return result;
        },

        _updateInput: function (e) {
            var date = this._getDate() || new Date(), time = this._getTime() || new Date();
            this.model.value = new Date(date.getFullYear(), date.getMonth(), date.getDate(),
                time.getHours(), time.getMinutes(), time.getSeconds());
            this._preVal = this._objectToString(this.model.value);
            this._updateDateTime();
            this._raiseChangeEvent();
            if (e)
                e.cancel = true;
        },
        _updateDateTime: function () {
            this.isValidState = true;
            var datetime = this._objectToString(this.model.value);
            this.element.val(datetime);
        },
        _refreshTimes: function (args) {
            var value = this._getDateObj(args.value, this.datePicker.model.dateFormat);
            if (!value) return false;
            this.isValidState = true;

            if (this._compare(value, this._setEmptyTime(this.model.minDateTime))) {
                var mintime = this._getFormat(this.model.minDateTime, "HH:mm:ss");
                var preTime = this._getTime();
                this.timePicker.option("minTime", mintime);
                if (!this._compare(preTime, this._getTime())) {
                    this.timePicker.model.value = this._getFormat(preTime, this.timePicker.model.timeFormat);
                    this.isValidState = false;
                }
            }
            else this.timePicker.option("minTime", "12:00:00 AM");

            if (this._compare(value, this._setEmptyTime(this.model.maxDateTime))) {
                var maxtime = this._getFormat(this.model.maxDateTime, "HH:mm:ss");
                var preTime = this._getTime();
                this.timePicker.option("maxTime", maxtime);
                if (!this._compare(preTime, this._getTime())) {
                    this.timePicker.model.value = this._getFormat(preTime, this.timePicker.model.timeFormat);
                    this.isValidState = false;
                }
            }
            else this.timePicker.option("maxTime", "11:59:59 PM");
        },

        _updateValues: function () {
            this._setValue(this.model.value);
            if (this.model.value != null) {
                this.datePicker.option("value", this.model.value);
                this.timePicker.option("value", this.model.value);
            }
            this._validateMinMax();
            this._preVal = this.element.val();
            this._checkErrorClass();
        },
        _setValue: function (value) {
            if (value == null || (typeof JSON === "object" && JSON.stringify(value) === "{}")) {
                this.element.val("");
                this.model.value = null;
                this.isValidState = true;
            }
            else if (typeof value === "string") {
                this.element.val(value);
                this._updateModel();
                this._validateMinMax();
                this._checkStrictMode();
            }
            else if (value instanceof Date && this._isValidDate(value)) {
                this.model.value = value;
                this._updateDateTime();
                this._validateMinMax();
                this._checkStrictMode();
            }
            this._checkErrorClass();
            return this.model.value;
        },
        _validateValue: function (value) {
            var dateObj = this._stringToObject(value);
            if (!dateObj) {
                this.model.value = value;
                this.isValidState = false;
            }
            else {
                this.isValidState = true;
                this.model.value = dateObj;
            }
        },
        _validateMinMax: function () {
            var value, min, max;
            value = (this.model.value) ? this._stringToObject(this.model.value) : null;
            min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
            max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;
            if (!value || !min || !max) return false;
            if (min > max) this.model.minDateTime = this.model.maxDateTime;
            if (value < min || value > max) this.isValidState = false;
            else this.isValidState = true;
        },

        _checkProperties: function () {
            this.model.readOnly && this._readOnly(true);
            this.model.showRoundedCorner && this._setRoundedCorner(true);
            this.model.enableRTL && this._setRtl(true);
            this.model.enabled && this._enabled(true);
            if (!this.model.enabled) this._enabled(false);
            else if (this.model.enabled && this.element.hasClass("e-disable")) this._enabled(true);
            if (!this.element.attr("name")) this.element.attr({ "name": this.element[0].id });
            this._checkStrictMode();
            this._checkErrorClass();
            this._datetimeValue = new Date(this.datePicker._dateValue.toString());
            if (!ej.isNullOrUndefined(this.model.value))            
                this._datetimeValue = new Date(this.model.value.toString());
        },

        _checkStrictMode: function () {
            if (!this.model.enableStrictMode) {
                if (!this.isValidState) {
                    if (this.model.value < this.model.minDateTime) {
                        this.element.val(this._objectToString(this.model.minDateTime));
                        this.model.value = this.model.minDateTime;
                        this.isValidState = true;
                    }
                    else if (this.model.value > this.model.maxDateTime) {
                        this.element.val(this._objectToString(this.model.maxDateTime));
                        this.model.value = this.model.maxDateTime;
                        this.isValidState = true;
                    }
                    else {
                        this.model.value = "";
                        this.element.val("");
                        this.isValidState = true;
                    }
                }
            }
        },

        _targetFocus: function (e) {
            e.preventDefault();
            this.isFocused = true;
            this.wrapper.addClass("e-focus");
            this.wrapper.removeClass("e-error");
            this._prevDateTimeVal = this.element.val();
            if (!this.model.showPopupButton && !this.model.readOnly) this._showResult();
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
            this._trigger("focusIn", { value: this.model.value });
        },
        _targetBlur: function () {
            this.isFocused = false;
            this.wrapper.removeClass("e-focus");
            if (!this.model.showPopupButton) this._hideResult();
            this._valueChange();
            if (!this.model.enableStrictMode) {
                if (!this.isValidState) {
                    this.element.val(this._prevDateTimeVal);
                    this._preVal = this._prevDateTimeVal;
                    this.model.value = this._stringToObject(this._prevDateTimeVal);
                    this.isValidState = true;
                }
                else
                    this._prevDateTimeVal = this.element.val();
            }
            this._checkErrorClass();
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            this._trigger("focusOut", { value: this.model.value });
        },
        _elementClick: function () {
            if (!this.isPopupOpen) this._showResult();
        },
        _keyDownOnInput: function (e) {
            switch (e.keyCode) {
                case 40:
                    if (e.altKey) this._showhidePopup();
                    break;
                case 37:
                case 39:
                    if (!this.model.timeDrillDown.enabled)
                    if (e.altKey && this.isPopupOpen) {
                        e.preventDefault();
                        this._addPrevNextFocus(e.keyCode == 37);
                    }
                    break;
                case 27:
                    e.preventDefault();
                case 9:
                    this._hideResult();
                    break;
                case 13:    // Enter Key
                    if (!this.model.timeDrillDown.enabled) {
    				this._valueChange();
    				this.isPopupOpen && this._hideResult();
    				break;
            }
            }
        },
        _addFocus: function (target) {
            if (!target.hasClass("e-focus")) {
                this._removeFocus();
                target.addClass("e-focus");
                if (target.hasClass("e-datepicker e-popup"))
                    $(document).bind("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    $(document).bind("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-time-hours"))
                    $(document).bind("keydown", $.proxy(this._keyDownOnHours, this));
                else if (target.hasClass("e-time-minitues"))
                    $(document).bind("keydown", $.proxy(this._keyDownOnMinutes, this));
                else if (target.hasClass("e-dt-button"))
                    $(document).bind("keydown", $.proxy(this._buttonClick, this));
            }
        },
        _removeFocus: function () {
            var target = this._getFocusedElement();
            if (target.length > 0) {
                target.removeClass("e-focus");
                if (target.hasClass("e-datepicker e-popup"))
                    $(document).unbind("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    $(document).unbind("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-time-hours"))
                    $(document).unbind("keydown", $.proxy(this._keyDownOnHours, this));
                else if (target.hasClass("e-time-minitues"))
                    $(document).unbind("keydown", $.proxy(this._keyDownOnMinutes, this));
                else if (target.hasClass("e-dt-button"))
                    $(document).unbind("keydown", $.proxy(this._buttonClick, this));
            }
        },
        _addPrevNextFocus: function (flag) {
            // flag true means previous focus, false means next focus
            var target = this._getFocusedElement(), next;
            if (target.length > 0) {
                if (target.hasClass("e-datepicker e-popup"))
                    next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-timecontainer");
                else if (target.hasClass("e-timecontainer"))
                    next = flag ? this.popup.find(".e-datecontainer >.e-datepicker.e-popup") : this.popup.find(".e-dt-today");
                else if (target.hasClass("e-dt-today"))
                    next = flag ? this.popup.find(".e-timecontainer") : this.popup.find(".e-dt-now");
                else if (target.hasClass("e-dt-now"))
                    next = flag ? this.popup.find(".e-dt-today") : this.popup.find(".e-dt-done");
                else if (target.hasClass("e-dt-done"))
                    next = flag ? this.popup.find(".e-dt-now") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
            }
            else next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
            this._addFocus(next);
        },
        _getFocusedElement: function () {
            return this.popup.children("div").find("div.e-popup.e-focus")
        },
        _keyDownOnHours: function (e) {
            if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this._sfTimeHour.find('tbody tr td.e-state-hover').index();
                t.row = this._sfTimeHour.find('tbody tr td.e-state-hover').parent().index();

                if (t.col != -1)
                    t.col = t.col + 1;
                else 
                    t.col = this._sfTimeHour.find('tbody tr td.e-active').index() + 1;
                   
               
                if (t.row != -1) {
                    t.row = t.row + 1;
                    if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-state-hover').hasClass('e-hour-pm'))
                        t.row = t.row + 2;
                }
                else {
                    t.row = this._sfTimeHour.find('tbody tr td.e-active').parent().index() + 1;
                    if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-active').hasClass('e-hour-pm'))
                        t.row = t.row + 2;
                }

                var tableClass = this._sfTimeHour.find('table')[0].className, next;
                rowLength = this._sfTimeHour.find('tbody.e-timepicker-hours tr').length, colLength = this.model.timeDrillDown.showMeridian ? 6 : 4;
                next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "hours", e.ctrlKey);
                if (!e.ctrlKey) this._hoverHour = this._sfTimeHour.find('tbody.e-timepicker-hours tr td').index(next);

                if (!e.ctrlKey) {
                    this._sfTimeHour.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
        },

        _changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
            var eleClass,table, cls = { parent: null, child: null };
            switch (target) {
                case "hours": eleClass = "tbody.e-timepicker-hours tr td.e-hour";
                    cls.parent = ".e-timepicker-hours", cls.child = ".e-hour";
                    hiddenClass = ".e-hide-hour";
                    table = this._sfTimeHour;
                    break;
                case "mins": eleClass = "tbody.e-timepicker-mins tr td.e-mins";
                    cls.parent = ".e-timepicker-mins", cls.child = ".e-mins";
                    hiddenClass = ".e-hide-mins";
                    table = this._sfTimeMins;
                    cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
                    break;
               
            }
            if (t.row <= 0 && t.col <= 0)
                return table.find(eleClass + ':not(.e-disable):first');
            var cell, proxy = this;
            switch (key) {
                case 36:
                    return table.find(eleClass + ':not(.e-disable):first');
                    break;
                case 35:
                    return table.find(eleClass + ':not(.e-disable):last');
                    break;
                case 38:
                    if (ctrlKey) {
                        this._forwardNavHandler(null, table);
                    }
                    else if (t.row > 1) {
                        t.row -= 1;
                    }
                    else {
                        this._processNextPrev(true,table);
                        cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "up", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
                    }
                    return cell;
                    break;
                case 37:
                    if (ctrlKey) {
                        this._processNextPrev(true, table);
                        return table.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col > 1)
                        t.col -= 1;
                    else if (t.row > 1) {
                        t = { row: t.row - 1, col: cols }
                        // different columns for the mins popup.
                        if(target == "mins") t.col = cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
                    }
                    else {
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':not(.e-disable):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "left", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':not(.e-disable):last');
                    }
                    return cell;
                    break;
                case 39:
                    if (ctrlKey) {
                        this._processNextPrev(false, table);
                        return table.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col < cols)
                        t.col += 1;
                    else if (t.row < rows) {
                        t = { row: t.row + 1, col: 1 }
                    }
                    else {
                        this._processNextPrev(false, table);
                        cell = table.find(eleClass + ':not(.e-disable):first');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "right", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(false, table);
                        cell = table.find(eleClass + ':not(.e-disable):first');
                    }
                    return cell;
                    break;
                case 40:
                    if (!ctrlKey) {
                        if (t.row < rows) {
                            t.row += 1;
                        }
                        else {
                            this._processNextPrev(false, table);
                            cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
                            return cell;
                        }
                        cell = this._getCell(t, cls, table).not(hiddenClass);
                        if (cell.length <= 0) {
                            cell = this._findVisible(t, cls, "down", table);
                            if (cell !== null) return cell;
                            this._processNextPrev(false, table);
                            cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
                        }
                        return cell;
                        break;
                    }
                case 13:
                    var ele, element;
                    ele = this._getCell(t, cls, table); element = $(ele)[0];
                    args = { type: null, target: ele };
                    if (target == "hours") this._hourNavHandler(args);
                    if (target == "mins") this._minsNavHandler(args);
                    break;
            }
            return this._getCell(t, cls, table).not(hiddenClass);
        },
        _getCell: function (t, cls, table) {
            var row = t.row;
            if (this.model.timeDrillDown.showMeridian && t.row > 2 && table.hasClass('e-time-hours'))
                row = row - 2;
            var cell = table.find('tbody' + cls.parent + ' tr:nth-child(' + row + ') td' + cls.child + ':nth-child(' + t.col + ')');
            if (this.model.timeDrillDown.showMeridian && cell.length > 0 && table.hasClass('e-time-hours'))
                cell = t.row <= 2 ? $(cell[0]) : $(cell[1]);
            return cell;
        },
        _findVisible: function (t, cls, key,table) {
            var cols = t.col, rows = t.row, requiredClass = cls.child.slice(1, cls.child.length);
            for (i = 0; i >= 0; i++) {
                //nextElement = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
                nextElement = this._getCell({ row: rows, col: cols }, cls, table)
                if (nextElement.length <= 0) {
                    return null;
                }
                if (nextElement.hasClass('e-disable') || !nextElement.is(":visible")) {
                    key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
                    if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                    // Column exceeds the range. 
                    if (cols > table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
                        //move to next row and select first column
                        rows++;
                        cols = 1;
                    }
                    if (cols <= 0) {
                        //move to previous row and select last column
                        rows--;
                        cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
                    }
                    // Row exceeds the range.
                    if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                } else if (nextElement.hasClass(requiredClass)) {
                    t.col = cols; t.row = rows;
                    nextElement = this._getCell(t, cls, table)
                    return nextElement;
                }
            }
        },
        _keyDownOnMinutes: function (e) {
            if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this._sfTimeMins.find('tbody tr td.e-state-hover').index();
                t.row = this._sfTimeMins.find('tbody tr td.e-state-hover').parent().index();

                t.col = (t.col != -1) ? t.col + 1 : this._sfTimeMins.find('tbody tr td.e-active').index() + 1;
                t.row = (t.row != -1) ? t.row + 1 : this._sfTimeMins.find('tbody tr td.e-active').parent().index() + 1;

                var tableClass = this._sfTimeMins.find('table')[0].className, next;
                rowLength = this._sfTimeMins.find('tbody.e-timepicker-mins tr').length, colLength = 4;
                next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "mins", e.ctrlKey);
                if (!e.ctrlKey) this._hoverHour = this._sfTimeMins.find('tbody.e-timepicker-mins tr td').index(next);

                if (!e.ctrlKey) {
                    this._sfTimeMins.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
        },
        _valueChange: function () {
            if (this._preVal != this.element.val()) {
                this._preVal = this.element.val();
                this._updateModel();
                this._validateMinMax();
                this._raiseChangeEvent();
            }
        },
        _updateModel: function () {
            var value = this.element.val();
            if (value == "") {
                this.model.value = null;
                this.isValidState = true;
            }
            else {
                var dateObj = this._stringToObject(value);
                if (dateObj) {
                    this.model.value = dateObj;
                    this.isValidState = true;
                    this._refreshPopup();
                }
                else {
                    this.model.value = value;
                    this.isValidState = false;
                }
            }
        },
        _refreshPopup: function () {
            if (this.isValidState && this.isPopupOpen) {
                var date = this._setEmptyTime(this.model.value), time = this._setEmptyDate(this.model.value);
                var getDate = this._getDate(), getTime = this._getTime();
                if (!getDate || !this._compare(getDate, date)) this.datePicker.option("value", date);
                if (!getTime || !this._compare(getTime, time)) this.timePicker.option("value", time);
            }
        },

        _buttonClick: function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();
                var target = this._getFocusedElement();
                if (target.hasClass("e-dt-today"))
                    this._todayClick();
                else if (target.hasClass("e-dt-now"))
                    this._nowClick();
                else if (target.hasClass("e-dt-done"))
                    this._doneClick();
            }
        },
        _todayClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            if (!this.datePicker.popup.find(".today").hasClass("e-active") ||
                !this.datePicker.popup.children("table").hasClass("e-dp-viewdays") ||
                this.element.val() == "" || !this.isValidState) {
                this.datePicker._setCurrDate();
                this._updateInput();
            }
        },
        _nowClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            this.timePicker.setCurrentTime();
            var mintime = this.model.minDateTime, maxtime = this.model.maxDateTime, date = this.datePicker.model.value, time = new Date();
            var currTime = new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds());
            if (currTime < mintime)
                this.timePicker.option("value", this.timePicker._localizeTime(mintime));
            else if (currTime > maxtime)
                this.timePicker.option("value", this.timePicker._localizeTime(maxtime));
            this._updateInput();
        },
        _doneClick: function () {
            this._hideResult();
        },

        _iconClick: function (e) {
            e.preventDefault();
            if (!this.isFocused) this.element.focus();
            this._showhidePopup();
        },
        _showhidePopup: function () {
            if (this.model.readOnly) return false;
            if (!this.isPopupOpen)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            if (this.isPopupOpen || !this.model.enabled) return false;
            if (this._raiseEvent("open")) return false;
            this.isPopupOpen = true;
            this._setListPosition();
            this._checkForResponsive();           
            var proxy = this;
            this.popup.slideDown(this.model.enableAnimation ? 200 : 0, "easeOutQuad", function () {
                proxy._on($(document), "mousedown", proxy._OnDocumentClick);
                proxy.model.timeDrillDown.enabled && proxy._addFocus(proxy._dateContainer.find('.e-datepicker'));
                
            });
            this._updateModel();
            this._updateTimeHeight();
            this._validateMinMax();
            this._on($(window), "resize", this._OnWindowResize);
            this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            if (this._initial)
                this._initial = false;
            this.wrapper.addClass("e-active");
        },
        _hideResult: function () {
            var proxy = this;
            if (!this.isPopupOpen) return false;
            if (this._raiseEvent("close")) return false;
            this.isPopupOpen = false;
            this._removeFocus();
            this.popup.slideUp(this.model.enableAnimation ? 100 : 0, "easeOutQuad", function () {
                if (proxy.model.timeDrillDown.enabled) {
                    proxy._sfTimeHour.hide();
                    proxy._sfTimeMins.hide();
                    proxy._dateContainer.show();
                }
                if(!ej.isNullOrUndefined(proxy.model.value))
                    proxy._datetimeValue = new Date(proxy.model.value.toString());
              
            });
            this._off($(document), "mousedown", this._OnDocumentClick);
            this._off($(window), "resize", this._OnWindowResize);
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this.wrapper.removeClass("e-active");
           
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popup.outerHeight(),
            popupWidth = this.popup.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
			popupPosition = this.model.popupPosition;
			if (this.model.popupPosition == ej.PopupPosition.Bottom)
				var topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            else
				var topPos = ((popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
			winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popup.outerWidth() - elementObj.outerWidth();
            this.popup.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _OnDocumentClick: function (e) {
            if (this.model) {
                if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-datetime-popup").is(this.popup) &&
                    !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datetime-wrap").is(this.wrapper)) {
                    this._hideResult();
                }
                else if ($(e.target).is(this.popup) || $(e.target).parents(".e-datetime-popup").is(this.popup)) {
                    e.preventDefault();
                    if ($(e.target).parents(".e-datepicker").length > 0) this._addFocus($(e.target).parents(".e-datepicker"));
                    else if ($(e.target).parents(".e-timecontainer").length > 0) this._addFocus($(e.target).parents(".e-timecontainer"));
                    else if ($(e.target).hasClass("e-dt-button")) this._addFocus($(e.target));
                    else if ($(e.target).parents(".e-time-hours").length > 0) this._addFocus($(e.target).parents(".e-time-hours"));
                    else if ($(e.target).parents(".e-time-minitues").length > 0) this._addFocus($(e.target).parents(".e-time-minitues"));
                    else this._removeFocus();
                }
            }
        },
        _OnWindowResize: function (e) {
            this._setListPosition();
            this._checkForResponsive();
        },

        _raiseChangeEvent: function () {
            var previous = this._stringToObject(this._prevDateTimeVal);
            var current = this._stringToObject(this.element.val());
            if (this.element != null && !(+previous === +current)) {
                this._trigger("change", {
                    prevDateTime: this._prevDateTimeVal,
                    value: this.element.val(),
                    isValidState: this.isValidState
                });
                this._trigger("_change", {
                    prevDateTime: this._prevDateTimeVal,
                    value: this.element.val(),
                    isValidState: this.isValidState
                });
                this._prevDateTimeVal = this.element.val();
            }
        },
        _raiseEvent: function (name) {
            if (this.element != null && this.model[name]) return this._trigger(name, { prevDateTime: this._preVal, value: this.element.val() });
            return false;
        },
        _getDateTimeFormat: function () {
            var pattern = Globalize.culture(this.model.locale).calendar.patterns;

            if (!this.model.dateTimeFormat) this.model.dateTimeFormat = pattern.d + " " + pattern.t;
            if (!this.model.timeDisplayFormat) this.model.timeDisplayFormat = pattern.t;
        },
        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popup);
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },
        _getDate: function () {
            return this.datePicker.model.value;
        },
        _getTime: function () {
            return this._getDateObj(this.timePicker.model.value, this.timePicker.model.timeFormat);
        },
        _setEmptyTime: function (date) {
            var newDate = new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _objectToString: function (obj) {
            return this._getFormat(obj, this.model.dateTimeFormat);
        },
        _stringToObject: function (value) {
            return this._getDateObj(value, this.model.dateTimeFormat);
        },
        _getFormat: function (value, format) {
            if (value instanceof Date) {
                var newFormat = this._checkFormat(format);
                return Globalize.format(value, newFormat, this.model.locale);
            }
            else return value;
        },
        _checkFormat: function (format) {
            var proxy = this;
            var dateFormatRegExp = this._regExp();
            return format.replace(dateFormatRegExp, function (match) {
                match = match === "/" ? Globalize.culture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
                return match;
            });
        },
        _regExp: function () {
            return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
        },
        _getDateObj: function (value, format) {
            if (typeof value === "string") {
                var newFormat = this._checkFormat(format);
                var temp = Globalize.parseDate(value, newFormat, this.model.locale);
                if (temp != null)
                    return temp;
                else {
                    if (value != "" && value != null) {
                        var dateregexp = /^\s*(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d).*Z\s*$/, month, datetimesplit = dateregexp.exec(value);
                        var datevariable = new Date();
                        if (datetimesplit) {
                            month = +datetimesplit[2];
                            datevariable.setUTCFullYear(datetimesplit[1], month - 1, datetimesplit[3]);
                            datevariable.setUTCHours(datetimesplit[4], datetimesplit[5], datetimesplit[6]);
                            if (month != datevariable.getUTCMonth() + 1)
                                datevariable.setTime();
                        }
                        if (this._isValidDate(datevariable))
                            return datevariable;
                    }
                    else return null;
                }
            }
            else return value;
        },
        _compare: function (obj1, obj2) {
            return obj1 && obj2 && obj1.getTime() == obj2.getTime();
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },


        _change: function (property, value) {
            this.datePicker.option(property, value);
            this.timePicker.option(property, value);
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.popup.removeClass(this.model.cssClass).addClass(skin);

            this._change("cssClass", skin);
        },
        _localize: function (culture) {
            this.model.locale = culture;
            this.model.dateTimeFormat = this.model.timeDisplayFormat = "";
            var meridianText = ["AM", "PM"];
            this._getDateTimeFormat();
            if (this.isValidState || (this.model.value instanceof Date && this._isValidDate(this.model.value)))
                this.element.val(this._objectToString(this.model.value));
            this._preVal = this.element.val();
            this._change("locale", culture);

            this._validateMeridian();
            this._sfTimeHour.empty();
            this._renderHourTable();

            // Update the meridian support
            if (this.model.timeDrillDown.showMeridian)
                for (i = 0; i < 2; i++) {
                    var txt = !ej.isNullOrUndefined(Globalize.culture(this.model.locale).calendars.standard[meridianText[i]]) ? Globalize.culture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
                    $("span.e-hours-meridiantxt-" + meridianText[i].toLowerCase(), this._sfTimeHour).text(txt);

                }
        },
        _readOnly: function (boolean) {
            this.model.readOnly = boolean;
            if (boolean) this.element.attr("readonly", "readonly");
            else this.element.removeAttr("readonly");

            this._change("readOnly", boolean);
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner");
                this.popup.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                this.popup.removeClass("e-corner");
            }
            this.datePicker.option("showRoundedCorner", boolean);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                this.popup.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                this.popup.removeClass("e-rtl");
            }

            this._change("enableRTL", boolean);
        },
        _enabled: function (boolean) {
            if (boolean) {
                this.model.enabled = false;
                this.enable();
            }
            else {
                this.model.enabled = true;
                this.disable();
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderIcon();
            }
            else {
                this.container.removeClass("e-padding");
                this.datetimeIcon.remove();
                this.datetimeIcon = null;
            }
        },
        _buttonText: function (data) {
            $.extend(this.model.buttonText, data);
            this.popup.find(".e-dt-today").html(this.model.buttonText.today);
            this.popup.find(".e-dt-now").html(this.model.buttonText.timeNow);
            this.popup.find(".e-dt-done").html(this.model.buttonText.done);
            this.popup.find(".e-timecontainer").find(".e-header").html(this.model.buttonText.timeTitle);
        },
        _checkForResponsive: function () {
            if (($(window).outerWidth() > 200) && ($(window).outerWidth() <= 500)) {
                if (!this.popup.hasClass("e-dt-responsive")) {
                    this.popup.addClass("e-dt-responsive");
                    this.timePicker.option("popupWidth", this.datePicker.popup.outerWidth());
                    this.timePicker.option("popupHeight", 98);
                    this.timePicker._refreshScroller();
                    this.timePicker._changeActiveEle();
                }
            }
            else if (this.popup.hasClass("e-dt-responsive")) {
                this.popup.removeClass("e-dt-responsive");
                this.timePicker.option("popupWidth", this.model.timePopupWidth);
                var height = this.datePicker.popup.outerHeight() - this.popup.find(".e-header").outerHeight() - 2;
                this.timePicker.option("popupHeight", height);
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
            }
        },

        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
                this.model.enabled = true;
				this.element.removeAttr("disabled");
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (this.datetimeIcon) this.datetimeIcon.removeClass("e-disable").attr("aria-disabled", false);
                if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().removeClass("e-disable");
                this.popup.children("div").removeClass("e-disable").attr("aria-disabled", false);
                this._change("enabled", true);
            }
        },


        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
                this.element.addClass("e-disable").attr("aria-disabled", true);
				this.element.attr("disabled","disabled");
                if (this.datetimeIcon) this.datetimeIcon.addClass("e-disable").attr("aria-disabled", true);
                if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().addClass("e-disable");
                this.popup.children("div").addClass("e-disable").attr("aria-disabled", true);
                this._hideResult();

                this._change("enabled", false);
                this.datePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
                this.timePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
            }
        },


        getValue: function () {
            return this._objectToString(this.model.value);
        },


        setCurrentDateTime: function () {
            if (!this.model.readOnly)
                this._setValue(new Date());
        },


        show: function () {
            this._showResult();
        },


        hide: function () {
            this._hideResult();
        },


        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.element, "keydown", this._keyDownOnInput);

        }
    });
	ej.PopupPosition = {
			Bottom: "bottom",
			Top: "top"
		};
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Dialog control
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDialog", "ej.Dialog", {
        _rootCSS: "e-dialog",

        element: null,

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,
        angular: {
            terminal: false
        },

        defaults: {

            showOnInit: true,

            closeOnEscape: true,

            //currently we have deprecated this API
            closeIconTooltip: "close",

            enableAnimation: true,

            allowDraggable: true,

            height: "auto",

            minHeight: 120,

            minWidth: 200,

            maxHeight: null,

            maxWidth: null,

            enableModal: false,

            position: { X: "", Y: "" },

            enableResize: true,

            htmlAttributes: {},

            showHeader: true,

            contentType: null,

            contentUrl: null,

            ajaxSettings: {

                type: 'GET',

                cache: false,

                data: {},

                dataType: "html",

                contentType: "html",

                async: true
            },

            title: "",

            width: 400,

            zIndex: 1000,

            cssClass: "",

            enableRTL: false,

            allowKeyboardNavigation: true,

            showRoundedCorner: false,

            actionButtons: ["close"],

            animation:{
                show:{
                    effect:"fade",
                    duration:400
                },
                hide:{
                    effect:"fade",
                    duration:400
                }
            },            

            tooltip:{
                close: "Close",
                collapse: "Collapse",
                restore: "Restore",
                maximize: "Maximize",
                minimize: "Minimize",
                expand: "Expand",
                unPin: "UnPin",
                pin: "Pin"
            },

            faviconCSS: null,

            content: null,

            target: null,

            enablePersistence: false,

            enabled: true,

            isResponsive: false,

            beforeClose: null,

            close: null,            

            expand: null,

            collapse: null,

            beforeOpen: null,

            open: null,

            drag: null,

            dragStart: null,

            dragStop: null,

            resize: null,

            resizeStart: null,

            resizeStop: null,

            contentLoad: null,

            ajaxSuccess: null,

            ajaxError: null,

            create: null,

            destroy: null,

            /*Deprecated*/            
            Close:null
        },

        dataTypes: {
            showOnInit: "boolean",
            closeOnEscape: "boolean",
            enableAnimation: "boolean",
            animation:"data",
            closeIconTooltip: "string",
            tooltip: "data",
            allowDraggable: "boolean",
            enableModal: "boolean",
            enableResize: "boolean",
            isResponsive: "boolean",
            showHeader: "boolean",
            title: "string",
            faviconCSS:"string",
            zIndex: "number",
            cssClass: "string",
            contentUrl: "string",
            contentType: "string",
            htmlAttributes: "data",
            ajaxSettings: "data",
            actionButtons: "array"
        },

        _setModel: function (options) {
            for (var key in options) {
                switch (key) {
                    case "closeIconTooltip": this._dialogClose.attr("title", options[key]); break;
                    case "tooltip": this._tooltipText(options[key]); break;
                    case "title":
                        this.model.title = options[key];
                        if (this._ejDialog.find("span.e-title").length <= 0) 
                            this._addTitleText();
                        else
                            this._ejDialog.find("span.e-title").html(options[key]);
                        this._updateCaptionWidth();
                        break;
                    case "width": this.model.width = options[key]; this._changeSize(); this._updateCaptionWidth(); break;
                    case "height": this.model.height = options[key]; this._changeSize(); break;
                    case "position": this.model.position = options[key]; this._dialogPosition(); break;
                    case "cssClass": this._changeSkin(options[key]); break;
                    case "showRoundedCorner": this._roundedCorner(options[key]); break;
                    case "contentType": { this._appendContent(options[key]); break; }
                    case "enabled": { this.model.enabled = options[key]; this._enabledAction(options[key]); break; }
                    case "contentUrl": { this.model.contentUrl = options[key]; this._appendContent(this.model.contentType); break; }
                    case "content":
                    case "target": 
                        this._ejDialog.appendTo($(options[key]));
                        this.model.target = this.model.content = options[key];
                        this._dialogPosition();
                        break;
                    case "minHeight": { this.model.minHeight = options[key]; this._ejDialog.css("minHeight", options[key]); this._resetScroller(),this._resizeDialog(); break; }
                    case "minWidth": { this.model.minWidth = options[key]; this._ejDialog.css("minWidth", options[key]); this._resetScroller(); this._resizeDialog(); break; }
                    case "maxHeight": { this.model.maxHeight = options[key]; this._ejDialog.css("maxHeight", options[key]); this._resetScroller(); this._resizeDialog(); break; }
                    case "maxWidth": { this.model.maxWidth = options[key]; this._ejDialog.css("maxWidth", options[key]); this._resetScroller(); this._resizeDialog(); break; }
                    case "zIndex": { this._ejDialog.css('z-index', options[key]); break; }
                    case "faviconCSS":
                        this.model.faviconCSS = options[key]; this._favIcon();this._updateCaptionWidth(); break;
                    case "isResponsive": {
                        this.model.isResponsive = options[key];
                        this.model.isResponsive ? this._ejDialog.addClass("e-dialog-resize") : this._ejDialog.removeClass("e-dialog-resize");
                        this._wireResizing();
                        break;
                    }
                    case "allowDraggable": {
                        this.model.allowDraggable = options[key];
                        if (options[key])
                            this._enableDrag();
                        else {
                            this._dialogTitlebar.removeClass("e-draggable");
                        }
                        break;
                    }
                    case "enableResize": {
                        this.model.enableResize = options[key];
                        if (options[key])
                            this._enableResize();
                        else {
                            this._ejDialog.removeClass("e-resizable");
                            this._ejDialog.find(".e-resize-handle").remove();
                        }
                        this._reRenderScroller();
                        break;
                    }
                    case "showHeader": {
                        this.model.showHeader = options[key];
                        if (options[key]) {
                            this._renderTitleBar();
                            this._iconsRender(this.model.actionButtons);
                            this._enableDrag();
                            this._updateScroller(this._ejDialog.outerHeight(true) - (this._dialogTitlebar.outerHeight(true)), this._ejDialog.width()-2);
                        }
                        else {
                            this._ejDialog.find(".e-titlebar").remove();
                            this._updateScroller(this._ejDialog.outerHeight(true), this._ejDialog.width()-2);
                        }
                        break;
                    }
                    case "enableRTL":
                        {
                            this.model.enableRTL = options[key];
                            if (this.model.faviconCSS) this._favIcon();
                            if (options[key]) {
                                this._ejDialog.addClass("e-rtl");
                                this.iframe && this.iframe.contents().find("body").css("direction", "rtl");
                                if (this.scroller) 
                                    this._resetScroller();
                            } else {
                                this._ejDialog.removeClass("e-rtl");
                                this.iframe && this.iframe.contents().find("body").css("direction", "ltr");
                                if (this.scroller) 
                                    this._resetScroller();
                            }
                            break;
                        }
                    case "actionButtons":
                        {
                            var diffArray = [];
                            proxy = this;
                            $.grep(this.model.actionButtons, function (el) {
                                if ($.inArray(el, options[key]) == -1) diffArray.push(el);
                            });
                            if (!ej.isNullOrUndefined(this._dialogTitlebar) && diffArray.length) {
                                this._removeAllIcons();
                                this._iconsRender(options[key]);
                            }
                            this.model.actionButtons = options[key];
                            this._updateCaptionWidth();
                            break;
                        }
                    case "enableModal": this._enableModal(options[key]); break;
                    case "htmlAttributes": this._addAttr(options[key]); break;
                }
            }
        },


        _destroy: function () {
            if (this._overLay) this._overLay.remove();
            this._cloneElement.appendTo(this._ejDialog.parent());
            this._ejDialog.remove();
            this._cloneElement.removeClass("e-dialog");
            this.element = this._cloneElement;
            this._isOpen = false;
        },

        keyConfigs: [37, 38, 39, 40],

        _init: function () {
            this._widthPercent = null;
            this._heightPercent = null;
            this._isOpen = this._maximize = this._minimize = false;            
            if (!this.model.close) this.model.close = this.model.Close;
            if (!this.model.target) this.model.target = this.model.content;
            this._renderControl();
            this._wireEvents();
        },

        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy._ejDialog.addClass(value);
                else if (key == "disabled" && value == "disabled") { proxy.model.enabled = false; proxy._enabledAction(false); }
                else proxy._ejDialog.attr(key, value);
            });
        },
        _tooltipText: function(data){
            $.extend(this.model.tooltip, data);
            if(this._dialogClose.find("button.e-dialog-icon .e-close"))
                this._dialogClose.attr("title", this.model.tooltip.close);
            if($(this._dialogCollapsible).find('span').hasClass('e-collapse-arrow'))
                this._dialogCollapsible.attr("title", this.model.tooltip.collapse);			
            if($(this._dialogCollapsible).find('span').hasClass('e-expand-arrow'))
                this._dialogCollapsible.attr("title", this.model.tooltip.expand);			
            if($(this._dialogMaximize).find('span').hasClass('e-maximize'))
                this._dialogMaximize.attr("title", this.model.tooltip.maximize);			
            if($(this._dialogMaximize).find('span').hasClass('e-restore'))
                this._dialogMaximize.attr("title", this.model.tooltip.restore);			
            if($(this._dialogMinimize).find('span').hasClass('e-minimize'))
                this._dialogMinimize.attr("title", this.model.tooltip.minimize);			
            if($(this._dialogMinimize).find('span').hasClass('e-restore'))
                this._dialogMinimize.attr("title", this.model.tooltip.restore);			
            if($(this._dialogPin).find('span').hasClass('e-unpin'))
                this._dialogPin.attr("title", this.model.tooltip.pin);			
            if($(this._dialogPin).find('span').hasClass('e-pin'))
                this._dialogPin.attr("title", this.model.tooltip.unPin);
        },
        _renderControl: function () {
            this._cloneElement = this.element.clone();
            this.element.attr("tabindex", 0).attr({ "role": "dialog", "aria-labelledby": this.element.prop("id") + "_title" });
            this._ejDialog = ej.buildTag("div.e-dialog e-widget e-box " + this.model.cssClass + " e-dialog-wrap e-shadow#" + this.element.prop("id") + "_wrapper", "", { display: "none", zIndex: this.model.zIndex }, { tabindex: 0 });
            if(this.model.isResponsive) this._ejDialog.addClass("e-dialog-resize");
            this.wrapper = this._ejDialog;
            this._addAttr(this.model.htmlAttributes);
            this._ejDialog.appendTo(!ej.isNullOrUndefined(this.model.target) ? $(this.model.target) : document.body);
            if (this.model.enableRTL) this._ejDialog.addClass("e-rtl");
            if (this.model.showHeader) {
                this._renderTitleBar();
                this._iconsRender(this.model.actionButtons);
                if (this.model.faviconCSS) this._favIcon();
            }
            this._appendContent(this.model.contentType);
            this._enableResize()._enableDrag()._setSize()._sizeInPercent();
            if (this.model.contentType != "ajax"){                                                                  
                if (this.model.showOnInit && this.open()) {
                    this._setContainerSize()._resetScroller();
                }
                else this._setHiddenDialogSize();
            }
            this._roundedCorner(this.model.showRoundedCorner);
            this._enabledAction(this.model.enabled);
        },

        _setContainerSize: function () {
            if (this.model.height != "auto") {
                var cntHeight = this._ejDialog.outerHeight() - $(this._ejDialog.find("div.e-titlebar")).outerHeight();
                this.contentDiv.height(cntHeight);
                this.element.outerHeight(cntHeight);
            }
            return this;
        },

        _changeSize: function () {
            this._setSize()._sizeInPercent()._setContainerSize()._resetScroller();
        },

        _enableDrag: function () {
            if (this.model.allowDraggable && this.model.showHeader) {
                this._dialogTitlebar.addClass("e-draggable");
                this._dragDialog();
            }
            return this;
        },

        _enableResize: function () {
            if (this.model.enableResize) {
                this._ejDialog.addClass("e-resizable");
                var resizeDiv = ej.buildTag("div.e-icon e-resize-handle");
                resizeDiv.appendTo(this._ejDialog);
                this._resizeDialog();
            }
            return this;
        },


        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this._ejDialog.removeClass(this.model.cssClass).addClass(skin);
            }
        },
        _enableModal: function (value) {
            if (value) this._isOpen && this._createOverlay();
            else if (this._overLay) this._overLay.remove();
        },

        _enabledAction: function (flag) {
            if (flag) {
                this._ejDialog.removeClass("e-disable");
                if (!ej.isNullOrUndefined(this.scroller))
                    this.scroller.enable();
            }
            else {
                this._ejDialog.addClass("e-disable");
                if (!ej.isNullOrUndefined(this.scroller))
                    this.scroller.disable();
            }
        },

        _renderTitleBar: function () {
            this._elementTitle = this.element.attr("title");
            if (typeof this._elementTitle !== "string")
                this._elementTitle = "";
            this.model.title = this.model.title || this._elementTitle;
            this._dialogTitlebar = ej.buildTag("div#" + this.element.prop("id") + "_title.e-titlebar e-header e-dialog").prependTo(this._ejDialog);
            this._addTitleText();
        },
        _addTitleText: function () {
            if (this.model.title) 
                this._titleText = ej.buildTag("span.e-title", this.model.title).prependTo(this._dialogTitlebar);
            return this;
        },
        _updateCaptionWidth: function () {
            var addWidth=this.model.faviconCSS?this._dialogFavIcon.outerWidth():0;
			if(this._titleText)
			    this._titleText.css("max-width", (this._dialogTitlebar.width() - 20 - (this._dialogTitlebar.find(".e-dialog-icon").width() * this._dialogTitlebar.find(".e-dialog-icon").length) - addWidth));
			return this;
        },
        _iconsRender: function (iconArray) {
            for (var icon = 0; icon < iconArray.length; icon++) {
                switch (iconArray[icon]) {
                    case "close": {
                        this._closeIcon();
                        break;
                    }
                    case "collapse":
                    case "collapsible": {
                        this._collapsibleIcon();
                        break;
                    }
                    case "maximize": {
                        this._maximizeIcon();
                        break;
                    }
                    case "minimize": {
                        this._minimizeIcon();
                        break;
                    }
                    case "pin": {
                        this._pinIcon();
                        break;
                    }                    
                }
            }
        },

        _removeAllIcons: function () {
            this._dialogTitlebar.find("button.e-dialog-icon").remove();
        },

        _appendContent: function (contentType) {
            this.contentDiv = ej.isNullOrUndefined(this.contentDiv) ? ej.buildTag("div.e-dialog-scroller") : this.contentDiv;
            this.element.removeAttr("title").addClass("e-widget-content e-box");
            var proxy = this;
            if (!ej.isNullOrUndefined(this.model.contentUrl) && !ej.isNullOrUndefined(contentType)) {
                if (contentType == "ajax") {
                    this.model.ajaxSettings.url = this.model.contentUrl;
                    this._sendAjaxOptions(this.element, this.model.ajaxSettings.url);
                }
                else if (contentType == "iframe") {
                    if (this.element.children('.e-iframe').length > 0) {
                        this.iframe = this.element.find('iframe.e-iframe');
                        this.iframe.attr('src', this.model.contentUrl);
                    }
                    else {
                        this.iframe = ej.buildTag("iframe.e-iframe", "", { width: "100%", height:"100%" }, { scrolling: "no", frameborder: 0, src: this.model.contentUrl });
                        this.element.append(this.iframe).show().appendTo(this.contentDiv);
                    }
                    if (this.model.enableRTL) {
                        $(this.iframe).load(function () {
                            proxy.iframe.contents().find("body").css("direction", "rtl");
                        });
                    }
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
                else if (contentType == "image") {
                    var img = ej.buildTag("img.e-images", "", "", { src: this.model.contentUrl });
                    this.element.append(img).show().appendTo(this.contentDiv);
                    $(img).load(function () {
                        proxy._dialogPosition();
                    });
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
                else
                    this.element.show().appendTo(this.contentDiv);
            }
            else 
                this.element.show().appendTo(this.contentDiv);
            this._ejDialog.find("div.e-resize-handle").length > 0 ? this.contentDiv.insertBefore(this._ejDialog.find("div.e-resize-handle")) : this.contentDiv.appendTo(this._ejDialog);
        },

        _roundedCorner: function (value) {
            this._ejDialog[(value ? "addClass" : "removeClass")]('e-corner');
        },

        _reRenderScroller: function () {
            if (this.scroller != undefined) {
                this.scroller.refresh();
                if (!this.model.enableRTL) {
                    if ((this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && this.model.enableResize) {
                        var height = this.scroller._vScrollbar.element.find('> div.e-vscroll').height(), padngSpace = 2, resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerHeight();
	                    if (this.contentDiv.outerHeight() === (this.scroller._vScrollbar.model.height + 1)) {
                            this.scroller._vScrollbar.model.height -= resizeHandleSize + padngSpace;
                            this.scroller._vScrollbar._scrollData.handle -= resizeHandleSize;
                            this.scroller._vScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
                            this.scroller._vScrollbar._updateLayout(this.scroller._vScrollbar._scrollData);
                            this.scroller._vScrollbar.element.find('> div.e-vscroll').height(height - resizeHandleSize - padngSpace);
                        }
                    }
                    if (!(this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && (this.scroller._hScrollbar && this.scroller._hScrollbar._scrollData) && this.model.enableResize) {
                        var width = this.scroller._hScrollbar.element.find('> div.e-hscroll').width(), padngSpace = 2, resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerWidth();
                        this.scroller._hScrollbar.model.width -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._scrollData.handle -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._updateLayout(this.scroller._hScrollbar._scrollData);
                        this.scroller._hScrollbar.element.find('> div.e-hscroll').width(width - resizeHandleSize - padngSpace);
                    }
                }
            }
        },       

        _dialogMaxZindex: function () {
            var parents = this.element.parents(), bodyEle, contEle;
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });
            contEle = $(this.model.target).children(), cindex = contEle.index(this.popup);
            contEle.splice(cindex, 1);
            $(contEle).each(function (i, ele) { parents.push(ele); });
            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },

        _setZindex: function () {
            var zindex = this._dialogMaxZindex();
            if (this.model.zIndex <= zindex)
                this._ejDialog.css({ zIndex: zindex + 1 });
        },

        _createOverlay: function () {
            var zindex = this._ejDialog.css('zIndex');
            this._overLay = ej.buildTag("div#" + this.element.attr("id") + "_overLay.e-overlay", "", { zIndex: zindex - 1});
            this._overLay.appendTo(this.model.target != null ? this.model.target : document.body);
        },

        _sendAjaxOptions: function (content, link) {
            //load waiting popup
            content.addClass("e-load");
            var proxy = this;
            var curTitle = this.model.title;
            var hrefLink = link;
            var ajaxOptions = {
                "success": function (data) {
                    try { proxy._ajaxSuccessHandler(data, content, link, curTitle); }
                    catch (e) { }
                },
                "error": function (e) {
                    try { proxy._ajaxErrorHandler({ "status": e.status, "responseText": e.responseText, "statusText": e.statusText }, content, link, curTitle); }
                    catch (e) { }
                },
                "complete": function () {
                    try {
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        if (!proxy.model.showOnInit) proxy._setHiddenDialogSize();
                    } catch (e) {}
                }
            };
            $.extend(true, ajaxOptions, this.model.ajaxSettings);
            this._sendAjaxRequest(ajaxOptions);
        },

        _setHiddenDialogSize: function () {
            if (!this._isOpen) {
                this._ejDialog.css({ "display": "block", "visibility": "hidden" });
                this._setContainerSize()._resetScroller();
                this._ejDialog.css({ "display": "none", "visibility": "" });
            }
        },

        _sendAjaxRequest: function (ajaxOptions) {
            $.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.success,
                error: ajaxOptions.error,
                beforeSend: ajaxOptions.beforeSend,
                complete: ajaxOptions.complete
            });
        },

        _ajaxSuccessHandler: function (data, content, link, curTitle) {
            content.removeClass("e-load");
            content.html(data).addClass("e-dialog-loaded").appendTo(this._ejDialog);
            content.appendTo(this.contentDiv);
            this._dialogPosition();
            if (this.model.showOnInit)
                this.open();
            this._trigger("ajaxSuccess", { data: data, url: link });
        },

        _ajaxErrorHandler: function (data, content, link, curTitle) {
            content.addClass("e-dialog-loaded").appendTo(this.contentDiv);
            this._dialogPosition().open();
            this._trigger("ajaxError", { data: data, url: link });
        },
        _createEJButton: function (element,cssClass) {
            element.ejButton({ size: "normal", contentType: "imageonly", prefixIcon: "e-icon " + cssClass });
        },
        _closeIcon: function () {
            this._dialogClose = ej.util.buildTag("button#" + this.element[0].id + "_closebutton.e-dialog-icon",null,null,{type:"button"});            
            this._createEJButton(this._dialogClose, "e-close");
            if(this.model.closeIconTooltip == "close" && this.model.tooltip.close == "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            else if(this.model.closeIconTooltip != "close" && this.model.tooltip.close == "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.closeIconTooltip);
            else if(this.model.closeIconTooltip == "close" && this.model.tooltip.close != "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            else   this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            this._on(this._dialogClose, "touchstart click", this._closeClick);
        },
		
        _collapsibleIcon: function () {            
            this._dialogCollapsible = ej.util.buildTag("button#" + this.element[0].id + "_collapsbutton.e-dialog-icon",null,null,{type:"button"});            
            this._createEJButton(this._dialogCollapsible,"e-collapse-arrow");
            this._dialogCollapsible.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.collapse);
            this._on(this._dialogCollapsible, "touchstart click", this._collapsibleClick);
        },

        _maximizeIcon: function () {
            this._dialogMaximize = ej.util.buildTag("button#" + this.element[0].id + "_maximizebutton.e-dialog-icon",null,null,{type:"button"});
            this._createEJButton(this._dialogMaximize,"e-maximize");
            this._dialogMaximize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.maximize);
            this._on(this._dialogMaximize, "touchstart click", this._maximizeClick);
        },

        _minimizeIcon: function () {
            this._dialogMinimize = ej.util.buildTag("button#" + this.element[0].id + "_minimizebutton.e-dialog-icon",null,null,{type:"button"});            
            this._createEJButton(this._dialogMinimize,"e-minimize");
            this._dialogMinimize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.minimize);
            this._on(this._dialogMinimize, "touchstart click", this._minimizeClick);
        },

        _pinIcon: function () {
            this._dialogPin = ej.util.buildTag("button#" + this.element[0].id + "_pinbutton.e-dialog-icon",null,null,{type:"button"});
            this._createEJButton(this._dialogPin,"e-unpin");
            this._dialogPin.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.pin);
            this._on(this._dialogPin, "touchstart click", this._pinClick);
        },

        _favIcon: function () {
            if (!this._dialogFavIcon) {
                this._dialogFavIcon = ej.util.buildTag("div.e-dialog-favicon", "", {}, { style: "float:"+ (this.model.enableRTL?"right":"left") });
                var span = ej.util.buildTag("span.e-dialog-custom", "", {}, { role: "presentation" });
                span.appendTo(this._dialogFavIcon);
                this._dialogFavIcon.appendTo(this._dialogTitlebar);
            }
            else 
                span = this._dialogFavIcon.find("span").removeClass().addClass("e-dialog-custom");
            if (!this.model.faviconCSS) this._dialogFavIcon.remove();
            else span.addClass(this.model.faviconCSS); this._dialogFavIcon.css("float", (this.model.enableRTL ? "right" : "left"));
        },

        _setSize: function () {
            var mdl = this.model;
            this._ejDialog.css({ width: mdl.width, minWidth: mdl.minWidth, maxWidth: mdl.maxWidth });
            this._ejDialog.css({ height: mdl.height, minHeight: mdl.minHeight, maxHeight: mdl.maxHeight });
            this._dialogPosition();
            return this;
        },

        _resetScroller: function () {		
            var scrHeight = this._ejDialog.outerHeight(true) - $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) , eleHeight;
            var scrModel = { width: this._ejDialog.width()-2, enableRTL: this.model.enableRTL, height: scrHeight };
            this.element.css({ "height": "auto", "max-width": "", "max-height": "", "width": "" });
            if ((this.model.height == "auto" || this.model.height == "100%") && (this.element.height() < this.model.maxHeight || !this.model.maxHeight))
                scrModel.height = "100%";
            if (this.model.width == "auto" || this.model.width == "100%")
                scrModel.width = this.model.width;
            this.contentDiv.ejScroller(scrModel);
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
            this._padding = parseInt($(this.element).css("padding-top")) + parseInt($(this.element).css("padding-bottom"));
            if (!ej.isNullOrUndefined(this.contentDiv.height()) && this.contentDiv.height() > 0) {
                if (!ej.isNullOrUndefined(this.scroller))
                    if (!this.scroller._hScrollbar && this.scroller._vScrollbar)
                        eleHeight = this.contentDiv.outerHeight();
                    else if (this.scroller._hScrollbar)
                         eleHeight = this.contentDiv.outerHeight() - this.scroller.model.buttonSize;
                     else  eleHeight = this.contentDiv.outerHeight();
                 else
                    eleHeight = this.contentDiv.outerHeight() - this._padding;
                if ((this.model.height != "auto" && this.model.height != "100%"))
                    this.element.css({ "height": eleHeight });
                else
                    this.element.css("height", this.model.height);
                if ((this.model.height == "auto" || this.model.height == "100%") && !this.scroller._vScrollbar)
                    this.element.css({ "min-height": this.model.minHeight - $(this._ejDialog.find("div.e-titlebar")).outerHeight(true)});
                if (!this.scroller._vScrollbar && (this.model.width != "auto" && this.model.width != "100%"))
                    this.element.outerWidth(this._ejDialog.width() - 2);
                else if (!this.scroller._vScrollbar)
                    this.element.css("width", this.model.width);
                this.element.css({"max-width": this.model.maxWidth, "max-height": this.model.maxHeight });
            }
        },

        _updateScroller: function (height, width) {
            this.contentDiv.ejScroller({ width: width, height: height, enableRTL: this.model.enableRTL });
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
        },

        _dragDialog: function () {
            var proxy = this;
            var pos = this._ejDialog.parents(".e-dialog-scroller");
            this._dialogTitlebar.ejDraggable({
                handle: ".e-titlebar",
                cursorAt: { top: 0, left: 0 },
                dragStart: function (event) {
                    proxy._clickHandler();
                    if (proxy.dialogPin || !proxy.model.allowDraggable || !proxy.model.enabled) {
                        event.cancel = true;
                        return false;
                    }
                    if (proxy._trigger("dragStart", { event: event })) {
                        event.cancel = true;
                        return false;
                    }
                },
                drag: function (event) {
                    proxy._trigger("drag", { event: event });
                },
                dragStop: function (event) {
                    proxy._ejDialog.focus();
                    if (proxy.element.find("> .e-draggable.e-titlebar")) {
                        dragobject = $("#" + proxy.element.find("> .e-draggable.e-titlebar").attr("id")).data("ejDraggable");
                        if (dragobject)
                            dragobject.option("cursorAt", proxy.element.offset());
                    }
                    proxy._trigger("dragStop", { event: event });
                    proxy.model.position.X = this.position.left;
                    proxy.model.position.Y = this.position.top;
                },
                helper: function (event) {
                    return $(proxy._ejDialog).addClass("dragClone");
                }
            });
            return this;
        },

        _resizeDialog: function () {
            if (!this.model.enableResize)  return;
            var proxy = this, started = false, parentObj;
            var _minWidth = parseInt(this.model.minWidth), _minHeight = parseInt(this.model.minHeight);
            var _maxWidth = parseInt(this.model.maxWidth), _maxHeight = parseInt(this.model.maxHeight);
            parentObj = this._getParentObj();
            if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
                _minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), _minWidth);
            if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
                _minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), _minHeight);
            if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
                _maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), _maxWidth);
            if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
                _maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), _maxHeight);
            this._ejDialog.find("div.e-resize-handle").ejResizable(
                {
                    minHeight: _minHeight,
                    minWidth: _minWidth,
                    maxHeight: _maxHeight,
                    maxWidth: _maxWidth,
                    handle: "e-widget-content",
                    resizeStart: function (event) {
                        if (!proxy.model.enabled)
                            return false;
                        !started && proxy._trigger("resizeStart", { event: event });
                        started = true;
                        proxy.model.position = { X: proxy._ejDialog.css("left"), Y: proxy._ejDialog.css("top") };
                        proxy._dialogPosition();
                    },
                    resize: function (event) {
                        var reElement = $(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = $(reElement).outerHeight();
                        proxy.model.width = $(reElement).outerWidth();
                        proxy._setSize();
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        proxy._updateCaptionWidth();
                        proxy._trigger("resize", { event: event });
                    },
                    resizeStop: function (event) {
                        proxy._ejDialog.focus();
                        proxy._sizeInPercent();
                        var reElement = $(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = $(reElement).outerHeight();
                        proxy.model.width = $(reElement).outerWidth();
                        proxy._setSize();
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        started && proxy._trigger("resizeStop", { event: event });
                        started = false;
                    },
                    helper: function (event) {
                        return $(proxy._ejDialog);
                    }
                });
            return this;
        },

        _dialogPosition: function () {
            var location;
            if (this._ejDialog.parents("form").length > 0 && ej.isNullOrUndefined(this.model.target)) {
                this._ejDialog.appendTo(this._ejDialog.parents("form"));
            }
            if (this.model.position.X != "" || this.model.position.Y != "") {
                this._ejDialog.css("position", "absolute");
                this._ejDialog.css("left", this.model.position.X);
                this._ejDialog.css("top", this.model.position.Y);
            }
            else {
                var x = 0, y = 0;
                if (!ej.isNullOrUndefined(this.model.target)) {
                    var $content = $(this.model.target);
                    if ($content.css("position") == 'static') {
                        var parentOffset = $content.offsetParent().offset();
                        var contentOffset = $content.offset();
                        x = contentOffset.left - parentOffset.left;
                        y = contentOffset.top - parentOffset.top;
                    }
                    if ($content.outerWidth() > this._ejDialog.width()) x += ($content.outerWidth() - this._ejDialog.width()) / 2;
                    if ($content.outerHeight() > this._ejDialog.height()) y += ($content.outerHeight() - this._ejDialog.height()) / 2;
                }
                else {
                    var doc = document.documentElement;
                    x = (($(window).outerWidth() > this._ejDialog.width()) ? ($(window).outerWidth() - this._ejDialog.outerWidth()) / 2 : 0) + (window.pageXOffset || doc.scrollLeft);
                    y = (($(window).outerHeight() > this._ejDialog.height()) ? ($(window).outerHeight() - this._ejDialog.outerHeight()) / 2 : 0) + (window.pageYOffset || doc.scrollTop);
                }
                this._ejDialog.css({ top: y, left: x });
                this._ejDialog.css("position", "absolute");
            }
            return this;
        },

        _closeClick: function (event) {
            if (this.model.enabled) {
                event.stopPropagation();
                this.close(event);
            }
        },

        _collapsibleClick: function (e) {
            e.target = this._dialogCollapsible.find("span.e-icon");
            if (this.model.enabled) {
                if ($(e.target).hasClass("e-collapse-arrow")) {
                    this._actionCollapse();
                }
                else if ($(e.target).hasClass("e-expand-arrow")) {
                    this._actionExpand();
                }
            }
        },
        _actionCollapse: function () {
            this._dialogCollapsible && this._dialogCollapsible.find("span.e-collapse-arrow").removeClass("e-collapse-arrow").addClass("e-expand-arrow");
            this._dialogCollapsible.attr("title", this.model.tooltip.expand);
            this._ejDialog.find("div.e-resize-handle").hide();
            this._ejDialog.find(".e-widget-content").parent().slideUp("fast");
            this._ejDialog.removeClass("e-shadow");
            this._ejDialog.css("minHeight", "0");
            this._ejDialog.height("auto");
            this._trigger("collapse");
        },
        _actionExpand: function () {
            this._dialogCollapsible && this._dialogCollapsible.find("span.e-expand-arrow").removeClass("e-expand-arrow").addClass("e-collapse-arrow");
            this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
            this._ejDialog.addClass("e-shadow");
            this._ejDialog.find(".e-widget-content").parent().slideDown("fast");
            if (this._maximize) {
                this._ejDialog.css({ width: "100%", height: "100%" });
                this.element.css({ width: "100%", height: "100%" });
                this.contentDiv.css({ width: "100%", height: "100%" });
            }
            else this._ejDialog.height(this.model.height);
            this._ejDialog.find("div.e-resize-handle").show();
            this._trigger("expand");
        },

        _maximizeClick: function (e) {
            e.target = this._dialogMaximize.find("span.e-icon");
            if (this.model.enabled) {
                var _target = $(e.target);
                var hideIcon = this._dialogMaximize.find("span.e-icon");
                if (_target.hasClass("e-maximize")) {
                    this._actionMaximize();
                    if (this._dialogTitlebar){
                        this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-minimize');
                        this._dialogMinimize.attr('title', this.model.tooltip.minimize);
                    }
                    _target.removeClass("e-maximize").addClass("e-restore");
                    this._dialogMaximize.attr('title', this.model.tooltip.restore);
                    this._hideIcon(true);
                }
                else if (_target.hasClass("e-restore")) {
                    this._actionRestore();
                    _target.removeClass("e-restore").addClass("e-maximize");
                    this._dialogMaximize.attr('title', this.model.tooltip.maximize);
                    if (!ej.isNullOrUndefined(hideIcon) && $(hideIcon).hasClass('e-expand-arrow')){
                        $(hideIcon).removeClass('e-expand-arrow').addClass('e-collapse-arrow');
                        this._dialogMaximize.attr('title', this.model.tooltip.collapse);
                    }
                    this._hideIcon(true);
                }
            }
        },
        _actionMaximize: function () {
            this._ejDialog.css("top", "0px").css("left", "0px").css("position", (this.model.target ?"absolute":"fixed"));
            this._ejDialog.css({ width: "100%", height: "100%" });
            this.element.css({ width: "100%", height: "100%" });
            this.contentDiv.css({ width: "100%", height: "100%" });
            this._maximize = true;
            this._minimize = false;
            if (this._dialogCollapsible && !ej.isNullOrUndefined(this._dialogCollapsible.find("span.e-expand-arrow"))) {
                this._dialogCollapsible.find("span.e-expand-arrow").removeClass("e-expand-arrow").addClass("e-collapse-arrow");
                this._dialogCollapsible.attr('title', this.model.tooltip.collapse);
                this._ejDialog.find(".e-widget-content").parent().slideDown("fast");
            }
            this._resetScroller();
        },
        _actionRestore: function () {
            this.element.height("").width("");
            this.contentDiv.height("").width("");
            this._restoreDialog();
            this._maximize = this._minimize = false;
        },

        _minimizeClick: function (e) {
            e.target = this._dialogMinimize.find("span.e-icon");
            if (this.model.enabled) {
                var _target = $(e.target);
                var hideIcon = this._dialogMinimize.find("span.e-icon");
                if (_target.hasClass("e-minimize")) {
                    if (this._maximize)
                        this._setSize();
                    this._actionMinimize();
                } else if (_target.hasClass("e-restore")) {
                    this._actionRestore();
                    _target.removeClass("e-restore").addClass("e-minimize");
                    this._dialogMinimize.attr('title', this.model.tooltip.minimize);
                    if (!ej.isNullOrUndefined(hideIcon) && $(hideIcon).hasClass('e-expand-arrow')){
                        $(hideIcon).removeClass('e-expand-arrow').addClass('e-collapse-arrow');
                        this._dialogMinimize.attr('title', this.model.tooltip.collapse);
                    }
                    this._hideIcon(true);
                }
            }
        },

        _actionMinimize: function () {
            var top = ($(window).height() - this._ejDialog.height()) + this.element.height() + 14, _height;
            this._ejDialog.css("top", "").css("bottom", "0").css("left", "0").css("position", (this.model.target ? "absolute" : "fixed"));
            this._ejDialog.css("minHeight", "0");
            if (this._dialogTitlebar) {
                this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-maximize');
                this._dialogMaximize.attr('title', this.model.tooltip.maximize);
                this._dialogTitlebar.find(".e-minimize").removeClass("e-minimize").addClass("e-restore");
                this._dialogMinimize.attr('title', this.model.tooltip.restore);
                if (this._isOpen)
                    _height = this._dialogTitlebar.outerHeight();
                else {
                    this._ejDialog.css({ "display": "block", "visibility": "hidden" });
                    _height = this._dialogTitlebar.outerHeight();
                    this._ejDialog.css({ "display": "none", "visibility": "" });
                }
                this._ejDialog.css("height", _height + 2); // 1px bordertop + 1px borderbottom of the dialog wrapper is added
                this._hideIcon(false);
            } else this._ejDialog.css("height", "");
            this.contentDiv.hide();
            this._maximize = false;
            this._minimize = true;
        },

        _hideIcon: function (value) {
            var hideIcon = this._dialogCollapsible ? this._dialogCollapsible.find("span.e-icon") : null;
            if (value) {
                if (!ej.isNullOrUndefined(hideIcon)) $(hideIcon).parent('.e-dialog-icon').show();
                this._ejDialog.find("div.e-resize-handle").show();
            } else {
                if (!ej.isNullOrUndefined(hideIcon)) $(hideIcon).parent('.e-dialog-icon').hide();
                this._ejDialog.find("div.e-resize-handle").hide();
            }
        },

        _pinClick: function (e) {
            e.target = this._dialogPin.find("span.e-icon");
            if (this.model.enabled) {
                var _target = $(e.target);
                if (_target.hasClass("e-unpin")) {
                    this.dialogPin = true;
                    _target.removeClass("e-unpin").addClass("e-pin");
                    this._dialogPin.attr('title', this.model.tooltip.unPin);
                }
                else if (_target.hasClass("e-pin")) {
                    this.dialogPin = false;
                    _target.removeClass("e-pin").addClass("e-unpin");
                    this._dialogPin.attr('title', this.model.tooltip.pin);
                }
            }
        },

        _restoreDialog: function () {
            this.contentDiv.show();
            this._ejDialog.css({"position": "absolute", "bottom": ""}).addClass("e-shadow");
            this._setSize()._resetScroller();
            this._dialogTitlebar && this._dialogTitlebar.find(".e-minimize").parent().show();
        },

        _clickHandler: function (e) {
            var zindex = this._dialogMaxZindex();
            if (parseInt(this._ejDialog.css("zIndex")) < zindex) 
                this._ejDialog.css({ zIndex: zindex + 1 });            
        },

        _mouseClick: function (e) {
            if ($(e.target).hasClass("e-dialog") || $(e.target).hasClass("e-icon e-resize-handle")) {
                this._setZindex();
                $(e.target).closest(".e-dialog.e-widget").focus();
            }
        },

        _keyDown: function (e) {
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            if (this.model.allowKeyboardNavigation && this.model.enabled && $(e.target).hasClass("e-dialog"))
                if ($.inArray(code, this.keyConfigs) > -1 && this.model.allowDraggable && !this.dialogPin) {
                    this._keyPressed(code, e.ctrlKey);
                    e.preventDefault();
                }            
            if (this.model.closeOnEscape && code === 27 && this.model.enabled) 
                if (!this.element.find(".e-js.e-dialog").first().is(":visible")) {
                    this.close(e);
                    e.preventDefault();
                }         
            if (code == 9 && this.model.enableModal)
                this._focusOnTab(e);
        },

        _focusOnTab: function (e) {
            var focusEle = this._ejDialog.find("a, button, :input, select, [tabindex]:not('-1')");
            focusEle = $(focusEle).find("a, button, :input, select, [tabindex]:not('')");
            if (e.shiftKey) {
                if (!focusEle[focusEle.index(e.target) - 1]) {
                    e.preventDefault();
                    focusEle.last().focus();
                }
            }
            else if (!focusEle[focusEle.index(e.target) + 1]) {
                e.preventDefault();
                focusEle[0].focus();
            }
        },

        _keyPressed: function (code, ctrlKey) {
            switch (code) {
                case 40:
                    ctrlKey ? this.option("height", (this._ejDialog.outerHeight() + 3)) : this.option("position", { X: this._ejDialog.position().left, Y: (this._ejDialog.position().top + 3) });
                    break;
                case 39:
                    ctrlKey ? this.option("width", (this._ejDialog.outerWidth() + 3)) : this.option("position", { X: (this._ejDialog.position().left + 3), Y: this._ejDialog.position().top });
                    break;
                case 38:
                    ctrlKey ? this.option("height", (this._ejDialog.outerHeight() - 3)) : this.option("position", { X: this._ejDialog.position().left, Y: (this._ejDialog.position().top - 3) });
                    break;
                case 37:
                    ctrlKey ? this.option("width", (this._ejDialog.outerWidth() - 3)) : this.option("position", { X: (this._ejDialog.position().left - 3), Y: this._ejDialog.position().top });
                    break;
            }
        },

        _sizeInPercent: function () {
            if (!this._enableWindowResize()) return this;
            var parentObj = this._getParentObj();
            this._widthPercent = this._convertPixelToPercentage(parentObj.outerWidth(), this._ejDialog.outerWidth());
            this._heightPercent = this._convertPixelToPercentage(parentObj.outerHeight(), this._ejDialog.outerHeight());
            if (this._widthPercent > 100) {
                this._widthPercent = 100;
                this._ejDialog.outerWidth(parentObj.outerWidth());
                this.model.width = this._ejDialog.width();
            }
            if (this._heightPercent > 100) {
                this._heightPercent = 100;
                this._ejDialog.outerHeight(parentObj.outerHeight());
                this.model.height = this._ejDialog.height();
            }
            return this;
        },

        _getParentObj: function () {
            return (!ej.isNullOrUndefined(this.model.target)? $(this.model.target):$(window));
        },

        _convertPercentageToPixel: function (parent, child) {
            return Math.round((child * parent) / 100);
        },

        _convertPixelToPercentage: function (parent, child) {
            return Math.round((child / parent) * 100);
        },

        _reSizeHandler: function () {
            var parentObj;
            if (this._maximize) { this._resetScroller(); return;}
            if (!this._minimize) this._dialogPosition();
            parentObj = this._getParentObj();
            this._ejDialog.outerWidth(this._convertPercentageToPixel(parentObj.outerWidth(), this._widthPercent));            
            this._ejDialog.outerHeight(this._convertPercentageToPixel(parentObj.outerHeight(), this._heightPercent));
            this.contentDiv.width(this._ejDialog.width());
            this.element.outerWidth(this.contentDiv.width());
            this.contentDiv.height(this._ejDialog.height() - $(this._ejDialog.find("div.e-titlebar")).outerHeight());
            this.element.outerHeight(this._ejDialog.height() - $(this._ejDialog.find("div.e-titlebar")).outerHeight());
            this.scroller = this.contentDiv.ejScroller({ width: this._ejDialog.width() - 2, height: this.element.outerHeight(), rtl: this.model.rtl });
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
            this._padding = parseInt($(this.element).css("padding-top")) + parseInt($(this.element).css("padding-bottom"));
            if (!ej.isNullOrUndefined(this.contentDiv.height()) && this.contentDiv.height() > 0)
                this.element.css({ "height": this.contentDiv.height() - this._padding });
            if (!this._minimize) this._dialogPosition();
            else this._ejDialog.css("height", this._dialogTitlebar.outerHeight());
            this._updateCaptionWidth();
        },

        _enableWindowResize: function () {
            return (this.model.isResponsive || ((isNaN(this.model.width) && (this.model.width.indexOf("%") > 0)) && (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0) && (this.model.height != "auto")))) ? true : false;
        },

        _wireResizing: function () {             
            $(window)[(this._enableWindowResize()?"bind":"unbind")]('resize', $.proxy(this._reSizeHandler, this));
        },

        _wireEvents: function () {
            this._on(this._ejDialog, "keydown", this._keyDown);
            this._on(this._ejDialog, "click", this._mouseClick);
            this._wireResizing();
        },

        refresh: function () {
            this._resetScroller();
        },

        open: function () {
            if (this._isOpen) return true;
            if (true == this._trigger("beforeOpen")) return false;
            this.element.css("display", "block");
            this._setZindex();
            if (!this._minimize && !this._maximize) this._dialogPosition();
            var proxy = this, effect = {};
            this._ejDialog.show();
            if (this.model.enableAnimation) {
                this._ejDialog.css({ "opacity": 0});
                if (this.model.animation.show.effect == "slide") {
                    var eLeft = this._ejDialog.css("left");
                    this._ejDialog.css({ "left": -this._ejDialog.width() });
                    effect = { left: eLeft, opacity: 1 };
                }
                else {
                    effect = { opacity: 1 };
                }
            }
            this._ejDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.show.duration) : 0), function () {
                if (proxy.model) {
                    proxy._ejDialog.eq(0).focus();
                    proxy._ejDialog.css({ "opacity": "" });
                    proxy.contentDiv.find("a, button, :input, select").first().focus();
                    proxy._trigger("open");
                    proxy._updateCaptionWidth();
                    if (proxy.model.maxHeight || proxy.model.maxWidth)
                        proxy._updateScroller(proxy._ejDialog.outerHeight(true) - ((proxy._dialogTitlebar ? proxy._dialogTitlebar.outerHeight(true) : 0)), proxy._ejDialog.width() - 2);
                }
            });
            if (this.model.enableModal == true) this._createOverlay();
            this._isOpen = true;
            if (this.element.find(".e-draggable.e-titlebar")) {
                dragobject = $("#" + this.element.find(".e-draggable.e-titlebar").attr("id")).data("ejDraggable");
                if (dragobject)
                    dragobject.option("cursorAt", this.element.offset());
            }
            return this;
        },

        close: function (event) {
            if (!this._isOpen || !this.model.enabled) return true;
            if (true == this._trigger("beforeClose", { event: event })) return false;
            this._isOpen = false;
            var proxy = this, effect = {};
            if (this.model.enableAnimation) 
            effect = this.model.animation.hide.effect == "slide" ? { left: -this._ejDialog.width(), opacity: 0 } : { opacity: 0 };
            this._ejDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.hide.duration) : 0), function () {
                proxy._trigger("close", { event: event });
                proxy._ejDialog.hide();
            });
            if (this.model.enableModal) 
                if (this._overLay) this._overLay.remove();
            return this;
        },

        isOpened: function () { return this.isOpen() },
        isOpen: function () { return this._isOpen; },

        setTitle: function (titleText) {
            this.model.title = titleText;
            this._titleText.text(titleText);
            this._updateCaptionWidth();
            return this;
        },

        setContent: function (htmlContent) {
            if (!this.model.enabled) return false;
            this.element.html(htmlContent);
            this._resetScroller();
            return this;
        },      

        focus: function () {
            this._setZindex();
            this.element.focus();
            return this;
        },

        minimize: function () {
            this._actionMinimize();
            $(this.wrapper.find(".e-minimize")[0]).parent().hide();
            return this;
        },

        maximize: function () {
            this._actionMaximize();
            $(this.wrapper.find(".e-maximize")[0]).removeClass("e-maximize").addClass("e-restore");
            this._dialogMaximize.attr('title', this.model.tooltip.restore);
            this.contentDiv.show();
            this._dialogTitlebar && this._dialogTitlebar.find(".e-minimize").parent().show();
            return this;
        },

        restore: function () {
            this._actionRestore();
            $(this.wrapper.find(".e-restore")[0]).removeClass("e-restore").addClass("e-maximize");
            this._dialogMaximize.attr('title', this.model.tooltip.maximize);
            return this;
        },

        pin: function () {
            this.dialogPin = true;
            $(this.wrapper.find(".e-unpin")[0]).removeClass("e-unpin").addClass("e-pin");
            this._dialogPin.attr('title', this.model.tooltip.unPin);
            return this;
        },

        unpin: function () {
            this.dialogPin = false;
            $(this.wrapper.find(".e-pin")[0]).removeClass("e-pin").addClass("e-unpin");
            this._dialogPin.attr('title', this.model.tooltip.pin);
            return this;
        },

        collapse: function () {
            this._actionCollapse();
            return this;
        },

        expand: function () {
            this._actionExpand();
            return this;
        }
    });

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDropDownList", "ej.DropDownList", {
        element: null,

        model: null,
        validTags: ["select", "input"],
        _ignoreOnPersist: ["fields", "dataSource", "query", "create", "popupHide", "popupShown", "beforePopupShown", "beforePopupHide", "change", "select", "checkChange", "destroy"],
        _setFirst: false,

        _rootCSS: "e-dropdownlist",

        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            priority: 1
        },
      


        defaults: {
            cssClass: "",

            value: null,

            htmlAttributes: {},

            text: null,

            itemValue: "",

            itemsCount: 0,

            dataSource: null,

            delimiterChar: ',',

            query: null,

            fields: {
                id: null,

                text: null,

                value: null,

                category: null,
                
                groupBy:null,

                imageUrl: null,

                imageAttributes: null,

                spriteCssClass: null,

                htmlAttributes: null,

                selected: null,

                tableName: null
            },

            watermarkText: null,

            height: "",

            width: "",

            popupHeight: "152px",

            popupWidth: "auto",

            maxPopupHeight: null,

            minPopupHeight: 0,

            maxPopupWidth: null,

            minPopupWidth: 0,

            targetID: null,

            template: null,

            headerTemplate: null,

            selectedItemIndex: null,

            selectedIndex:null,

            disableItemsByIndex: null,

            enableItemsByIndex: null,

            selectedItems: [],

            selectedIndices:[],

            cascadeTo: null,

            enablePopupResize: false,

            allowVirtualScrolling: false,

            virtualScrollMode: "normal",

            showRoundedCorner: false,

            showPopupOnLoad: false,

            enableRTL: false,

            enabled: true,

            filterType: "contains",

            sortOrder: "ascending",

            caseSensitiveSearch: false,

            showCheckbox: false,

            checkAll: false,

            uncheckAll: false,

            enablePersistence: false,

            enableFilterSearch: false,

            enableIncrementalSearch:true,

            readOnly: false,

            enableAnimation: false,

            multiSelectMode: "none",

            allowGrouping: false,

            enableSorting: false,

            validationRules: null,

            validationMessage: null,

            actionComplete: null,

            actionFailure: null,

            actionSuccess: null,

            create: null,

            popupHide: null,

            popupShown: null,

            beforePopupShown: null,

            beforePopupHide: null,

            popupResizeStart: null,

            popupResize: null,

            popupResizeStop: null,

            change: null,

            select: null,

            dataBound: null,

            search: null,

            checkChange: null,

            cascade: null,

            destroy: null

        },

        dataTypes: {
            cssClass: "string",
            itemsCount: "number",
            watermarkText: "string",
            template: "string",
            disableItemsByIndex: "string",
            enableItemsByIndex: "string",
            enableIncrementalSearch:"boolean",
            cascadeTo: "string",
            delimiterChar: "string",
            showRoundedCorner: "boolean",
            showPopupOnLoad: "boolean",
            enableRTL: "boolean",
            enablePersistence: "boolean",
            allowVirtualScrolling: "boolean",
            virtualScrollMode: "enum",
            enabled: "boolean",
            readOnly: "boolean",
            multiSelectMode: "enum",
            dataSource: "data",
            query: "data",
            fields: "data",
            selectedItems: "array",
            enableAnimation: "boolean",
            allowGrouping: "boolean",
            enableSorting: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data"
        },

        observables: ["value", "selectedItemIndex", "selectedIndex"],
        value: ej.util.valueFunction("value"),
        selectedItemIndex: ej.util.valueFunction("selectedItemIndex"),
        selectedIndex: ej.util.valueFunction("selectedIndex"),
        

        enable: function () {
            if (this.element.hasClass("e-disable")) {
                this.target.disabled = false;
                this.model.enabled = true;
                this.element.removeClass('e-disable');
                this.dropdownbutton.removeClass('e-disable');
                this.popupListWrapper.removeClass('e-disable');
                if (this._isIE8) this.drpbtnspan.removeClass("e-disable");
                //Element not Maintain in Multiselection
                this.container.bind("mousedown", $.proxy(this._OnDropdownClick, this));               
                if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable");
                this.wrapper.attr('tabindex','0');
            }
            this._wireEvents();
        },

        disable: function () {
            if (!this.element.hasClass("e-disable")) {
                this.target.disabled = true;
                this.model.enabled = false;
                this.element.addClass('e-disable');
                this.popupListWrapper.addClass('e-disable');
                this.dropdownbutton.addClass('e-disable');
                if (this._isIE8) this.drpbtnspan.addClass("e-disable");
                if (this.model.multiSelectMode == "visualmode") this._ulBox.addClass("e-disable");
                //Element not Maintain in Multiselection
                this.container.unbind("mousedown", $.proxy(this._OnDropdownClick, this));
                this._unwireEvents();
                this.wrapper.removeAttr('tabindex');
                if (this._isPopupShown()) this._hideResult();
            }
        },

        /* will deprecate with text property */
        getValue: function () {
            return this.target.value;
        },
        _setValue: function (value) {
            if (value) {
                this._raiseEvents = false;
                this.unselectItemByText(this.model.text);
                this._raiseEvents = true;
                this.selectItemByValue(value);
            }
        },
        _setText: function (text) {
            if (text) {
                this._raiseEvents = false;
                this.unselectItemByText(this.model.text);
                this._raiseEvents = true;
                this.selectItemByText(text);
            }
        },
        _setItemValue: function (itemValue) {
            this.model.itemValue = itemValue;
        },
        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            if (this._isWatermark) this.element.attr("placeholder", text);
            else this._hiddenSpan.text(text);
        },

        hidePopup: function () {
            if (!this.model.enabled) return false;
            if (this.ultag.find('li').length > 0)
                this._hideResult();
        },

        showPopup: function () {
            if (!this.model.enabled) return false;
            if (this.ultag.find('li').length > 0)
                this._showResult();
        },

        clearText: function () {
            this._clearTextboxValue();
            if (!this._isWatermark)
                this._setWatermark();
        },

        addItem: function (itemTag) {
            if (!this.model.enabled || !itemTag) return false;
            this._mapFields();
            var list = $.isArray(itemTag) ? itemTag : [itemTag];
            if (list.length < 1) return false;
            var mapper = this.mapFld,
                mapFld = { _id: null, _imageUrl: null, _imageAttributes: null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null, _category:null};
            mapFld._id = list[0][mapper._id] ? mapper._id : "id";
            mapFld._imageUrl = list[0][mapper._imageUrl] ? mapper._imageUrl : "imageUrl";
            mapFld._imageAttributes = list[0][mapper._imageAttributes] ? mapper._imageAttributes : "imageAttributes";
            mapFld._spriteCSS = list[0][mapper._spriteCSS] ? mapper._spriteCSS : "spriteCssClass";
            mapFld._text = list[0][mapper._text] ? mapper._text : "text";
            mapFld._value = list[0][mapper._value] ? mapper._value : "value";
            mapFld._htmlAttributes = list[0][mapper._htmlAttributes] ? mapper._htmlAttributes : "htmlAttributes";
            mapFld._selected = list[0][mapper._selected] ? mapper._selected : "selected";
            mapFld._category = list[0][mapper._category] ? mapper._category : "groupBy";
            this._generateLi(list, mapFld);
            this._virtualUl.append($(this.dummyUl).clone(true));
            this.ultag.append(this.dummyUl);
            var i, listItems = this.dummyUl;
            if (this.model.showCheckbox) {
                this._addCheckbox(listItems)
                for (i = 0; i < listItems.length; i++) {
                    if ($(listItems[i]).hasClass('chkselect')) {
                        $(listItems[i]).find(".listcheckbox").ejCheckBox({ "checked": true });
                        this._activeItem = i + this.popupListItems.length;
                        this.checkedStatus = true;
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data:this.model });
                        this._enterTextBoxValue();
                        $(listItems[i]).removeClass('chkselect');
                    }
                }
            }
            for (var i = 0; i < list.length; i++)
                this._listItem(list[i], "add");
            this._renderBoxModel();
            if (this._isPopupShown()) {
                var scrollerPosition = this.scrollerObj ? this.scrollerObj.scrollTop() : 0;
                this._refreshScroller();
                if (this.scrollerObj) this.scrollerObj.option("scrollTop", scrollerPosition);
            }
        },

        _toArray: function (index, mode) {
            var items;
            if (typeof index == "function") index = ej.util.getVal(index);
            if ($.isArray(index)) items = index;
            else if (typeof index == "string") {
                if ((mode && (this.model.multiSelectMode == "visualmode" ||this.model.multiSelectMode == "delimiter" || this.model.showCheckbox))) {
                    items = index.split(this.model.delimiterChar);
                    if (items.length == 0) items = [index];                 
                }
                else if(!mode){
                    items = index.split(this.model.delimiterChar);
                    if (items.length == 0) items = [index];
                }
                else items = [index];
            } else items = [index];
            return items;
        },
        /*will deprecate with selectItemsByIndices */
        selectItemByIndex: function (index) {
            this._selectItemByIndex(index);
        },

        selectItemsByIndices: function (index) {
            this._selectItemByIndex(index);
        },

        _selectItemByIndex: function (val) {
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            this._selectedIndices = $.map(this._selectedIndices, function (a) { return parseInt(a); });
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            var items = this._toArray(val,true), index;
            for (var k = 0; k < items.length; k++) {
                index = parseInt(items[k]);
                if (index != null && index >= 0) {
                    if ($.inArray(index, this._selectedIndices) == -1)
                        for (var i = 0; i < this.listitems.length; i++) {
                            if (!$(this.listitems[i]).hasClass('e-disable')) {
                                if (i == index) {
                                    this.selectedIndexValue = i;
                                    this._activeItem = index;
                                    this._enterTextBoxValue();
                                }
                            }
                        }
                } else if (!this.model.showCheckbox && this.model.multiSelectMode == "none") this._clearTextboxValue();
            }
        },

        unselectItemsByIndices: function (val) { this._unselectItemByIndex(val); },

        /*will deprecate with unselectItemsByIndices method */
        unselectItemByIndex: function (val) { this._unselectItemByIndex(val); },

        _unselectItemByIndex: function (val) {
            this._selectedIndices = $.map(this._selectedIndices, function (a) { return parseInt(a); });
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            var i, items = this._toArray(val,true), index;
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            for (var k = 0; k < items.length; k++) {
                index = parseInt(items[k]);
                for (i = 0; i < this.listitems.length; i++) {
                    if (i == index) {
                        this.selectedIndexValue = i;
                        this._activeItem = index;
                        if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                        this._removeTextBoxValue();
                    }
                }
            }
        },

        /*Deprecated with selectedItemByValue */
        setSelectedValue: function (idvalue) { this.selectItemByValue(idvalue); },

        selectItemByValue: function (val) {
            var i, hidelement, items;
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            if (ej.isNullOrUndefined(val) || val === "") this._clearTextboxValue();
            else {
                items = this._toArray(val,true);
                for (var k = 0; k < items.length; k++) {
                    for (i = 0; i < this.listitems.length; i++) {
                        if (!$(this.listitems[i]).hasClass('e-disable')) {
                            if (this._getAttributeValue(this.listitems[i]) || $(this.listitems[i]).text()) {
                                this._selectedValue = this._getAttributeValue(this.listitems[i]) || $(this.listitems[i]).text();
                                if (this._selectedValue == $.trim(items[k])) {
                                    this._activeItem = i;
                                    this._aselectedItem = this._activeItem;
                                    this._enterTextBoxValue();
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        },


        unselectItemByValue: function (val) {
            var i, hidelement, items = this._toArray(val,true);
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            for (var k = 0; k < items.length; k++) {
                for (i = 0; i < this.listitems.length; i++) {
                    if (this._getAttributeValue(this.listitems[i])) {
                        this._selectedValue = this._getAttributeValue(this.listitems[i]);
                        if (this._selectedValue == $.trim(items[k])) {
                            this._activeItem = i;
                            if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                            this._removeTextBoxValue();
                            break;
                        }
                    }
                }
            }
        },

        /* Deprecated with selectItemByText*/
        setSelectedText: function (value) { this.selectItemByText(value); },

        selectItemByText: function (val) {
            var i, hidelement, items;
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
			this._mapFields();
            if (ej.isNullOrUndefined(val) || val === "") this._clearTextboxValue();
            else {
                items = this._toArray(val,true);
                for (var k = 0; k < items.length; k++) {
                    for (i = 0; i < this.listitems.length; i++) {
                        if(!$(this.listitems[i]).hasClass('e-disable')){
                            this.selectedTextValue =  this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                            if (this.selectedTextValue == $.trim(items[k])) {
                                this._activeItem = i;
                                this._aselectedItem = this._activeItem;
                                this._enterTextBoxValue();
                                break;
                            }
                        }
                    }
                }
            }
        },


        unselectItemByText: function (val) {
            var i, hidelement, items = this._toArray(val,true);
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
			this._mapFields();
            for (var k = 0; k < items.length; k++) {
                for (i = 0; i < this.listitems.length; i++) {
                    this.unselectedTextValue = this._isPlainType(this.popupListItems)? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                    if (this.unselectedTextValue == $.trim(items[k])) {
                        this._activeItem = i;
                        if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                        this._removeTextBoxValue();
                        break;
                    }
                }
            }
        },

        getSelectedValue: function () {
            return this._hiddenInput.val();
        },

        getSelectedItem: function () {
            var k, selected = [];
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            for (k = 0; k < this._selectedIndices.length; k++) {
                selected.push(this.listitems[this._selectedIndices[k]]);
            }
            return selected;
        },
		getItemDataByValue: function (value) {
			var listitems = this._toArray(value,false);
             var k,m, selected = [], field = (this.model.fields && this.model.fields.value) ? this.model.fields["value"] : "value";     
            for (k = 0; k < listitems.length; k++) {
				for(m=0;m<this._rawList.length;m++){
					if(this._rawList[m][field] == $.trim(listitems[k]))
						selected.push(this._rawList[m]);
				}                
            }
            return selected;
        },

        getListData: function() { return this._rawList; },

        /* will be deprecate in upcoming releases*/
        getSelectedItemsID: function () {
            return this._selectedItemsID;
        },

        disableItemsByIndices: function (value) { this._disableItemByIndex(value) },

        /*Deprecated with disableItemsByIndices method */
        disableItemByIndex: function (value) { this._disableItemByIndex(value) },

        _disableItemByIndex: function (value) {
            if (!this.model.enabled) return false;
            var listitems = this._toArray(value,false);
            for (var i = 0; i < listitems.length; i++) {
                if (listitems[i] != null) {
                    if (listitems.length > 0 && !($.inArray(parseInt(listitems[i]), this._disabledItems) > -1)) {
                        index = $.inArray(listitems[i], this._disabledItems);
                        var disable = $(this.ultag.children("li:not('.e-category')")[parseInt(listitems[i])]).addClass('e-disable');
                        disable.find(".listcheckbox").ejCheckBox("disable");
                        this._disabledItems.push(parseInt(listitems[i]));
                        this.model.disableItemsByIndex = String(this._disabledItems.join(","));
                    }
                }
            }
        },

        enableItemsByIndices:function(value){ this._enableItemByIndex(value)},

        /*Deprecated with enableItemsByIndices method */
        enableItemByIndex: function (value) { this._enableItemByIndex(value) },

        _enableItemByIndex: function (value) {
            var listitems = this._toArray(value,false), index;
            this.model.enableItemsByIndex = value;
            for (var i = 0; i < listitems.length; i++) {
                if (listitems.length > 0 && ($.inArray(parseInt(listitems[i]), this._disabledItems) > -1)) {
                    index = $.inArray(parseInt(listitems[i]), this._disabledItems);
                    var enable = $(this.ultag.children("li:not('.e-category')")[parseInt(listitems[i])]).removeClass('e-disable');
                    enable.find(".listcheckbox").ejCheckBox("enable");
                    this._disabledItems.splice(index, 1);
                }
            }
            this.model.enableItemsByIndex = null;
            this.model.disableItemsByIndex = this._disabledItems.join(this.model.delimiterChar);
        },
        _validateDelimiter: function (deli) {
            if ($.trim(deli).length == 1) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },

        _removeText: function (currentValue) {
            var eleVal = this.element[0].value.split(this.model.delimiterChar), hidVal = this._hiddenInput[0].value.split(this.model.delimiterChar),
            index = $.inArray(currentValue, eleVal);
            if (index >= 0) {
                eleVal.splice(index, 1);
                hidVal.splice(index, 1);
            }
            this.element[0].value = eleVal.join(this.model.delimiterChar);
            this._hiddenInput[0].value = hidVal.join(this.model.delimiterChar);
        },
        _addText: function (currentValue) {
            if (this._checkContains(currentValue)) return false;
            var ele = ["element", "_hiddenInput"], val;
            for (var i = 0; i < ele.length; i++) {
                val = ele[i] == "element" ? currentValue : this._hiddenValue;
                if (this[ele[i]][0].value && this[ele[i]][0].value != "") {
                    var splitedText = this[ele[i]][0].value.split(this.model.delimiterChar);
                    splitedText.push(val);
                    this[ele[i]][0].value = splitedText.join(this.model.delimiterChar);
                } else this[ele[i]][0].value = val;
            }
        },
        _checkContains: function (chkValue) {
            var values = this.element[0].value.split(this.model.delimiterChar);
            this.contains = false;
            for (var i = 0; i < values.length; i++) {
                if (values[i] == chkValue)
                    this.contains = true;
            }
            return this.contains;
        },
        _init: function () {
            var browserInfo = ej.browserInfo();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            if ((this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type'))) || this.element.is("select")) {
                this._isWatermark = 'placeholder' in document.createElement('input');
                this._id = this.element[0].id;
                this._initialize();
                this._render();
                this._addAttr(this.model.htmlAttributes);
                this._enabled(this.model.enabled);
                //this._wireEvents();
                this._initValue = false;
                this._checkboxValue = false;
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
            }
        },

        _initValidator: function () {
            var proxy = this;
            this.element.closest("form").validate({
                ignore: ".e-hidden",
                errorClass: 'e-validation-error',
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    $(error).insertAfter(element.closest(".e-widget"));
                },
            });
        },
        _setValidation: function () {
            if (this.element.closest("form").length != 0) {
                this._hiddenInput.rules("add", this.model.validationRules);
                var validator = this.element.closest("form").validate();
                var name = this._hiddenInput.attr("name");
                validator.settings.messages[name] = {};
                for (var ruleName in this.model.validationRules) {
                    var message = null;
                    if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                        if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                            message = this.model.validationRules["messages"][ruleName];
                        else {
                            validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                            for (var msgName in this.model.validationMessage)
                                ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                        }
                        validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                    }
                }
            }
        },

        _setInitialPopup: function (value) {
            if(this.model.enabled && !this.model.readOnly)
                value == false ? this._hideResult() : this._showResult();
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.popupListWrapper.removeClass(this.model.cssClass).addClass(skin);
        },

        _setRTL: function (val) {
            if (this.model.enableRTL != val) {
                this.model.enableRTL = val;
                this._RightToLeft();
                this._dropbtnRTL();
            }
        },

        _changeHeight: function (height) {
            this.wrapper.height(height);
            this._setListHeight();
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": if (!this._isEqualDataSource(options[option])) this._checkModelDataBinding(options[option], this.model.query); break;
                    case "query": this._checkModelDataBinding(this.model.dataSource, options[option]); break;
                    case "fields": this.model.fields = $.extend(this.model.fields, args); this._checkModelDataBinding(this.model.dataSource, this.model.query); break;
                    case "itemsCount": this.model.itemsCount = options[option]; this._checkModelDataBinding(this.model.dataSource, this.model.query);; break;
                    case "template": this.model.template = options[option]; this._checkModelDataBinding(this.model.dataSource, this.model.query); break;
                    case "value": if (ej.isNullOrUndefined(options[option]) || options[option] === "") this._clearTextboxValue();
                    else { this._setValue(ej.util.getVal(options[option])); options[option] = this.model.value; } break;
                    case "delimiterChar": var delchar = this.model.delimiterChar; options[option] = this._validateDelimiter(options[option]);
                        this.model.delimiterChar = options[option]; if(this.model.text) this.element.val(this.model.text.split(delchar).join(this.model.delimiterChar));
                        this._updateText();
                        break;
                    case "text": if (ej.isNullOrUndefined(options[option]) || options[option] === "") this._clearTextboxValue();
                    else { this._setText(options[option]); options[option] = this.model.text; } break;
                    case "itemValue": this._setItemValue(options[option]); break;
                    case "enableRTL": this._setRTL(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "minPopupHeight": this.model.minPopupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "minPopupWidth": this.model.minPopupWidth = options[option]; this._setListWidth(); break;
                    case "maxPopupHeight": this.model.maxPopupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "maxPopupWidth": this.model.maxPopupWidth = options[option]; this._setListWidth(); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showCheckbox": this.model.showCheckbox = options[option];
                        var _text = this.model.text;
                        var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar):this.model.text;
                        this._raiseEvents = false;
                        this._clearTextboxValue();
                        this._raiseEvents = true;
                        this._checkboxHideShow(options[option]);
                        if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
                            if (this.model.multiSelectMode == "visualmode")
                                this._renderBoxModel();
                            this._setText(_text);
                        }
                        else
                            this._setText(_textes[0]);
                        if (this._isPopupShown())
                            this._setListPosition();
                        break;
                        /* will depreciate with checkAll  Method*/
                    case "checkAll": this._setCheckAll(options[option]); return false; break;
                        /* will depreciate with uncheckAll  Method*/
                    case "uncheckAll": this._setUncheckAll(options[option]); return false; break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "validationRules":
                        if (this.element.closest("form").length != 0) {
                            if (this.model.validationRules != null) {
                                this._hiddenInput.rules('remove');
                                this.model.validationMessage = null;
                            }
                            this.model.validationRules = options[option];
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        if (this.element.closest("form").length != 0) {
                            this.model.validationMessage = options[option];
                            this._setValidation();
                        }
                        break;
                    case "showRoundedCorner": this._roundedCorner(options[option]); this.model.showRoundedCorner = options[option]; break;
                    case "showPopupOnLoad": this._setInitialPopup(options[option]); break;
                    case "targetID": this.model.targetID = options[option]; this._showFullList(); break;
                        /* will depreciate with selectedIndex  Method*/
                    case "selectedItemIndex":
                    case "selectedIndex":
                        this._selectItemByIndex(options[option]);
                        this.model.selectedItemIndex = this.model.selectedIndex = options[option];
                        break;
                        /* will depreciate with unselectItemByIndex API Method*/
                    case "unselectItemByIndex": this._unselectItemByIndex(options[option]); break;
                        /* will depreciate with disableItemsByIndex API Method*/
                    case "disableItemsByIndex": this._disableItemByIndex(options[option]); break;
                        /* will depreciate with enableItemsByIndex API Method*/
                    case "enableItemsByIndex": this._enableItemByIndex(options[option]); break;
                        /* will depreciate with selectedIndices  Method*/
                    case "selectedItems":
                    case "selectedIndices":
                        this._selectCheckedItem(options[option]);
                        this.model.selectedItems = this.model.selectedIndices = this._selectedIndices; break;
                    case "multiSelectMode":
                        if (this.model.multiSelectMode == "visualmode") {
                            this._swapUlandInput(false);
                            this._ulBox.remove();                         
                        }
                        this.model.multiSelectMode = options[option];
                        var _text = this.model.text;
                        var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar): this.model.text;
                        this._raiseEvents = false;
                        this._clearTextboxValue();
                        this._raiseEvents = true;
                        if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
                            if (this.model.multiSelectMode == "visualmode")
                                this._renderBoxModel();
                            this._setText(_text);
                        }
                        else{ this._setText(_textes[0]);
                        this.wrapper.find("input[name=" + this._name + "]").remove();
                            }
                        if (this._isPopupShown())
                            this._setListPosition();
                        break;
                        /* will deprecate with fields.groupBy and e-category element in target element binding */
                    case "allowGrouping":
                        this._setGroupingAndSorting("allowGrouping", options[option]);
                        break;
                    case "enableSorting":
                        this._setGroupingAndSorting("enableSorting", options[option]);
                        break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "enablePopupResize": this.model.enablePopupResize = options[option];
                        (options[option]) ? this._enablePopupResize() : this.popupListWrapper.find(".e-resize-handle").remove();
                        break;
                    case "enableFilterSearch":
                        if (!options[option]) this._removeSearch();
                        else {
                            this.model.enableFilterSearch = true;
                            this._enableSearch();
                            break;
                        }

                }
            }
        },

        _clearTextboxValue: function () {
            this.element.val("");
            this._hiddenInput.val("");
            this._updateValue("");
            this.selectedTextValue = this._selectedValue = this._hiddenValue = "";
            this._updateText();
            this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
            this._selectedItemsID = []; this._selectedIndices = [];
            this.model.selectedItems = [];
            this.selectedIndex(null);
            this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
            if (this.model.showCheckbox) this.ultag.children("li").find(".listcheckbox").ejCheckBox({ "checked": false });
            if (this.wrapper.find('ul.e-ul.e-boxes').length != 0) {
                this._ulBox.children("li").remove();
                this.wrapper.find("input:hidden[id^='#'][name=" + this._id + "]").remove();
                $(this._hiddenInput).attr("name", this._name);
            }
            args = { text: null, selectedText: null, itemId: null, selectedValue: null, value: this.model.value, isChecked: false };

           // if (!this._initValue && !this._onSearch && this._raiseEvents)
           //     this._trigger("change", args);
        },

        _destroy: function () {
            this._destroyDropdown();
            this.element.removeClass("e-input " + this.model.cssClass);
            this.element.attr({ 'accesskey': this.wrapper.attr('accesskey'), 'name': this._hiddenInput.attr('name') });
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.element[0].value = "";
            if (!this.model.dataSource) {
                this.selectOptions ? this.docbdy && this.docbdy.append(this.selectOptions) && this.element.remove() && this.selectOptions && this.selectOptions.removeClass("e-dropdownlist e-js") : this.docbdy && this.docbdy.append(this.ultag.html());
            }
            this._hideResult();
            this.popupPanelWrapper.remove();
        },


        _finalize: function () {
            this.selectedIndex((this.selectedIndex()!=null) ? this.selectedIndex() : this.selectedItemIndex());
            if (this.selectedIndex() != null) {
                this._selectItemByIndex(this.selectedIndex());
            } else if (this._selectedIndices.length > 0) {
                this._selectCheckedItem(this._selectedIndices);
            } if (this.model.disableItemsByIndex != null)
                this._disableItemByIndex(this.model.disableItemsByIndex);
            if (this.model.enableItemsByIndex != null)
                this._enableItemByIndex(this.model.enableItemsByIndex);
        },


        _initialize: function () {
            this._selectedIndices = this.model.selectedIndices.length > 0 ? this.model.selectedIndices : this.model.selectedItems;
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            this.model.selectedIndex = this.model.selectedIndex !=null ? this.model.selectedIndex : this.model.selectedItemIndex;
            if (this.element.is("select")) {
                this.selectelement = true;
                this._renderSelectToDropdown();
            }
            this._selectedItemsID = [];
            this.target = this.element[0];
            this._disabledItems = new Array();
            this._queryString = null;
            this.suggLen = 0;
            this._itemId = null;
            this.checkedStatus = false;
            this._incqueryString = "";
            this._activeItem = null;
            this.ddWidth = 0;
            this._initValue = true;
            this._virtualCount = 0;
            this._raiseEvents = true;
        },
        _renderSelectToDropdown: function () {
            var i, optionLength, optionText, item;
            this.inputElement = ej.buildTag("input.e-dropdownlist#" + this._id + "_input", "", {}, { "type": "text", "data-role": "none" });
            this.inputElement.insertAfter(this.element);
            this.optionDiv = ej.buildTag("div#" + this._id + "_list");
            this.optionDiv.insertAfter(this.inputElement);
            this.optionUl = ej.buildTag("ul");
            this.optionDiv.append(this.optionUl);
            if (this.element.attr("name")) {
                this.inputElement.attr("name", this.element.attr("name"));
                this.element.removeAttr("name");
            }
            this.selectOptions = this.element;
            this.selectOptions.attr('id', this._id);
            this.selectOptionItems = this.element.children("option");
            optionLength = this.selectOptionItems.length;
            this.optionDummyUl = $();

            for (i = 0; i < optionLength; i++) {
                item = this.selectOptionItems[i], optionText = $(item).attr('label') ? $(item).attr('label') : item.innerHTML;
                if (optionText != null) {
                    this.optionLi = ej.buildTag("li", optionText, {}, { 'data-value': item.value, "unselectable": "on" });
                    this.optionDummyUl.push(this.optionLi[0]);
                    if ($(item).attr("selected")) {
                        if (this.model.showCheckbox)
                            if($.inArray(i, this._selectedIndices) == -1){
                                this._selectedIndices.push(i);
                                this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                            }
                        else if (ej.isNullOrUndefined(this.selectedIndex())) this.selectedIndex(i);
                    }
                }
            }
            this.optionUl.append(this.optionDummyUl);

            this.element.css('display', 'none');
            this.element = this.inputElement;
        },


        _render: function () {
            this._renderDropdown();
            this._setWatermark();
            this._renderPopupPanelWrapper();
            this._showFullList();
            if (this.model.text != this.element.val())
                this._setText(this.model.text);
            if (this.value() == "" && this.element[0].value !== "")
                this._updateValue(this.element[0].value);
            if (this.value() != this._hiddenInput.val())
                this._setValue(this.value());
            this._roundedCorner(this.model.showRoundedCorner);
            if (!(ej.DataManager && this.model.dataSource instanceof ej.DataManager))
                this._finalize();
            this._setCheckAll(this.model.checkAll);
        },

        _isEqualDataSource: function (source) {
            if (!this.model.dataSource || !source || !(this.model.dataSource.length === source.length)) return false;
            var equal = true;
            for (var i = 0, len = this.model.dataSource.length; i < len; i++) {
                if (this.model.dataSource[i] !== source[i]) {
                    equal = false;
                    break;
                }
            }
            return equal;
        },

        _checkModelDataBinding: function (source, query) {
            this.element.val("");
            this._hiddenInput.val("");
            this._updateValue("");
            this.selectedTextValue = this._selectedValue = this._hiddenValue = "";
            this._updateText();
            this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
            this._selectedItemsID = [];
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices= [];
            this.model.selectedIndex = this.model.selectedItemIndex = null;
            if (this.model.multiSelectMode == "visualmode") this._destroyBoxModel();
            this.model.dataSource = source;
            this.model.query = query;
            this.ultag.empty();
            this._showFullList();
        },
        _initDataSource: function (source) {
            var proxy = this;
            if (ej.DataManager && source instanceof ej.DataManager) {
                proxy._addLoadingClass();
                var queryPromise = source.executeQuery(this._getQuery());
                queryPromise.done(function (e) {
                    proxy._trigger("actionSuccess", e);
                    proxy._totalCount = e.count;
                    proxy._listItem(e.result);
                    proxy._removeLoadingClass();
                    proxy._renderPopupList();
                    proxy._finalize();

                }).fail(function (e) {
                    proxy.model.dataSource = null;
                    proxy._addLoadingClass();
                    proxy._trigger("actionFailure", e);
                }).always(function (e) {
                    proxy._trigger("actionComplete", e);
                });
            }
        },
        _listItem: function (list, type) {
            if (type == "add") {
                this.popupListItems.push(list);
                this._rawList.push(list);
            } else if ($.isArray(list)) {
                this.popupListItems = list.slice(0);
                this._rawList = list.slice(0);
            }
        },
        _getQuery: function (isLocal) {
            var remoteUrl, mapper = this.model.fields, queryManager = ej.Query();
            if (ej.isNullOrUndefined(this.model.query) && !this.model.template && !isLocal) {
                var column = [];
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
            }
            else if (this.model.query) queryManager = this.model.query.clone();

            if (this.model.allowVirtualScrolling) if (this.model.virtualScrollMode == "normal") queryManager.requiresCount();
            if (this.model.itemsCount > 0) queryManager.take(this.model.itemsCount);

            remoteUrl = this.model.dataSource.dataSource;
            if(mapper)
                if ((remoteUrl && remoteUrl.url && !remoteUrl.url.match(mapper.tableName + "$")) || (remoteUrl && !remoteUrl.url) || (!remoteUrl))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);

            return queryManager;
        },

        _addLoadingClass: function () {
            if (this._isPopupShown()) {
                this.popupListWrapper.addClass("e-load");
            } else {
                this.dropdownbutton.addClass("e-load");
                this.drpbtnspan.removeClass("e-icon e-down-arrow");
            }
            this.model.readOnly = true;
        },
        _removeLoadingClass: function () {
            this.dropdownbutton.removeClass("e-load");
            this.drpbtnspan.addClass("e-icon e-down-arrow");
            this.model.readOnly = false;
            this.popupListWrapper.removeClass("e-load");
        },

        _renderDropdown: function () {
            this.element.addClass("e-input " + this.model.cssClass);
            this.wrapper = ej.buildTag("span.e-ddl e-widget " + this.model.cssClass + "#" + this._id + "_wrapper", "", {}, { "tabindex": "0", "accesskey": this.element.attr("accesskey") });
            this.container = ej.buildTag("span.e-in-wrap e-box " + this.model.cssClass + "#" + this._id + "_container");
            this.element.removeAttr('accesskey');
            this.element.attr({ "readonly": true, "tabindex": -1, "role": "combobox", "aria-expanded": false, "aria-autocomplete": "list", "aria-haspopup": true, "aria-owns": this._id + "_popup" });
            this.drpbtnspan = ej.buildTag("span.e-icon e-down-arrow", "", {}, { "aria-label": "select", "unselectable": "on" });
            this.dropdownbutton = ej.buildTag("span.e-select#" + this._id + "_dropdown", "", {}, { "role": "button", "unselectable": "on" }).append(this.drpbtnspan);
            this.container.insertAfter(this.element);
            this.container.append(this.element);
            this.container.append(this.dropdownbutton);
            this.wrapper.insertBefore(this.container);
            this.wrapper.append(this.container);
            if (this.selectelement) {
                this.selectOptions.insertBefore(this.element);
            }
            this._hiddenInput = ej.buildTag("input#" + this._id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            if (!this._isWatermark) {
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this.model.watermarkText);
                this._hiddenSpan.css("display", "none");
                this._hiddenSpan.bind("mousedown", $.proxy(this._OnDropdownClick, this));
            }
            this._checkNameAttr();
            this._setDimentions();
            this._RightToLeft();
            this.ddWidth = (this.dropdownbutton.outerWidth() > 0) ? this.dropdownbutton.outerWidth() : 24;
            //Element not Maintain in Multiselection
            this.container.bind("mousedown", $.proxy(this._OnDropdownClick, this));
        },

        _checkNameAttr: function () {
            this._name = ej.isNullOrUndefined(this.element.attr("name")) ? this._id : this.element.attr("name");
            this._hiddenInput.attr("name", this._name);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "name") proxy._hiddenInput.attr(key, value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else if (key == "readOnly" && value == "readOnly") proxy.model.readOnly = true;
                else proxy.wrapper.attr(key, value)
            });
        },
        _renderBoxModel: function () {
            if (this.model.multiSelectMode != "visualmode") return false;
            this._ulBox = ej.buildTag("ul.e-ul e-boxes");
            this.container.prepend(this._ulBox);
            this._ulBox.css('min-height', '30px');
            this._ulBox.css('display', 'none');
            this._on(this.container, "click", function (e) {
                if (!this.model.enabled) return false;
                var $target = $(e.target);
                if ($target.hasClass("e-options")) {
                    if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
                    if ($target.hasClass("e-active")) $target.removeClass("e-active");
                    else $target.addClass("e-active");
                }
                if (!e.ctrlKey && ($target.hasClass("e-boxes"))) this._removeActive();
            });
        },

        _renderPopupPanelWrapper: function () {
            var oldWrapper = $("#" + this.element.context.id + "_popup_wrapper").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.popupPanelWrapper = ej.buildTag("div#" + this._id + "_popup_wrapper");
            $('body').append(this.popupPanelWrapper);
            this.popupListWrapper = ej.buildTag("div.e-ddl-popup e-box e-widget  e-popup#" + this._id + "_popup_list_wrapper", "", { display: "none", overflow: "hidden" });
            this.popupList = ej.buildTag("div#" + this._id + "_popup", { "tabIndex": 0 });
            this.popupList.addClass(this.model.cssClass);
            this.popup = this.popupList;
            this.popupScroller = ej.buildTag("div"); this.ultag = ej.buildTag("ul.e-ul", "", {}, { "role": "listbox" });
            this.popupScroller.append(this.ultag);
            this.popupList.append(this.popupScroller);
            if (this.model.headerTemplate) {
                this.headerTemplate = $("<div>").append(this.model.headerTemplate);
                this.popupListWrapper.append(this.headerTemplate);
            }
            this.popupListWrapper.append(this.popupList);            
            this.popupPanelWrapper.append(this.popupListWrapper);
            this.ultag.on({ mouseenter: $.proxy(this._OnMouseEnter, this), mouseleave: $.proxy(this._OnMouseLeave, this), click: $.proxy(this._OnMouseClick, this) }, "li:not('.e-category')");
            $(window).on("resize", $.proxy(this._OnWindowResize, this));

        },

        _updateText: function () {
            this.model.text = this.element.val() == "" ? null : this.element.val();
        },
        _updateValue: function (val) {
            this.value(val == "" ? null : val);
        },
        _setGroupingAndSorting: function (prop, value) {
            this.model[prop] = value;
            var oldValue = this.model.text;
            this._updateValue("");
            this._selectedIndices = [];
            this.ultag.empty();
            this._showFullList();
            if (this.model.showCheckbox && oldValue) {
                var values = oldValue.split(this.model.delimiterChar) ;                
                for (var i = 0; i < values.length; i++)
                    this.selectItemByText(values[i]);
            }
            else
                this.selectItemByText(oldValue);
        },
        _setSortingList: function () {
            var sortedlist = document.createElement("ul"), i, sortitems;
            $(sortedlist).append(this.itemsContainer.children());
            if (this.model.allowGrouping || $(sortedlist).find(">.e-category").length >0) {
                this.popupListWrapper.addClass("e-atc-popup");
                for (i = 0; i < $(sortedlist).find(">.e-category").length; i++) {
                    sortitems = $(sortedlist).find(">.e-category").eq(0).first().nextUntil(".e-category").get();
                    this._setSortList(sortedlist, sortitems);
                }
            }
            else {
                $(sortedlist).children('>.e-category').remove();
                sortitems = $(sortedlist).children('li').get();
                this._setSortList(sortedlist, sortitems);
            }
            this.itemsContainer = $(sortedlist);
        },
        _setSortList: function (sortedlist, sortitems) {
            sortitems.sort(function (objA, objB) {
                var sortA = $(objA).text().toUpperCase();
                var sortB = $(objB).text().toUpperCase();
                return (sortA < sortB) ? -1 : (sortA > sortB) ? 1 : 0;
            });
            if (this.model.sortOrder == "descending") sortitems.reverse();
            if (this.model.allowGrouping || $(sortedlist).find(">.e-category").length >0) {
                $(sortedlist).append($("<li>").text($(sortedlist).find(">.e-category").eq(0).text()).addClass("e-category"));
                $(sortedlist).find(">.e-category").eq(0).remove();
            }
            $.each(sortitems, function (index, item) {
                $(sortedlist).append(item);
            });
        },

        _renderPopupList: function () {
            this._doDataBind();
            this._renderRemaining();
        },
        _renderRemaining: function () {
            var proxy = this;
            this._dropbtnRTL();
            if (this.model.enableFilterSearch) this._enableSearch();
            if (this.model.enablePopupResize) this._enablePopupResize();
            if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                if (this._totalCount && this._totalCount > 0) {
                    this._totalHeight = this._totalCount * 29;
                    this._totalPages = this._totalCount / (this.model.itemsCount * 29);
                    this._loadedItemHeight = this.ultag.find("li:not('.e-category')").length * 29;
                    this.ultag.find("li:not('.e-category')").attr("page", 0);
                    this._virtualPages = [0];
                    this.ultag.append($("<span>").addClass("e-virtual").css({ "height": this._totalHeight - this._loadedItemHeight, "display": "block" }));
                }
            }
            this._virtualUl = this.ultag.clone(true);
            this._setListWidth();
            this._setListHeight();
            this._setListPosition();
            this.popupScroller.css({ "height": "", "width": "" });
            this.popupList.ejScroller({
                height: this._getPopupHeight(), width: 0, scrollerSize: 20, scroll: function (e) {
                    if (proxy.model.allowVirtualScrolling) proxy._onScroll(e);
                }
            });
            this.scrollerObj = this.popupList.ejScroller("instance");
            this.popupList.find("div.e-scrollbar div").attr("unselectable", "on");
            this.popupListWrapper.css({ 'display': 'none', 'visibility': 'visible' });
            if (this.model.showCheckbox) this._checkboxHideShow(this.model.showCheckbox);
            this._renderBoxModel();
            this._setUncheckAll(this.model.uncheckAll);
            this._changeSkin(this.model.cssClass);
            this.model.showPopupOnLoad && this._showResult();
           
        },

        _enableSearch: function () {
            if (this.model.enableFilterSearch)
                if (!this.inputSearch) {
                    this.inputSearch = ej.buildTag("input#" + this._id + "_inputSearch.e-input", "", {}, { "type": "text", "data-role": "none" });
                    this.popupListWrapper.prepend($("<span>").addClass("e-atc e-search").append($("<span>").addClass("e-in-wrap ").append(this.inputSearch).append($("<span>").addClass(" e-icon e-isearch"))));
                    this._on(this.inputSearch, "keyup", this._OnSearchEnter);
                    this._on(this.popupListWrapper.find(".e-isearch"), "mousedown", this._OnSearchEnter);
                }
        },
        _removeSearch: function () {
            this.model.enableFilterSearch = false;
            this.popupListWrapper.find(".e-atc.e-search").remove();
            if (this._isPopupShown()) this.hidePopup();
			this.inputSearch = null;
        },

        _OnSearchEnter: function (e) {
            var proxy = this, keycode = ej.browserInfo().name == "mozilla" ? e.charCode : e.keyCode;
            if ($.inArray(keycode, [38, 40]) != -1) {
                this._OnKeyDown(e);
            }
            else if ($.inArray(keycode, [13]) != -1 && this.popupList.find("li").length > 0) {
                this._OnKeyUp(e);
            }
            else {
                this._queryString = this.inputSearch.val();
                if (this._queryString == "" && this._virtualUl ) {
                    var args = { searchString: this._queryString, items: this._rawList };
                    this._trigger("search", args);
                    this._resetList();
                    this._updateSelectedIndexByValue(this.model.value);
                    this._refreshScroller();
                    this._setListPosition();
                } else {
                    this._mapFields();
                    var searchQuery = this._addSearchQuery(ej.Query(), !this._isPlainType(this._rawList));
                    var args = { searchString: this._queryString, items: this._rawList };
                    this._trigger("search", args) ?
                        window.setTimeout(function() {
                            proxy._filterSearch(searchQuery, args);
                        }, 1000) : proxy._filterSearch(searchQuery, args);
                }
            }
        },
        _filterSearch: function (searchQuery, args) {
            var flag =false, resultList = args.result ? args.result : ej.DataManager(this._rawList).executeLocal(searchQuery);
            if (resultList.length == 0) {
                flag = true;
                resultList.push("No suggestions");
            }
            this.popupListItems = resultList;
            this.ultag.empty();
            this._isPlainType(this.popupListItems) ? this._plainArrayTypeBinding(resultList) :
            this._objectArrayTypeBinding(resultList, "search");
            if (flag && this.ultag.find("li").length==1 ) {
                this.ultag.find("li").eq(0).addClass("e-nosuggestion");
            }
            if (this.model.showCheckbox && !flag) {
                this._addCheckbox(this.ultag.children("li:not('.e-category')"));
            }
            this._onSearch = true;
            this._setValue(this.model.value);
            this._onSearch = false;
            this._updateSelectedIndexByValue(this.model.value);
            this._refreshScroller();
            this._setListPosition();
        },
        _updateSelectedIndexByValue: function (value) {
            if (!value || !this.model.enableFilterSearch) return;
            this._selectedIndices = this.model.selectedItems = this.model.selectedIndices = [];
            this._virtualList = this._virtualUl.children("li:not('.e-category')");
            var item = this._toArray(value);
            for (var k = 0; k < item.length; k++) {
                for (var m = 0; m < this._virtualList.length; m++) {
                    if ($.trim(item[k]) == ($.trim(this._getIndexedValue(this._virtualList[m])))) {
                        this._selectedIndices.push(m);
                        break;
                    }
                }
            }
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
        },
        _getIndexedValue: function(item) {
            return this._getAttributeValue(item) ? this._getAttributeValue(item) : item.textContent;
        },

        _resetSearch: function() {
            if (!this.inputSearch || !this.model.enableFilterSearch) return;
            if (this.inputSearch.val() != "" && this._virtualUl) {
                this.inputSearch.val("");
                this._resetList();
            }
        },
        _resetList: function () {
            this._listItem(this._rawList);
            if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                this._removeCheckbox($("<span>").append(this._virtualUl));
                this._virtualUl.find('.e-chkbox-wrap').remove();
            }
            this.ultag.empty().append(this._virtualUl.children().clone(true));
            if (this.model.showCheckbox) {
                this._addCheckbox(this.ultag.children("li:not('.e-category')"));
            }
            // this_onSearch variable will restrict the change and select event on searching
            this._onSearch = true;
            this._setValue(this.model.value);
            this._onSearch = false;
        },

       
        _addSearchQuery: function (query, checkMapper) {
            var bindTo = "";
            if (checkMapper) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
            }
            if (this._queryString) query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);
            if (this.model.itemsCount > 0) query.take(this.model.itemsCount);
            return query;
        },

        _targetElementBinding: function () {
            var predecessor = this.element.parents().last();
            this.docbdy = this.model.targetID ? predecessor.find("#" + this.model.targetID) : this.optionDiv ? this.optionDiv : null;
            if (!this.docbdy) return false;
            this.itemsContainer = this.docbdy[0].nodeName == "UL" ? this.docbdy : this.docbdy.children("ol,ul");
            if ((this.model.allowGrouping || this.itemsContainer.find(">.e-category").length >0 ) && !this.model.enableSorting) {
                this.popupListWrapper.addClass("e-atc-popup");
                for (var k = 0; k < this.itemsContainer.find(">.e-category").length; k++) {
                    var ele = this.itemsContainer.find(">.e-category").eq(k);
                    ele.replaceWith($("<li>").text(ele.text()).addClass("e-category"));
                }
            }
            else if (this.model.enableSorting) this._setSortingList();
            this.itemsContainer.children("ol,ul").remove();
            this.items = this.itemsContainer.children('li');
            this.items.children("img,div").addClass("e-align");
            this._listItem([]);
            for (var i = 0; i < this.items.length; i++)
                this._listItem({ text: $(this.items[i]).text() }, "add");
            //This will append the list with the popup wrapper
            this.ultag.empty().append(this.itemsContainer.children());
            this.ultag.children('li').attr({ "role": "option", "unselectable": "on" });
            this.docbdy.css({ 'display': 'none' }).children("ol,ul").remove();
        },
        _plainArrayTypeBinding: function (list) {
            this.dummyUl = $();
            if (this.model.enableSorting) {
                list.sort();
                if (this.model.sortOrder == "descending") list.reverse();
            }
            if (list.length > 0) {
                for (var i = 0; i < list.length; i++) {
                    if (!ej.isNullOrUndefined(list[i])) {
                        var litag = ej.buildTag("li", list[i], {}, { 'data-value': list[i], "unselectable": "on" });
                        this.dummyUl.push(litag[0]);
                    }
                }
                this.ultag.append(this.dummyUl);
                this._trigger('dataBound', { data: list });
            }

        },
        _mapFields: function () {
            this.model.fields.groupBy = this.model.fields.groupBy ? this.model.fields.groupBy : this.model.fields.category;
            var mapper = this.model.fields;
            this.mapFld = { _id: null, _imageUrl: null, _imageAttributes: null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null };
            this.mapFld._id = (mapper && mapper.id) ? mapper["id"] : "id";
            this.mapFld._imageUrl = (mapper && mapper.imageUrl) ? mapper["imageUrl"] : "imageUrl";
            this.mapFld._imageAttributes = (mapper && mapper.imageAttributes) ? mapper["imageAttributes"] : "imageAttributes";
            this.mapFld._spriteCSS = (mapper && mapper.spriteCssClass) ? mapper["spriteCssClass"] : "spriteCssClass";
            this.mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
            this.mapFld._value = (mapper && mapper.value) ? mapper["value"] : "value";
            this.mapFld._htmlAttributes = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
            this.mapFld._selected = (mapper && mapper.selected) ? mapper["selected"] : "selected";
            this.mapFld._category = (mapper && mapper.groupBy) ? mapper["groupBy"] : "groupBy";
        },
        _doDataBind: function () {
            var source = this.model.dataSource, list = this.popupListItems;
            !source || !list || !list.length || list.length < 1 ? this._targetElementBinding()
            : this._isPlainType(list) ? this._plainArrayTypeBinding(list)
            : this._objectArrayTypeBinding(list);
        },
        _isPlainType: function (list) {
            return typeof list[0] != "object";
        },
        _objectArrayTypeBinding: function (list, from) {
            this.dummyUl = $();
            this._mapFields();
            if (this.model.enableSorting) {
                var sortQuery = ej.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
                list = ej.DataManager(list).executeLocal(sortQuery);
            }
            if (this.model.allowGrouping || this.model.fields.groupBy) {
                this.popupListWrapper.addClass("e-atc-popup");
                var mapCateg = this.mapFld._category, groupedList, groupQuery;
                groupQuery = ej.Query().group(mapCateg);
                if (!this.model.enableSorting) groupQuery.queries.splice(0, 1);
                groupedList = ej.DataManager(list).executeLocal(groupQuery);
                this._swapUnCategorized(groupedList);
                (from == "search") ? this.popupListItems = [] : this._listItem([]);
                for (var i = 0; i < groupedList.length; i++) {
                    if (groupedList[i].key)
                        this.ultag.append(ej.buildTag("li.e-category", groupedList[i].key).attr("role", "option")[0]);
                    this._generateLi(groupedList[i].items, this.mapFld);
                    this.ultag.append(this.dummyUl);
                    for (var j = 0; j < groupedList[i].items.length; j++) {
                        (from == "search") ? this.popupListItems.push(groupedList[i].items[j]) : this._listItem(groupedList[i].items[j], "add");
                    }
                }
            }
            else {
                this._generateLi(list, this.mapFld);
                this.ultag.append(this.dummyUl);//ko binding
            }
            this._trigger('dataBound', { data: list });
        },
        _onScroll: function (e) {
            if (!e.scrollTop) return;
            var scrollerPositon = e.scrollTop, proxy = this;
            if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "continuous") {
                var list, queryPromise, skipQuery = ej.Query().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
                if (scrollerPositon >= $(proxy.popupList).find("ul,ol").height() - $(proxy.popupList).height()) {
                    proxy._addLoadingClass();
                    if (ej.DataManager && proxy.model.dataSource instanceof ej.DataManager) {
                        skipQuery = proxy._getQuery().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
                        queryPromise = proxy.model.dataSource.executeQuery(skipQuery);
                        queryPromise.done(function (e) {
                            proxy.addItem(e.result);
                            proxy._removeLoadingClass();
                            proxy._trigger("actionSuccess", e);
                        }).fail(function () {
                            proxy.model.dataSource = null;
                            proxy._removeLoadingClass();
                            proxy._trigger("actionFailure", e);
                        }).always(function (e) {
                            proxy._trigger("actionComplete", e);
                        });
                    } else {
                        list = ej.DataManager(proxy.model.dataSource).executeLocal(skipQuery);
                        proxy.addItem(list);
                        proxy._removeLoadingClass();
                    }
                }
            } else if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "normal") {

                window.setTimeout(function () {
                    if (proxy._virtualCount == 0) {
                        proxy._loadList();
                    }
                }, 300);

            }

        },
        _loadList: function () {
            this._virtualCount++;
            var top = this.scrollerObj.scrollTop(), proxy = this, prevIndex = 0, prevPageLoad, nextIndex = null;
            this._currentPage = Math.round(top / (29 * this.model.itemsCount));
            if (($.inArray(this._currentPage, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) {
                if (this._currentPage == 0) {
                    if (($.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPage = this._currentPage + 1;
                    }
                }
                else if (($.inArray(this._currentPage - 1, this._virtualPages)) != -1) {
                    if (($.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPage = this._currentPage + 1;
                    }
                }
                else {
                    this._currentPage = this._currentPage - 1;
                }
            }
            prevPageLoad = !($.inArray(this._currentPage - 1, this._virtualPages) != -1);
            this._addLoadingClass();
            for (var i = this._virtualPages.length - 1; i >= 0; i--) {
                if (this._virtualPages[i] < this._currentPage) {
                    prevIndex = this._virtualPages[i];
                    if (!(i + 1 == this._virtualPages.length))
                        nextIndex = this._virtualPages[i + 1];
                    break;
                }
            }

            var firstArg = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
            var skipQuery = ej.Query().range(firstArg, this._currentPage * this.model.itemsCount + this.model.itemsCount), queryPromise, list;
            if (ej.DataManager && proxy.model.dataSource instanceof ej.DataManager) {
                var skipParam = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
                skipQuery = this._getQuery().skip(skipParam);
                if (prevPageLoad) {
                    for (i = 0; i < skipQuery.queries.length; i++) {
                        if (skipQuery.queries[i].fn == "onTake") {
                            skipQuery.queries.splice(i, 1);
                            break;
                        }
                    }
                    skipQuery.take(2 * this.model.itemsCount);
                }
                queryPromise = proxy.model.dataSource.executeQuery(skipQuery);
                queryPromise.done(function(e) {
                    proxy._appendVirtualList(e.result, prevIndex, proxy._currentPage, nextIndex, prevPageLoad);
                    proxy._removeLoadingClass();
                    proxy._trigger("actionSuccess", e);
                }).fail(function() {
                    proxy._virtualCount--;
                    proxy._removeLoadingClass();
                    proxy._trigger("actionFailure", e);
                }).always(function(e) {
                    proxy._trigger("actionComplete", e);
                });
            } else {

                list = ej.DataManager(proxy.model.dataSource).executeLocal(skipQuery);
                this._appendVirtualList(list, prevIndex, this._currentPage, nextIndex, prevPageLoad);
                proxy._removeLoadingClass();
            }
        },
        _appendVirtualList: function (list, prevIndex, currentIndex, nextIndex, prevPageLoad) {
            this._virtualCount--;
            if (($.inArray(currentIndex, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) return false;
            if (prevPageLoad && ($.inArray(currentIndex - 1, this._virtualPages.sort()) != -1)) {
                list.splice(0, this.model.itemsCount);
                prevPageLoad = false;
            }
            var items = this.model.itemsCount, tempUl = $("<ul>"), firstVirtualHeight, secondVirtualHeight;
            firstVirtualHeight = prevPageLoad ? ((currentIndex - 1) * items * 29) - (prevIndex * items + items) * 29 : (currentIndex * items * 29) - (prevIndex * items + items) * 29;
            if (firstVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: firstVirtualHeight }));
            this._mapFields();
            this._generateLi(list, this.mapFld);
            $(this.dummyUl).attr("page", currentIndex);
            if (prevPageLoad) {
                $(this.dummyUl).slice(0, items).attr("page", currentIndex - 1);
            }
            if (this.model.showCheckbox) {
                this._addCheckbox(this.dummyUl);
            }
            tempUl.append(this.dummyUl);
            secondVirtualHeight = (currentIndex * items + items) * 29;
            if (nextIndex != null) secondVirtualHeight = (nextIndex * items * 29) - secondVirtualHeight;
            else secondVirtualHeight = this.ultag.height() - secondVirtualHeight;
            if (secondVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: secondVirtualHeight }));
            var selector = this.ultag.find("li[page=" + prevIndex + "]").last();
            selector.next().remove();
            tempUl.children().insertAfter(selector);
            this._virtualPages.push(currentIndex);
            if (prevPageLoad) this._virtualPages.push(currentIndex - 1);
            for (var i = 0; i < list.length; i++) {
                this._listItem(list[i], "add");
            }
            this._virtualUl = this.ultag.clone(true);
            this._renderBoxModel();
        },

        _generateLi: function (list, mapFld) {
            this.mapFld = mapFld;
            this.dummyUl = [];
            if (!list || !list.length || list.length < 1) return false;
            for (var i = 0; i < list.length; i++) {
                var _did = this._getField(list[i], this.mapFld._id),
                    _dimageUrl = this._getField(list[i], this.mapFld._imageUrl),
                    _dimageAttributes = this._getField(list[i], this.mapFld._imageAttributes),
                    _dspriteCss = this._getField(list[i], this.mapFld._spriteCSS),
                    _dtext = this._getField(list[i], this.mapFld._text),
                    _dvalue = this._getField(list[i], this.mapFld._value),
                    _dhtmlAttributes = this._getField(list[i], this.mapFld._htmlAttributes),
                    _dselected = this._getField(list[i], this.mapFld._selected),
                    litag = document.createElement("li");

                if (!ej.isNullOrUndefined(_dvalue) && _dvalue.toString().length > 0) {
                    litag.setAttribute('data-value', typeof _dvalue == "object" ? JSON.stringify(_dvalue) : _dvalue);
                }
                if (_did)
                    litag.setAttribute('id', _did);
                if ((_dhtmlAttributes) && (_dhtmlAttributes != "")) {
                    this._setAttr(litag, _dhtmlAttributes);
                }

                if (this.model.template) {
                    $(litag).append(this._getTemplatedString(list[i]));
                } else {
                    if ((_dimageUrl) && (_dimageUrl != "")) {
                        var imgtag = document.createElement("img");
                        this._setClass(imgtag, "e-align")._setAttr(imgtag, { 'src': _dimageUrl, 'alt': _dtext });
                        if ((_dimageAttributes) && (_dimageAttributes != "")) {
                            this._setAttr(imgtag, _dimageAttributes);
                        }
                        litag.appendChild(imgtag);
                    }
                    if ((_dspriteCss) && (_dspriteCss != "")) {
                        var divtag = document.createElement("div");
                        this._setClass(divtag, 'div.e-align ' + _dspriteCss + ' sprite-image');
                        litag.appendChild(divtag);
                    }
                    if (_dselected) {
                        this._setClass(litag, "chkselect");
                    }
                    if ((_dtext) && (_dtext != "")) {
                        var flag = litag.innerHTML;
                        litag.textContent = _dtext;
                        litag.innerHTML = flag + litag.innerHTML;
                    }
                }
                this._setAttr(litag, { "role": "option", "unselectable": "on" });
                this.dummyUl.push(litag);
             
            }
        },

        _setAttr: function (element, attrs) {
            if (typeof attrs == "string") {
                var sAttr = attrs.replace(/['"]/g, "").split("=");
                if (sAttr.length == 2) element.setAttribute(sAttr[0], sAttr[1]);
            }
            else {
                for (var idx in attrs) {
                    if ((idx == 'styles' || idx == 'style') && typeof attrs[idx] == 'object') {
                        for (var prop in attrs[idx]) {
                            element.style[prop] = attrs[idx][prop];
                        }
                    }
                    else
                        element.setAttribute(idx, attrs[idx]);
                }
            }
            return this;
        },
        _setClass: function (element, newClass) {
            element.className += " " + newClass;
            return this;
        },
        _swapUnCategorized: function (list) {
            $(list).each(function (i, obj) {
                if (!obj.key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = obj;
                    return false;
                }
            });
        },

        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },

        _getTemplatedString: function (list) {

            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                str = str.replace(content, this._getField(list, field));
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },

        _setWatermark: function () {
            if ((this.model.watermarkText != null) && (this.element.val() == "") && $.trim(this._hiddenInput.val()) == "") {
                if (this._isWatermark)
                    this.element.attr("placeholder", this.model.watermarkText);
                else
                    this._hiddenSpan.css("display", "block").text(this.model.watermarkText);
                //In visual mode, to show watermark text when no items selected.
                if (this.model.multiSelectMode == "visualmode" && this._ulBox && this._ulBox.find('li').length == 0) this._swapUlandInput(false);
            }
        },

        _checkboxHideShow: function (value) {
            if (value) {
                this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
                var chklist = this.listitems.find('input[type=checkbox]');
                if (chklist.length == 0) {
                    this._createCheckbox(this.listitems);
                }
            }

            else
                this._removeCheckbox(this.popupList);
            this.model.showCheckbox = value;
        },
        _createCheckbox: function (listItems) {
            this._addCheckbox(listItems);
            this.element.val("");
            this._setWatermark();
            for (i = 0; i < listItems.length; i++) {
                if ($(listItems[i]).hasClass('chkselect')) {
                    $(listItems[i]).find(".listcheckbox").ejCheckBox({ "checked": true });
                    this._activeItem = i;
                    this.checkedStatus = true;
                    if (!this._initValue)
                        this._trigger('checkChange', { isChecked: this.checkedStatus,data:this.model });
                    this._enterTextBoxValue();
                    $(listItems[i]).removeClass('chkselect');
                }
            }
        },
        _addCheckbox: function (listItems) {
            for (var i = 0; i < listItems.length; i++) {
                var status =true, $checkbox = document.createElement("input");
                this._setAttr($checkbox, { type: "checkbox", name: "list" + i, "data-role": "none", id: this._id + "_" + "check" + i })._setClass($checkbox, "listcheckbox e-align");
                listItems[i].insertBefore($checkbox, listItems[i].childNodes[0]);
                if ($.inArray(i, this._disabledItems) != -1) status = false;
                $($checkbox).ejCheckBox({ cssClass: this.model.cssClass, enabled:status, change: $.proxy(this._OnClickCheckList, this) });
            }
            this.popupList.find("span.e-chkbox-wrap,div.e-chkbox-small,span.e-chk-inact,span.e-chk-image").attr("unselectable", "on");

        },

        _removeCheckbox: function (list) {
            var i, checkbox;
            this.listitems = list.find("ol,ul").children("li");
            checkbox = this.listitems.find('.listcheckbox');
            if (checkbox.length > 0) {
                this.listitems.find('.listcheckbox').ejCheckBox('destroy');
                this.listitems.find('input[type=checkbox]').remove();
            }
        },
        _setCheckAll: function (value) {
            if ((this.model.showCheckbox || (!this.model.showCheckbox && this.model.multiSelectMode != "none")) && (value))
                this.checkAll();
            else this.model.checkAll = false;
        },
        _setUncheckAll: function (value) {
            if ((this.model.showCheckbox || (!this.model.showCheckbox && this.model.multiSelectMode != "none")) && (value))
                this.uncheckAll();
            else this.model.uncheckAll = false;
        },

        checkAll: function () {
            var _nodes = this._selectedIndices;
            this._mapFields();
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            for (var i = 0; i < this.listitems.length; i++) {
                if (!$(this.listitems[i]).hasClass('e-disable'))
                    if (($(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('isChecked') == false) || (!this.model.showCheckbox && this.model.multiSelectMode != "none" && !$(this.listitems[i]).hasClass("e-active"))) {
                        $(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                        this.currentValue =  this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                        this._itemID = $(this.listitems[i]).attr("id");
                        if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "")
                            this._selectedItemsID.push(this._itemID);
                        this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this.currentValue;
                        this.checkedStatus = true;
                        this._createListHidden(this._hiddenValue);
                        if (this.model.multiSelectMode == "visualmode") {
                            this._ulBox.append(this._createBox(this.currentValue));
                            if (this._isPopupShown())
                                this._setListPosition();
                        }
                        if (!this.model.showCheckbox && this.model.multiSelectMode != "none") {
                            $(this.listitems[i]).addClass("e-active");
                        }
                        this._addText(this.currentValue);
                        if ($.inArray(i, _nodes) == -1) {
                            this._selectedIndices.push(i);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                        this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus ,data:this.model});
                        args = { text: this.element[0].value, selectedText: this.currentValue, itemId: i, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
                        if (!this._initValue)
                            this._trigger("change", args);
                        this._activeItem = i;
                        this.activeItem = this._getActiveItem();
                        this._cascadeAction();
                    }
            }
            this._updateValue(this._hiddenInput.val());
            this._updateText();
            this.model.itemValue = this._selectedValue;
            this.model.uncheckAll = false;
            this.model.checkAll = true;
            this._setWatermark();
        },
        _createListHidden: function (value) {
            var arrayHidden = document.createElement("input");
            this._setAttr(arrayHidden, { type: "hidden", name: this._name, value: value, id: "#" + value  });
            $("#" + this._id + "_container").append(arrayHidden);
            $(this._hiddenInput).attr("name", "hiddenEle");
        },
        _removeListHidden: function (value) {
            var arrayEle = document.getElementById("#" + value );
            $(arrayEle).remove();
        },
        _getAttributeValue: function (val) {
            return val ? val.getAttribute("data-value") || val.getAttribute("value") : null;
        },
        _selectSingleItem: function (sngitems) {
            this.currentValue = $.trim($(this.listitems[sngitems]).text());
            this._hiddenValue = this._getAttributeValue(this.listitems[sngitems]) || this.currentValue;
            //if (this.element.val() != "" || this.element.val() != null) this.clearText();
            this._addText(this.currentValue);
            this._selectedValue = this._getAttributeValue(this.listitems[sngitems]) || "";
            this._updateValue(this._hiddenInput.val());
            this.model.itemValue = this._selectedValue;
            this._updateText();
            if (!this.model.showCheckbox) $(this.listitems[sngitems]).addClass("e-active");
        },
        _selectCheckedItem: function (chkitems) {
            if (chkitems.length > 0) {
                if (!this._isWatermark)
                    this._hiddenSpan.css("display", "none");
                this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
                if (!this.listitems.length > 0) return false;
                for (var i = 0; i < chkitems.length; i++) {
                    if (this.listitems.length > chkitems[i])
                        if ($(this.listitems[chkitems[i]].firstChild).find('.listcheckbox').ejCheckBox('isChecked') == false || (!this.model.showCheckbox && (this.model.multiSelectMode != "none") && !$(this.listitems[chkitems[i]]).hasClass("e-active"))) {
                            $(this.listitems[chkitems[i]].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                            this.checkedStatus = true;                           
                            if (this.model.multiSelectMode == "visualmode")
                                this._ulBox.append(this._createBox($.trim($(this.listitems[chkitems[i]]).text())));
                            this._selectSingleItem(chkitems[i]);
                            this._createListHidden(this._hiddenValue);
                            if ($.inArray(chkitems[i], this._selectedIndices) == -1) {
                                this._selectedIndices.push(chkitems[i]);
                                this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                            }
                            if (!this._initValue)
                                this._trigger('checkChange', { isChecked: this.checkedStatus,data:this.model });
                            var args = { text: this.element[0].value, selectedText: this.currentValue, itemId: this.selectedIndexValue, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
                            if (!this._initValue)
                                this._trigger("change", args);
                            this._cascadeAction();
                        }
                }
                if (!this.model.showCheckbox && (this.model.multiSelectMode == "none") && !$(this.listitems[chkitems[i]]).hasClass("e-active")) {
                    this._selectSingleItem(chkitems[0]);
                    this._selectedIndices[0] = chkitems[0];
                    args = { text: this.element[0].value, selectedText: this.currentValue, itemId: this.selectedIndexValue, value: this._selectedValue, selectedValue: this._selectedValue };
                    if (!this._initValue)
                        this._trigger("change", args);
                    this._cascadeAction();
                }


                this._setWatermark();
            }
        },

        /* will deprecate with uncheckAll method */
        unCheckAll: function () { this.uncheckAll(); },

        uncheckAll: function () {
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            this._mapFields();
            for (var i = 0; i < this.listitems.length; i++) {
                if (($(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('isChecked')) || (!this.model.showCheckbox && (this.model.multiSelectMode != "none") && $(this.listitems[i]).hasClass("e-active"))) {
                    // $(this.listitems[i]).removeClass('e-active');
                    $(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                    this.currentValue =  this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                    this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this.currentValue;
                    if (this.model.multiSelectMode == "visualmode") {
                        this._deleteBoxCheck(this.currentValue);
                        if (this._isPopupShown())
                            this._setListPosition();
                    }
                    if (!this.model.showCheckbox && this.model.multiSelectMode != "none") $(this.listitems[i]).removeClass("e-active");
                    this._activeItem = i;
                    this.activeItem = this._getActiveItem();
                    this._removeText(this.currentValue);
                    this._removeListHidden(this._hiddenValue);
                }
                this.checkedStatus = false;
                var _nodes = this._selectedIndices;
                if ($.inArray(i, _nodes) > -1) {
                    this._selectedIndices.splice($.inArray(i, _nodes), 1);
                    this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                }
                this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
                this._itemID = $(this.listitems[i]).attr("id");
                if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "")
                    this._removeSelectedItemsID();
                if (!this._initValue)
                    this._trigger('checkChange', { isChecked: this.checkedStatus ,data:this.model});
                args = { text: this.element[0].value, selectedText: this.currentValue, itemId: i, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
                if (!this._initValue)
                    this._trigger("change", args);
                this._cascadeAction();
            }
            this._updateValue(this._hiddenInput.val());
            this._updateText();
            this.model.itemValue = this._selectedValue;
            this.model.checkAll = false;
            this.model.uncheckAll = true;
            this._setWatermark();
        },
        _removeSelectedItemsID: function () {
            var itemToRemove;
            itemToRemove = this._selectedItemsID.indexOf(this._itemID);
            this._selectedItemsID.splice(itemToRemove, 1);
            this._itemID = "";
        },


        _refreshScroller: function () {
            if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
                this.popupList.css("height", "auto");
                this.popupListWrapper.css("height", "auto");
            }
            this.popupList.find(".e-content, .e-vhandle").removeAttr("style");
            this.popupList.find(".e-vhandle div").removeAttr("style");
            this.popupList.children(".e-content").removeClass("e-content");
            var flag = this._isPopupShown();
            this.popupListWrapper.css("display", "block");
            this.popupList.css({ "display": "block" });  // For get the height of the popup
            this.scrollerObj.model.height = this._getPopupHeight();
            this.scrollerObj.refresh();
            if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
                this.popupList.css("height", "auto");
                this.popupListWrapper.css("height", "auto");
            }
            this.scrollerObj.option("scrollTop", 0);
            if (!flag) this.popupListWrapper.css("display", "none");
        },
        _enablePopupResize: function () {
            if (this.model.enablePopupResize) {
                this.popupListWrapper.addClass("e-resizable").append(ej.buildTag("div.e-icon e-resize-handle"))
                .find(".e-resize-handle").addClass((this.model.enableRTL) ? "e-rtl-resize" : "");
                this._resizePopup();
            }
        },


        _resizePopup: function () {
            var proxy = this, started = false;
            this.popupListWrapper.find("div.e-resize-handle").ejResizable(
                {
                    minHeight: proxy.model.minPopupHeight,
                    minWidth: proxy.model.minPopupWidth,
                    maxHeight: proxy.model.maxPopupHeight,
                    maxWidth: proxy.model.maxPopupWidth,
                    handle: "e-ddl-popup",
                    resizeStart: function (event) {
                        if (!proxy.model.enabled)
                            return false;
                        !started && proxy._trigger("popupResizeStart", { event: event });
                        started = true;
                    },
                    resize: function (event) {
                        var reElement = $(event.element).parents("div.e-ddl-popup");
                        proxy._refreshPopupOnResize($(reElement).outerHeight(), $(reElement).outerWidth());
                        proxy._trigger("popupResize", { event: event });
                    },
                    resizeStop: function (event) {
                        if (started) {
                            proxy._refreshPopupOnResize(proxy.model.popupHeight, proxy.model.popupWidth);
                            started && proxy._trigger("popupResizeStop", { event: event });
                            started = false;
                        }
                    },
                    helper: function (event) {
                        var reElement = $(event.element).parents("div.e-ddl-popup");
                        proxy._refreshPopupOnResize($(reElement).outerHeight(), $(reElement).outerWidth());
                        return $(proxy.popupListWrapper);
                    }
                });
        },

        _refreshPopupOnResize: function (currHeight, currWidth) {
            if (currHeight) this.model.popupHeight = currHeight;
            if (currWidth) this.model.popupWidth = currWidth;
            this.popupListWrapper.css({ "height": this.model.popupHeight, "min-height": this.model.minPopupHeight, "max-height": this.model.maxPopupHeight });
            this._setListWidth();
            this._refreshScroller();
        },

        _setListWidth: function () {
            var width = this.model.popupWidth;
            if (width != "auto") this.popupListWrapper.css({ "width": width });
            else this.popupListWrapper.css({ "min-width": this.model.minPopupWidth });
            this.popupListWrapper.css({ "max-width": this.model.maxPopupWidth });
        },

        _setListHeight: function () {
            this.model.enablePopupResize ? this.popupListWrapper.css({ "min-height": this.model.minPopupHeight, "max-height": this.model.maxPopupHeight, "height": this.model.popupHeight }) :
            this.popupListWrapper.css({ "max-height": this.model.popupHeight, "min-height": this.model.minPopupHeight });
        },

        _getPopupHeight: function () {
            var wrap = this.popupListWrapper.height();
            if (this.model.enablePopupResize) wrap -= this.popupListWrapper.find(">div.e-resize-handle").height();
            if (this.model.headerTemplate && this.headerTemplate) wrap -= this.headerTemplate.height();
            if (this.model.enableFilterSearch && this.inputSearch) {
                var ele = this.inputSearch.parent(".e-in-wrap");
                wrap -= (parseInt(ele.css("height")) + parseInt(ele.css('margin-top')) + parseInt(ele.css('margin-bottom')));
            }
            return wrap;
        },

        _refreshPopup: function () {
            if (this.model.popupWidth == "auto") this.popupListWrapper.css({ "min-width": this.wrapper.width() });
            this._refreshScroller();
            this._setListPosition();
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popupListWrapper.outerHeight(),
            popupWidth = this.popupListWrapper.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupListWrapper.outerWidth() - elementObj.outerWidth();
            this.popupListWrapper.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });

        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popupList);
        },


        _showResult: function () {
            var proxy = this;
            if (this._trigger("beforePopupShown", { text: this.element[0].value, value: this._selectedValue })) return;
            this._refreshPopup();
            $(this.popupListWrapper).slideDown(this.model.enableAnimation ? 200 : 1, "easeOutQuad", function () {
                $(document).on("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
                proxy._on(ej.getScrollableParents(proxy.wrapper), "scroll", proxy._hideResult);
            });
            this.element[0].setAttribute("aria-expanded", true);
            this._listSize = this.ultag.children("li:not('.e-category')").size();
            this._trigger("popupShown", { text: this.element[0].value, value: this._selectedValue });
            this.scrollerObj.setModel({ scrollTop: this._calcScrollTop('active') });
        },

        _OnWindowResize: function (e) {
            if (!ej.isNullOrUndefined(this.model) && this._isPopupShown()) {
                this._refreshPopup();
            }
        },
        _hideResult: function () {
            if (this.model && this._isPopupShown()) {
                var proxy = this;
                if (this._trigger("beforePopupHide", { text: this.element[0].value, value: this._selectedValue })) return;
                $(this.popupListWrapper).slideUp(this.model.enableAnimation ? 100 : 0, "easeOutQuad", function () {
                    $(document).off("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
                });
                if (this.element != null)
                    this.element.attr({ "aria-expanded": false });
                this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
                if (this.element != null)
                    this._trigger("popupHide", { text: this.element[0].value, value: this._selectedValue });
                setTimeout(function() {proxy._resetSearch();},100);
            }
        },

        _isPopupShown: function () {
            return (this.popupListWrapper.css("display") == "block");
        },

        _enterTextBoxValue: function () {
            var args;
            this.removeID = false;
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this._chooseSelectionType();
            args = { text: this.currentValue, selectedText: this.currentValue, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };
            if (!this._initValue && !this._onSearch && this._raiseEvents) this._trigger("select", args);
            if (!this.selectedIndexValue != this._activeItem) {
                if ((this.model.multiSelectMode != "none") || this.model.showCheckbox) {
                    if (!this._checkContains(this.currentValue)) {
                        if (this.model.showCheckbox) {
                            if (this.activeItem.find('.listcheckbox').ejCheckBox('isChecked') == false) {
                                this.activeItem.find('.listcheckbox').ejCheckBox('option', 'checked', true)
                                this.checkedStatus = true;
                            }
                        }
                        if (this.model.multiSelectMode == "visualmode") {
                            this._ulBox.append(this._createBox(this.currentValue));
                            if (this._isPopupShown())
                                this._setListPosition();
                        }
                        if (!this.model.showCheckbox) this.activeItem.addClass('e-active');
                        this._maintainHiddenValue();
                        this._addText(this.currentValue);
                        this._createListHidden(this._hiddenValue);
                        var _nodes = this._selectedIndices;
                        if ($.inArray(this.selectedIndexValue, _nodes) == -1) {
                            this._selectedIndices.push(this.selectedIndexValue);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                    }
                    else {
                        this._removeTextBoxValue();
                        this._removeListHidden(this._hiddenValue);
                        if (this._selectedIndices != null) {
                            var itemIndex = this._selectedIndices.indexOf(this.selectedIndexValue);
                            this._selectedIndices.splice(itemIndex, 1);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                    }
                } else {
                    this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
                    this.activeItem.addClass('e-active');
                    this.element.val(this.currentValue);
                    this._maintainHiddenValue();
                    this._hiddenInput.val(this._hiddenValue);
                    this.selectedItemIndex(this.selectedIndexValue);
                    this.selectedIndex(this.selectedIndexValue);
                    this._selectedIndices[0] = this.selectedIndexValue;
                }
                this._updateSelectedIndexByValue(this._hiddenInput.val());
                this._updateValue(this._hiddenInput.val());
                this.model.itemValue = this._selectedValue;
                this._updateText();
                args = { text: this.element[0].value, selectedText: this.currentValue, itemId: this.selectedIndexValue, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };

                if (!this._initValue && !this._onSearch && this._raiseEvents)
                    this._trigger("change", args);
                this._cascadeAction();              
                if (this.selectelement) {
                    if ($("#" + this._id).children().length > this.selectedIndexValue) $("#" + this._id).children()[this.selectedIndexValue].selected = true;
                }
            }
            this.model.uncheckAll = false;
            this._setWatermark();
        },
        _chooseSelectionType: function () {
            this.activeItem = this._getActiveItem();
            this.selectedIndexValue = this._activeItem;
            this._mapFields();
            if (this.model.dataSource != null && typeof this.model.dataSource[0] == "object") {
                this.currentValue = $.trim(this._getField(this.popupListItems[this._activeItem], this.mapFld._text));
                this.currentValue = (this.currentValue == "") ? $.trim(this.activeItem.text()) : this.currentValue;
                this.hidelement = this._getField(this.popupListItems[this._activeItem], this.mapFld._value);
                this._selectedValue = this.hidelement;
                this._itemID = this._getField(this.popupListItems[this._activeItem], this.mapFld._id);
            } else {
                this.currentValue = $.trim(this.activeItem.text());
                if (this._getAttributeValue(this.activeItem[0]))
                    this._selectedValue = this._getAttributeValue(this.activeItem[0]);
                else {
                    if (this.currentValue != null) {
                        this.activeItem[0].setAttribute("value", this.currentValue);
                        this._selectedValue = this.currentValue;
                    }
                    else
                        this._selectedValue = "";
                }
                this._itemID = $(this.activeItem).attr("id");
            }
            if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "") {
                if (!this.model.showCheckbox) {
                    this._selectedItemsID = [];
                    !this.removeID && this._selectedItemsID.push(this._itemID);
                }
                else
                    !this.removeID ? this._selectedItemsID.push(this._itemID) : this._removeSelectedItemsID();
            }
            this.selectedTextValue = this.currentValue;
        },
        _maintainHiddenValue: function () {
            this._hiddenValue = this._getAttributeValue(this.activeItem[0]) || this.currentValue;
        },
        _removeTextBoxValue: function () {
            this.removeID = true;
            this._chooseSelectionType();
            this._maintainHiddenValue();
            this._removeText(this.currentValue);
            this._removeListHidden(this._hiddenValue);
            this.activeItem.removeClass('e-active');
            if (this.model.showCheckbox) {
                if (this.activeItem.find('.listcheckbox').ejCheckBox('isChecked') == true) {
                    this.activeItem.find('.listcheckbox').ejCheckBox('option', 'checked', false);
                    this.checkedStatus = false;
                }
            }
            if ((this.model.multiSelectMode != "none") || this.model.showCheckbox) {
                var _nodes = this._selectedIndices;
                if ($.inArray(this.selectedIndexValue, _nodes) > -1) {
                    this._selectedIndices.splice($.inArray(this.selectedIndexValue, _nodes), 1);
                    this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                }
                if (this.model.multiSelectMode == "visualmode") {
                    this._deleteBoxCheck(this.currentValue);
                    if (this._isPopupShown())
                        this._setListPosition();
                }
            }
            
            this._updateSelectedIndexByValue(this._hiddenInput.val());
            this._updateValue(this._hiddenInput.val());
            this.model.itemValue = this._selectedValue;
            this._updateText();
            var args = { text: this.currentValue, selectedText: this.currentValue, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };
            if (!this._initValue && !this._onSearch && this._raiseEvents)
                this._trigger("select", args);
            args = { text: this.element[0].value, selectedText: this.currentValue, itemId: this.selectedIndexValue, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
            if (!this._initValue && !this._onSearch && this._raiseEvents)
                this._trigger("change", args);
            if ((this.model.cascadeTo != null) && this.model.showCheckbox) this._cascadeAction();           
            this.model.checkAll = false;
            this._setWatermark();
        },


        _createBox: function (value) {
            if (!this._checkContains(value)) {

                if (this._ulBox.css('display') == "none" && this.element.css('display') != "none") this._swapUlandInput(true);
                var span = ej.buildTag("span.e-icon e-close", "", {}, { "unselectable": "on" });
                var li = ej.buildTag("li.e-options").text(value).append(span);
                this._on(span, "click", function (e) {
                    if (!this.model.enabled) return false;
                    this._deleteBox($(e.target).parent());
                    if (!this._isFocused && !this._isPopupShown())
                        this._setWatermark();
                    if (!this.model.showCheckbox) {
                        for (var i = 0; i < this.ultag.children("li").length; i++) {
                            if (this.ultag.children("li")[i].innerText == $(e.target).parent()[0].textContent)
                                $(this.ultag.children("li")[i]).removeClass("e-active").removeClass("e-hover");
                        }
                        this._removeText($(e.target).parent()[0].textContent);
                    }
                    if (this.model.multiSelectMode != "none") {
                        var itemIndex = this._selectedIndices.indexOf(this.selectedIndexValue);
                        this._selectedIndices.splice(itemIndex, 1);
                        this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                    }
                });
                return li;
            }
        },
        _deleteBoxCheck: function (val) {
            var items = this._ulBox.children('li');
            for (var i = 0; i < items.length; i++) {
                if ($(items[i]).text() == val) {
                    $(items[i]).remove();
                }
            }
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children("li:not(.e-search-box)");
            var item = items.last();
            if (item.hasClass("e-active")) this._deleteBox(item);
            else {
                this._removeActive();
                item.addClass("e-active");
            }
        },
        _deleteBox: function (items) {
            for (var i = 0; i < items.length; i++) {
                var cobj = $(items[i]);
                var deltext = cobj.text();
                var listItems = this.ultag.children("li:not('.e-category')");
                for (var j = 0; j < listItems.length; j++) {
                    if ($(listItems[j]).text() == deltext) {
                        this._activeItem = j;
                        this._uncheckboxModel(this._activeItem);
                        var hidval = this._getAttributeValue(listItems[j]) || deltext;
                        this._removeListHidden(hidval);
                    }
                }
                cobj.remove();
            }
        },

        _swapUlandInput: function (inputHide) {
            if (inputHide) {
                this.element.css('display', 'none');
                this._ulBox.css('display', 'block');
                this.wrapper.css({ 'height': 'auto' });
            }
            else {
                this.element.css('display', 'block');
                this._ulBox.css('display', 'none');
                this.wrapper.css({ 'height': this.model.height });
            }
        },
        _removeActive: function () {
            this._ulBox.children("li").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = ej.buildTag("span", this.element.val());
            this.container.append(tempSpan);
            this.element.width(tempSpan.width() + 30);
            tempSpan.remove();
        },
        _uncheckboxModel: function (val) {
            var listItems = this.ultag.children("li:not('.e-category')");
            if ($(listItems[val].firstChild).find('.listcheckbox').ejCheckBox('isChecked')) {
                $(listItems[val].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                this._removeTextBoxValue();
                if (!this._initValue)
                    this._trigger('checkChange', { isChecked: this.checkedStatus,data:this.model });
            }
        },
        _destroyBoxModel: function () {
            this.container.prepend(this.element);
            this.element.css('display', 'block');
            this.wrapper.height(this.model.height);
            this._ulBox.remove();
            this._off(this.container, "click");
        },

        _removeListHover: function () {
            this.ultag.children("li").removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = this._getActiveItem();
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop('hover') });
            activeItem.focus();
        },
        _calcScrollTop: function (val) {
            var ulH = this.ultag.outerHeight(), li = this.ultag.find("li"), liH = 0, index, top, i;
            index = this._selectedIndices && this._selectedIndices.length > 0 && val == "active" ?
               this._selectedIndices[this._selectedIndices.length - 1] :
                this.ultag.find("li.e-" + val).index();
            for (i = 0; i < index; i++) { liH += li.eq(i).outerHeight(); }
            top = liH - ((this.popupList.outerHeight() - li.eq(index).outerHeight()) / 2);
            return top < 0 ? 0 : top;
        },
        _getActiveItem: function () {
            return $(this.ultag.children("li:not('.e-category')")[this._activeItem]);
        },
        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },


        _roundedCorner: function (val) {
            if (val) {
                this.container.addClass("e-corner");
                this.popupListWrapper.addClass("e-corner");
                if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                this.popupListWrapper.removeClass("e-corner");
                if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').removeClass("e-corner");
            }

        },

        _enabled: function (boolean) {
            if (boolean) this.enable();
            else this.disable();
        },

        _destroyDropdown: function () {
            this.element.insertAfter(this.wrapper);
            this.element.width(this.element.width() + this.dropdownbutton.outerWidth());
            this.wrapper.remove();
            this.container.remove();

            this.container.unbind("mousedown", $.proxy(this._OnDropdownClick, this));
        },


        _RightToLeft: function () {
            if (this.model.enableRTL) {
                this.wrapper.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
            }

        },
        _dropbtnRTL: function () {
            if (this.model.enableRTL) {
                this.popupListWrapper.addClass("e-rtl");
                this.popupList.addClass("e-rtl");
            }
            else {
                this.popupListWrapper.removeClass("e-rtl");
                this.popupList.removeClass("e-rtl");
            }
        },
        _OnDropdownClick: function (e) {
            e.preventDefault();
            if (($(e.target).is("li") && $(e.target).parent().hasClass("e-boxes")) || ($(e.target).parents("ul").hasClass("e-boxes") && $(e.target).hasClass("e-icon e-close")))
                return false;
            if (this.model.readOnly) return false;
            if (this.ultag.find('li').length > 0) {
                this._OnPopupHideShow();
            }
        },
        _OnPopupHideShow: function () {
            if (this._isPopupShown()) {
                this._hideResult();
            }
            else {
                this._showResult();
                this.wrapper.focus();
            }
        },

        _showFullList: function () {
            var source = this.model.dataSource;
            if (ej.DataManager && source instanceof ej.DataManager) {
                if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
                    var proxy = this;
                    proxy._initDataSource(source);
                }
                else this._getFilteredList(source.dataSource.json);
            }
            else this._getFilteredList(source);
        },
        _getFilteredList: function (list) {
            if (!list || !list.length || list.length < 1) {
                this._targetElementBinding();
                this._renderRemaining();
            }
            else {
                var listItem = ej.DataManager(list).executeLocal(this._isPlainType(list) ? ej.Query() : this._getQuery(true));
                this._totalCount = listItem.count;
                this._listItem(listItem.result ? listItem.result : listItem);
                this._renderPopupList();
            }
        },

        _cascadeAction: function () {
            if (this.model.cascadeTo) {
                var citem = this.model.cascadeTo.split(","), i;
                for (i = 0; i < citem.length; i++) {
                    if ($('#' + citem[i]).hasClass("e-dropdownlist")) {
                        this._doCascadeAction(citem[i], this, this.checkedStatus);
                    }
                    else {
                        $('#' + citem[i]).on("ejDropDownListcreate", { Obj: this, status:this.checkedStatus }, function (e) {
                            if (!ej.isNullOrUndefined(e.data.Obj.getValue()) && e.data.Obj.getValue() != "") {
                                e.data.Obj._doCascadeAction(this.id, e.data.Obj, e.data.status);
                            }
                        });
                    }
                }
            }
        },
        _doCascadeAction: function (id, parentObj,status) {
            parentObj._currentValue = parentObj._getField(parentObj.popupListItems[parentObj._activeItem], parentObj.mapFld._value);
            parentObj.selectDropObj = $('#' + id).ejDropDownList('instance');
            // parentObj.selectDropObj.model.selectedIndices = parentObj.selectDropObj.model.selectedItems = [];
            var beforeCascade = JSON.stringify(parentObj.selectDropObj.model);
            var args = { cascadeModel: parentObj.selectDropObj.model, cascadeValue: parentObj._currentValue, requiresDefaultFilter: true };
            this._trigger("cascade", args);
            var afterCascade = JSON.stringify(args.cascadeModel);
            var modified = !(beforeCascade === afterCascade);
            if (ej.isNullOrUndefined(parentObj[id])) {
                parentObj[id] = parentObj.selectDropObj.model.dataSource;
            }
            (ej.DataManager && parentObj[id] instanceof ej.DataManager) ?
                parentObj._cascadeOdataInit(parentObj[id], args.requiresDefaultFilter, status, modified) :
            parentObj._cascadeJsonInit(parentObj.selectDropObj, parentObj[id], parentObj.mapFld._value, args.requiresDefaultFilter, status, modified);
        },
        _cascadeOdataInit: function (_dSource, requiresFilter, status, modified) {
            var proxy = this, queryPromise, tempQuery;
            proxy._dQuery = this.selectDropObj._getQuery().clone();
            tempQuery = proxy._dQuery.clone();
            if (requiresFilter) tempQuery.where(proxy.mapFld._value, "equal", proxy._currentValue);
            proxy.selectDropObj._addLoadingClass();
            queryPromise = _dSource.executeQuery(tempQuery);
            queryPromise.fail(function (e) {
                proxy._changedSource = null;
                proxy.selectDropObj.setModel({ dataSource: proxy._changedSource, enabled: false });
                proxy._trigger("actionFailure", e);
            }).done(function (e) {
                proxy._trigger("actionSuccess", e);
                proxy._cascadeDataBind(proxy.selectDropObj, e.result, status, modified);
                proxy.selectDropObj._removeLoadingClass();
                //if (!ej.isNullOrUndefined(proxy.selectDropObj.model.selectedIndex) && proxy._setSelectedItem)
                //    proxy.selectDropObj._selectItemByIndex(proxy.selectDropObj.model.selectedIndex);
                //proxy._setSelectedItem = false;
            }).always(function (e) {
                proxy._trigger("actionComplete", e);
            });
        },

        _cascadeJsonInit: function (cascadeDropDownObj, _dSource, mapFld, requiresFilter, status, modified) {
            var tempQuery = ej.Query();
            if (requiresFilter) tempQuery.where(mapFld, "==", this._currentValue);
            var changedSource = ej.DataManager(_dSource).executeLocal(tempQuery);
            this._cascadeDataBind(cascadeDropDownObj, changedSource, status, modified);
        },

        _cascadeDataBind: function (cascadeDropDownObj, changedSource, status, modified) {
            if ((this.model.showCheckbox && status) || (this.model.multiSelectMode != "none" && this.activeItem.hasClass("e-active"))) {
                this._changedSource = (!ej.isNullOrUndefined(this._changedSource)) ? this._changedSource.concat(changedSource) : changedSource;}
            else if (!this.model.showCheckbox && this.model.multiSelectMode == "none") this._changedSource = changedSource;
            else {
                for (var i = 0; i < changedSource.length; i++) {
                    if (this._isPlainType(changedSource) && this._isPlainType(this._changedSource)) this._changedSource.splice(this._changedSource.indexOf(changedSource[i]), 1);
                    else {
                        for (var j = 0; j < this._changedSource.length; j++) {
                            if (JSON.stringify(this._changedSource[j]) == JSON.stringify(changedSource[i]))
                                this._changedSource.splice(j, 1);
                        }

                    }
                }
                cascadeDropDownObj.setModel({ dataSource: null });
            }
            var cascadeModel = JSON.parse(JSON.stringify(cascadeDropDownObj.model));
            cascadeDropDownObj.setModel({ dataSource: this._changedSource, enabled: true });
            if (cascadeDropDownObj.model.showCheckbox || cascadeDropDownObj.model.multiSelectMode != "none") {
                $("input:hidden[id^='#'][name=" + cascadeDropDownObj._id + "]").remove();
                cascadeDropDownObj._hiddenInput.attr('name', cascadeDropDownObj._name);
            }
            if (modified) {
                var delProp = ["dataSource", "query", "fields", "itemsCount", "template"];
                for (var k = 0; k < delProp.length; k++) delete cascadeModel[delProp[k]];
                cascadeModel.enabled = true;
                cascadeDropDownObj.setModel(cascadeModel);
            }
            else if (!cascadeDropDownObj._setSelectedItem) {
                var selectItem = cascadeModel.selectedIndex !=null ? cascadeModel.selectedIndex : cascadeModel.selectItemByIndex;
                cascadeDropDownObj.setModel({ selectedIndex: selectItem });
                cascadeDropDownObj._setSelectedItem = true;
            }
        },

        _OnMouseEnter: function (e) {
            if (!this.model.enabled || this.model.readOnly) return false;
            var targetEle;
            this.ultag.children("li").removeClass("e-hover");
            if ($(e.target).is("li:not('.e-category')")) { $(e.target).addClass("e-hover"); }
            if ($(e.target).hasClass("e-disable"))
                $(e.target).removeClass('e-hover');
            else if (e.target.tagName != "li") {
                targetEle = $(e.target).parents("li:not('.e-category')");
                $(targetEle).addClass("e-hover");
            }
            var activeItem;
            this.ultag.children("li:not('.e-category')").each(function (index) {
                if ($(this).hasClass("e-hover")) {
                    activeItem = index;
                    return false;
                }
            });
            this._activeItem = activeItem;
        },
        _OnMouseLeave: function (e) {
            if (!this.model.enabled || this.model.readOnly) return false;
            this.ultag.children("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            if (!this.model.enabled || this.model.readOnly) return false;
            if(this.model.enableFilterSearch && $(e.target).is("li") && $(e.target).hasClass('e-nosuggestion')) {
                    return false;
                }
            else if (($(e.target).is("li") && !$(e.target).hasClass('e-disable')) || (!$(e.target).is("li") && !$(e.target).closest("li").hasClass('e-disable'))) {
                if (!this.model.showCheckbox) {
                    this._enterTextBoxValue();
                    if (this.model.multiSelectMode == "none")
                        this._hideResult();
                } else {
                    if (($(e.currentTarget).is("li")) && ($(e.target).is("li") || $(e.target.parentElement).is("li.e-hover")) && $(e.currentTarget.firstChild).find('.listcheckbox')) {
                        if ($(e.target.parentElement).is("li.e-hover"))
                            e.target = e.target.parentElement;
                        var element = this.popupPanelWrapper.find(".e-popup").find("li:not('.e-category')");
                        this._activeItem = $.inArray(e.target, element);
                        if ($(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('isChecked')) {
                            $(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                            this.checkedStatus = false;
                            this._checkboxValue = true;
                            this._removeTextBoxValue();
                        } else {
                            $(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                            this.checkedStatus = true;
                            this._checkboxValue = true;
                            this._enterTextBoxValue();
                        }
                    }
                    if (!this._initValue && this._checkboxValue)
                        this._trigger('checkChange', { isChecked: this.checkedStatus, text: this.element.val(), itemId: this.selectedIndexValue, selectedText: this.currentValue, selectedValue: this._selectedValue, value: this._selectedValue,data:this.model });
                }
            }
        },
        _OnClickCheckList: function (e) {
            var element = this.popupPanelWrapper.find(".e-popup").find("li:not('.e-category')");
            this._activeItem = $.inArray($(e.event.target).parents("li")[0], element);
            if (e.isChecked) {
                this.checkedStatus = true;
                this._checkboxValue = true;
                this._enterTextBoxValue();
            } else {
                this.checkedStatus = false;
                this._checkboxValue = true;
                this._removeTextBoxValue();
            }

        },
        _OnListSelect: function (e) {
            e.preventDefault();
            var activeItem = this._getActiveItem();
            if ($(activeItem).find('.listcheckbox').ejCheckBox('isChecked')) {
                $(activeItem).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                this.checkedStatus = false;
                this._removeTextBoxValue();
            } else {
                $(activeItem).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                this.checkedStatus = true;
                this._enterTextBoxValue();
            }

            if (!this._initValue)
                this._trigger('checkChange', { isChecked: this.checkedStatus,data:this.model });
        },
        _OnDocumentClick: function (e) {
            if (this.model && (!this.model.enabled || this.model.readOnly)) return false;
            if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-ddl-popup").is(this.popupListWrapper) &&
                !$(e.target).is(this.element) && !$(e.target).parents(".e-ddl").is(this.wrapper)) {
                this._hideResult();
            }
            else if ($(e.target).is(this.inputSearch)) {
                this.inputSearch.focus();
            }
            else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-ddl-popup").is(this.popupListWrapper))
                e.preventDefault();
        },
        _disableItemSelectUp: function () {
            var disableList = this.model.disableItemsByIndex.split(",").sort().reverse();
            if (this._activeItem == 0) this._activeItem = this._listSize;
            for (var lists in disableList)
                if (this._activeItem == parseInt(disableList[lists])) this._activeItem--;
        },
        _disableItemSelectDown: function () {
            var disableList = this.model.disableItemsByIndex.split(",").sort();
            if ((this._listSize) == this._activeItem) this._activeItem = 0;
            for (var lists in disableList)
                if (this._activeItem == parseInt(disableList[lists])) this._activeItem++;
        },
        _OnKeyPress: function (e) {
            if (this.model.enableIncrementalSearch) {
                this._OnTextEnter((ej.browserInfo().name == "mozilla") ? e.charCode : e.keyCode);
            }
        },
        _OnTextEnter: function (from) {
            var proxy = this;
            this._incqueryString += String.fromCharCode(from);
            if (this._incqueryString.length > 0) {
                setTimeout(function () { proxy._incqueryString = ""; }, 1000);
            }
            var list = this.popupList.find("ol,ul").children("li:not('.e-category')"), i, strlen,
            caseSence = this.model.caseSensitiveSearch, mapper = this.model.fields,
            tempSuggestion = [],
            str, queryStr = this._incqueryString,
            querylength = this._incqueryString.length, searchflag = false;

            if (!caseSence) queryStr = queryStr.toLowerCase();

            for (i = 0; i < list.length; i++) {
                str = $.trim($(list[i]).text());
                str = caseSence ? str : str.toLowerCase();
                if (str.substr(0, querylength) == queryStr) {
                    if (this._isPopupShown()) {
                        this._removeListHover();
                        this._activeItem = i;
                        if (!this.model.showCheckbox && this.model.multiSelectMode == "none")
                            this._enterTextBoxValue();
                        this._addListHover();
                    } else {
                        this._activeItem = i;
                        if (!this.model.showCheckbox && this.model.multiSelectMode =="none" )
                            this._enterTextBoxValue();
                    }
                    searchflag = true;
                } else if ((i == list.length - 1) && (searchflag == false)) {
                    if (this.model.itemValue == "") {
                        this._activeItem = null;
                        if (!this.model.showCheckbox && this.model.multiSelectMode == "none")
                            this.element.val("");
                    }
                    searchflag = true;
                }
                if (searchflag) break;
            }

        },

        _OnKeyDown: function (e) {
            if (this.model.enabled) {
                this._itemId = null;
                var _popupListItems = this.ultag.children("li:not('.e-category')");
                this._listSize = this.ultag.children("li:not('.e-category')").size();
                var liH, popupH, activeitem, flag;
                popupH = this.popupList.height();
                liH = this.ultag.children("li").outerHeight();
                activeitem = Math.round(popupH / liH);

                switch (e.keyCode) {
                    case 38:
                        if (e.altKey) {
                            if (this.ultag.find('li').length > 0)
                                this._hideResult();
                            break;
                        }
                    case 33:
                        flag = ((e.keyCode == 38) ? 1 : activeitem);
                        if (this._isPopupShown()) {
                            this._removeListHover();
                            this.ultag.children("li").removeClass('e-active');
                            if ((this._activeItem <= 0) || (this._activeItem == null) || (this._activeItem > this._listSize - 1))
                                this._activeItem = this._listSize - 1;
                            else
                                this._activeItem -= flag;
                            if (this.model.disableItemsByIndex != null) this._disableItemSelectUp();
                            this._addListHover();
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        } else {
                            this.ultag.children("li").removeClass('e-active');
                            if ((this._activeItem <= 0) || (this._activeItem == null) || (this._activeItem > this._listSize - 1))
                                this._activeItem = this._listSize - 1;
                            else
                                this._activeItem -= flag;
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        }
                        e.preventDefault();
                        return false;
                        break;
                    case 40:
                        if (e.altKey) {
                            if (this.ultag.find('li').length > 0)
                                this._showResult();
                            break;
                        }
                    case 34:
                        flag = ((e.keyCode == 40) ? 1 : activeitem);
                        if (this._isPopupShown()) {
                            this._removeListHover();
                            this.ultag.children("li").removeClass('e-active');
                            if ((this._activeItem >= this._listSize - 1) || (this._activeItem == null) || (this._activeItem < 0))
                                this._activeItem = 0;
                            else
                                this._activeItem += flag;
                            if (this.model.disableItemsByIndex != null) this._disableItemSelectDown();
                            this._addListHover();
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        } else {
                            this.ultag.children("li").removeClass('e-active');
                            if ((this._activeItem >= this._listSize - 1) || (this._activeItem == null) || (this._activeItem < 0))
                                this._activeItem = 0;
                            else
                                this._activeItem += flag;
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        }
                        e.preventDefault();
                        return false;
                        break;
                    case 37:
                        if (this._isPopupShown()) {
                            this._removeListHover();
                            this.ultag.children("li").removeClass('e-active');
                            if ((this._activeItem <= 0) || (this._activeItem == null) || (this._activeItem > this._listSize - 1))
                                this._activeItem = this._listSize - 1;
                            else
                                this._activeItem -= 1;
                            if (this.model.disableItemsByIndex != null) this._disableItemSelectUp();
                            this._addListHover();
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        } else {
                            this.ultag.children("li").removeClass('e-active');
                            if ((this._activeItem <= 0) || (this._activeItem == null) || (this._activeItem > this._listSize - 1))
                                this._activeItem = this._listSize - 1;
                            else
                                this._activeItem -= 1;
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        }
                        e.preventDefault();
                        return false;
                        break;
                    case 39:
                        if (this._isPopupShown()) {
                            this._removeListHover();
                            this.ultag.children("li").removeClass('e-active');
                            if ((this._activeItem >= this._listSize - 1) || (this._activeItem == null) || (this._activeItem < 0))
                                this._activeItem = 0;
                            else
                                this._activeItem += 1;
                            if (this.model.disableItemsByIndex != null) this._disableItemSelectDown();
                            this._addListHover();
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        } else {
                            this.ultag.children("li").removeClass('e-active');
                            if ((this._activeItem >= this._listSize - 1) || (this._activeItem == null) || (this._activeItem < 0))
                                this._activeItem = 0;
                            else
                                this._activeItem += 1;
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        }
                        e.preventDefault();
                        return false;
                        break;
                    case 8:
                        if (this.model.multiSelectMode == "visualmode" || this.model.showCheckbox) {
                            if (this._ulBox) this._deleteLastBox();
                        }
                        e.preventDefault();
                        return false;
                        break;
                    case 9:
                        this._hideResult();
                        break;
                    case 35:
                        if (this._isPopupShown()) {
                            this._removeListHover();
                            this.ultag.children("li").removeClass('e-active');
                            this._activeItem = this._listSize - 1;
                            this._addListHover();
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        }
                        else {
                            this.ultag.children("li").removeClass('e-active');
                            this._activeItem = this._listSize - 1;
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        }
                        e.preventDefault();
                        return false;
                        break;
                    case 36:
                        if (this._isPopupShown()) {
                            this._removeListHover();
                            this.ultag.children("li").removeClass('e-active');
                            this._activeItem = 0;
                            this._addListHover();
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        }
                        else {
                            this.ultag.children("li").removeClass('e-active');
                            this._activeItem = 0;
                            if ((!this.model.showCheckbox))
                                this._enterTextBoxValue();
                        }
                        e.preventDefault();
                        return false;
                        break;
                    case 17:
                        break;
                    case 18:
                        break;
                    case 27:
                        if (this._isPopupShown()) e.stopPropagation();
                        this._hideResult();
                        break;
                    case 32:
                        e.preventDefault();
                        return false;
                        break;
                }
            }
        },

        _OnKeyUp: function (e) {
            if (this.model.enabled) {
                e.preventDefault();
                var target = e.target;
                if ($.trim(this.element.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                    this._hideResult();
                    return false;
                }

                switch (e.keyCode) {
                    case 38: break;
                    case 40: break;
                    case 37: break;
                    case 39: break;

                    case 20: break;
                    case 16: break;
                    case 17: break;
                    case 18: break;
                    case 35: break;
                    case 36: break;
                    case 144: break;
                    case 27: break;
                    case 9: break;

                    case 13:
                        e.preventDefault();
                        if (this.model.showCheckbox) {
                            this._OnListSelect(e);
                        }
                        else {
                            this._enterTextBoxValue();
                            this._hideResult();
                        }
                        return false;
                        break;
                    case 32:
                        e.preventDefault();
                        if (this.model.showCheckbox) {
                            this._OnListSelect(e);
                        }
                        else {
                            this._enterTextBoxValue();
                            this._hideResult();
                        }
                        return false;
                        break;
                    case 8:

                        this._hideResult();
                        break;
                    case 46:
                        if (this.model.multiSelectMode == "visualmode" || this.model.showCheckbox) {
                            this._deleteBox(this._ulBox.children("li.e-active"));
                            break;
                        }
                }
            }
        },

        _targetFocus: function () {
            if (this.model.enabled && !this._isFocused) {
                if (!this._isWatermark)
                    this._hiddenSpan.css("display", "none");
                this.wrapper.addClass("e-focus");
                this._isFocused = true;
                this._trigger("focusIn");
            }
        },

        _targetBlur: function () {
            if (this.model.enabled) {
                this._isFocused = false;
                this.wrapper.removeClass("e-focus");
                this._setWatermark();
                this._trigger("focusOut");
            }
        },


        _wireEvents: function () {
            this._on(this.wrapper, "focus", this._targetFocus);
            this._on(this.wrapper, "blur", this._targetBlur);
            this._on(this.wrapper, "keydown", this._OnKeyDown);
            this._on(this.popupList, "keydown", this._OnKeyDown);
            this._on(this.popupList, "keyup", this._OnKeyUp);
            this._on(this.wrapper, "keyup", this._OnKeyUp);
            this._on(this.popupList, "keypress", this._OnKeyPress);
            this._on(this.wrapper, "keypress", this._OnKeyPress);
        },

        _unwireEvents: function () {
            this._off(this.wrapper, "focus", this._targetFocus);
            this._off(this.wrapper, "blur", this._targetBlur);
            this._off(this.wrapper, "keydown", this._OnKeyDown);
            this._off(this.popupList, "keydown", this._OnKeyDown);
            this._off(this.popupList, "keyup", this._OnKeyUp);
            this._off(this.wrapper, "keyup", this._OnKeyUp);
            this._off(this.popupList, "keypress", this._OnKeyPress);
            this._off(this.wrapper, "keypress", this._OnKeyPress);
        },
    });

    ej.MultiSelectMode = {
        /** Supports to selection mode with none only */
        None: "none",
        /** Supports to selection mode with delimitter only */
        Delimiter: "delimiter",
        /** Supports to selection mode with visualmode only */
        VisualMode: "visualmode"
    };
    ej.FilterType = {
        Contains: "contains",
        StartsWith: "startsWith"
    }
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget(
    {
        "ejNumericTextbox": ["ej.NumericTextbox", "e-numerictextbox"],
        "ejPercentageTextbox": ["ej.PercentageTextbox", "e-percentagetextbox"],
        "ejCurrencyTextbox": ["ej.CurrencyTextbox", "e-currencytextbox"]
    },
    {
        element: null,

        model: null,
        validTags: ["input"],
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            priority: 1
        },

        defaults: {

            width: "",

            height: "",

            value: null,

            name: null,

            htmlAttributes: {},

            minValue: -(Number.MAX_VALUE),

            maxValue: Number.MAX_VALUE,

            incrementStep: 1,

            decimalPlaces: 0,

            validateOnType: false,

            cssClass: "",

            enablePersistence: false,

            showSpinButton: true,

            locale: "en-US",

            enableStrictMode: false,

            showRoundedCorner: false,

            readOnly: false,

            enabled: true,

            enableRTL: false,

            watermarkText: "",

            validationRules: null,

            validationMessage: null,

            groupSeparator: null,

            change: null,

            focusIn: null,

            focusOut: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            minValue: "number",
            maxValue: "number",
            incrementStep: "number",
            decimalPlaces: "number",
            showSpinButton: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            locale: "string",
            watermarkText: "string",
            cssClass: "string",
            readOnly: "boolean",
            enabled: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
            validateOnType: "boolean",
            groupSeparator: "string"
        },
        observables: ["value"],

        _setModel: function (jsondata) {
            var validate = false;
            for (var key in jsondata) {
                switch (key) {
                    case "value":
                        if (ej.isNullOrUndefined(jsondata["minValue"]) && ej.isNullOrUndefined(jsondata["maxValue"])) {
                            this._setValue(jsondata[key]);
                            jsondata[key] = this.model.value;
                        }
                        else {
                            this.model.value = this._checkNumValue(jsondata[key]);
                            this._localizedFormat();
                            this._raiseChangeEvent();
                            validate = true;
                        }
                        break;
                    case "enableRTL": this._enableRTL(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = jsondata[key];
                        this._setValidation();
                        break;
                    case "validationMessage":
                        this.model.validationMessage = jsondata[key];
                        this._setValidation(); break;
                    case "minValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.minValue = parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        validate = true;
                        break;
                    case "maxValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.maxValue = parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        validate = true;
                        break;
                    case "incrementStep":
                        if (isNaN(jsondata[key])) return;
                        this.model.incrementStep = parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        break;
                    case "enableStrictMode": this.model.enableStrictMode = jsondata[key]; break;
                    case "showSpinButton": this._showSpin(jsondata[key]); break;
                    case "showRoundedCorner": this._roundedCorner(jsondata[key]); break;
                    case "locale": this._setLocalize(jsondata[key]);
                        jsondata[key] = this.model.locale; break;
                    case "decimalPlaces": this._setDecimal(jsondata[key]); break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "readOnly": this._setReadOnly(jsondata[key]); break;
                    case "enabled": if (jsondata[key]) this.enable(); else this.disable(); break;
                    case "watermarkText": this.model.watermarkText = jsondata[key]; this._changeWatermark(jsondata[key]); break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "groupSeparator":
                        this._checkSeparator(jsondata[key]);
                        jsondata[key] = this.model.groupSeparator;
                        break;
                }
            }
            if (validate) {
                this._validateMinMaxValue(true);
                jsondata["value"] = this.model.value;
                jsondata["maxValue"] = this.model.maxValue;
                jsondata["minValue"] = this.model.minValue;
                if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
                this.element.attr({ 'aria-valuemin': this.model.minValue, 'aria-valuemax': this.model.maxValue, 'aria-valuenow': this.model.value });
            }
            this._checkSeparator(this.model.groupSeparator);
            this.element.val(this._removeSeparator(this.model.value));
            this._updateSeparator();
            this._checkErrorClass();
        },


        _destroy: function () {
            if (this.wrapper) {
                this.element.insertBefore(this.wrapper);
                this.wrapper.remove();
            }
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.element.val("").removeClass('e-input').empty();
            this.element.css("display", "block");
        },



        _init: function (options) {
            this._options = options;
            if (this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type'))) {
                this._isWatermark = 'placeholder' in document.createElement('input');
                this.model.locale = Globalize.culture(this.model.locale).name == "en" ? "en-US" : Globalize.culture(this.model.locale).name;
                this._prevSeparator = null;
                this._checkSeparator(this.model.groupSeparator);
                this._checkAttribute();
                this._renderControl();
                this._setValues();
                this._wireEvents();
                this._initObjects();
                this._addAttr(this.model.htmlAttributes);
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
                this._updateSeparator();
            }
            else {
                this._destroy();
                return false;
            }
        },
        _checkAttribute: function () {
            var attr = ["min", "max", "step", "readonly", "disabled", "placeholder"], propName = ["minValue", "maxValue", "incrementStep", "readOnly", "enabled", "watermarkText"], value, propValue;
            for (var i = 0; i < attr.length; i++) {
                value = this.element.attr(attr[i]); propValue = propName[i];
                if ((!ej.isNullOrUndefined(value)) && (ej.isNullOrUndefined(this._options[propValue]))) {
                    if (propValue == "watermarkText") this.model[propValue] = value;
                    else this.model[propValue] = ((propValue != "disabled") && (propValue != "readOnly")) ? Globalize.parseFloat(value, this.model.locale) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "accesskey") proxy._hiddenInput.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else if (key == "readOnly" && value == "readOnly") proxy._setReadOnly(true);
                else proxy.wrapper.attr(key, value);
            });
        },

        _setValues: function () {
            this._id = this.element[0].id;
            this._textBox = this._hiddenInput[0];
            this._error = false;
            this._timeout = null;
            this.isValidState = true;
            this._allowkeyboard = true;
            this._validateOnType = false;
            this._focused = false;
            this._startValue = 0;
            if (this.sfType === "ej.CurrencyTextbox" && this.model.minValue == -(Number.MAX_VALUE))
                this.model.minValue = 0;
            this.model.minValue = parseFloat(this.model.minValue.toFixed(this.model.decimalPlaces));
            this.model.maxValue = parseFloat(this.model.maxValue.toFixed(this.model.decimalPlaces));
            if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
            this._localizedFormat();
            this._validateMinMaxValue(true);
            this._updateSymbol(this.model.locale);
            value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
            this.element.val(value);
        },

        _initValidator: function () {
            var proxy = this;
            this.element.closest("form").validate({
                ignore: ".e-hidden",
                errorClass: 'e-validation-error',
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    $(error).insertAfter(element.closest(".e-widget"));
                },
            });
        },
        _setValidation: function () {
            var rules = this.model.validationRules;
            this.element.rules("add", rules);
            var validator = this.element.closest("form").validate();
            name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in rules) {
                var message = null;
                if (!ej.isNullOrUndefined(rules[ruleName])) {
                    if (!ej.isNullOrUndefined(rules["messages"] && rules["messages"][ruleName]))
                        message = rules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },


        _renderControl: function () {
            this.wrapper = ej.buildTag("span.e-widget ");
            this.innerWrap = ej.buildTag("span.e-in-wrap e-box ");
            this.wrapper.attr("style", this.element.attr("style"));
            if (this.sfType === "ej.NumericTextbox")
                this.wrapper.addClass('e-numeric');
            else if (this.sfType === "ej.PercentageTextbox")
                this.wrapper.addClass('e-percent');
            else if (this.sfType === "ej.CurrencyTextbox")
                this.wrapper.addClass('e-currency');
            this.wrapper.append(this.innerWrap).insertAfter(this.element);
            this.innerWrap.append(this.element);
            this._hiddenInput = ej.buildTag("input", "", {}, { type: "text" }).insertBefore(this.element);
            this._hiddenInput.attr('data-role', 'none');

            this._hiddenInput[0].tabIndex = this.element[0].tabIndex;
            this._hiddenInput[0].style.cssText = this.element[0].style.cssText;
            this._hiddenInput.attr("accesskey", this.element[0].accessKey);
            this.element[0].accessKey = "";

            this._hiddenInput.css("display", "block");
            this.element.css("display", "none");
            if (!this._isWatermark) {
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this.model.watermarkText);
                this._hiddenSpan.css("display", "none");
                this._hiddenSpan.bind("mousedown", $.proxy(this._focusIn, this));
                this._hiddenSpan.bind('mousewheel', $.proxy(this._mouseWheel, this));
                this._hiddenSpan.bind('DOMMouseScroll', $.proxy(this._mouseWheel, this));
            }
            this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
            this.element.attr("name") == null ? this.element.attr("name", this.model.name) : "";
            this.element.addClass('e-input');
            if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "")
                this.model.value = this._checkNumValue(this.element[0].value);
            else
                this.model.value = this._checkNumValue(this.model.value);
            this._hiddenInput.attr({ 'value': this.model.value }).addClass('e-input');
            this.element.attr({ 'role': 'spinbutton', 'aria-valuemin': this.model.minValue, 'aria-valuemax': this.model.maxValue, 'aria-valuenow': this.model.value, 'tabindex': '0', 'aria-live': 'assertive', "value": this.model.value });
            var spinbutton = $('<span class="e-select"><span class="e-spin e-spin-up " role="button" "aria-label"="Increase Value" unselectable="on" /><span class="e-spin e-spin-down" role="button" "aria-label"="Decrease Value" unselectable="on" /></span>');
            var spinimg = ej.buildTag('span.e-icon e-arrow').attr({ 'role': 'presentation', 'unselectable': 'on' });
            this.innerWrap.append(spinbutton);
            spinbutton.find('.e-spin').append(spinimg);
            this.spin = this.wrapper.find('.e-select');
            this.spinUp = this.wrapper.find('.e-spin-up');
            this.spinDown = this.wrapper.find('.e-spin-down');
            this._setWidth(this.model.width);
            this._setHeight(this.model.height);
            if (this.model.cssClass != "") this._setSkin(this.model.cssClass);
            this._showSpin(this.model.showSpinButton);
            if (this.model.showRoundedCorner) this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableRTL) this._enableRTL(this.model.enableRTL);
            if (this.model.readOnly) this._setReadOnly(this.model.readOnly);
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && this.element.hasClass("e-disable")) this.enable();
        },


        _initObjects: function () {
            this._preVal = this._numberValue();
            if (this.sfType === "ej.PercentageTextbox" && this._textBox.value != "")
                this._appendPercentSymbol(this._textBox.value);
            else if (this.sfType === "ej.CurrencyTextbox" && this._textBox.value != "")
                this._appendCurrencySymbol(this._textBox.value);
            if (this.model.value === "") {
                this.isValidState = true;
                this._hiddenInput.val("");
            }
            else if ((this.model.value < this.model.minValue) || (this.model.value > this.model.maxValue))
                this.isValidState = false;
            this._checkErrorClass();
            this._setWaterMark();
        },


        _showSpin: function (value) {
            if (!value) {
                if (this.spin) {
                    this.spin.hide();
                    this.innerWrap.removeClass('e-padding');
                }
                this._spinEvents("_off");
            }
            else {
                if (this.spin) {
                    this.spin.show();
                    this.innerWrap.addClass('e-padding');
                }
                this._spinEvents("_on");
            }
        },


        _roundedCorner: function (value) {
            if (value && !this.innerWrap.hasClass('e-corner')) {
                this.innerWrap.addClass('e-corner');
            } else if (this.innerWrap.hasClass('e-corner')) {
                this.innerWrap.removeClass('e-corner');
            }
        },


        _enableRTL: function (enableRTL) {
            if (enableRTL) {
                if (this.spin) {
                    this.wrapper.addClass("e-rtl");
                }
                else this.element.addClass("e-rtl");
            }
            else {
                if (this.spin) {
                    this.wrapper.removeClass("e-rtl");
                }
                else this.element.removeClass("e-rtl");
            }
        },


        _setWidth: function (value) {
            value != "" ? this.wrapper.width(value) : this.model.width = this.wrapper.outerWidth();
        },


        _setHeight: function (value) {
            value != "" ? this.wrapper.height(value) : this.model.height = this.wrapper.outerHeight();
        },


        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass);
            this.wrapper.addClass(skin);
        },


        _setValue: function (value) {
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.model.value = this._checkNumValue(value);
            this._validateMinMaxValue(false);
            if ((this.model.minValue <= this.model.value) && (this.model.value <= this.model.maxValue)) {
                this.isValidState = true;
            } else
                this.isValidState = false;
            this._checkErrorClass();
            this._localizedFormat();
            this._raiseChangeEvent();
            this._setWaterMark();
        },

        _setLocalize: function (val) {
            var prevSeparator = Globalize.culture(this.model.locale).numberFormat[',']
            this.model.locale = Globalize.culture(val).name == "en" ? "en-US" : Globalize.culture(val).name;
            this.model.groupSeparator = ((ej.isNullOrUndefined(this._options.groupSeparator) && (prevSeparator === this.model.groupSeparator))) ?
                Globalize.culture(this.model.locale).numberFormat[','] : this.model.groupSeparator;
            this._updateSymbol(this.model.locale);
            this._localizedFormat();
            value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n") : this._convertToExponetial(this.model.value).unformattedValue;
            this.element.val(value);
        },
        _updateSymbol: function (locale) {
            this._percentSymbol = Globalize.culture(locale).numberFormat.percent.symbol;
            this._currencySymbol = Globalize.culture(locale).numberFormat.currency.symbol;
        },

        _setDecimal: function (val) {
            this.model.decimalPlaces = val;
            this._localizedFormat();
        },


        _validateMinMaxValue: function (fromMinMax) {
            var valChange = false, value;
            if (this.model.minValue > this.model.maxValue) this.model.minValue = this.model.maxValue;
            if (this.model.value !== "" && this.model.minValue > this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this._startValue = this.model.value = this.model.minValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else if (this.model.value !== "" && this.model.maxValue < this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this.model.value = this.model.maxValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else this.isValidState = true;
            if (this.model.minValue == this.model.maxValue) this._startValue = this.model.minValue;
            if ((valChange && fromMinMax)) {
                value = this._formatValue(this.model.value, "n");
                this._hiddenInput.val(value);
                value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n") : this._convertToExponetial(this.model.value).unformattedValue;
                this.element.val(value);
                this._localizedFormat();
                this._raiseChangeEvent();
            }
        },

        _convertToExponetial: function (value) {
            var number = "", pattern, format;
            var negative = value < 0 ? true : false;
            value = value.toString();
            format = Globalize.culture(this.model.locale).numberFormat;
            value = value.replace(".", format["."]);
            unformattedValue = value;
            var length = null;
            if (this.sfType === "ej.NumericTextbox") {
                pattern = negative ? format.pattern[0] : "n";
                value = negative ? value.replace("-", "") : value;
                symbol = "";
            }
            else if (this.sfType === "ej.PercentageTextbox") {
                pattern = negative ? format.percent.pattern[0] : format.percent.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = format.percent.symbol;
            }
            else if (this.sfType === "ej.CurrencyTextbox") {
                pattern = negative ? format.currency.pattern[0] : format.currency.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = format.currency.symbol;
            }
            for (idx = 0, length = pattern.length; idx < length; idx++) {
                ch = pattern.charAt(idx);
                (ch === "n") ? number += value : (ch === "$" || ch === "%") ? number += symbol : number += ch;
            }
            return { formattedValue: number, unformattedValue: unformattedValue }
        },

        _localizedFormat: function () {
            if (this.model.value.toString().indexOf('e') == -1) {
                this._textBox.value = this._removeSeparator(this.model.value)
                if (!this._focused && this._textBox.value != "") {
                    this._textBox.value = Globalize.format((this.model.value), "n" + this.model.decimalPlaces, this.model.locale);
                    if (this.sfType === "ej.PercentageTextbox") this._appendPercentSymbol(this._textBox.value);
                    else if (this.sfType === "ej.CurrencyTextbox") this._appendCurrencySymbol(this._textBox.value);
                }
            }
            else {
                var value = this._convertToExponetial(this.model.value);
                this._textBox.value = value.unformattedValue;
                if (!this._focused && this._textBox.value != "")
                    this._textBox.value = value.formattedValue;
            }
        },


        _checkNumValue: function (value) {
            if (typeof value == "string")
                value = !this._changeSeparator ? value : this._replaceSeparator(value, this.model.groupSeparator, Globalize.culture(this.model.locale).numberFormat[',']);
            if (typeof value == "string" && !isNaN(Globalize.parseFloat(value, this.model.locale))) {
                value = Globalize.parseFloat(value, this.model.locale);
                return parseFloat(value);
            }
            else if ((typeof value == "number") && !isNaN(value))
                return value;
            else return "";
        },


        _setReadOnly: function (bool) {
            this.model.readOnly = bool;
            if (bool) {
                this.element.attr("readonly", true);
                this._hiddenInput.attr("readonly", true);
            }
            else {
                this.element.removeAttr("readonly");
                this._hiddenInput.removeAttr("readonly");
            }
        },


        _setWaterMark: function () {
            if ((this.model.watermarkText != null) && (this._textBox.value === "") && $.trim(this._hiddenInput.val()) === "") {
                if (this._isWatermark) {
                    this._hiddenInput.attr("placeholder", this.model.watermarkText);
                    this.element.attr("placeholder", this.model.watermarkText);
                }
                else
                    this._hiddenSpan.css("display", "block").text(this.model.watermarkText);
            }
        },


        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            if (this._isWatermark) this._hiddenInput.attr("placeholder", text);
            else this._hiddenSpan.text(text);
        },


        _setSelectionRange: function (selectionStart, selectionEnd) {
            var input = this._textBox;
            try {
                if (input.setSelectionRange) {
                    input.setSelectionRange(selectionStart, selectionEnd);
                }
                else if (input.createTextRange) {
                    var range = input.createTextRange();
                    _setselction(range);
                }
            }
            catch (e) {
                var control = this;
                window.setTimeout(function () {
                    document.body.focus();
                    control._textBox.select();
                    var range = document.selection.createRange();
                    _setselction(range);
                }, 1);
            }
            function _setselction(range) {
                range.collapse(true);
                range.moveEnd('character', selectionEnd);
                range.moveStart('character', selectionStart);
                range.select();
            }
        },


        _getSelection: function (value) {
            var oSel = null;
            if (document.selection) {
                oSel = document.selection.createRange();
                return (oSel.text === "" ? oSel.text : this._removeFormats(oSel.text));
            }
            else {
                if (value == null)
                    return this.model.value;
                else {
                    oSel = this._removeFormats(value.substring(this._textBox.selectionStart, this._textBox.selectionEnd));
                    return oSel;
                }
            }
        },


        _caretPosition: function () {
            var oField = this._textBox;
            var iCaretPos = 0;
            // IE Support
            if (document.selection) {
                oField.focus();
                // To get cursor position, get empty selection range
                var oSel = document.selection.createRange();
                // Move selection start to 0 position
                oSel.moveStart('character', -oField.value.length);
                // The caret position is selection length
                iCaretPos = oSel.text.length;
            }
            // Firefox support
            else if (oField.selectionStart || oField.selectionStart == '0')
                iCaretPos = oField.selectionEnd;
            return (iCaretPos);
        },


        _appendPercentSymbol: function (value) {
            if (this._percentSymbol) value = value.replace(this._percentSymbol, "");
            if (value.indexOf(Globalize.culture(this.model.locale).numberFormat.percent.symbol) < 0)
                this._textBox.value = this._formatValue(Globalize.parseFloat(value, this.model.locale) / 100, "p");
            this._percentSymbol = Globalize.culture(this.model.locale).numberFormat.percent.symbol;

        },

        _appendCurrencySymbol: function (value) {
            if (this._currencySymbol) value = value.replace(this._currencySymbol, "");
            if (value.indexOf(Globalize.culture(this.model.locale).numberFormat.currency.symbol) < 0)
                this._textBox.value = this._formatValue(Globalize.parseFloat(value, this.model.locale), "c");
            this._currencySymbol = Globalize.culture(this.model.locale).numberFormat.currency.symbol;

        },

        _removeFormats: function (val) {
            var grpSep = Globalize.culture(this.model.locale).numberFormat[","];
            if (val != null) {
                if (grpSep == ".")
                    return (val.toString().replace(/["."]/g, ""));
                else if (val.toString().match(new RegExp(grpSep, "g")))
                    return (val.toString().replace(new RegExp(grpSep, "g"), ""));
                else
                    return val;
            }
            else
                return null;
        },


        _checkErrorClass: function (obj) {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },


        enable: function () {
            this.model.enabled = true;
            this.element[0].disabled = false;
            this.element.removeAttr("disabled");
            this._hiddenInput.removeAttr("disabled");
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this._hiddenInput.removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select").removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select span.e-icon.e-arrow").removeClass('e-disable');
        },


        disable: function () {
            this.model.enabled = false;
            this.element[0].disabled = true;
            this.element.attr("disabled", "disabled");
            this._hiddenInput.attr("disabled", "disabled");
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this._hiddenInput.addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select").addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select span.e-icon.e-arrow").addClass('e-disable');
        },


        getValue: function () {
            return this.model.value == null ? "" : this.model.value;
        },

        _wireEvents: function () {
            this._on(this._hiddenInput, 'focus', this._focusIn);
            this._on(this.element, 'blur', this._focusOut);
            this._on(this.element, 'keydown', this._keyDown);
            this._on(this.element, 'keypress', this._keyPress);
            this._on(this.element, 'mousewheel', this._mouseWheel);
            this._on(this.element, 'DOMMouseScroll', this._mouseWheel);
        },

        _spinEvents: function (action) {
            this[action](this.spinUp, "mousedown", this._spinUpClick);
            this[action](this.spinDown, "mousedown", this._spinDownClick);
            this[action](this.spinUp, "mouseup", this._spinUpClick);
            this[action](this.spinDown, "mouseup", this._spinDownClick);
        },

        _spinUpClick: function (event) {
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this._on(this.spinUp, 'mouseleave', this._mouseUpClick);
            this.spinUp.addClass("e-active");
            var self = this;
            if (event.type == "mouseup") {
                this._updateInputField("increment");
                this.spinUp.removeClass("e-active");
                this._off($(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown") {
                if (!this._focused) this._hiddenInput[0].focus();
                this._timeout = setInterval(function () {
                    self._updateInputField("increment");
                }, 150);
                this._on($(document), 'mouseup', this._mouseUpClick);
            }
        },

        _spinDownClick: function (event) {
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this._on(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.addClass("e-active");
            if (event.type == "mouseup") {
                this._updateInputField("decrement");
                this.spinDown.removeClass("e-active");
                this._off($(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown") {
                if (!this._focused) this._hiddenInput[0].focus()
                this._timeout = setInterval(function () {
                    self._updateInputField("decrement");
                }, 150);
                this._on($(document), 'mouseup', this._mouseUpClick);
            }
        },

        _mouseUpClick: function (event) {
            event.stopPropagation();
            clearTimeout(this._timeout);
            this._off(this.spinUp, 'mouseleave', this._mouseUpClick);
            this._off(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.removeClass("e-active");
            this.spinUp.removeClass("e-active");
        },

        _mouseWheel: function (event) {
            event.preventDefault();
            if (!this._focused) this.element[0].focus();
            if (!this.model.enabled || this.model.readOnly) return;
            var delta;
            var rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._updateInputField("increment");
            else if (delta < 0)
                this._updateInputField("decrement");
            this._cancelEvent(event);
        },


        _numberValue: function () {
            var value = this._textBox.value;
            if (this.sfType === "ej.PercentageTextbox")
                value = this._formatValue(Globalize.parseFloat(value.split(this._percentSymbol)[0], this.model.locale), "n");
            else if (this.sfType === "ej.CurrencyTextbox")
                value = this._formatValue(Globalize.parseFloat(value, this.model.locale), "n");
            value = (typeof value == "string" && !isNaN(Globalize.parseFloat(value, this.model.locale))) ? value : "";
            return value;
        },
        _formatValue: function (value, format) {
            return Globalize.format(value, format + this.model.decimalPlaces, this.model.locale);
        },
        _toggleTextbox: function (toggle) {
            var proxy = this;
            proxy._hiddenInput.toggle(toggle);
            proxy.element.toggle(!toggle);
        },

        _focusIn: function (event) {
            if (this.model.readOnly)
                return;
            this._focused = true;
            this.element.val(this._removeSeparator(this.model.value));
            this._toggleTextbox(false);
            this._textBox = this.element[0];
            this.element[0].focus();
            this._preVal = this._numberValue();
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.wrapper.addClass("e-focus");
            this.wrapper.removeClass('e-error');
            if (!this._error) {
                if (this._textBox.value != "") {
                    var value = this._formatValue(this._textBox.value, "n");
                    this._textBox.value = value;
                    this._hiddenInput.val(value);
                }
                this._setSelectionRange(0, this._textBox.value.length);
            }
            this._trigger("focusIn", { value: this.model.value });
        },

        _focusOut: function (event) {
            this._focused = false;
            this.wrapper.removeClass("e-focus");
            if (!this._error) {
                if (this._textBox.value != "") {
                    var value = Globalize.parseFloat(this._textBox.value, this.model.locale);
                    if (value < this.model.minValue) {
                        if (!this.model.enableStrictMode)
                            this._textBox.value = this._formatValue(this.model.minValue, "n")
                        else
                            this.isValidState = false
                    }
                    else if (value > this.model.maxValue) {
                        if (!this.model.enableStrictMode)
                            this._textBox.value = this._formatValue(this.model.maxValue, "n");
                        else
                            this.isValidState = false;
                    }
                    this.model.value = Globalize.parseFloat(this._textBox.value, this.model.locale);
                    if (isNaN(this.model.value) && !this.model.value) {
                        this.model.value = "";
                        this.isValidState = false;
                    }
                    this._toggleTextbox(true);
                    this._textBox = this._hiddenInput[0];
                    this._localizedFormat();
                    this._checkErrorClass();
                }
                else {
                    this.model.value = this._textBox.value;
                    this._hiddenInput.val(this._textBox.value);
                    this._toggleTextbox(true);
                    this._textBox = this._hiddenInput[0];
                }
                if (this.model.value === "" || this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) this.isValidState = true;
                else if (this.model.enableStrictMode) this.isValidState = false;
                this._raiseChangeEvent();
                this._setWaterMark();
                value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                this.element.val(value);
                this._updateSeparator();
                this._trigger("focusOut", { value: this.model.value });
            }
            this._checkErrorClass();
        },

        _cancelEvent: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            e.stopPropagation();
            e.preventDefault();
            return false;
        },

        _updateInputField: function (operation) {
            this.isValidState = true;
            var step = this.model.incrementStep;
            var itemValue = this.model.value;
            if (this._textBox.value === "") {
                this._textBox.value = this._formatValue(this._startValue, "n");
                step = 0;
            }
            else if (this._textBox.value.indexOf(" ") >= 0)
                this._textBox.value = this._textBox.value.replace(" ", "");
            if (this.sfType === "ej.PercentageTextbox" || this.sfType === "ej.CurrencyTextbox") {
                var editorvalue = this._textBox.value, value = editorvalue;
                if (editorvalue.indexOf(Globalize.culture(this.model.locale).numberFormat.percent.symbol) > -1)
                    value = editorvalue.substring(0, editorvalue.length - 1);
                this.model.value = Globalize.parseFloat(value, this.model.locale);
            }
            else if (this.sfType == "ej.NumericTextbox")
                this.model.value = Globalize.parseFloat(this._textBox.value, this.model.locale);

            if (isNaN(this.model.value) && !this.model.value)
                this.model.value = this._startValue;

            if (this.model.value >= this.model.minValue && this.model.value > this.model.maxValue) {
                this.model.value = this.model.maxValue;
                this._setValue(this.model.value);
            }
            else if (this.model.value < this.model.minValue && this.model.value <= this.model.maxValue) {
                this.model.value = this.model.minValue;
                this._setValue(this.model.value);
            }
            else if (this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) {
                value = operation == "increment" ? this.model.value + step : this.model.value - step;
                if (value >= this.model.minValue && value <= this.model.maxValue)
                    this._setValue(value);
            }
            this._checkErrorClass();
        },

        _validateDecimal: function (e) {
            var char = String.fromCharCode(e.keyCode);
            char = e.keyCode == 188 ? "," : (e.keyCode == 190) ? "." : (e.keyCode == 110) ? Globalize.culture(this.model.locale).numberFormat["."] : char;
            if (Globalize.culture(this.model.locale).numberFormat["."].charCodeAt(0) == char.charCodeAt(0))
                return true;
            return false;
        },

        _allowKeyCodes: function (e) {
            var keys = new Array(38, 40, 35, 36, 109, 189, 46, 8, 127, 37, 39, 190, 9, 13, 16, 17, 18, 20, 110, 173, 86, 88, 67);
            for (var i = 0; i < keys.length; i++) {
                if (e.keyCode == keys[i] || (this._validateDecimal(e) && this.model.decimalPlaces != 0))
                    return true;
            }
            return false;
        },

        _raiseChangeEvent: function () {
            var currVal = this._numberValue(), value;
            if (!ej.isNullOrUndefined(this._preVal) && (this._checkNumValue(this._preVal) !== this._checkNumValue(currVal))) {
                this._preVal = currVal;
                this.model.value = this._checkNumValue(this._preVal);
                this._updateHiddenField();
                value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                this.element.val(value);
                this.element.attr('aria-valuenow', value);
                this._updateSeparator();
                // Trigger the Jquery change event for the input element.
                this.element.trigger("change");
                this._trigger("change", { value: this.model.value });
                this._trigger("_change", { value: this.model.value });
            }
        },
        _updateHiddenField: function () {
            var prevActive = this._textBox;
            this._textBox = this._hiddenInput[0];
            this._localizedFormat();
            this._textBox = prevActive;
        },
        _removeSeparator: function (number) {
            var value, format;
            number = this._checkNumValue(Globalize.format((number), "n" + this.model.decimalPlaces, this.model.locale))
            value = number.toString();
            format = Globalize.culture(this.model.locale).numberFormat;
            value = value.replace(".", format["."]);
            return value;
        },
        _updateSeparator: function () {
            if (this._changeSeparator && this.model.value) {
                var formatValue;
                if (this.sfType === "ej.NumericTextbox")
                    formatValue = this._formatValue(this.model.value, "n");
                else if (this.sfType === "ej.PercentageTextbox")
                    formatValue = this._formatValue((this.model.value) / 100, "p");
                else if (this.sfType === "ej.CurrencyTextbox")
                    formatValue = this._formatValue(this.model.value, "c");
                this._hiddenInput.val(this._replaceSeparator(formatValue, Globalize.culture(this.model.locale).numberFormat[","], this.model.groupSeparator));
            }
        },

        _replaceSeparator: function (value, find, replaceWith) {
            var reg = find === "" ? new RegExp("\\s", "g") : new RegExp("\\" + find, "g");
            return value.replace(reg, replaceWith);
        },

        _checkSeparator: function (value) {
            this.model.groupSeparator = value != null ? this._validateSeparator(value) : Globalize.culture(this.model.locale).numberFormat[','];
            this._changeSeparator = Globalize.culture(this.model.locale).numberFormat[","] != this.model.groupSeparator ? true : false;
            this._prevSeparator = this.model.groupSeparator;
        },
        _validateSeparator: function (value) {
            var separator = value.toString();
            var reg = new RegExp("[a-zA-Z0-9]");
            separator = (separator.length > 1) ? separator[0] : separator;
            separator = (!reg.test(separator)) ? separator : this._prevSeparator != null ? this._prevSeparator : Globalize.culture(this.model.locale).numberFormat[','];
            return separator;
        },
        _keyPress: function (e) {
            if (e.which === 0 || e.metaKey || e.ctrlKey || e.keyCode === 8 || e.keyCode === 13)
                return;
            var proxy = this, regExp = null, point = ".";
            cursor = this._caretPosition();
            beforeCursor = this._textBox.value.toString().substring(0, cursor);
            afterCursor = this._textBox.value.toString().substring(cursor);
            numberFormat = Globalize.culture(this.model.locale).numberFormat;

            var character = String.fromCharCode(e.which);
            value = beforeCursor + character + afterCursor;
            var separator = numberFormat[point];
            separator = (separator === point) ? "\\" + separator : separator;
            regExp = proxy.model.decimalPlaces === 0 ? /^(-)?(\d*)$/ : new RegExp("^(-)?(((\\d+(" + separator + "\\d*)?)|(" + separator + "\\d*)))?$")
            // Validate the textbox value 
            if (!regExp.test(value))
                return false;
        },
        _validateDecimalOnType: function (e) {
            var cursor, cancelEvent, beforeCursor, afterCursor, sel;
            cursor = this._caretPosition();
            beforeCursor = this._textBox.value.toString().substring(0, cursor);
            afterCursor = this._textBox.value.toString().substring(cursor);
            sel = this._getSelection(this._textBox.value);
            var decSep = Globalize.culture(this.model.locale).numberFormat["."];
            var temp = this.model.value.toString();
            if (this.model.decimalPlaces != 0) {
                var afterdeci = (this._textBox.value).split(decSep)[1];
                if (temp.indexOf(decSep) > 0) {
                    if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
                        cancelEvent = true;
                    else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                    else cancelEvent = false;
                }
                else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                else
                    cancelEvent = false;
            }
            else
                cancelEvent = false;
            if (cancelEvent) {
                this._keypressFlag = false;
                this._cancelEvent(e);
                return false;
            }
        },

        _keyDown: function (e) {
            if (this.model.readOnly) return;
            this._CurrentCultureInfo = JSON.parse(JSON.stringify(Globalize.culture()));
            var cursor, cancelEvent, beforeCursor, afterCursor, sel;
            if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || this._allowKeyCodes(e)) {
                if (e.shiftKey && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 46 || e.keyCode == 127) || (e.ctrlKey && (e.keyCode == 86 || e.keyCode == 118 || e.keyCode == 67 || e.keyCode == 88)))
                    return true;
                if ((((e.ctrlKey == true) && (e.keyCode != 9 && e.keyCode != 17 && e.keyCode != 86 && e.keyCode != 67))) || (e.keyCode == 67 || e.keyCode == 86 || e.keyCode == 88)) {//Prevent Shift + Tab event
                    this._keypressFlag = false;
                    this._cancelEvent(e);
                    return false;
                }

                if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode == 110) {//Numbers from 0 to 9 in keyboard and numpad (110 for decimal)
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.toString().substring(0, cursor);
                    afterCursor = this._textBox.value.toString().substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                    // For Numpad issue
                    if (e.keyCode >= 96 && e.keyCode <= 105)
                        e.keyCode -= 48;
                    if (this.model.validateOnType) this._validateDecimalOnType(e);
                    if (this._validateOnType) {
                        var decSep = Globalize.culture(this.model.locale).numberFormat["."];
                        var temp = this.model.value.toString();
                        var tempIndex = temp.indexOf(decSep);
                        var value = this.model.value;
                        var replaceminVal = this.model.minValue.toFixed(this.model.decimalPlaces);
                        var replacemaxVal = this.model.maxValue.toFixed(this.model.decimalPlaces);
                        var exp = false;
                        if (replaceminVal.toString().indexOf("e") > 0 || replacemaxVal.toString().indexOf("e") > 0)
                            exp = true;
                        if (!exp) {
                            if (decSep != ".") {
                                temp = this._textBox.value.toString();
                                if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                    replaceminVal = this.model.minValue.toString().replace(/["."]/g, decSep);
                                if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                    replacemaxVal = this.model.maxValue.toString().replace(/["."]/g, decSep);
                            }
                            if (replaceminVal.toString().indexOf(decSep) > 0)
                                minVal = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                            else
                                minVal = this.model.minValue;
                            if (replacemaxVal.toString().indexOf(decSep) > 0)
                                maxVal = Number(replacemaxVal.toString().toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                            else
                                maxVal = this.model.maxValue;
                            if (tempIndex > 0) {
                                value = Number(temp.substring(temp.indexOf(decSep) + 1, temp.toString().length));
                                if (replaceminVal.toString().indexOf(decSep) > 0)
                                    minVal = Number(replaceminVal.toString().substring(replaceminVal.toString().indexOf(decSep) + 1, replaceminVal.toString().length));
                                else
                                    minVal = 0;
                                if (replacemaxVal.toString().indexOf(decSep) > 0)
                                    maxVal = Number(replacemaxVal.toString().substring(replacemaxVal.toString().indexOf(decSep) + 1, replacemaxVal.toString().length));
                                else
                                    maxVal = 0;
                                var valb4Dec = Number(temp.substring(0, temp.indexOf(decSep)));
                                var minValb4Dec = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                                var maxValb4Dec = Number(replacemaxVal.toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                                if (!this._validateValue(value, minVal, maxVal, true, valb4Dec, minValb4Dec, maxValb4Dec))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                            else {
                                if (!this._validateValue(value, minVal, maxVal, false))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                        }
                        else if (this.model.decimalPlaces != 0) {
                            var afterdeci = (this._textBox.value).split(".")[1];
                            if (temp.indexOf(decSep) > 0 || (Number(temp) < Number(replaceminVal) || Number(temp) > Number(replacemaxVal))) {
                                if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
                                    cancelEvent = true;
                                else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                                else cancelEvent = false;
                            }
                            else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                            else
                                cancelEvent = false;
                        }
                        else
                            cancelEvent = false;
                        if (cancelEvent) {
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }
                    }

                }
                if (e.keyCode == 38 && this._allowkeyboard) {
                    this._updateInputField("increment");
                    this._cancelEvent(e);
                }

                if (e.keyCode == 40 && this._allowkeyboard) {
                    this._updateInputField("decrement");
                    this._cancelEvent(e);

                }
                if (e.keyCode == 8) {
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                }

                if (e.keyCode == 46 || e.keyCode == 127) {
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                }
                if (this._validateDecimal(e) && this.model.decimalPlaces != 0 && e.keyCode != 46) {
                    var decChar = Globalize.culture(this.model.locale).numberFormat["."];
                    var minVal, maxVal;
                    var dotSplit = this._textBox.value.split(decChar);
                    if (dotSplit[1] == undefined) {
                        var curPosition = this._caretPosition();
                        var strBeforeCursor = dotSplit[0].substring(0, curPosition);
                        var strAfterCursor = dotSplit[0].substring(curPosition);
                        if (this.model.minValue.toString().indexOf("e") > 0 || this.model.maxValue.toString().indexOf("e") > 0)
                            exp = true;
                        if (strAfterCursor.length > this.model.decimalPlaces && this.model.validateOnType == true) {
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }
                        if (this._validateOnType && !exp) {
                            if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                minVal = this.model.minValue.toString().replace(/["."]/g, decChar);
                            if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                maxVal = this.model.maxValue.toString().replace(/["."]/g, decChar);
                            if (minVal.indexOf(decChar) > 0)
                                minVal = Number(minVal.substring(0, minVal.indexOf(decChar)));
                            else
                                minVal = Number(minVal);
                            if (maxVal.indexOf(decChar) > 0)
                                maxVal = Number(maxVal.substring(0, maxVal.indexOf(decChar)));
                            else
                                maxVal = Number(maxVal);
                            if (this._validateValue(this.model.value, minVal, maxVal, "DecimalKeyPressed"))
                                this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
                            else {
                                this._keypressFlag = false;
                                this._cancelEvent(e);
                                return false;
                            }
                        }
                        else
                            this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
                        this._setSelectionRange(curPosition + 1, curPosition + 1);
                    }
                    this._cancelEvent(e);
                } else if (e.keyCode == 190 || e.keyCode == 110) {
                    this._cancelEvent(e);
                }
                if (e.keyCode == 109 || e.keyCode == 189 || e.keyCode == 173) { //'-' char key press.
                    if ((this._caretPosition() != 0 && this._getSelection(this._removeFormats(this._textBox.value)) != this.model.value) || (this.model.minValue >= 0 && !this.model.enableStrictMode) || (this._textBox.value.toString().match(new RegExp("-", "g")) && this._getSelection(this._textBox.value) === ""))
                        this._cancelEvent(e);

                    else if (this._getSelection() == this.model.value)
                        this.model.value = null;
                }

                if (e.keyCode == 13)
                    if (!ej.isNullOrUndefined(this._preVal) && (this._checkNumValue(this._preVal) !== this._checkNumValue(this._textBox.value)))
                        this._setValue(this._textBox.value);
            }

            else if (e.keyCode != 27 && !e.ctrlKey || (e.ctrlKey && e.keyCode == 90 && $.trim(this._textBox.value) === "")) {
                this._keypressFlag = false;
                this._cancelEvent(e);
            }
        }
    });

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.widget("ejPager", "ej.Pager", {
        _rootCSS: "e-pager",
        validTags: ["div"],
        // default model
        defaults: {
            pageSize: 12,
            pageCount: 10,
            currentPage: 1,
            enableExternalMessage: false,
            externalMessage:"",
            enableQueryString:false,
            locale: "en-US",
            masterObject: null,
            click: null,
            enableRTL: false,
            totalRecordsCount: null,
            totalPages: null,
            customText:""
        },

        // constructor function
        _init: function () {
            this._initPrivateProperties();
            this.model.enableQueryString && this._queryStringValue();
            this.renderPager();
            this._wireEvents();
        },
        _initPrivateProperties: function () {
            this._links = [];
            this._$prev = null;
            this._$first = null;
            this._$PP = null;
            this._$NP = null;
            this._lastNP = false;
            this._lastpageCount = null;
            this._$last = null;
            this._$next = null;
            this._prevPageNo = null;
        },
        _wireEvents: function () {
            if (this.model.click != undefined)
                this._on(this.element, "click", this._pagerClickHandler);

        },
        renderPager: function () {
            var $pagerContainer = ej.buildTag('div.e-pagercontainer', "", {}, { unselectable: "on" });
            var $parentMsgBar = ej.buildTag('div.e-parentmsgbar');
            this._renderPagerContainer($pagerContainer);
            this._renderMsgBar($parentMsgBar);
            this.element.append($pagerContainer).append($parentMsgBar).addClass(this.model.enableRTL ? "e-pager e-rtl" : "e-pager");
            this.model.enableExternalMessage && this._renderPagerMessage();
        },
        _queryStringValue: function () {
            var results = new RegExp('[\\?&]page=([^&#]*)').exec(window.location.href);
            !results ? this.model.currentPage = 1 : this.model.currentPage = parseInt(results[1] || 1);
        },
        _renderPagerMessage: function () {
            var $messageDiv = ej.buildTag('div.e-pagermessage');
            if (this.model.externalMessage.toString().length)
                $messageDiv.html(this.model.externalMessage);
            else
                $messageDiv.hide();
            this.element.append($messageDiv);
        },
        _renderPagerContainer: function ($pagerContainer) {
            //Update pager styles here for next versions
            this._renderBackwardButton($pagerContainer);
            this._renderpreviousPager($pagerContainer);
            this._renderNumericItem($pagerContainer);
            this._renderForwardPager($pagerContainer);
            this._renderForwardButton($pagerContainer);
        },
        _renderMsgBar: function ($ParentMsgBar) {
            var $msgBar = ej.buildTag('span.e-pagermsg', String.format(this._getLocalizedLabels("pagerInfo"), this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
            $ParentMsgBar.append($msgBar);
            $ParentMsgBar.css("text-align", ej.TextAlign.Right);
        },
        _renderpreviousPager: function ($pagerContainer) {
            this._$PP = ej.buildTag('a.e-link e-nextprevitemdisabled e-disable e-spacing e-PP', "...", {}, { title: this._getLocalizedLabels("previousPagerTooltip") , role:"link" });
            $pagerContainer.append(this._$PP);
        },
        _renderForwardPager: function ($pagerContainer) {
            this._$NP = ej.buildTag('a.e-link e-NP e-numericitem e-spacing e-default', "...", {}, { title: this._getLocalizedLabels("nextPagerTooltip"), role: "link" });
            $pagerContainer.append(this._$NP);
        },
        _renderBackwardButton: function ($pagerContainer) {
            this._$first = ej.buildTag('div.e-first e-icon e-mediaback  e-firstpagedisabled e-disable', "", {}, { unselectable: "on", title: this._getLocalizedLabels("firstPageTooltip") });
            this._$prev = ej.buildTag('div.e-prev e-icon e-arrowheadleft-2x  e-prevpagedisabled e-disable', "", {}, { unselectable: "on", title: this._getLocalizedLabels("previousPageTooltip") });
            $pagerContainer.append(this._$first);
            $pagerContainer.append(this._$prev);
        },
        _renderNumericItem: function ($pagerContainer) {
            var $numericContainer = ej.buildTag('div.e-numericcontainer e-default', "", {}, { unselectable: "on", id: "NumericContainer" });
            this._renderNumericLinks($numericContainer,this.model.pageCount);
            $pagerContainer.append($numericContainer);
        },
        _renderNumericLinks: function ($numericContainer) {
            $numericContainer.empty();
            for (var page = 1; page <= this.model.pageCount; page++) {
                var $link = ej.buildTag('a.e-link', this.model.customText + page, {}, { role: "link" }).addClass("e-numericitem e-spacing e-default").data("index",page);
                if (page == this.model.currentPage)
                    $link.removeClass("e-default").addClass("e-currentitem e-active");
                $numericContainer.append($link);
            }
            this._links = $numericContainer.children();
        },
        _renderForwardButton: function ($pagerContainer) {
            this._$next = ej.buildTag('div.e-nextpage e-icon e-arrowheadright-2x  e-default', "", {}, { unselectable: "on", title: this._getLocalizedLabels("nextPageTooltip") });
            this._$last = ej.buildTag('div.e-lastpage e-icon e-mediaforward  e-default', "", {}, { unselectable: "on", title: this._getLocalizedLabels("lastPageTooltip") });
            $pagerContainer.append(this._$next);
            $pagerContainer.append(this._$last);

        },
        _applyCss: function () {
            if (this.model.currentPage > 1) {
                this._$prev.removeClass("e-prevpagedisabled").removeClass("e-disable").addClass("e-prevpage e-default");
                this._$first.removeClass("e-firstpagedisabled").removeClass("e-disable").addClass("e-firstpage e-default");
            } else {
                this._$prev.addClass("e-prevpagedisabled e-disable").removeClass("e-prevpage").removeClass("e-default");
                this._$first.addClass("e-firstpagedisabled e-disable").removeClass("e-firstpage").removeClass("e-default");
            }
            (this.model.currentPage > this.model.pageCount) ?
                 (this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default")) : (this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default"));

            if (parseInt(this._links[0].innerHTML.replace(this.model.customText,""), 10) + this.model.pageCount > this.model.totalPages)
                this._lastNP = true;
            else
                this._lastNP = false;

            if (this._lastNP == false)
                this._$NP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
            else
                this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");

            this._lastpageCount = this.model.totalPages % this.model.pageCount;
            if (this._lastpageCount == 0)
                this._lastpageCount = this.model.pageCount;
            if (this.model.currentPage > (this.model.totalPages - this._LastpageCount)) {
                this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
                this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
            }
            if (this.model.currentPage == this.model.totalPages || this.model.totalRecordsCount == 0) {
                this._$last.addClass("e-lastpagedisabled e-disable").removeClass("e-lastpage").removeClass("e-default");
                this._$next.addClass("e-nextpagedisabled e-disable").removeClass("e-nextpage").removeClass("e-default");
                this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
            } else {
                this._$last.addClass("e-lastpage e-default").removeClass("e-lastpagedisabled").removeClass("e-disable");
                this._$next.addClass("e-nextpage e-default").removeClass("e-nextpagedisabled").removeClass("e-disable");
            }
            if (this._links.length) {
                this._links.removeClass("e-currentitem").removeClass("e-active").addClass("e-default");
                $(this._links[(this.model.currentPage - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-currentitem e-active");
                $(this._links[(this._prevPageNo - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-numericitem");
            }
            if (this.model.pageSize >= (this.model.totalRecordsCount / this.model.pageCount) && this._$PP != null && this._$PP.length != 0) {
                this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
            }
        },
        _SetTotalPages: function () {
            this.model.totalPages = (this.model.totalRecordsCount % this.model.pageSize == 0) ? (this.model.totalRecordsCount / this.model.pageSize) : (parseInt(this.model.totalRecordsCount / this.model.pageSize, 10) + 1);
        },
        _refreshNumericItem: function () {
            if (this._links.length != 0 && this._links != null) {
                this.model.currentPage = this.model.totalPages == 1 ? 1 : this.model.currentPage;
                if (this.model.currentPage > this.model.totalPages && this.model.totalPages != 0)
                    this.model.currentPage = this.model.totalPages;
                var _pagerTarget = parseInt(this.model.currentPage / this.model.pageCount, 10);
                if (this.model.currentPage % this.model.pageCount == 0)
                    if (_pagerTarget > 0)
                        _pagerTarget = _pagerTarget - 1;
                this._links.css("display", "none");
                for (var i = 0; i < this.model.pageCount; i++) {
                    var start = (_pagerTarget * this.model.pageCount) + 1 + i;
                    if (start <= this.model.totalPages) {
                        this._links[i].style.display = '';
						$(this._links[i]).data('index', start);
                        $(this._links[i]).html(this.model.customText + start);
                    }
                }
            }
        },
        _refreshPagerInfo: function () {
            if (this.model.totalRecordsCount == 0)
                this.model.currentPage = 0;
            this.element.find(".e-pagermsg").text(String.format(this._getLocalizedLabels("pagerInfo"), this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
        },
        _refreshExternalMessage: function () {
            if (this.model.externalMessage.toString().length)
                this.element.find(".e-pagermessage").empty().html(this.model.externalMessage).show();
            else
                this.element.find(".e-pagermessage").hide();
        },
        refreshPager: function () {
            this._SetTotalPages();
            this._refreshNumericItem();
            this._refreshPagerInfo();
            this._applyCss();
            this.model.enableExternalMessage && this._refreshExternalMessage();
            if (this.model.enableRTL)
                this.element.addClass("e-rtl");
            else
                this.element.removeClass("e-rtl");
        },

        _kDownHandler: function (e) {
            var code;
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            e.target = null;
            if (this.model.masterObject.checkKey("firstPage", code, e))
                e.target = this._$first;
            else if (this.model.masterObject.checkKey("previousPager", code, e))
                e.target = this._$PP;
            else if (this.model.masterObject.checkKey("previousPage", code, e))
                e.target = this._$prev;
            else if (this.model.masterObject.checkKey("lastPage", code, e))
                e.target = this._$last;
            else if (this.model.masterObject.checkKey("nextPager", code, e))
                e.target = this._$NP;
            else if (this.model.masterObject.checkKey("nextPage", code, e))
                e.target = this._$next;
            else
                return false;
            this._pagerClickHandler(e);
        },

        _pagerClickHandler: function (e) {
            this._prevPageNo = this.model.currentPage;
            var $target = $(e.target);
            if ($.inArray(e.target, this._links) != -1) {
				this.model.currentPage = parseInt($(e.target).data("index"), 10);
            }
            else if ($target.hasClass("e-nextpage") && $target.hasClass("e-nextpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 0) {
                    this.model.currentPage++;
                    if (this._links != undefined && this._links.length != 0)
                        this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) + this.model.pageCount;
                    if (parseInt(this._links[this.model.pageCount - 1].innerHTML, 10) + this.model.pageCount >= this.model.totalPages)
                        this._lastNP = true;
                }
                else
                    this.model.currentPage++;
            }
            else if ($target.hasClass("e-prevpage") && $target.hasClass("e-prevpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 1)
                    this._lastNP = false;
                this.model.currentPage--;
                if (this.model.currentPage < 0) { this.model.currentPage = 0; }
            }
            else if ($target.hasClass("e-lastpage") && $target.hasClass("e-lastpagedisabled") != true) {
                this._LastpageCount = this.model.totalPages % this.model.pageCount;
                (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                this.model.currentPage = this.model.totalPages;
                this._lastNP = true;
            }
            else if ($target.hasClass("e-firstpage") && $target.hasClass("e-firstpagedisabled") != true) {
                this.model.currentPage = 1;
                this._lastNP = false;
            }
            else if ($target.hasClass("e-NP") && $target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) + this.model.pageCount;
                if (parseInt(this._links[this.model.pageCount - 1].innerHTML.replace(this.model.customText,""), 10) + this.model.pageCount >= this.model.totalPages) {
                    this._lastNP = true;
                    if ((this.model.totalRecordsCount - this.model.pageSize) < this.model.pageSize)
                        this._LastpageCount = this.model.totalRecordsCount - this.model.pageSize;
                    else
                        this._LastpageCount = ((this.model.totalRecordsCount / this.model.pageSize) % this.model.pageCount);
                    (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                    if (this._links != undefined)
                        this.model.currentPage = parseInt($(this._links[this.model.pageCount - 1]).data("index"), 10) + 1;
                }
            }
            else if ($target.hasClass("e-PP") && $target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) - this.model.pageCount;
                this._lastNP = false;
            }
            this.goToPage(this.model.currentPage,e);
            return false;
        },
        goToPage: function (pageIndex,event) {
            if (pageIndex != this.model.currentPage)
                this._prevPageNo = this.model.currentPage;
            if (this._prevPageNo !== pageIndex && (pageIndex >= 1 && pageIndex <= this.model.totalPages)) {
                this.model.currentPage = pageIndex;
                this.model.enableQueryString && this._updateQueryString(this.model.currentPage);
                this._trigger("click", { "currentPage": pageIndex, "event": event });
            }
            else
                this._trigger("click", { "currentPage": pageIndex, "event": event });

        },
        _updateQueryString: function (value) {
            var _newUrl = this._getUpdatedURL(window.location.href, "page", value);
            if (history.pushState) {
                window.history.pushState({ path: _newUrl }, '', _newUrl);
            }
            else
                window.location.href = _newUrl;
        },

        _getUpdatedURL: function (uri, key, value) {
            var re = new RegExp("([?|&])" + key + "=.*?(&|#|$)", "i");
            if (uri.match(re)) {
                return uri.replace(re, '$1' + key + "=" + value + '$2');
            } else {
                var hash = '';
                var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                if (uri.indexOf('#') !== -1) {
                    hash = uri.replace(/.*#/, '#');
                    uri = uri.replace(/#.*/, '');
                }
                return uri + separator + key + "=" + value + hash;
            }
        },
        _getLocalizedLabels: function (property) {
            return (ej.Pager.locale[this.model.locale] === undefined || ej.Pager.locale[this.model.locale][property] === undefined) ? ej.Pager.locale["en-US"][property] : ej.Pager.locale[this.model.locale][property];
        },
        _setFirst: true,
        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "pageCount":
                        this._renderNumericLinks(this.element.find("#NumericContainer"));
                        break;
                }
            }
            this.refreshPager();
        },

        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            this.element.empty().removeClass("e-pager");
        }
    });
    ej.Pager.locale = {};
    ej.Pager.locale["en-US"] = {
        pagerInfo: "{0} of {1} pages ({2} items)",
        firstPageTooltip: "Go to first page",
        lastPageTooltip: "Go to last page",
        nextPageTooltip: "Go to next page",
        previousPageTooltip: "Go to previous page",
        nextPagerTooltip: "Go to next Pager",
        previousPagerTooltip: "Go to previous Pager"
    };

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Toolbar elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejToolbar", "ej.Toolbar", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _ignoreOnPersist: ["fields", "dataSource", "query", "create", "click", "itemHover", "itemLeave", "destroy"],
        _setFirst: false,

        _rootCSS: "e-toolbar",
        angular: {
            terminal: false
        },


        defaults: {

            height: "",

            width: "",

            enabled: true,

            hide: false,

            enableSeparator: false,

            orientation: "horizontal",

            enableRTL: false,

            isResponsive: false,

            showRoundedCorner: false,

            htmlAttributes: {},

            dataSource: null,

            query: null,

            fields: {

                id: "id",

                tooltipText: "tooltipText",

                imageUrl: "imageUrl",

                text: "text",

                imageAttributes: "imageAttributes",

                spriteCssClass: "spriteCssClass",

                htmlAttributes: "htmlAttributes",

                group: "group",
            },

            cssClass: "",

            create: null,

            click: null,

            itemHover: null,

            itemLeave: null,

            destroy: null

        },


        dataTypes: {
            enabled: "boolean",
            hide: "boolean",
            enableSeparator: "boolean",
            orientation: "enum",
            enableRTL: "boolean",
            showRoundedCorner: "boolean",
            isResponsive: "boolean",
            dataSource: "data",
            query: "data",
            fields: "data",
            cssClass: "string",
            htmlAttributes: "data"
        },



        hide: function () {
            if (!this.model.enabled && (this.element.css("display") == "none")) return false;
            this.element.css("display", "none");
        },

        show: function () {
            if (!this.model.enabled && (this.element.css("display") != "none")) return false;
            this.element.css("display", "block");
        },


        _init: function () {
            this._cloneElement = $(this.element).clone();
            if (this.model.dataSource != null) {
                this._generateTemplate();
            }
            (!(this.model.dataSource instanceof ej.DataManager)) && this._initialize();
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this.model.width = options[option];
                        this._setWidth();
                        this._bindUnbindWidth();
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "isResponsive":
                        this.model.isResponsive = options[option];
                        (this.model.isResponsive) ? this._responsiveLayout() : this._removeResponsive();
                        break;
                    case "hide":
                        this._controlVisibleOptions(options[option]);
                        break;
                    case "orientation":
                        this._setOrientation(options[option]);
                        break;
                    case "enableRTL":
                        this._enableRTL(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "htmlAttributes":
                        this._addAttr(options[option]);
                        break;
                    case "enableSeparator":
                        this.model.enableSeparator = options[option];
                        this._renderToolbarSeparator();
                        break;
                    case "fields":
                        $.extend(this.model.fields, options[option]);
                        break;
                    case "query":
                        this.model.query = options[option];
                        break;
                    case "dataSource":
                        for (optio in options) {
                            if (optio == "fields") $.extend(this.model.fields, options[optio]);
                            if (optio == "query") this.model.query = options[optio];
                        }
                        this._refreshTagItems(option, options[option]);
                        break;
                }
            }
        },
        _refreshTagItems: function (key, value) {
            this.model[key] = value;
            this.element.empty();
            this._generateTemplate();
            this._initialize();
        },

        _setHeight: function (val) {
            this.element.css('height', val);
        },

        _setWidth: function () {
            if (this.model.width == "auto") {
                var itemswidth = parseFloat(this.element.css('border-left-width')) + parseFloat(this.element.css('border-right-width')),
                listElement = this.element.find('ul').children('li'), listUl = this.element.find('ul'),
                resEle = this.element.find('.e-toolbar-res-arrow');
				for(var i=0, len = listUl.length; i < len; i++) {           // calculate separator width also
                    if (listUl[i] != null && $(listUl[i]).hasClass('e-separator'))
                        itemswidth += parseFloat(listUl.eq(i).css('border-right-width')) + parseFloat(listUl.eq(i).css('border-left-width'));
                }
                if (resEle[0] != null)
                    itemswidth += Math.round(this.element.find('.e-toolbar-res-arrow').outerWidth()) + 8; // 8px for position
                for (var i = 0, len = listElement.length; i < len; i++) {
                    if (listElement[i] != null)
                        itemswidth += Math.round(listElement.eq(i).outerWidth());
                }
                this.element.css("width", Math.ceil(itemswidth));
            } else
                this.element.css('width', this.model.width);
        },
        _bindUnbindWidth: function () {
            (this.model.width != "auto") ? this._off($(window), "resize", this._widthHandler) : this._on($(window), "resize", this._widthHandler);
        },
        _widthHandler: function (e) {
            this._setWidth(this.model.width);
        },

        _setOrientation: function (value) {
            if (value != ej.Orientation.Vertical) {
                this.element.removeClass(this.model.cssClass).addClass("e-toolbarspan " + this.model.cssClass);
                this.itemsContainer.removeClass("e-ul e-vertical").addClass("e-ul e-horizontal");
            }
            else {
                this.element.removeClass("e-toolbarspan " + this.model.cssClass).addClass(this.model.cssClass);
                this.itemsContainer.removeClass("e-ul e-horizontal").addClass("e-ul e-vertical");
            }
            this.items.addClass("e-tooltxt");
        },

        _reSizeHandler: function () {
            this._elementWidth = (typeof window.getComputedStyle == "function") ? parseFloat(window.getComputedStyle(this.element[0]).width) : this.element.width()-1; // -1 for IE8 get exact width of an element no border and margin
            if (this._isResized && this._liTemplte.children().length > 0) {
                $(this.element).append(this._liTemplte.children());
                this._renderToolbarSeparator();
                this._liTemplte.addClass("e-display-none");
                this._contstatus = false;
            }
            this._liWidth = this._spanWidth;
            this._spantag.removeClass("e-display-block").addClass("e-display-none");
            for (var i = 0; i < this.itemsContainer.length; i++) {
                this._liWidth += $(this.itemsContainer[i]).outerWidth(true);
                if (this._liWidth > this._elementWidth) {
                    if (!this._spantag.hasClass("e-display-block"))
                        this._spantag.removeClass("e-display-none").addClass("e-display-block");
                    this._spantag.addClass('e-res-pos');
                    this._liTemplte.append(this.itemsContainer[i]);
                }
            }
            this._isResized = true;
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popup);
        },
        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _btnMouseClick: function (e) {
            var args, btnpos, btnposx, btnposy, targetElement, poscur = 1;
            if (!$(e.currentTarget).hasClass("e-disable")) {
                /*Context Menu Functionality*///need to write enableRTL
                targetElement = $("#" + this.element[0].id + "_target");
                maxZ = this._getZindexPartial();
                btnpos = this._getOffset($("#" + this.element[0].id + "_target"));
                btnposx = btnpos.left - poscur;
                if ($(this._liTemplte).width() + btnposx > $(window).width())
                    btnposx = $(window).width() - $(this._liTemplte).width() - 3;
                btnposy = btnpos.top + this.element.outerHeight(true) - poscur + 2;
                if (this.model.enableRTL)
                    btnposx = btnposx + $("#" + this.element[0].id + "_target").outerWidth() - $(this._liTemplte).outerWidth();
                if (this._contstatus) {
                    this._liTemplte.addClass("e-display-none");
                    this._contstatus = false;
                } else {
                    this._liTemplte.removeClass("e-display-none")
                                   .css({ "top": btnposy + "px", "left": btnposx + "px", "z-index": maxZ });
                    this._contstatus = true;
                    this.element.bind("click", $.proxy(this._hidecontext, this));
                }
                if (this._contstatus)
                    this._on($(document), "mouseup", this._documentClick);
            }
        },

        _hidecontext: function (e) {
            if (!$(e.target).is($("#" + this.element[0].id + "_target"))) {
                this._liTemplte.addClass("e-display-none");
                this._contstatus = false;
                this.element.unbind("click", $.proxy(this._hidecontext, this));
                this._off($(document), "mouseup", this._documentClick);
            }
        },

        _documentClick: function (e) {
            if (!$(e.target).is($("#" + this.element[0].id + "_target")) && !($(e.target).closest("div#" + this.element[0].id + "_hiddenlist").length != 0 || $(e.target).parents().hasClass("e-ddl-popup"))) {
                this._liTemplte.addClass("e-display-none");
                this._contstatus = false;
                this._off($(document), "mouseup", this._documentClick);
            }
        },

        _setSkin: function (skin) {
            this.element.removeClass(this.model.cssClass).addClass(skin);
        },

        _destroy: function () {
            this.element.html("");
            this._cloneElement.removeClass('e-toolbar e-js');
            this.element.replaceWith(this._cloneElement);
            this._liTemplte && this._liTemplte.remove();
        },

        _initialize: function () {
            this.element.attr({ "role": "toolbar", "tabindex": "0" });
            var liList = this.element.children().find('li');
            this._focusEnable = true;
            this._renderControl();
            this._responsiveLayout();
            this._wireEvents();
        },
        _responsiveLayout: function () {
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.isResponsive && (this.model.orientation == "horizontal")) {
                this._spantag = $("<span id='" + this.element[0].id + "_target' class='e-icon e-toolbar-res-arrow e-rel-position e-display-block'></span>");
                this._spantag.appendTo(this.element);
                this._spanWidth = this._spantag.outerWidth(true) + 8; // 8px from right of span 
                this._liTemplte = $("<div id='" + this.element[0].id + "_hiddenlist' class='e-responsive-toolbar e-display-none e-abs-position " + $(this.element)[0].className + "'></div>");
                if (this.model.enableRTL) this._liTemplte.addClass('e-rtl');
                this._isResized = false;
                this._reSizeHandler();
                $('body').append(this._liTemplte);
            }
            this._on($("#" + this.element[0].id + "_target"), "mousedown", this._btnMouseClick);
            this._wireResizing();
            this._controlVisibleOptions(this.model.hide);
            this._enableRTL(this.model.enableRTL);
            this._controlStatus(this.model.enabled);
            this._setWidth();
        },
        _removeResponsive: function () {
            $(this._spantag).remove();
            var list = $(this._liTemplte).children('ul');
            $(this._liTemplte).remove();
            $(this.element).append(list);
            this.itemsContainer = this.element.children("ol,ul");
            this.items = this.itemsContainer.children('li');
            this._off(this.items, "mouseup");
            this._off(this.items, "mousedown");
            this._off(this.element);
            this._wireEvents();
            this._wireResizing();
            this._setWidth();
        },

        _controlVisibleOptions: function (value) {
            value != false ? this.hide() : this.show();
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _roundedCorner: function (value) {
            if (value) {
                this.element.addClass('e-corner');
                this._liTemplte && this._liTemplte.addClass('e-corner');
            } else {
                this.element.removeClass('e-corner');
                this._liTemplte && this._liTemplte.removeClass('e-corner');
            }
        },

        _generateTemplate: function () {
            var proxy = this, queryPromise;
            this.element.css("visibility", "hidden");
            if (this.model.dataSource instanceof ej.DataManager) {
                queryPromise = this.model.dataSource.executeQuery(this.model.query);
                queryPromise.done(function (e) {
                    proxy._generateGroup(e.result);
                    proxy._initialize();
                    proxy.element.css("visibility", "visible");
                });
            } else {
                proxy._generateGroup(proxy.model.dataSource);
                proxy.element.css("visibility", "visible");
            }
        },
        _generateGroup: function (value) {
            var proxy = this;
            var y = -1;
            var groupArray = [];
            for (var i = 0; i < value.length; i++) {
                if (this._isNewGroup(value[i].group, groupArray)) {
                    groupArray[++y] = value[i].group;
                    var index = -1;
                    proxy.itemsSource = [];
                    for (var x = i; x < value.length; x++) {
                        if (value[i].group == value[x].group) {
                            proxy.itemsSource[++index] = value[x];
                        }
                    }
                    proxy.element.append(proxy._generateTagitems());
                }
            }

        },
        _isNewGroup: function (value, group) {
            if (!group)
                return true;
            for (var i = 0; i < group.length; i++) {
                if (value == group[i])
                    return false;
            }
            return true;
        },


        _renderControl: function () {
            this.element.addClass("e-widget e-box");
            this._renderToolbarItems();
            this._addAttr(this.model.htmlAttributes);
            this._setOrientation(this.model.orientation);
            this._renderToolbarSeparator();
            this._setHeight(this.model.height);
            this._bindUnbindWidth();
        },

        _renderToolbarItems: function () {
            this.target = this.element[0];
            this.itemsContainer = this.element.children("ol,ul");
            this.itemsContainer.children("ol,ul").remove();
            this.items = this.itemsContainer.children('li');
            for (var i = 0; i < this.items.length; i++) {
                if (ej.isNullOrUndefined($(this.items[i]).attr("title")))
                    $(this.items[i]).attr("aria-label", this.items[i].id);
            }
            this._liCount = this.items.length;
        },

        _generateTagitems: function () {
            var list, i;
            list = this.itemsSource;
            this.ultag = ej.buildTag('ul');
            for (i = 0; i < list.length; i++) {
                this.ultag.append(this._generateLi(list[i]));
            }
            return this.ultag;
        },

        _generateLi: function (toolbarItem) {
            var litag, imgtag, divtag, i;
            litag = ej.buildTag('li');
            if (toolbarItem[this.model.fields.id])
                litag.attr('id', toolbarItem[this.model.fields.id]);
            else 
                (toolbarItem[this.model.fields.text]) && litag.attr('id', toolbarItem[this.model.fields.text]);
            if (toolbarItem[this.model.fields.tooltipText])
                litag.attr('title', toolbarItem[this.model.fields.tooltipText]);
            if ((toolbarItem[this.model.fields.imageUrl]) && (toolbarItem[this.model.fields.imageUrl] != "")) {
                //Creating the image tag
                imgtag = ej.buildTag('img.e-align', '', {}, { 'src': toolbarItem[this.model.fields.imageUrl], 'alt': toolbarItem[this.model.fields.text] });
                if (toolbarItem[this.model.fields.imageAttributes]) this._setAttributes(toolbarItem[this.model.fields.imageAttributes], imgtag);
                litag.append(imgtag);
            }
            if ((toolbarItem[this.model.fields.spriteCssClass]) && (toolbarItem[this.model.fields.spriteCssClass] != "")) {
                //Creating the Sprite image tag
                divtag = ej.buildTag('div.e-align ' + toolbarItem[this.model.fields.spriteCssClass] + ' e-spriteimg');
                litag.append(divtag);
            }
            if ((toolbarItem[this.model.fields.text]) && (toolbarItem[this.model.fields.text] != "")) {
                //Creating text Content inside the  tag
                litag.append(toolbarItem[this.model.fields.text]);
            }
            if (toolbarItem[this.model.fields.htmlAttributes]) this._setAttributes(toolbarItem[this.model.fields.htmlAttributes], litag);

            return litag;
        },


        _setAttributes: function (data, element) {
            for (var key in data) {
                $(element).attr(key, data[key]);
            }
        },

        _renderToolbarSeparator: function () {
            var i, len;
            if (this.model.enableSeparator) {
                for (i = 0, len = this.itemsContainer.length - 1; i < len; i++) {
                    $(this.itemsContainer[i]).addClass("e-separator");
                }
                if (this.model.enableRTL) {
                    if (this.itemsContainer.length == 1) {
                        for (i = 0, len = this.itemsContainer[0].children.length; i < len; i++) {
                            if (i == 0) $(this.itemsContainer[0].children[i]).removeClass("e-separator");
                            else if (!this.model.fields.group || !this.model.dataSource || !this.model.dataSource[i].group)
                                $(this.itemsContainer[0].children[i]).addClass("e-separator");
                        }
                    }
                }
                else {
                    if (this.itemsContainer.length == 1) {
                        for (i = 0, len = this.itemsContainer[0].children.length; i < len; i++) {
                            if (i == len - 1) $(this.itemsContainer[0].children[i]).removeClass("e-separator");
                            else if (!this.model.fields.group || !this.model.dataSource || !this.model.dataSource[i].group)
                                $(this.itemsContainer[0].children[i]).addClass("e-separator");
                        }
                    }
                }
            } else {
                this.itemsContainer.removeClass('e-separator').find('.e-separator').removeClass('e-separator');
            }
            this._setWidth();
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else proxy.element.attr(key, value)
            });
        },


        _enableRTL: function (value) {
            if (value) {
                this.element.addClass('e-rtl');
                this.items.addClass('e-comnrtl');
                if (this.model.orientation == ej.Orientation.Horizontal) {
                    this.itemsContainer.addClass('e-comnrtl');
                }
                if (this._liTemplte) this._liTemplte.addClass('e-rtl');
            } else {
                this.element.removeClass('e-rtl');
                this.items.removeClass('e-comnrtl');
                if (this.model.orientation == ej.Orientation.Horizontal) {
                    this.itemsContainer.removeClass('e-comnrtl');
                }
                if (this._liTemplte) this._liTemplte.removeClass('e-rtl');
            }
            this.model.enableRTL = value;
            this._renderToolbarSeparator();
        },

        _addOverlay: function (element) {
            for (var i = 0; i < element.length; i++) {
                if (!$(element[i]).hasClass('e-disable')) {
                    $(element[i]).addClass('e-disable');
                    var ele = ej.buildTag("div.e-item-overlay");
                    $(element[i]).append(ele);
                }
            }
        },
        _removeOverlay: function (element) {
            for (var i = 0; i < element.length; i++) {
                $(element[i]).children(".e-item-overlay").remove();
            }
        },



        disableItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            if (!current.hasClass("e-disable")) {
                current.attr("aria-disabled", true).removeAttr("aria-label");
                this._addOverlay(current);
            }
            current.removeClass("e-hover e-active").attr("aria-selected", false);
        },


        enableItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.removeClass("e-disable").attr("aria-disabled", false).removeClass('e-disable');
            this._removeOverlay(current);
        },


        disableItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.disableItem(lielement);
        },

        enableItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.enableItem(lielement);
        },

        disable: function () {
            if (this.element.attr("aria-disabled") == "true") return false;
            this.element.attr("aria-disabled", true).removeAttr("aria-label");
            this._addOverlay(this.items);
            if (this.model.isResponsive && (this.model.orientation == "horizontal"))
                this._spantag.addClass("e-disable");
            this.model.enabled = false;
        },


        enable: function () {
            if (this.element.attr("aria-disabled") == "false") return false;
            this.items.removeClass("e-disable");
            this._removeOverlay(this.items);
            this.element.attr("aria-disabled", false);
            if (this.model.isResponsive && (this.model.orientation == "horizontal"))
                this._spantag.removeClass("e-disable");
            this.model.enabled = true;
        },


        selectItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.addClass("e-active").attr("aria-selected", true);
            this._activeItem = $(this.items).index(current);
        },


        deselectItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.removeClass("e-active").attr("aria-selected", false);
        },

        selectItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.selectItem(lielement);
        },


        deselectItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.deselectItem(lielement);
        },


        removeItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.remove();
            this.items = this.itemsContainer.children('li');
        },


        removeItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.removeItem(lielement);
        },
        _wireResizing: function () {
            (this.model.isResponsive && (this.model.orientation == "horizontal")) ? $(window).bind('resize', $.proxy(this._reSizeHandler, this)) : $(window).unbind('resize', $.proxy(this._reSizeHandler, this))
        },


        _wireEvents: function () {
            this._on(this.element, "mousedown", this._clickEventHandler);
            this._on(this.element, "focus", this._focusElement);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.items, "mouseenter", this._onItemHover);
            this._on(this.items, "mouseleave", this._onItemLeave);
            this._on(this.items, "mousedown", this._onItemClick);
            this._on(this.items, "mouseup", this._onItemClick);
        },

        _onItemHover: function (e) {
            var currentItem = $(e.currentTarget), targetItem = e.target;
            if (!currentItem.hasClass("e-disable")) {
                this.items.removeClass("e-hover");
                currentItem.addClass("e-hover");
                args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled };
                this._trigger("itemHover", args);
            }
        },

        _onItemClick: function (e) {
            if ($(e.currentTarget).hasClass('e-disable')) return false;
            var currentItem = e.currentTarget, targetItem = e.target;
            if (e.type == "mousedown") {
                this._focusEnable = false;
                $(currentItem).addClass('e-active');
                this._currentItem = $(currentItem);
            }
            else if (e.type == "mouseup") {
                this._removeSelection();
                if (!$(currentItem).hasClass("e-disable")) {
                    args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled, event: e };
                    if (this.model.isResponsive && this._contstatus && $(currentItem).closest('.e-responsive-toolbar').length > 0)
                        this._activeItem = this._liTemplte.find('.e-tooltxt').index(currentItem);
                    else
                        this._activeItem = $(this.items).index(currentItem);
                    this._trigger("click", args);
                }
            }
        },

        _onItemLeave: function (e) {
            var currentItem = $(e.currentTarget), targetItem = e.target;
            if (!currentItem.hasClass("e-disable")) {
                this._removeSelection();
                currentItem.removeClass("e-hover");
                args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled };
                this._trigger("itemLeave", args);
            }
        },

        _OnKeyDown: function (e) {
            this._focusEnable = true;
            this.e = e;
            var itemsLength, action = false;
            if (this.model.isResponsive && this._liTemplte.find('.e-tooltxt').length > 0) {
                this._keyPressed = true;
                this._items = (this._contstatus) ? this._liTemplte.find('.e-tooltxt') : this.element.find('.e-tooltxt');
                itemsLength = this._items.length - 1;
            } else {
                itemsLength = this.items.length - 1;
                this._keyPressed = false;
            }
            switch (e.keyCode) {
                case 33:
                case 36:
                case 38:
                case 39:
                    e.preventDefault();
                    if (e.keyCode == 33 || e.keyCode == 36)
                        this._activeItem = 0;
                    else {
                        if (this._activeItem > itemsLength - 1)
                            this._activeItem = 0;
                        else
                            this._activeItem += 1;
                    }
                    var _currentItem = (this._activeItem == 0) ? itemsLength : (this._activeItem - 1);
                    for (var i = this._activeItem; i != _currentItem; i++) {
                        if (this._getActiveItem().hasClass('e-disable') || this._getActiveItem().is(':hidden')) {
                            if (this._activeItem == itemsLength)
                                this._activeItem = 0;
                            else
                                this._activeItem += 1;
                        }
                        else
                            break;
                    }
                    action = true;
                    break;
                case 34:
                case 35:
                case 37:
                case 40:
                    e.preventDefault();
                    if (e.keyCode == 34 || e.keyCode == 35)
                        this._activeItem = itemsLength;
                    else {
                        if (this._activeItem <= 0)
                            this._activeItem = itemsLength;
                        else
                            this._activeItem -= 1;
                    }
                    var _currentItem = (this._activeItem == itemsLength) ? 0 : (this._activeItem + 1);
                    for (var i = this._activeItem; i != _currentItem; i--) {
                        if (this._getActiveItem().hasClass('e-disable') || this._getActiveItem().is(':hidden')) {
                            if (this._activeItem == 0)
                                this._activeItem = itemsLength;
                            else
                                this._activeItem -= 1;
                        }
                        else
                            break;
                    }
                    action = true;
                    break;
                case 13:
                case 32:
                    break;
            }
            if (action) {
                this._removeListHover();
                this._addListHover();
            }
        },

        _OnKeyUp: function (e) {
            this.e = e;
            var itemsLength = this.items.length;
            switch (e.keyCode) {
                case 33:
                case 35:
                case 34:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                    break;
                case 13:
                case 32:
                    if ($(e.target).is("div"))
                        var currentItem = this._getActiveItem(), targetItem = currentItem;
                    else
                        var currentItem = $(e.target).closest("li"), targetItem = e.target;
                    if (!$(currentItem).hasClass("e-disable")) {
                        args = { currentTarget: currentItem[0], target: $(targetItem)[0], status: this.model.enabled, event: this.e };
                        this._trigger("click", args);
                        this._removeListHover();
                    }
                    break;
                case 27:
                    this.element.focusout();
                    this._removeListHover();
                    break;
                case 9:
                    this._activeItem = 0;
                    if (this._getActiveItem().hasClass('e-disable') || this._getActiveItem().is(':hidden')) {
                        this._activeItem = $(this.items).filter('li:not([class*="e-disable"])').first().index();
                    }
                    this._addListHover();
                    break;
            }
        },

        _removeListHover: function () {
            $(this.items).removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = this._getActiveItem();
            if (!activeItem.hasClass('e-disable'))
                activeItem.addClass("e-hover").focus();
        },

        _getActiveItem: function () {
            if (this.model.isResponsive && this._keyPressed)
                return $(this._items[this._activeItem]);
            else
                return $(this.items[this._activeItem]);
        },

        _targetBlur: function (e) {
            e.preventDefault();
            this.element.focusout().removeClass("e-focus");
            this._removeListHover();
            this._off(this.element, "keyup", this._OnKeyUp);
            this._off(this.element, "keydown", this._OnKeyDown);
            this._trigger("focusOut");
            (this._contstatus) && this._focusElement(); // rebind the keyevents when responsive
        },

        _clickEventHandler: function (e) {
            this._clicked = true;
        },

        _removeSelection: function() {
            (this._currentItem && this._currentItem.attr("aria-selected") != "true") && this._currentItem.removeClass('e-active');
        },

        _focusElement: function (e) {
            this.element.addClass("e-focus");
            this._on(this.element, "keyup", this._OnKeyUp);
            this._on(this.element, "keydown", this._OnKeyDown);
            if (!this._focusEnable) {
                this._focusEnable = true;
                return;
            }
            this._removeListHover();
            if (!this._activeItem || this._activeItem <= 0)
                this._activeItem = (this._clicked) ? -1 : 0;
            if (this._getActiveItem().hasClass('e-disable'))
                this._activeItem = $(this.items).filter('li:not([class*="e-disable"])').first().index();
            this._addListHover();
        },
    });

})(jQuery, Syncfusion);


;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.common = {
        
        refreshContent: function (refreshTemplate) {
            refreshTemplate && this.refreshTemplate();
            var args = {};
            this._initialRenderings();
            args.requestType = ej.Grid.Actions.Refresh;
            this._processBindings(args);
        },

        
        rowHeightRefresh: function () {
            if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.model.currentViewData) && this.model.currentViewData.length) {
                var frozenRows = this.getContentTable().get(0).rows;
                var movableRows = this.getContentTable().get(1).rows, height = 0;
                for (var i = 0; i < frozenRows.length; i++) {
                    if ($(frozenRows[i]).css("display") == "none")
                        continue;
                    height = ej.max([frozenRows[i].getClientRects()[0].height, movableRows[i].getClientRects()[0].height]);
                    $(frozenRows[i]).height(height); $(movableRows[i]).height(height);
                    if (i && (i == this.model.scrollSettings.frozenRows - 1 || i == frozenRows.length - 1))
                        height = height + 1;
                    if (!this.model.allowTextWrap) {
                        if (!i || i == this.model.scrollSettings.frozenRows - 1)
                            height = height - 1;
                    }
                    if (this.model.isEdit && $(frozenRows[i]).find("#" + this._id + "EditForm").length && i)
                        $(frozenRows[i]).find("#" + this._id + "EditForm td").css("height", height); $(movableRows[i]).find("#" + this._id + "EditForm td").css("height", height);
                }
                this._getRowHeights()
                if (this.getScrollObject()._vScrollbar != null) {
                    var scroller = this.getScrollObject()._vScrollbar;
                    if (scroller.value() != scroller.model.maximum)
                        this.getContent().ejScroller("refresh");
                }

            }
        },
                
        dataSource: function (dataSource, templateRefresh) {
            if (templateRefresh)
                this._templateRefresh = true;
            this._dataSource(dataSource);
            if (dataSource.length > 0)
                this._currentPage(1);
            else
                this._currentPage(0);
            this._refreshDataSource(dataSource);
            var model = this._refreshVirtualPagerInfo();
            this._showPagerInformation(model)
            if (this.model.scrollSettings.allowVirtualScrolling) {
                this._refreshVirtualContent(); 
                if (this.getContent().ejScroller("isHScroll"))
                    this.getContent().ejScroller("scrollX", 0, true);
                if (this.getContent().ejScroller("isVScroll")) {
                    this.getContent().ejScroller("scrollY", 0, true);
                    this.element.find(".e-gridheader").addClass("e-scrollcss");
                }
                else
                    this.element.find(".e-gridheader").removeClass("e-scrollcss");
            }
            this._addLastRow();
        },
        _refreshDataSource: function (dataSource) {
            if (dataSource instanceof ej.DataManager)
                this._dataManager = dataSource;
            else
                this._dataManager = ej.DataManager(dataSource);
            this._isLocalData = (!(this._dataSource() instanceof ej.DataManager) || (this._dataManager.dataSource.offline || this._isRemoteSaveAdaptor));
            this.refreshContent(true);
            if (!ej.isNullOrUndefined(this.getPager())) {
                this.getPager().ejPager("model.currentPage", 1);
                this._refreshGridPager();
            }
        },
        
        hideColumns: function (c) {
            var i, count = 0, args = {}, index, colIndex, newHideCol = []; var htext, field;
            htext = typeof (c) == "string" ? this.getColumnByHeaderText(c) : this.getColumnByHeaderText(c[0]);
            field = typeof (c) == "string" ? this.getColumnByField(c) : this.getColumnByField(c[0]);
            
            var duparr = this._isDuplicate($.merge($.merge([], this._visibleColumns), this._hiddenColumns));
            var hidden = !duparr ? "_hiddenColumns" : "_hiddenColumnsField";
            var visible = !duparr ? "_visibleColumns" : "_visibleColumnsField";
            if (!duparr && field != null) {
                if ($.isArray(c)) {
                    for (var i = 0; i < c.length; i++) {
                        var cfield = this.getColumnByField(c[i]);
                        c[i] = cfield != null ? cfield.headerText : c[i];
                    }
                }
                else
                    c = field.headerText;
            }
            if ($.isArray(c)) {
                for (i = 0; i < c.length; i++) {
                    index = $.inArray(c[i], this[visible]);
                    
                    if (index != -1) {
                        this[hidden].push(c[i]);
                        this[visible].splice(index, 1);
                    }
					else if(index==-1 && visible=="_visibleColumnsField" && $.inArray(c[i],this[hidden])==-1 && ej.isNullOrUndefined(this.getColumnByField(c[i]))){
						this[hidden].push(this.getColumnByHeaderText(c[i]).field) && this["_hiddenColumns"].push(this.getColumnByHeaderText(c[i]).field)
						this[visible].splice($.inArray(this.getColumnByHeaderText(c[i]).field, this[visible]),1) && this["_visibleColumns"].splice($.inArray(c[i], this["_visibleColumns"]),1)
					}
                }
            } else {
                index = $.inArray(c, this[visible]);
                if (index != -1) {
                    this[hidden].push(c);
                    this[visible].splice(index, 1);
                }
				else if(index==-1 && visible=="_visibleColumnsField" && $.inArray(c,this[hidden])==-1 && ej.isNullOrUndefined(this.getColumnByField(c))){
						this[hidden].push(this.getColumnByHeaderText(c).field) && this["_hiddenColumns"].push(this.getColumnByHeaderText(c).field)
						this[visible].splice($.inArray(this.getColumnByHeaderText(c).field, this[visible]),1) && this["_visibleColumns"].splice($.inArray(c, this["_visibleColumns"]),1)
				}
            }
            for (i = 0; i < this.model.columns.length; i++) {
                var com = !duparr ? "headerText" : "field";
                if ($.inArray(ej.isNullOrUndefined(this.model.columns[i][com]) || this.model.columns[i][com] == "" ? this.model.columns[i]["headerText"] : this.model.columns[i][com], this[hidden]) != -1) {
                    this.model.columns[i].visible && newHideCol.push(this.model.columns[i]);
                    this.model.columns[i].visible = false;
                    count++;
                }
                if (this[hidden].length == count)
                    break;
            }
            args.requestType = "refresh";
            this._hideHeaderColumn(this[hidden], duparr);
            if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
                var frozenHide = false;
                for (var i = 0; i < newHideCol.length; i++) {
                    var index = this.model.columns.indexOf(newHideCol[i]);
                    if (index < this.model.scrollSettings.frozenColumns) {
                        this.model.scrollSettings.frozenColumns++;
                        frozenHide = true;
                    }
                }
                if (frozenHide) {
                    var $table = this._renderGridHeader();
                    this.element.find('.e-gridheader').replaceWith($table[0])
                    if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") this._renderFiltering();
                }
            }
            this.refreshTemplate();
            if (this.model.scrollSettings.allowVirtualScrolling)
                this._virtualShowHide(args);
            this.sendDataRenderingRequest(args);
            this.rowHeightRefresh();
            if (this.model.allowScrolling) {
                if (this.model.scrollSettings.frozenColumns == 0) {
                    var tableWidth = this._calculateWidth();
                    this.getHeaderTable().width(tableWidth);
                    this.getContentTable().width(tableWidth);
                }
                this.getScrollObject().refresh();
            }
            if (this.model.showColumnChooser)
                this._refreshColumnChooserList();
        },
        
        showColumns: function (c) {
            var i, count = 0, args = {}, index, colIndex, column, newVisColumns = []; var htext, field;
            htext = typeof (c) == "string" ? this.getColumnByHeaderText(c) : this.getColumnByHeaderText(c[0]);
            field = typeof (c) == "string" ? this.getColumnByField(c) : this.getColumnByField(c[0]);
            
            var duparr = this._isDuplicate($.merge($.merge([], this._visibleColumns), this._hiddenColumns));//updated for
            var hidden = !duparr ? "_hiddenColumns" : "_hiddenColumnsField";
            var visible = !duparr ? "_visibleColumns" : "_visibleColumnsField";
            if (!duparr && field != null) {
                if ($.isArray(c)) {
                    for (var i = 0; i < c.length; i++) {
                        var cfield = this.getColumnByField(c[i]);
                        c[i] = cfield != null ? cfield.headerText : c[i];
                    }
                }
                else
                    c = field.headerText;
            }
            if ($.isArray(c)) {
                for (i = 0; i < c.length; i++) {
                    index = $.inArray(c[i], this[hidden]);
                    
                    if (index != -1) {
                        this[hidden].splice(index, 1);
                        this[visible].push(c[i]);
                    }
					else if(index==-1 && hidden=="_hiddenColumnsField" && $.inArray(c[i],this[visible])==-1 && ej.isNullOrUndefined(this.getColumnByField(c[i]))){
						this[visible].push(this.getColumnByHeaderText(c[i]).field) && this["_visibleColumns"].push(c[i])
						this[hidden].splice($.inArray(this.getColumnByHeaderText(c[i]).field, this[hidden]),1) && this["_hiddenColumns"].splice($.inArray(c[i], this["_hiddenColumns"]),1)
					}
                }
            } else {
                index = $.inArray(c, this[hidden]);
                if (index != -1) {
                    this[hidden].splice(index, 1);
                    this[visible].push(c);
                }
				else if(index==-1 && hidden=="_hiddenColumnsField" && $.inArray(c,this[visible])==-1 && ej.isNullOrUndefined(this.getColumnByField(c))){
					this[visible].push(this.getColumnByHeaderText(c).field) && this["_visibleColumns"].push(c)
					this[hidden].splice($.inArray(this.getColumnByHeaderText(c).field, this[hidden]),1) && this["_hiddenColumns"].splice($.inArray(c, this["_hiddenColumns"]),1)
				}
            }
            for (i = 0; i < this.model.columns.length; i++) {
                var com = !duparr ? "headerText" : "field";
                if ($.inArray(ej.isNullOrUndefined(this.model.columns[i][com]) || this.model.columns[i][com] == "" ? this.model.columns[i]["headerText"] : this.model.columns[i][com], this[visible]) != -1) {
                    !this.model.columns[i].visible && newVisColumns.push(this.model.columns[i])
                    this.model.columns[i].visible = true;
                    count++;
                }
                if (this[visible].length == count)
                    break;
            }


            if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
                var frozenHide = false;
                for (var i = 0; i < newVisColumns.length; i++) {
                    var index = this.model.columns.indexOf(newVisColumns[i]);
                    if (index < this.model.scrollSettings.frozenColumns) {
                        this.model.scrollSettings.frozenColumns--;
                        frozenHide = true;
                    }
                }
                if (frozenHide) {
                    var $table = this._renderGridHeader();
                    this.element.find('.e-gridheader').replaceWith($table[0])
                    if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") this._renderFiltering();
                }
            }

            args.requestType = "refresh";
            this._showHeaderColumn(this[visible], duparr);

            this.refreshTemplate();
            if (this.model.scrollSettings.allowVirtualScrolling)
                this._virtualShowHide(args);
            this.sendDataRenderingRequest(args);
            this.rowHeightRefresh();
            if (this.model.allowScrolling) {
                this.getScrollObject().refresh();
            }
            if (this.model.showColumnChooser)
                this._refreshColumnChooserList();
        },
        _virtualShowHide: function (args) {
            this._currentPage(1);
            this.model.query = this.model.enablePersistence ? new ej.Query() : this.commonQuery.clone();
            this._ensureDataSource(args);
            this._loadedJsonData = [];
            this._prevPage = this._currentPage();
        },
        
        resizeColumns: function (column, width) {
            if (column instanceof Array) {
                for (var i = 0; i < column.length; i++) {
                    var colWidth = width instanceof Array ? width[i] : width;
                    this._setWidthColumnCollection(column[i], colWidth);
                }
            }
            else
                this._setWidthColumnCollection(column, width);
            this.setWidthToColumns();
        },
        _setWidthColumnCollection: function (column, width) {
            var col = this.getColumnByHeaderText(column) || this.getColumnByField(column);
            col.width = width;
            if ($.inArray(col.field, this._disabledResizingColumns) == -1)
                this.columnsWidthCollection[$.inArray(col, this.model.columns)] = width;
        },
        
        refreshTemplate: function () {
            this.addInitTemplate();
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                if (this.model.editSettings.editMode == "normal")
                    this.addEditingTemplate();
                else if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ||
                    this.model.editSettings.editMode == "inlineform")
                    this.addDialogEditingTemplate();
                else if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate" ||
                    this.model.editSettings.editMode == "inlineformtemplate")
                    this.addExternalDialogEditingTemplate();
            }
            if (this.model.allowGrouping) this.addGroupingTemplate();
        },
        set_dropColumn: function (from, to) {
            if (this.model.allowReordering && from != to) {
                this.model.columns.splice(to, 0, this.model.columns.splice(from, 1)[0]);
                var columns = this.model.columns;
                var $header = this.getHeaderTable().find(".e-headercell").not(".e-stackedHeaderCell");
                var $headerCell = $header.find(".e-headercelldiv");
                if (!this.model.scrollSettings.frozenColumns)
                    this.getHeaderTable().find("colgroup").replaceWith(this._getMetaColGroup());
                (this.model.detailsTemplate != null || this.model.childGrid != null) && this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());

                //Remove and Returns name/value pair of element attributes
                var removeAttr = function (ele) {
                    var names = []; if (ele == undefined) return;
                    if (["", undefined].indexOf(ele.value) == -1) {
                        names.push({ name: "value", value: ele.value }); ele.value = "";
                    }
                    for (var e = 0, eAttr = ele.attributes, eLen = eAttr.length; e < eLen; e++) {
                        var regex = /^jQuery[0-9]+$/;
                        !eAttr[e].name.match(regex) && names.push({ name: eAttr[e].name, value: eAttr[e].value });
                    }
                    for (var a = 0, aLen = names.length; a < aLen; a++) {
                        $(ele).removeAttr(names[a].name);
                    }
                    return names;
                };
                //Add attributes to the ele
                var addAttr = function (coll, ele) {
                    if (ele == undefined) return;
                    for (var e = 0, eLen = coll.length; e < eLen; e++) {
                        if (coll[e].name == "value") ele.value = coll[e].value;
                        $(ele).attr(coll[e].name, coll[e].value);
                    }
                };

                if (this.getHeaderTable().find(".e-filterdiv").length > 0)
                    var $filterCell = this.getHeaderTable().find(".e-filterdiv input");
                var $fState = ej.isNullOrUndefined($filterCell);
                var $attributeCollection = { "cellattributes": [], "headerattributes": [], "filtercellattributes": [], "filterThattributes": [] };
                var fromIndex = from < to ? from : to;
                var toIndex = from < to ? to : from;
                
                for (var i = fromIndex, j = 0; i <= toIndex; i++) {
                    var hIndx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? i + 1 : i;
                    $attributeCollection.headerattributes[j] = removeAttr($header[hIndx]);
                    $attributeCollection.cellattributes[j] = removeAttr($headerCell[i]);
                    $attributeCollection.filtercellattributes[j] = !$fState ? removeAttr($filterCell[i]) : [];
                    $attributeCollection.filterThattributes[j] = !$fState ? removeAttr($($filterCell[i]).closest("th")[0]) : [];
                    j++;
                }

                var spliceFrom = from < to ? $attributeCollection.cellattributes.length - 1 : 0;
                var spliceTo = from < to ? 0 : $attributeCollection.cellattributes.length - 1;

                for (var prop in $attributeCollection)
                    $attributeCollection[prop].splice(spliceFrom, 0, $attributeCollection[prop].splice(spliceTo, 1)[0]);

                
                for (var i = fromIndex, j = 0; i <= toIndex; i++) {
                    var indx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? i + 1 : i;
                    addAttr($attributeCollection.headerattributes[j], $header[indx]);
                    addAttr($attributeCollection.cellattributes[j], $headerCell[i]);
                    !$fState && addAttr($attributeCollection.filtercellattributes[j], $filterCell[i]);
                    !$fState && addAttr($attributeCollection.filterThattributes[j], $($filterCell[i]).closest("th")[0]);
                    j++;
                }
                if (this.model.allowFiltering && ["menu", "excel"].indexOf(this.model.filterSettings.filterType) != -1) {
                    var col = this.model.columns;
                    $header.find(".e-filtericon").remove();
                    for (var i = 0; i < col.length; i++) {
                        if (col[i]["allowFiltering"] || ej.isNullOrUndefined(col[i]["allowFiltering"])) {
                            var filterHeader = $header.find(".e-headercelldiv[ej-mappingname=" + col[i].field + "]").closest(".e-headercell")
                            filterHeader.append(ej.buildTag('div.e-filtericon e-icon e-filterset'));
                        }
                    }
                    this._refreshFilterIcon();
                }

                this.columnsWidthCollection.splice(to, 0, this.columnsWidthCollection.splice(from, 1)[0]);
                var headerCell;
                this._fieldColumnNames = this._headerColumnNames = [];
                for (var count = 0; count < columns.length; count++) {
                    this._fieldColumnNames[columns[count].headerText] = columns[count].field;
                    this._headerColumnNames[columns[count].field] = columns[count].headerText;
                    headerCell = $($headerCell[count]);
                    if (!ej.isNullOrUndefined(columns[count].headerTemplateID))
                        headerCell.html($(columns[count]["headerTemplateID"]).html());
                    else
                    headerCell.text(columns[count].headerText);
                    if (this.model.groupSettings.showToggleButton && (ej.isNullOrUndefined(columns[count].allowGrouping) || columns[count].allowGrouping)) {
                        if ($.inArray(columns[count].field, this.model.groupSettings.groupedColumns) != -1)
                            headerCell.append(this._getToggleButton().addClass("e-toggleungroup"));
                        else
                            headerCell.append(this._getToggleButton().addClass("e-togglegroup"));
                    }
                }
                if (this.model.allowGrouping && this.model.allowSorting != true) {
                    for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                        this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
                }
                if (this.model.allowSorting) {
                    for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                        var opacity = 1;
                        var $sCol = this.model.sortSettings.sortedColumns[i];
                        var sortcolumn = this.getsortColumnByField($sCol.field);
                        var index = this.getColumnIndexByField($sCol.field);
                        var sortindex = $.inArray(sortcolumn, this.model.sortSettings.sortedColumns);
                        imageDirection = $sCol.direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
                        if (this.model.allowMultiSorting) {
                            for (var j = 1; j <= sortindex; j++) {
                                opacity = opacity + 1;
                            }
                            if ($headerCell.eq(index).css("text-align") == "right") {
                                if(this.model.sortSettings.sortedColumns.length > 1)
                                    $headerCell.eq(index).prepend(this._createSortNumber(opacity, $headerCell.eq(index)).addClass("e-sortnumber"));
                                $headerCell.eq(index).append(this._createSortElement().addClass("e-" + ($sCol.direction || "ascending") + " " + imageDirection));
                            }
                            else {
                                $headerCell.eq(index).append(this._createSortElement().addClass("e-" + ($sCol.direction || "ascending") + " " + imageDirection));
                                if (this.model.sortSettings.sortedColumns.length > 1)
                                    $headerCell.eq(index).append(this._createSortNumber(opacity, $headerCell.eq(index)).addClass("e-sortnumber"));
                            }
                        }
                        else {
                            imageDirection = $sCol.direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
                            $headerCell.eq(index).append(this._createSortElement().addClass("e-" + ($sCol.direction || "ascending") + " " + imageDirection));
                        }
                    }
                }
                var args = {};
                args.requestType = ej.Grid.Actions.Reorder;
                this.refreshTemplate();
                this.sendDataRenderingRequest(args);
            }
        },
        
        getPager: function () {
            return this._gridPager;
        },
        
        getFooterTable: function () {
            return this._gridFooterTable;
        },

        setGridFooterTable: function (value) {
            this._gridFooterTable = value;
        },
        
        getFooterContent: function () {
            return this._gridFooterContent;
        },

        setGridFooterContent: function (value) {
            this._gridFooterContent = value;
        },
        
        getScrollObject: function () {
            if (this._scrollObject == null || ej.isNullOrUndefined(this._scrollObject.model))
                this._scrollObject = this.getContent().ejScroller("instance");
            return this._scrollObject;
        },
        setGridPager: function (value) {
            this._gridPager = value;
        },
        
        getRowHeight: function () {
            var rowHeight = -1;
            var trColl = this.getContentTable().find('tr:not(.e-virtualrow)'), index = trColl.length > 2 ? 1 : 0;
            var $trBound = trColl[index].getBoundingClientRect();
            if (trColl.length > 1) {
                if ($trBound && $trBound.height) {
                    rowHeight = $trBound.height;
                } else
                    rowHeight = trColl[index].offsetHeight;
            }
            return rowHeight == -1 ? 32 : rowHeight;
        },
        
        getCurrentIndex: function () {
            return ((this._currentPage() - 1) * (this.model.pageSettings.pageSize));
        },
        
        getColumnByIndex: function (index) {
            if (index < this.model.columns.length)
                return this.model.columns[index];
            return null;
        },
        set_currentPageIndex: function (val) {
            var pageSetting = this.model.pageSettings;
            var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
            if (pageSetting.totalPages == null)
                pageSetting.totalPages = Math.ceil(recordCount / pageSetting.pageSize);
            if (val > pageSetting.totalPages || val < 1 || val == this._currentPage())
                return false;
            if (ej.isNullOrUndefined(this._prevPageNo))
                this._prevPageNo = this._currentPage();
            this._currentPage(val);
            if (this._currentPage() != this._prevPageNo) {
                var args = {};
                args.requestType = "paging";
                this.gotoPage(this._currentPage(), args);
                return true;
            }
            else
                return false;
        },
        
        expandCollapse: function ($target) {
            if ($target.prop("tagName") == "DIV" && ($target.parent().hasClass("e-recordplusexpand") || $target.parent().hasClass("e-recordpluscollapse") || $target.parent().hasClass("e-detailrowcollapse") || $target.parent().hasClass("e-detailrowexpand")))
                $target = $target.parent();
            var index = -1, fieldName, fieldvalue, parentGroup, collapsed;
            if (this.model.allowGrouping && (ej.isOnWebForms || this.initialRender)) {
                fieldName = $target.attr("ej-mappingname");
                fieldValue = $target.attr("ej-mappingvalue");
                if ($target.parents(".e-tabletd").length)
                    parentGroup = $target.parents(".e-tabletd").parent("tr").prev("tr").find(".e-recordplusexpand").attr("ej-mappingvalue");
                collapsed = this.model._groupingCollapsed;
                for (var i = 0; i < collapsed.length; i++) {
                    if (collapsed[i].key == fieldName && collapsed[i].value == fieldValue && (collapsed[i].parent == undefined || collapsed[i].parent == parentGroup)) {
                        index = i;
                        break;
                    }
                }
            }
            if (!($target.hasClass("e-recordplusexpand") || $target.hasClass("e-recordpluscollapse") || $target.hasClass("e-detailrowcollapse") || $target.hasClass("e-detailrowexpand")))
                return;
            if ($target.hasClass("e-recordplusexpand") && this.model.groupSettings.groupedColumns.length) {
                var cellIndex = $target.index();
                var $rows = $target.closest('tr').next();
                $rows.hide();
                $target.removeClass("e-recordplusexpand").addClass("e-recordpluscollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
                if ((ej.isOnWebForms || this.initialRender) && index == -1)
                    this.model._groupingCollapsed.push({ key: fieldName, value: fieldValue, parent: parentGroup })
            } else if ($target.hasClass("e-recordpluscollapse") && this.model.groupSettings.groupedColumns.length) {
                var cellIndex = $target.index();
                var $rows = $target.closest('tr').next();
                var toExpandRows = [];
                var $row = $rows;
                if ($($row[0].cells[cellIndex]).hasClass("e-indentcell")) {
                    if ($row.children(".e-indentcell").length == ($target.parent().children('.e-indentcell').length) + 1) {
                        $row.show();
                        var $expand = $row.children(".e-recordplusexpand");
                        if ($expand != null && $expand.length > 0) {
                            toExpandRows.push($expand);
                        }
                    }
                }
                $target.removeClass("e-recordpluscollapse").addClass("e-recordplusexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                for (var i = 0; i < toExpandRows.length; i++) {
                    toExpandRows[i].removeClass("e-recordplusexpand").addClass("e-recordpluscollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
                    this.expandCollapse(toExpandRows[i]);
                }
                if ((ej.isOnWebForms || this.initialRender) && index != -1)
                    this.model._groupingCollapsed.splice(index, 1);
            } else if ($target.hasClass("e-detailrowexpand")) {
                var cellIndex = $target.index(), proxy = this;
                var rowIndexValue;
                if (this.model.groupSettings.groupedColumns.length > 0)
                    rowIndexValue = this.getIndexByRow($target.closest('tr')) - $target.closest('tr').parents('tr').prevAll('tr').find('td.e-summaryrow').parent().length;
                else
                    rowIndexValue = this.getIndexByRow($target.closest('tr'));
                var $rows = $target.closest('tr').next();
                $rows.hide(0, function () {
                    var args = { masterRow: $target.closest('tr'), detailsRow: $rows, masterData: proxy._currentJsonData[rowIndexValue] };
                    var foreignKeyData = proxy._getForeignKeyData(args.masterData);
                    if (!ej.isNullOrUndefined(foreignKeyData))
                        args.foreignKeyData = foreignKeyData;
                    proxy._trigger("detailsCollapse", args);
                    proxy.model.childGrid != null && proxy.model.allowScrolling && proxy._refreshScroller({ requestType: "refresh" });
                });
                $target.removeClass("e-detailrowexpand").addClass("e-detailrowcollapse").find("div").addClass("e-gnextforward").removeClass("e-gdiagonalnext");
            } else if ($target.hasClass("e-detailrowcollapse")) {
                var cellIndex = $target.index(), proxy = this;
                var rowIndexValue;
                if (this.model.groupSettings.groupedColumns.length > 0)
                    rowIndexValue = this.getIndexByRow($target.closest('tr')) - $target.closest('tr').parents('tr').prevAll('tr').find('td.e-summaryrow').parent().length;
                else
                    rowIndexValue = this.getIndexByRow($target.closest('tr'));
                var detailrow = $target.closest('tr').next();
                if (detailrow.hasClass("e-detailrow"))
                    $rows = detailrow;
                else {
                    var detailtr = ej.buildTag("tr.e-detailrow", "", { 'display': 'none' }, {});
                    var indenttd = ej.buildTag("td.e-detailindentcell");
                    var hideGroupColumnCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                    var detailstd = ej.buildTag("td.e-detailcell", "", {}, { colspan: this._visibleColumns.length - hideGroupColumnCount });
                    var detaildiv = ej.buildTag("div");
                    var count = $($target.closest('tr')).parents('.e-grid').length;
                    detaildiv.attr("id", "child" + count + "_grid" + rowIndexValue);
                    $(detailtr).append(indenttd);
                    $(detailtr).append(detailstd);
                    var rowData = this._currentJsonData[rowIndexValue];
                    if (this.model.detailsTemplate)
                        $(detailtr).append(detailstd.append(this._renderEjTemplate(this.model.detailsTemplate, rowData)));

                    $($target.closest('tr')).after(detailtr);
                    this._trigger("detailsDataBound", { detailsElement: detailtr, data: rowData }); //    $(tbody).append(trchild);
                    if (this.model.childGrid) {
                        var temp = this.model.childGrid.queryString, ftemp = this.model.childGrid.foreignKeyField;
                        this.model.childGrid.query = ej.Query().where(ej.isNullOrUndefined(ftemp) ? temp : ftemp, "equal", rowData[temp], true);
                        this.model.childGrid["parentDetails"] = {
                            parentID: this._id,
                            parentPrimaryKeys: this.getPrimaryKeyFieldNames(),
                            parentKeyField: temp,
                            parentKeyFieldValue: rowData[temp],
                            parentRowData: rowData
                        }
                        $(detailtr).append(detailstd.append(detaildiv));
                    }
                    $rows = detailtr;
                }
                this._showGridLines();
                var toExpandRows = [];
                var $row = $rows;
                if ($($row[0].cells[cellIndex]).hasClass("e-detailindentcell")) {
                    $row.show(0, function () {
                        var args = { masterRow: $target.closest('tr'), detailsRow: $rows, masterData: proxy._currentJsonData[rowIndexValue] };
                        var foreignKeyData = proxy._getForeignKeyData(args.masterData);
                        if (!ej.isNullOrUndefined(foreignKeyData))
                            args.foreignKeyData = foreignKeyData;
                        proxy._trigger("detailsExpand", args);
                        proxy.model.childGrid != null && proxy.model.allowScrolling && proxy._refreshScroller({ requestType: "refresh" });
                    });
                    this.model.childGrid && !ej.isNullOrUndefined(detaildiv) && detaildiv.ejGrid(this.model.childGrid);
                    var $expand = $row.children(".e-detailrowexpand");
                    if ($expand != null && $expand.length > 0) {
                        toExpandRows.push($expand);
                    }
                }
                $target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").addClass("e-gdiagonalnext").removeClass("e-gnextforward");
                for (var i = 0; i < toExpandRows.length; i++) {
                    toExpandRows[i].removeClass("e-detailrowexpand").addClass("e-detailrowcollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
                    this.expandCollapse(toExpandRows[i]);
                }
            }
            if (this.model.allowScrolling && !ej.isNullOrUndefined(this._scrollObject && this._scrollObject.model) && !$target.closest(".e-hscroll").length)
                this.getScrollObject().refresh();
        },
        _refreshGridPager: function () {
            if (this.getPager() != null) {
                var pagerModel = this.getPager().ejPager("model"), model = {};
                model.currentPage = this._currentPage();
                if (this._filteredRecordsCount == 0 && this.model.currentViewData.length == 0 && (ej.isNullOrUndefined(this._prevPageNo) || this._prevPageNo)) {
                    model.currentPage = 0;
                    this._prevPageNo = pagerModel.currentPage;
                    this.model.pageSettings.currentPage = 0;
                } else if (pagerModel.currentPage == 0 && (ej.isNullOrUndefined(this._prevPageNo) || this._prevPageNo))
                    model.currentPage = this._prevPageNo;
                var excludeTr = this.model.editSettings.showAddNewRow ? 1 : 0;
                model.totalRecordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount - excludeTr : this._searchCount : this._filteredRecordsCount;
                if (ej.util.isNullOrUndefined(model.currentPage))
                    model.currentPage = this._currentPage();
                this.getPager().ejPager("option", model).ejPager("refreshPager");
                this.model.pageSettings.totalPages = pagerModel.totalPages;
            }
        },
        _showHeaderColumn: function (showColumns, field) {
            var $head = this.getHeaderTable().find("thead");
            var $headerCell = $head.find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
            var $filterBarCell = $head.find(".e-filterbar").find(".e-filterbarcell");
            var $col = this.getHeaderTable().find("colgroup").find("col"), column;
            for (var i = 0; i < showColumns.length; i++) {
                if (field)
                    column = ej.isNullOrUndefined(this.getColumnByField(showColumns[i])) ? this.getColumnByHeaderText(showColumns[i], ej.isNullOrUndefined(this.getColumnByField(showColumns[i]))) : this.getColumnByField(showColumns[i]);
                else
                    column = this.getColumnByHeaderText(showColumns[i]);
                var index = $.inArray(column, this.model.columns);
                index = (this.model.detailsTemplate != null || this.model.childGrid) ? index + 1 : index;
                var frznCol = this.model.scrollSettings.frozenColumns;
                if (frznCol != 0 && index >= frznCol)
                    var thIndex = $headerCell.eq(index).removeClass("e-hide").index() + frznCol;
                else
                    var thIndex = $headerCell.eq(index).removeClass("e-hide").index();
                $filterBarCell.eq(thIndex).removeClass("e-hide");
				 if ($col.length > this.model.columns.length && this.model.groupSettings.groupedColumns.length){
					var len = $col.length - this.model.columns.length;
					$col = $col.slice((this.model.detailsTemplate || this.model.childGrid) ? len + 1 : len);				
				}
                $col.eq(index).css("display", "");
            }
            if (this.model.showStackedHeader)
                this._refreshStackedHeader();
        },
        _hideHeaderColumn: function (hiddenColumns, field) {
            var $head = this.getHeaderTable().find("thead");
            var $headerCell = $head.find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
            var $filterBarCell = $head.find(".e-filterbar").find(".e-filterbarcell");
            var $col = this.getHeaderTable().find("colgroup").find("col"), column;
            for (var i = 0; i < hiddenColumns.length; i++) {
                if (field)
                    column = ej.isNullOrUndefined(this.getColumnByField(hiddenColumns[i])) ? this.getColumnByHeaderText(hiddenColumns[i], ej.isNullOrUndefined(this.getColumnByField(hiddenColumns[i]))) : this.getColumnByField(hiddenColumns[i]);
                else
                    column = this.getColumnByHeaderText(hiddenColumns[i]);
                var index = $.inArray(column, this.model.columns);
                var dindex = (this.model.detailsTemplate != null || this.model.childGrid) ? index + 1 : index;
                var frznCol = this.model.scrollSettings.frozenColumns;
                if (frznCol != 0 && index >= frznCol)
                    var thIndex = $headerCell.eq(dindex).addClass("e-hide").index() + frznCol;
                else
                    var thIndex = $headerCell.eq(dindex).addClass("e-hide").index();
                $filterBarCell.eq(thIndex).addClass("e-hide");
                if ($col.length > this.model.columns.length)
                    $col = $col.slice($col.length - this.model.columns.length);
                $col.eq(index).css("display", "none");
            }
            if (this.model.showStackedHeader) {
                this._refreshStackedHeader();
                this._colgroupRefresh();
            }
        },
        _refreshStackedHeader: function () {
            var stackedRows = this.model.stackedHeaderRows;
            for (var i = 0; i < stackedRows.length; i++) {
                if (this.model.scrollSettings.frozenColumns != 0) {
                    var frznHeader = $(this.getHeaderContent().find(".e-frozenheaderdiv"));
                    var movHeader = $(this.getHeaderContent().find(".e-movableheader"));
                    var newFrzn = this._createStackedRow(stackedRows[i], true);
                    var newMov = this._createStackedRow(stackedRows[i], false);
                    $(frznHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newFrzn);
                    $(movHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newMov);
                }
                else {
                    var stackedTR = this._createStackedRow(stackedRows[i], false);
                    if (this.getHeaderTable().find("tr.e-stackedHeaderRow")[i])
                        $(this.getHeaderTable().find("tr.e-stackedHeaderRow")[i]).replaceWith(stackedTR);
                    else
                        stackedTR.insertBefore(this.getHeaderTable().find("tr.e-columnheader:last"));
                }
            }
            var args = {};
            args.requestType = "refresh";
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0) {
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                    this.getHeaderTable().find(".e-stackedHeaderRow").prepend(this._getGroupTopLeftCell());
            }
            this.model.allowScrolling && this._refreshScroller(args);
        },
        _checkSkipAction: function (args) {
            switch (args.requestType) {
                case ej.Grid.Actions.Save:
                case ej.Grid.Actions.Delete:
                    return true;
            }
            return false;
        },
        _unboundTemplateRendering: function (unboundTemplateId) {
            return $("#" + unboundTemplateId).html();
        },
        _processBindings: function (args) {
            this.model.query = this.model.enablePersistence ? new ej.Query() : this.commonQuery.clone();
            if (!this._checkSkipAction(args) && this._trigger("actionBegin", args))
                return true;
            if (this.model.editSettings.editMode == "batch" && args.requestType != "batchsave" && args.requestType != "cancel" && !this._confirmedValue && this._bulkChangesAcquired() && this.model.editSettings.showConfirmDialog) {
                this._confirmDialog.find(".e-content").html(this._getLocalizedLabels("BatchSaveLostChanges"));
                this._confirmDialog.ejDialog("open");
                this._requestArgs = args;
                return false;
            }
            if (!ej.isNullOrUndefined(this.model.dataSource) && args.requestType == "refresh" && this.model.scrollSettings.allowVirtualScrolling) {
                this._currentPage(1);
                this._scrollValue = 0;
                this._loadedJsonData = [];
                this._prevPage = this._currentPage();
            }
            this._ensureDataSource(args);
            if (this.model.scrollSettings.allowVirtualScrolling) {
                if (args.requestType == "virtualscroll") {
                    this._loadedJsonData.push({ pageIndex: this._prevPage, data: this._currentJsonData });
                    this._prevPage = this._currentPage();
                }
                else
                    this._virtualLoadRecords[this._currentPage()] = this.model.currentViewData;
                if (args.requestType == "filtering") {
                    this._loadedJsonData = [];
                    this._prevPage = this._currentPage();
                }
            }
            if (this.model.scrollSettings.allowVirtualScrolling && args.requestType == "filtering") {
                this.refreshContent();
            }
            if (this.model.enableRTL) {
                !this.element.hasClass("e-rtl") && this.element.addClass("e-rtl");
            } else {
                this.element.hasClass("e-rtl") && this.element.removeClass("e-rtl")
            }
            if (args.requestType == ej.Grid.Actions.Delete && this.model.groupSettings.groupedColumns.length == 0) {
                if (this.model.editSettings.showAddNewRow)
                    this.getContentTable().find(".e-addedrow").remove();
                args.tr.remove();
            }
            if ((args.requestType == "save" || args.requestType == "cancel") && this._editForm !== null) {
                $(this._editForm).find("select.e-dropdownlist").ejDropDownList("destroy");
                $(this._editForm).find(".e-datepicker").ejDatePicker("destroy");
                $(this._editForm).find(".e-datetimepicker").ejDateTimePicker("destroy");
                $(this._editForm).find(".e-numerictextbox").ejNumericTextbox("destroy");
            }
            if (this._dataSource() instanceof ej.DataManager && !this._isRemoteSaveAdaptor && args.requestType != ej.Grid.Actions.BeginEdit && args.requestType != ej.Grid.Actions.Cancel && args.requestType != ej.Grid.Actions.Add) {
                if (this.model.scrollSettings.allowVirtualScrolling && this.model.pageSettings.totalPages == this.model.pageSettings.currentPage) {
                    var pageQuery = ej.pvt.filterQueries(this.model.query.queries, "onPage");
                    this.model.query.queries.splice($.inArray(pageQuery[0], this.model.query.queries), 1);
                    this.model.query.page(this._currentPage() - 1, this.model.pageSettings.pageSize);
                    var lastQueryPromise = this._dataSource().executeQuery(this.model.query);
                    this.model.query.queries.splice($.inArray(pageQuery[0], this.model.query.queries), 1);
                    this.model.query.page(this._currentPage(), this.model.pageSettings.pageSize);
                }
                var queryPromise = this._queryPromise = this._dataSource().executeQuery(this.model.query);
                var waitingPopup = this.element.ejWaitingPopup("instance");
                var proxy = this;
                this.element.ejWaitingPopup("show");
                if (proxy._dataSource().ready) {
                    proxy._dataSource().ready.done(function () {
                        proxy._processDataRequest(proxy, args, queryPromise, lastQueryPromise)
                    });
                }
                else {
                    proxy._processDataRequest(proxy, args, queryPromise, lastQueryPromise)
                }
            } else
                this.sendDataRenderingRequest(args);
        },
        _processDataRequest: function (proxy, args, queryPromise, lastQueryPromise) {
            queryPromise.done(ej.proxy(function (e) {
                proxy.element.ejWaitingPopup("hide");
                if (lastQueryPromise && !proxy._previousPageRendered) {
                    proxy._processLastPageData(proxy, args, e.result, lastQueryPromise);
                    if (proxy.model.previousViewData && proxy.model.previousViewData.length != 0) {
                        proxy.model.previousViewData.splice(0, e.result.length);
                        proxy._previousPageLength = e.result.length;
                        proxy._currentPageData = e.result;
                        ej.merge(proxy.model.previousViewData, e.result);
                        proxy.model.currentViewData = proxy.model.previousViewData;
                        proxy._remoteLastPageRendered = true;
                    }
                }
                else if (proxy._remoteLastPageRendered && proxy.model.pageSettings.currentPage == proxy.model.pageSettings.totalPages - 1) {
                    var count = proxy.model.pageSettings.pageSize - proxy._previousPageLength;
                    for (var dupRow = 0; dupRow < count; dupRow++) {
                        var removeEle = proxy.getRows()[proxy.getRows().length - (proxy.model.pageSettings.pageSize - dupRow)];
                        removeEle.remove();
                    }
                    proxy._tempPageRendered = true;
                    proxy.model.currentViewData = e.result;
                }
                else {
                    if (proxy._identityKeys.length && args.action == "add" && this.adaptor instanceof ej.ODataAdaptor)
                        proxy._processIdentityField(e.result, args);
                    if (proxy.model.pageSettings.currentPage == proxy.model.pageSettings.totalPages - 1 && !proxy._remoteLastPageRendered)
                        proxy._previousPageRendered = true;
                    proxy.model.currentViewData = e.result == null ? [] : e.result;
                }
                if (!ej.isNullOrUndefined(e.aggregates))
                    proxy._remoteSummaryData = e.aggregates;
                proxy._processData(e, args);
            }));
            queryPromise.fail(ej.proxy(function (e) {
                proxy.element.ejWaitingPopup("hide");
                args.error = e.error;
                e = [];
                proxy.model.currentViewData = [];
                proxy._processData(e, args);
                proxy._trigger("actionFailure", args);
            }));
        },
        _processIdentityField: function (result, args) {
            var _pKey = this._primaryKeys[0];
            var resultPK = ej.distinct(result, _pKey);
            var curPK = ej.distinct(this.model.currentViewData, _pKey);
            var addPK = $.grep(resultPK, function (value) {
                if ($.inArray(value, curPK) == -1)
                    return true;
                return false;
            });
            args.data = ej.DataManager(result).executeLocal(new ej.Query().where(_pKey, "equal", addPK))[0];
        },
        _processLastPageData: function (proxy, args, currentData, lastQueryPromise) {
            lastQueryPromise.done(ej.proxy(function (e) {
                proxy.model.previousViewData = e.result;
            }));
            lastQueryPromise.fail(ej.proxy(function (e) {
                proxy.element.ejWaitingPopup("hide");
                args.error = e.error;
                e = [];
                proxy.model.previousViewData = [];
                proxy._processData(e, args);
                proxy._trigger("actionFailure", args);
            }));
        },
        _createUnboundElement: function (column) {
            var divElement = document.createElement("div");
            column.headerText = ej.isNullOrUndefined(column.headerText) ? column.field : column.headerText;
            divElement.id = this._id + column.headerText.replace(/[^a-z0-9|s_]/gi, '') + "_UnboundTemplate";
            var $div = ej.buildTag("div.e-unboundcelldiv"), commands = column["commands"];
            for (var unbounType = 0; unbounType < commands.length; unbounType++) {
                var $button = ej.buildTag("button.e-" + commands[unbounType].type.replace(/\s+/g, "") + "button", "", {}, { type: "button" });
                $button.val(commands[unbounType].type);
                $div.append($button);
            }
            $("body").append($(divElement).html($div).hide());
            return divElement;
        },
        _refreshUnboundTemplate: function ($target) {
            if (this._isUnboundColumn) {
                var index = 0;
                for (var column = 0; column < this.model.columns.length; column++) {
                    if (this.model.columns[column]["isUnbound"]) {
                        var $unboundDivs = $target.find(".e-unboundcell.e-" + this.model.columns[column]["headerText"].replace(/[^a-z0-9|s_]/gi, '')+column).find(".e-unboundcelldiv");
                        var commands = $.extend(true, [], this.model.columns[column].commands);
                        for (var j = 0; j < commands.length; j++) {
                            var width = ej.isNullOrUndefined(commands[j].buttonOptions.width) ? "52" : commands[j].buttonOptions.width;
                            var height = ej.isNullOrUndefined(commands[j].buttonOptions.height) ? "30" : commands[j].buttonOptions.height;
                            commands[j].buttonOptions.width = ej.isNullOrUndefined(commands[j].buttonOptions.width) ? "52" : commands[j].buttonOptions.width;
                            commands[j].buttonOptions.height = ej.isNullOrUndefined(commands[j].buttonOptions.height) ? "28" : commands[j].buttonOptions.height;
                            commands[j].buttonOptions.cssClass = ej.isNullOrUndefined(commands[j].buttonOptions.cssClass) ? this.model.cssClass : commands[j].buttonOptions.cssClass;
                            commands[j].buttonOptions.enableRTL = this.model.enableRTL;
                            var $buttons = $unboundDivs.find(".e-" + commands[j].type.replace(/\s+/g, "") + "button");
                            if ($target.closest(".e-editcell").length) {
                                if (commands[j].type == "save" || commands[j].type == "cancel")
                                    $buttons.show();
                                else {
                                    $buttons.hasClass("e-deletebutton") && $buttons.hide();
                                    $buttons.hasClass("e-editbutton") && $buttons.hide();
                                }
                            } else {
                                if (commands[j].type == "save" || commands[j].type == "cancel")
                                    $buttons.hide();
                                else {
                                    $buttons.hasClass("e-deletebutton") && $buttons.show();
                                    $buttons.hasClass("e-editbutton") && $buttons.show();
                                }
                            }
                            if ($($buttons[0]).data("ejButton"))
                                $buttons.filter(".e-button").ejButton("destroy");
                            $buttons.ejButton(commands[j].buttonOptions);
                        }
                    } else
                        continue;
                }
            }
        },
        _gridTemplate: function (self, templateId, index) {
            var $column = self.model.columns[index];
            return self._renderEjTemplate("#" + templateId, this.data, this.index, $column);
        },
        _createTemplateElement: function (column) {
            var scriptElement, t;
            if ($(column["templateID"]).length > 0)
                scriptElement = $(column["templateID"])[0];
            else {
                scriptElement = document.createElement("script"), t;
                scriptElement.id = (this._id + column.headerText + $.inArray(column, this.model.columns) + "_Template").split(" ").join("");
                scriptElement.type = "text/x-template";
                if (column.template.slice(0, 1) !== "#")
                    scriptElement.text = column.template;
                else
                    t = $(column["template"]);
                if (t) {
                    scriptElement.text = t.html();
                    scriptElement.type = t.attr("type") || scriptElement.type;
                }
                $("body").append(scriptElement);
            }
            return scriptElement;
        },
        _renderGridPager: function () {
            var $div = $(document.createElement('div'));
            var pagerModel = {};
            this.model.pageSettings.click = this._gPagerClickHandler;
            this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
            this.model.pageSettings.enableRTL = this.model.enableRTL;
            this.model.pageSettings.locale = this.model.locale;
            this.model.pageSettings.enableQueryString = this.model.pageSettings.enableQueryString;
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                pagerModel.enableExternalMessage = this.model.filterSettings.showFilterBarStatus;
            $.extend(pagerModel, this.model.pageSettings);
            pagerModel.currentPage = this._currentPage();
            pagerModel.masterObject = this;
            this.setGridPager($div);
            $div.ejPager(pagerModel);
            $div.ejPager("refreshPager");
            pagerModel = $div.ejPager("model");
            this.model.pageSettings.totalPages = pagerModel.totalPages;
            if (this._currentPage() !== pagerModel.currentPage)
                this._currentPage(pagerModel.currentPage);
            if (this.model.pageSettings.enableTemplates) {
                if (!this.model.pageSettings.showDefaults) {
                    $div.children().remove();
                }
                var $tempHtml;
                if ($(this.model.pageSettings.template)[0].type == 'text/x-jsrender')
                    $tmpHtml = $(this.model.pageSettings.template).hide().html()
                else
                    $tempHtml = $(this.model.pageSettings.template)[0];
                var $divPagerContainer = $div.find('.e-pagercontainer');
                var $customDiv = ej.buildTag('div.e-pagercontainer ');
                $customDiv.append($tmpHtml);
                $div.append($customDiv)
            }
            return $div;
        },

        _renderContext: function (e) {
            var menuitems = this.model.contextMenuSettings.contextMenuItems;
            var item, item2, i = 0;
            var ul = ej.buildTag('ul', "", {}, { id: this._id + '_Context' });
            for (i; i < menuitems.length; i++) {
                item = menuitems[i];
                item2 = this._items(item, "contextMenuItem");
                ul.append(item2);
            }
            var customitems = this.model.contextMenuSettings.customContextMenuItems;
            var subMenuItems = this.model.contextMenuSettings.subContextMenu;
            var custom, custom2, j = 0;
            for (j; j < customitems.length; j++) {
                custom = customitems[j];
                custom2 = this._items(custom, "customContextMenuItem");                
                for (var k = 0 ; k < subMenuItems.length; k++)
                    if (custom == subMenuItems[k].contextMenuItem) {
                        var ul1 = ej.buildTag('ul', "", {}, { id: this._id + '_subMenuContext' + k });
                        for (var l = 0; l < subMenuItems[k].subMenu.length; l++) {
                            menuItem = subMenuItems[k].subMenu[l];
                            menuItem1 = this._items(menuItem, "subMenuItems");
                            ul1.append(menuItem1);
                        }
                        custom2.append(ul1);
                    }
                ul.append(custom2);
            }
            this.element.append(ul);
            var parentControl = this.element.parents("div.e-grid");
            var native = ej.Menu.prototype._showContextMenu;
            ej.Menu.prototype._showContextMenu = function (locationX, locationY, target, evt) {
                $(this.model.contextMenuTarget).hasClass("e-grid") && (++locationX, ++locationY)
                native.apply(this, [locationX, locationY, target, evt]);
            };
            $(ul).ejMenu({
                menuType: ej.MenuType.ContextMenu,
                openOnClick: false,
                contextMenuTarget: "#" + this._id,
                click: $.proxy(this._clickevent, this),
                width: "auto",
                beforeOpen: $.proxy(this._menu, this)
            });
            if (parentControl.length) {
                var parentElement = $("#" + parentControl[0].id + '_Context');
                var target = parentElement.ejMenu("model.excludeTarget");
                parentElement.ejMenu({ excludeTarget: !ej.isNullOrUndefined(target) ? target.concat(",#" + this._id) : "#" + this._id });
            }
            this._conmenu = ul.data("ejMenu");
        },
        _clickevent: function (sender) {
            var args = sender.events.text;
            var tr = $(this._contexttarget.parentNode);
            var c = $(this._contexttarget);
            if (c.hasClass("e-filterset"))
                c = c.siblings();
            else if (c.hasClass("e-icon") || c.hasClass("e-number"))
                c = c.parent();
            var columnName = c.attr("ej-mappingname");
            if (this._trigger("contextClick", sender))
                return;
            switch (args) {
                case this._getLocalizedLabels("AddRecord"): this._startAdd();
                    break;
                case this._getLocalizedLabels("EditRecord"):
                    if (this.model.editSettings.editMode == "batch") {
                        var colindex = $(this._contexttarget.parentNode).find(".e-rowcell").index(c), index = this._excludeDetailRows().index(tr), fieldName = this.model.columns[colindex]["field"];
                        this.editCell(index, fieldName);
                    }
                    else
                        this.startEdit(tr);
                    break;
                case this._getLocalizedLabels("DeleteRecord"):
                    if (this.model.editSettings.showDeleteConfirmDialog)
                        this._confirmDialog.find(".e-content").html(this._getLocalizedLabels("ConfirmDelete")).end().ejDialog("open");
                    else
                    this._deleteRow(tr);
                    break;
                case this._getLocalizedLabels("Save"): this.endEdit();
                    break;
                case this._getLocalizedLabels("Cancel"): this.cancelEdit();
                    break;
                case this._getLocalizedLabels("SortInDescendingOrder"): var columnSortDirection = ej.sortOrder.Descending;
                    this.sortColumn(columnName, columnSortDirection);
                    break;
                case this._getLocalizedLabels("SortInAscendingOrder"): var columnSortDirection = ej.sortOrder.Ascending;
                    this.sortColumn(columnName, columnSortDirection);
                    break;
                case this._getLocalizedLabels("Grouping"): this.groupColumn(columnName);
                    break;
                case this._getLocalizedLabels("Ungrouping"): this.ungroupColumn(columnName);
                    break;
                case this._getLocalizedLabels("NextPage"):
                case this._getLocalizedLabels("PreviousPage"):
                case this._getLocalizedLabels("LastPage"):
                case this._getLocalizedLabels("FirstPage"): this._page(sender);
                    break;
            }

        },

        _menu: function (sender) {
            var context = this._conmenu.element;
            this._contexttarget = sender.target;
            var targetelement = $(sender.target), element, value;
            var td = $(this._contexttarget);
            if (td.hasClass("e-rowcell") && this.model.allowSelection)
                if (!this.model.isEdit)
                    this.selectRows(this.getIndexByRow(td.parent()), null, td);
            if ((targetelement.hasClass("e-ascending") || targetelement.hasClass("e-descending")) && !targetelement.parent().hasClass("e-headercelldiv"))
                return false;
            if (targetelement.hasClass("e-filtericon") || targetelement.hasClass("e-headercelldiv"))
                element = sender.target.parentNode.getAttribute("aria-sort");
            else
                element = targetelement.parent().parent().attr("aria-sort");
            var target = sender.target.className;
            var sorting = $(context);
            if (targetelement.hasClass("e-filterset"))
                value = targetelement.siblings().attr("ej-mappingname");
            else if (targetelement.hasClass("e-icon") || targetelement.hasClass("e-number"))
                value = targetelement.parent().attr("ej-mappingname");
            else
                value = targetelement.attr("ej-mappingname");
            switch (target) {
                case "e-pager e-js e-rtl":
                case "e-pager e-js": var a = $(context.find(".e-page"));
                    context.find(".e-head").css("display", "none");
                    context.find(".e-content").css("display", "none");
                    context.find(".e-savcan").css("display", "none");
                    a.css("display", "block");
                    break;
                case "e-filtericon e-icon e-filterset":
                case "e-icon e-ascending e-rarrowup-2x":
                case "e-icon e-descending e-rarrowdown-2x":
                case "e-number e-sortnumber":
                case "e-headercelldiv":
                case "e-headercelldiv e-droppable e-js":
                case "e-headercell e-default e-draggable e-js":
                    var a = $(context.find(".e-head"));
                    context.find(".e-page").css("display", "none");
                    context.find(".e-content").css("display", "none");
                    context.find(".e-savcan").css("display", "none");
                    a.css("display", "block");
                    break;
                case "e-rowcell e-selectionbackground e-active":
                case "e-rowcell":
                case "e-rowcell e-lastrowcell":
                case "e-rowcell e-lastrowcell e-selectionbackground e-active":
                case "e-rowcell e-boolrowcell e-selectionbackground e-active":
                case "e-rowcell e-templatecell e-selectionbackground e-active":
                    var a = $(context.find(".e-content"));
                    context.find(".e-head").css("display", "none");
                    context.find(".e-page").css("display", "none");
                    context.find(".e-savcan").css("display", "none");
                    a.css("display", "block");
                    break;
                default: var a = $(context);
                    return false;
            }
            switch (element) {
                case "ascending": sorting.find(".ascending").parent().css("display", "none");
                    break;
                case "descending": sorting.find(".descending").parent().css("display", "none");
                    break;
            }
            if (this.model.isEdit) {
                var a = $(context.find(".e-savcan"));
                context.find(".e-head").css("display", "none");
                context.find(".e-content").css("display", "none");
                context.find(".e-page").css("display", "none");
                a.css("display", "block");
            }
            if (this.model.pageSettings.currentPage == 1) {
                sorting.find(".previous").parent().css("display", "none");
                sorting.find(".first").parent().css("display", "none");
            }
            else if (this.model.pageSettings.currentPage == this.model.pageSettings.totalPages) {
                sorting.find(".last").parent().css("display", "none");
                sorting.find(".nextpage").parent().css("display", "none");
            }
            if (this.model.groupSettings.groupedColumns.indexOf(value) != -1)
                a.find(".group").parent().css("display", "none");
            else if (this.model.groupSettings.groupedColumns.indexOf(value) == -1)
                a.find(".ungroup").parent().css("display", "none");
            if (this.model.contextOpen)
                this._trigger("contextOpen", sender);
        },

        _items: function (item, type) {
            if (item == "")
                return false;
            if (type == "contextMenuItem") {
                if (item.indexOf("Record") != -1) {
                    var li = ej.buildTag('li', "", {}, { "class": "e-content" });
                    li.css("display", "none");
                }
                else if (item.indexOf("Page") != -1) {
                    var li = ej.buildTag('li', "", {}, { "class": "e-page" });
                    if (item.indexOf("Next") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "nextpage" });
                    else if (item.indexOf("Previous") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "previous" });
                    else if (item.indexOf("Last") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "last" });
                    else if (item.indexOf("First") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "first" });
                    li.css("display", "none");
                }
                else if (item == "Save" || item == "Cancel") {
                    var li = ej.buildTag('li', "", {}, { "class": "e-savcan" });
                    li.css("display", "none");
                }
                else if (item.indexOf("Order") != -1 || item == "Grouping" || item == "Ungrouping") {
                    var li = ej.buildTag('li', "", {}, { "class": "e-head" });
                    if (item.indexOf("Ascending") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "ascending" });
                    else if (item.indexOf("Descending") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "descending" });
                    else if (item == "Grouping")
                        var div = ej.buildTag('div', "", {}, { "class": "group" });
                    else if (item == "Ungrouping")
                        var div = ej.buildTag('div', "", {}, { "class": "ungroup" });
                    li.css("display", "none");
                }
            }
            else {
                var li = ej.buildTag('li', "", {}, { "class": "e-customitem" });
                li.css("display", "block");
            }
            li.append(div);
            var a = document.createElement("a");
            a.innerHTML = !ej.isNullOrUndefined(this._getLocalizedLabels(item.replace(/\s+/g, ''))) ? this._getLocalizedLabels(item.replace(/\s+/g, '')) : item;
            li.append(a);
            return li;
        },

        _page: function (send) {
            if (send.events.text == "Next Page") {
                var b = this.model.pageSettings.currentPage;
                ++b;
                this.gotoPage(b);
            }
            else if (send.events.text == "Previous Page") {
                var b = this.model.pageSettings.currentPage;
                if (b > 1) {
                    --b;
                    this.gotoPage(b);
                }
                else
                    this.gotoPage(b);
            }
            else if (send.events.text == "Last Page") {
                var b = this.model.pageSettings.totalPages
                this.gotoPage(b);
            }
            else
                this.gotoPage(1);


        },

        
        gotoPage: function (pageIndex) {
            if (!this.model.allowPaging && (!this.model.allowScrolling && !this.model.scrollSettings.allowVirtualScrolling))
                return;
            var args = {}, returnValue;
            args.previousPage = this._currentPage();
            this._currentPage(pageIndex);
            args.endIndex = ((this._currentPage() * this.model.pageSettings.pageSize) > this._gridRecordsCount) ? (this._gridRecordsCount) : (this._currentPage() * this.model.pageSettings.pageSize);
            args.startIndex = (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
            args.currentPage = pageIndex;
            if (this.model.allowPaging) {
                //this.model.pageSettings.currentPage = pageIndex;
                //this. getPager().ejPager("refreshPager");
                args.requestType = ej.Grid.Actions.Paging;
            }
            if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling) {
                this._isVirtualRecordsLoaded = false;
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
                args.requestType = ej.Grid.Actions.VirtualScroll;
            }
            returnValue = this._processBindings(args);
            if (returnValue)
                this._currentPage(args.previousPage);
            this._primaryKeyValues = [];
        },
        _gPagerClickHandler: function (sender) {
            if (this._prevPageNo == sender.currentPage)
                return;
            this.model.masterObject.gotoPage(sender.currentPage);
            return false;
        },
        _processData: function (e, args) {
            if (e.count == 0 && this.model.currentViewData.length)
                this._gridRecordsCount = e.result.length;
            else
                this._gridRecordsCount = e.count;
            if (this.getPager() != null)
                this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
            if ((args.requestType == ej.Grid.Actions.Filtering || ej.Grid.Actions.Save || (this.model.filterSettings.filteredColumns.length > 0 && args.requestType == ej.Grid.Actions.Refresh)))
                this._filteredRecordsCount = e.count;
            this.sendDataRenderingRequest(args);
        },

        _frozenCell: function (rowIndex, cellIndex) {
            var currentIndex = cellIndex, frozenDiv = 0, row = this.getRowByIndex(rowIndex), cell;
            if (cellIndex >= this.model.scrollSettings.frozenColumns) {
                frozenDiv = 1;
                currentIndex = currentIndex - this.model.scrollSettings.frozenColumns;
            }
            cell = $(row.eq(frozenDiv).find(".e-rowcell:eq(" + currentIndex + ")"));
            return cell;
        },
        _frozenColumnSelection: function (gridRows, columnIndex, endIndex) {
            var currentIndex = columnIndex, frozenDiv = 0;
            if (endIndex) {
                for (var i = columnIndex; i < endIndex; i++) {
                    currentIndex = i;
                    if (i >= this.model.scrollSettings.frozenColumns) {
                        frozenDiv = 1;
                        currentIndex = i - this.model.scrollSettings.frozenColumns;
                    }
                    for (var j = 0; j < gridRows[frozenDiv].length; j++) {
                        $(gridRows[frozenDiv][j].cells[currentIndex]).addClass("e-columnselection");
                    }
                    $(this.getHeaderTable().find("th.e-headercell")[i]).addClass("e-columnselection");
                    this.selectedColumnIndexes.push(i);
                }
            }
            else {
                if (columnIndex >= this.model.scrollSettings.frozenColumns) {
                    frozenDiv = 1;
                    currentIndex = columnIndex - this.model.scrollSettings.frozenColumns;
                }
                for (var i = 0; i < gridRows[frozenDiv].length; i++) {
                    $(gridRows[frozenDiv][i].cells[currentIndex]).addClass("e-columnselection");
                }
            }

        },
        _renderGridFooter: function () {
            if (this.model.summaryRows.length > 0) {
                var _$gridFooter = ej.buildTag("div.e-gridfooter");
                var $table = ej.buildTag("table.e-gridsummary", "", {}, { cellspacing: "0.25px" });
                this.setGridFooterContent(_$gridFooter);
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var $frozenFooterDiv = ej.buildTag("div.e-frozenfooterdiv"), $movableFooter = ej.buildTag("div.e-movablefooter")
                        , $tableClone = $table.clone(), $movableFooterDiv = ej.buildTag("div.e-movablefooterdiv");
                    $movableFooter.append($movableFooterDiv);
                    $table.append(this.getHeaderTable().first().find('colgroup').clone());
                    $tableClone.append(this.getHeaderTable().last().find('colgroup').clone());
                    $frozenFooterDiv.append($table);
                    $movableFooterDiv.append($tableClone);
                    this.setGridFooterTable($table.add($tableClone));
                    this._createSummaryRows(this.getFooterTable());
                    _$gridFooter.append($frozenFooterDiv.add($movableFooter));
                    _$gridFooter.find(".e-frozenfooterdiv").outerWidth(this.getHeaderContent().find(".e-frozenheaderdiv").width())
                          .end().find(".e-movablefooterdiv").outerWidth(this.getContent().find(".e-movablecontentdiv").width());
                }
                else {
                    $table.append(this.getHeaderTable().find('colgroup').clone());
                    this.setGridFooterTable($table);
                    this._createSummaryRows(this.getFooterTable());
                    _$gridFooter.append($table);
                }
                return _$gridFooter;
            } else
                throw "summary row collection is missing";
        },
        _setSummaryAggregate: function (queryManager) {
            var rows = this.model.summaryRows, scolumns, sCol = [];
            for (var row = 0, rlen = rows.length; row < rlen; row++) {
                scolumns = rows[row].summaryColumns;
                for (var col = 0, clen = scolumns.length; col < clen; col++) {
                    queryManager.aggregate(scolumns[col].summaryType, scolumns[col].dataMember);
                }
            }
        },
        _createSummaryRows: function (table, summaryData, aggregates, item, showGroup) {
            var col = table.find("col");
            if (table.find("tbody").length > 0)
                table.find("tbody").remove();
            var $tBody = ej.buildTag('tbody'), proxy = this, $tBodyClone = $tBody.clone();
            var summaryCol = this.model.summaryRows;
            if (!ej.isNullOrUndefined(summaryData) && this._isCaptionSummary)
                summaryCol = this._captionSummary(showGroup);
            $.each(summaryCol, function (indx, row) {
                if (row.showTotalSummary === false && ej.isNullOrUndefined(summaryData)) return true;
                var $tr = ej.buildTag('tr.e-gridSummaryRows');
                if (ej.isNullOrUndefined(item && item.level)) {
                    for (var i = 0; i < proxy.model.groupSettings.groupedColumns.length; i++) {
                        $tr.prepend(ej.buildTag('td').addClass("e-indentcell"));
                    }
                }
                var gc = showGroup ? " e-gcsummary" : "";
                if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
                    if (proxy.model.groupSettings.groupedColumns.length != 0)
                        $tr.children("td.e-indentcell").last().after("<td class='e-summaryrow" + gc + "'></td>");
                    else
                        $tr.prepend("<td class='e-summaryrow'></td>");
                }
                var $cells = proxy.getHeaderTable().find('td').clone().addClass("e-summaryrow" + gc + ""), count = 0;
                var index = 0;
                if (!ej.isNullOrUndefined(row.titleColumn)) {
                    var index = proxy.getColumnIndexByField(row.titleColumn);
                    if (index >= proxy.model.columns.length)
                        index = proxy.getColumnIndexByHeaderText(row.titleColumn);
                }
                $cells = proxy._assignTitleColumn(index, row.title, $cells, count);
                proxy._hideSummaryColumn($cells, col);
                if (proxy.model.scrollSettings.frozenColumns > 0) {
                    var $trClone = $tr.clone();
                    $tBody.append($tr.append($cells.slice(0, proxy.model.scrollSettings.frozenColumns)));
                    $tBodyClone.append($trClone.append($cells.slice(proxy.model.scrollSettings.frozenColumns)));
                }
                else {
                    if ((!proxy._isCaptionSummary || showGroup) && !ej.isNullOrUndefined(item && item.level)) {
                        var level = proxy.model.groupSettings.groupedColumns.length - item.level + 1, tableClone = table.clone().addClass("e-groupsummary"), captionData = {};
                        captionData["data"] = { items: item };
                        $tr.prepend("<td class='e-summaryrow" + gc + "' colspan=" + proxy._colSpanAdjust(null, null, captionData) + " style = 'padding:0;' ></td>");
                        $($tr[0].cells).filter(".e-summaryrow").html(tableClone.append(ej.buildTag("tr", $cells)));
                        var len = tableClone.find("col").length - (proxy.model.columns.length + level);
                        for (var i = 0; i < len; i++) {
                            tableClone.find("col").first().remove();
                        }
                        for (var i = 0; i < level; i++) {
                            $(tableClone[0].rows).prepend("<td class='e-indentcell'></td>");
                            $(tableClone.find("col")[i]).addClass("e-summary");
                        }
                        $tBody.append($tr);
                    }
                    else
                        $tBody.append($tr.append($cells));
                }
                $.each(row.summaryColumns, function (cindx, col) {
                    var value;
                    if (col.summaryType != "custom")
                        value = aggregates ? aggregates[col.dataMember + " - " + col.summaryType] : proxy._remoteSummaryData[col.dataMember + " - " + col.summaryType];
                    else
                        value = proxy.getSummaryValues(col, summaryData);
                    prefix = col.prefix ? col.prefix : "";
                    var index = proxy.getColumnIndexByField(col.displayColumn), suffix = col.suffix ? col.suffix : "";
                    if ($($cells[index]).html() != "" && prefix == "")
                        prefix = $($cells[index]).html();
                    $($cells[index]).html(prefix + (col.format ? proxy.formatting(col.format, value, proxy.model.locale) : value) + suffix).css("text-align", proxy.model.columns[index].textAlign);
                });
            });
            if (this.model.scrollSettings.frozenColumns > 0) {
                table.first().append($tBody);
                table.last().append($tBodyClone);
            }
            else
                table.append($tBody);
        },
        _assignTitleColumn: function (index, title, $cells, count) {
            for (var i = index; i < this.model.columns.length; i++) {
                var colindex = this.model.columns[i];
                if (count == 0 && colindex.visible != false) {
                    $cells.eq(i).html(title);
                    break;
                }
            }
            return $cells;
        },
        getSummaryValues: function (summaryCol, summaryData) {
            var $value, jsonData;
            if (!ej.isNullOrUndefined(summaryData))
                jsonData = summaryData;
            else if (this.model.filterSettings.filteredColumns.length > 0)
                jsonData = this._filteredRecords;
            else
                jsonData = this._dataSource();

            var dbMgr;
            if (jsonData instanceof ej.DataManager) {
                dbMgr = jsonData;
                jsonData = jsonData.dataSource.json;
            } else
                dbMgr = ej.DataManager(jsonData);

            switch (summaryCol.summaryType) {
                case ej.Grid.SummaryType.Maximum:
                    var obj = ej.max(jsonData, summaryCol.dataMember);
                    $value = obj[summaryCol.dataMember];
                    break;
                case ej.Grid.SummaryType.Minimum:
                    var obj = ej.min(jsonData, summaryCol.dataMember);
                    $value = obj[summaryCol.dataMember];
                    break;
                case ej.Grid.SummaryType.Average:
                    $value = ej.avg(jsonData, summaryCol.dataMember);
                    break;
                case ej.Grid.SummaryType.Sum:
                    $value = ej.sum(jsonData, summaryCol.dataMember);
                    break;
                case ej.Grid.SummaryType.Count:
                    $value = jsonData.length;
                    break;
                case ej.Grid.SummaryType.TrueCount:
                    var predicate = ej.Predicate(summaryCol.dataMember, "equal", true);
                    $value = dbMgr.executeLocal(ej.Query().where(predicate)).length;
                    break;
                case ej.Grid.SummaryType.FalseCount:
                    var predicate = ej.Predicate(summaryCol.dataMember, "equal", false);
                    $value = dbMgr.executeLocal(ej.Query().where(predicate)).length;
                    break;
                case ej.Grid.SummaryType.Custom:
                    var fn = summaryCol.customSummaryValue;
                    if (fn) {
                        if (typeof fn === "string")
                            fn = ej.util.getObject(fn, window);
                        if ($.isFunction(fn))
                            $value = fn.call(this, summaryCol, jsonData);
                    }
                    break;
            }
            return $value;
        },
        _hideCaptionSummaryColumn: function () {
            var headerColumn = this.getHeaderTable().find('.e-headercelldiv[ej-mappingname]').first();
            var captionTd = this.getContentTable().find('.e-groupcaption').clone();
            var groupCaptionParent = this.getContentTable().find('.e-groupcaption').parent();
            var colLength = this.model.columns.length - 1;
            if (this._isCaptionSummary) {
                this.getContentTable().find('.e-summaryrow:not(.e-gcsummary)').remove();
                this.getFooterTable().find("tbody td").slice(-colLength).removeClass("e-groupcaptionsummary").addClass("e-summaryrow");
                if (this.getFooterTable() != null) {
                    this.getContentTable().find('.e-recordplusexpand').parent().children('.e-indentcell').remove();
                }
                if (!this.model.groupSettings.showGroupedColumn && this.getContentTable().find(".e-groupcaptionsummary").not(".e-hide").length) {
                    var sumColumn = +this.getContentTable().find(".e-recordtable:first").parents("tbody:first").find(".e-groupcaption").attr("colspan");
                    if (this._hiddenColumnsField.length == this.model.columns.length - 1 && headerColumn.parent().hasClass("e-hide") || !sumColumn) {
                        for (i = 0; i < captionTd.length; i++) {
                            groupCaptionParent.eq(i).children().not('.e-hide,.e-recordplusexpand').filter('td.e-groupcaptionsummary:first').addClass("e-hide");
                            var caption = groupCaptionParent.eq(i).find(".e-groupcaption");
                            var colspan = parseInt(caption.attr("colspan"));
                            caption.attr("colspan", ++colspan)
                        }
                    }
                }
            }
            this.getContentTable().find('.e-recordtable').find('.e-indentcell').remove();
        },
        _hideSummaryColumn: function (td, col) {
            if (col.length > this.model.columns.length)
                col = col.slice(col.length - this.model.columns.length);
            if (!this.model.groupSettings.showGroupedColumn && this.model.showSummary) {
                for (i = 0; i < this.model.columns.length; i++) {
                    for (j = 0; j < this.model.groupSettings.groupedColumns.length || j < this._hiddenColumnsField.length; j++) {
                        var headerColumn = this.getHeaderTable().find('.e-headercelldiv:not(.e-emptyCell)');
                        if (!headerColumn.eq(i).is(':visible')) {
                            col.eq(i).css("display", "none");
                            $(td[i]).addClass("e-hide");
                            break;
                        }
                        else {
                            if (col.eq(i).css("display") == "none")
                                col.eq(i).css("display", "");
                        }
                    }
                }
            }
            else {
                for (i = 0; i < this.model.columns.length; i++) {
                    if (!this.model.columns[i]["visible"]) {
                        col.eq(i).css("display", "none");
                        $(td[i]).addClass("e-hide");
                    }
                    else {
                        if (col.eq(i).css("display") == "none")
                            col.eq(i).css("display", "");
                    }
                }
            }
        },

        _initScrolling: function () {
            var frozen = [], unfrozen = [], hideColumns = 0;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                if (this.model.columns[columnCount].visible === false && columnCount < this.model.scrollSettings.frozenColumns)
                    hideColumns++;
                if (this.model.columns[columnCount]["isFrozen"] === true)
                    frozen.push(this.model.columns[columnCount]);
                else
                    unfrozen.push(this.model.columns[columnCount]);
            }
            this.model.scrollSettings.frozenColumns += hideColumns;
            if (frozen.length > 0) {
                var freeze = this.model.scrollSettings.frozenColumns;
                this.model.columns = $.merge($.merge([], frozen), unfrozen);
                this.model.scrollSettings.frozenColumns = frozen.length;
                if (frozen.length != freeze && freeze != 0)
                    this.model.scrollSettings.frozenColumns = freeze;
            }
            if ((this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) && (this.model.allowGrouping || this.model.rowTemplate != null || this.model.detailsTemplate != null || this.model.childGrid != null || this.model.scrollSettings.allowVirtualScrolling || this.model.editSettings.editMode == "batch")) {
                this._renderAlertDialog();
                this._alertDialog.find(".e-content").text(this._getLocalizedLabels("FrozenNotSupportedException"));
                this._alertDialog.ejDialog("open");
                return;
            }
            if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling) {
                this.model.pageSettings.pageSize = this.model.pageSettings.pageSize == 12 ? Math.round(this.model.scrollSettings.height / 32) + 1 : this.model.pageSettings.pageSize;
                this.model.pageSettings.totalPages = Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize);
            }
            if (this.model.width || this.model.height) {
                this.model.allowScrolling = true;
                if (this.model.width) this.model.scrollSettings.width = this.model.width;
                if (this.model.height) this.model.scrollSettings.height = this.model.height;
            }
            this._originalScrollWidth = ej.isNullOrUndefined(this.model.scrollSettings.previousStateWidth) ? this.model.scrollSettings.width : this.model.scrollSettings.previousStateWidth;
        },
        _checkScrollActions: function (requestType) {
            if ((!this.model.scrollSettings.allowVirtualScrolling && requestType == ej.Grid.Actions.Sorting) || requestType == ej.Grid.Actions.Grouping || requestType == ej.Grid.Actions.Ungrouping || requestType == ej.Grid.Actions.Add || requestType == ej.Grid.Actions.Cancel
                || requestType == ej.Grid.Actions.Save || requestType == ej.Grid.Actions.BatchSave || requestType == ej.Grid.Actions.Delete || requestType == ej.Grid.Actions.Filtering || requestType == ej.Grid.Actions.Paging || requestType == ej.Grid.Actions.Refresh || requestType == ej.Grid.Actions.Reorder || requestType == ej.Grid.Actions.Search)
                return true;
            return false;
        },
        _refreshScroller: function (args) {
            var gridContent = this.getContent().first(), direction, browserDetails = this.getBrowserDetails(), temp;
            if (ej.isNullOrUndefined(gridContent.data("ejScroller")))
                return;
            if (this.model.scrollSettings.frozenColumns > 0) {
                direction = this.model.enableRTL ? "margin-right" : "margin-left";
                gridContent.find(".e-movablecontent").css(direction, browserDetails.browser === "safari" ? "auto" : gridContent.find(".e-frozencontentdiv").width() + "px");
                this.getHeaderContent().find(".e-movableheader").removeAttr("style").css(direction, browserDetails.browser === "safari" ? "auto" : this.getHeaderContent().find(".e-frozenheaderdiv").width() + "px");
                this.refreshScrollerEvent();
                gridContent.find(".e-movablecontent").scrollLeft(this.getHeaderContent().find(".e-movableheader").scrollLeft());
                if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && this.getScrollObject()._vScrollbar.value() > this.getScrollObject()._vScrollbar.model.maximum)
                    temp = this.getScrollObject()._vScrollbar.model.maximum;
            }
            if (this.model.scrollSettings.frozenRows > 0) {
                this._initFrozenRows();
                var temp = this.getScrollObject().model.scrollTop;
                if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && temp > this.getScrollObject()._vScrollbar.model.maximum)
                    temp = this.getScrollObject()._vScrollbar.model.maximum;
                if (args.requestType == "cancel" || args.requestType == "save")
                    temp = temp - this._editFormHeight;
                if (args.requestType == ej.Grid.Actions.Add)
                    this.getScrollObject().scrollY(0, true);
                if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && !ej.isNullOrUndefined(this.getScrollObject()._vScrollbar._scrollData))
                    this.getScrollObject()._vScrollbar._scrollData.skipChange = true;
            }
            if (args.requestType == "beginedit") {
                var temp = this.getScrollObject().model.scrollTop;
                this.getScrollObject().scrollY(0, true);
            }
            if (!ej.isNullOrUndefined(this.model.dataSource) && args.requestType == "refresh" && this.model.scrollSettings.allowVirtualScrolling) {
                this._refreshVirtualContent(1);
                this.getScrollObject().scrollY(0);
            }
            gridContent.ejScroller("refresh");
            gridContent.ejScroller("model.enableRTL", this.model.enableRTL);
            if (gridContent.ejScroller("isVScroll") && !this.getScrollObject().model.autoHide) {
                this.getHeaderContent().addClass("e-scrollcss");
                !this.getHeaderContent().find(".e-headercontent").hasClass("e-hscrollcss") && this.getHeaderContent().find(".e-headercontent").addClass("e-hscrollcss");
            }
            else
                this._showHideScroller();
            this._getRowHeights();
            if (temp && args.requestType != ej.Grid.Actions.Add) {
                this._currentTopFrozenRow = 0;
                if (temp > this.getScrollObject()._vScrollbar.model.maximum)
                    temp = this.getScrollObject()._vScrollbar.model.maximum;
                this.getScrollObject()._vScrollbar.scroll(temp);
            }
            if (args.requestType == "virtualscroll") {
                var top = this.getScrollObject().model.scrollTop + this.getScrollObject().model.height - (this.getScrollObject().model.height * .3);
                this.getScrollObject().scrollY(top, true);
            }
        },
        _renderScroller: function () {
            if (!this.model.scrollSettings)
                this.model.scrollSettings = {};
            if (this.model.enablePersistence && (ej.isNullOrUndefined(this.model.scrollSettings.previousStateWidth) || !this.model.scrollSettings.previousStateWidth) && this.model.isResponsive)
                this.model.scrollSettings.previousStateWidth = this.model.scrollSettings.width;
            if (typeof (this._originalScrollWidth) == "string") {
                this.element.css("width", "auto");
                var width = this.element.width();
                if (this.model.scrollSettings.width == "auto" || this._originalScrollWidth == "auto")
                    this._originalScrollWidth = "100%";
                this.model.scrollSettings.width = width * (parseFloat(this._originalScrollWidth) / 100)
            }

            if (typeof (this.model.scrollSettings.height) == "string") {
                var height = this.element.height();
                if (this.model.scrollSettings.height == "auto")
                    this.model.scrollSettings.height = "100%";
                this.model.scrollSettings.height = height * (parseFloat(this.model.scrollSettings.height) / 100)
            }

            if ((this.model.scrollSettings.width || this.model.width) && !this._mediaQuery)
                this.element.width(this.model.scrollSettings.width || this.model.width);

            var $content = this.getContent().attr("tabindex", "0"), staticWidth, direction, gridRows = this.getRows();

            if (this.model.scrollSettings.frozenColumns > 0) {
                scrollWidth = this.getContent().find(".e-frozencontentdiv").width() + 20;
                if (scrollWidth > this.model.scrollSettings.width) {
                    this.getContent().remove();
                    this.getHeaderTable().eq(1).remove();
                    this._alertDialog.find(".e-content").text(this._getLocalizedLabels("FrozenColumnsViewAlert"));
                    this._alertDialog.ejDialog("open");
                    return;
                }
                staticWidth = this.getContent().find(".e-frozencontentdiv").width();
                direction = this.model.enableRTL ? "margin-right" : "margin-left";
                this.getContent().find(".e-movablecontent").css(direction, staticWidth + "px");
                this.getHeaderContent().find(".e-movableheader").css(direction, staticWidth + "px");
                this.model.scrollSettings["targetPane"] = ".e-movablecontent";
            }
            this._initFrozenRows();
            if (this.model.scrollSettings.autoHide)
                this.model.scrollSettings["show"] = $.proxy(this._showHideScroller, this);
            var proxy = this;
            if (!this.model.scrollSettings.frozenRows)
                this.model.scrollSettings["scroll"] = function (e) {
				if (!ej.isNullOrUndefined(e.scrollData) && e.scrollData.handler == "e-hhandle"){
					if (proxy.model.allowFiltering && (proxy.model.filterSettings.filterType == "menu" || proxy._isExcelFilter)) 				
						!proxy._isExcelFilter ? proxy._closeFilterDlg() : proxy._excelFilter.closeXFDialog();	
					proxy._checkScroller(e, this);
				}
			};
            $content.ejScroller(this.model.scrollSettings);
            if (this.model.rowTemplate != null && (this.getBrowserDetails().browser == "msie" || this.getBrowserDetails().browser == "safari"))
                this.getScrollObject().refresh();            
            if (this.model.scrollSettings.frozenColumns > 0 && this.model.scrollSettings.frozenRows == 0 && this.getScrollObject()._vScrollbar && this.getScrollObject()._hScrollbar)
                this.getScrollObject()._vScrollbar._scrollData.skipChange = this.getScrollObject()._hScrollbar._scrollData.skipChange = true;
            if (!this.model.scrollSettings.autoHide)
                this._showHideScroller();
            if (this.getBrowserDetails().browser == "safari" && this.model.scrollSettings.frozenColumns > 0)
                this.getHeaderContent().find(".e-movableheader").add(this.getContent().find(".e-movablecontent")).css(direction, "auto");
            this.refreshScrollerEvent();            
            if (proxy.model.scrollSettings.allowVirtualScrolling) {
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
                $content.ejScroller({
                    scroll: function (e) {
                        if (!ej.isNullOrUndefined(e.scrollData) && e.scrollData.handler == "e-hhandle" && proxy.model.allowFiltering && (proxy.model.filterSettings.filterType == "menu" || proxy._isExcelFilter))
                            !proxy._isExcelFilter ? proxy._closeFilterDlg() : proxy._excelFilter.closeXFDialog();
                        e["reachedEnd"] = this.content()[0].scrollHeight - e.scrollTop == this.content()[0].clientHeight;
                        if ((e.source == "button" || e.source == "key" || e.source == "wheel") && proxy.model != null)
                            proxy._virtualScroll(e);
                        if (e.source == "wheel" && e.scrollTop != proxy._scrollValue)
                            e.scrollTop = proxy._scrollValue;
						proxy._checkScroller(e, this);
                    },
                    thumbEnd: function (e) {
                        if (!$(e.originalEvent.target).hasClass("e-rowcell"))
                            e["reachedEnd"] = this.content()[0].scrollHeight - e.scrollData.sTop == this.content()[0].clientHeight;
                        if (e.scrollData.handler == "e-hhandle")
                            return;
                        if (proxy.model != null)
                            proxy._virtualScroll(e);
                    }
                });
            }
        },
		_checkScroller: function(e, scrollObj){
			var scrollLeft = e.scrollLeft > 0 ? e.scrollLeft : Math.abs(e.scrollLeft);
			if(e.source == "thumb" && (scrollObj.content()[0].scrollWidth - scrollLeft == scrollObj.content()[0].clientWidth || scrollLeft == 0)){
				if(this.model.enableRTL){
					var hLeft = scrollLeft == 0 ? e.scrollData.scrollable: 0;
					e.scrollData.sTop = e.model.scrollLeft = hLeft;
					scrollObj.content().scrollLeft(hLeft);	
				}
				scrollObj.refresh();
			}
		},
        _showHideScroller: function () {
            if (this.getContent().ejScroller("isVScroll")) {
                this.getHeaderContent().find("div").first().addClass("e-headercontent");
                !this.model.scrollSettings.autoHide && this.getHeaderContent().addClass("e-scrollcss")
            } else
                this.element.find(".e-gridheader").removeClass("e-scrollcss");
            if (this.getBrowserDetails().browser != "msie" && this.model.scrollSettings.frozenColumns == 0 && !this._mediaQuery) {
                if (!this.element.find(".e-gridheader").hasClass("e-scrollcss") && this.model.filterSettings.filteredColumns) {
                    this.getHeaderTable().removeAttr('style');
                    this.getContentTable().removeAttr('style');
                }
                else {
                    this.getHeaderContent().find("div table").first().width(this.getContentTable().width());
                    this.getContent().find("div table").first().width(this.getContentTable().width());
                    this.getHeaderTable().width(this.getContentTable().width());
                }
            }
            if (this.getBrowserDetails().browser == "msie" && this.model.scrollSettings.frozenColumns == 0)
                !this.getContent().ejScroller("isVScroll") ? this.getContent().width(this.getHeaderContent().width()) : this.getContent().width(this.getHeaderContent().width() + 18);
            this._isHscrollcss();
        },
        _isHscrollcss: function () {
            var scroller = this.getContent().data("ejScroller"), css = scroller && (scroller.isHScroll() || scroller.isVScroll()) ? "addClass" : "removeClass";
            this.getHeaderContent().find(".e-headercontent")[css]("e-hscrollcss")
        },
        _initFrozenRows: function () {
            var gridRows = this.getRows();
            if (!this.model.currentViewData || this.model.currentViewData.length == 0)
                return;
            if (this.model.scrollSettings.frozenRows > 0 && gridRows != null) {
                this.model.scrollSettings["scroll"] = $.proxy(this._scroll, this);
                this.getContent().find(".e-frozeny").removeClass("e-frozeny")
                    .end().find(".e-frozenrow").removeClass("e-frozenrow");
                if (!ej.isNullOrUndefined(gridRows[0][this.model.scrollSettings.frozenRows - 1]) && !ej.isNullOrUndefined(gridRows[1][this.model.scrollSettings.frozenRows - 1]) && this.model.scrollSettings.frozenColumns > 0)
                    $(gridRows[0][this.model.scrollSettings.frozenRows - 1].cells).add(gridRows[1][this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");
                else
                    $(gridRows[this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");
                this.model.scrollSettings.height = this._rowHeightCollection[Math.floor(this.model.scrollSettings.height / this._rowHeightCollection[1])] + 18;
            }
            else
                delete this.model.scrollSettings["scroll"];
            if (!this.initialRender && (this.model.scrollSettings.frozenColumns > 0))
                this.rowHeightRefresh();
        },
        refreshScrollerEvent: function () {
            var proxy = this;
            this.getContent().find(".e-content,.e-movablecontent").scroll(ej.proxy(function (e) {
                if (this.model.scrollSettings.targetPane)
                    this.getHeaderContent().find(".e-movableheader").scrollLeft($(e.currentTarget).scrollLeft());
                else
                    this.getHeaderContent().find("div").first().scrollLeft($(e.currentTarget).scrollLeft());
                if (this.model.scrollSettings.frozenRows > 0 && this.model.editSettings.editMode.indexOf("inlineform") != -1 && this.model.isEdit) {
                    var scrollTop = e.target.scrollTop;
                    this.getContent().find(".e-content").scrollTop(0);
                    this.getScrollObject().scrollY(this.getScrollObject().model.scrollTop + scrollTop, true);
                }
            }, this));
            this.element.find(".e-gridheader").find(".e-headercontent,.e-movableheader").scroll(ej.proxy(function (e) {
                var $currentTarget = $(e.currentTarget);
                if (this.model.scrollSettings.targetPane) {
                    this.getContent().find(".e-movablecontent").scrollLeft($currentTarget.scrollLeft());
                    this.model.showSummary && this.getFooterContent().find(".e-movablefooter").scrollLeft($currentTarget.scrollLeft());;
                }
                else {
                    this.model.showSummary && this.getFooterContent().scrollLeft($currentTarget.scrollLeft());
                    this.getContent().find(".e-content").first().scrollLeft($currentTarget.scrollLeft());
                }
            }, this));
        },
		clearFiltering: function(field){
			if(field)
				this._clearFilter(field);					
			else{
				var fltrCols = this.model.filterSettings.filteredColumns, i=0;				
				while(i < fltrCols.length){
					this._clearFilter(fltrCols[i].field);					
				}
				if(this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel")
					this.getHeaderTable().find(".e-filtericon").removeClass("e-filteredicon e-filternone");
			}
		},
		_clearFilter: function(field){			
			switch(this.model.filterSettings.filterType){
				case ej.Grid.FilterType.FilterBar:
					if($.inArray(this.getColumnByField(field), this.filterColumnCollection) != -1){
						this.getHeaderTable().find("#" + field + "_filterBarcell").val("");
						this._currentFilterbarValue = "";
						var index = $.inArray(field, this.filterColumnCollection);	
						this._currentFilterColumn = this.getColumnByField(field);
						this._showFilterMsg();
					}
					break;
				case ej.Grid.FilterType.Menu:
					var id = "#" + this._id + "_" + this._$colType + "Dlg";
					if (this._$colType == "boolean")
						$(id).find('.e-value input[type!="hidden"]').ejCheckBox("model.checked", false);
					else
						if (this._$colType == "number")
							$(id).find('.e-numerictextbox').ejNumericTextbox("model.value", "");
						else
							$(id).find(".e-value input").val("");
					if (this._$colType == "date" || this._$colType == "datetime") {
						for (var j = 0; j < this.model.filterSettings.filteredColumns.length; j++) {
							if (this.model.filterSettings.filteredColumns[j].isComplex) {
								var preobject = this.model.filterSettings.filteredColumns[j].predicates;
								if (this.model.filterSettings.filteredColumns.length == 1) {
									this.model.filterSettings.filteredColumns = preobject;
								}
								else {
									this.model.filterSettings.filteredColumns[j] = preobject[0];
									this.model.filterSettings.filteredColumns.push(preobject[1]);
								}
							}
						}
					}
					this._$curFieldName = field;						
					break;
				case ej.Grid.FilterType.Excel:
					delete this._excelFilter._predicates[0][field];						
					this._excelFilter.closeXFDialog();
					this._$curFieldName = field;
					break;
			}
			this.filterColumn(field, "", "", "or");							
		},
		clearSearching: function(){
			this.element.find(".e-gridtoolbar #" + this._id + "_search").val("");
			this.search("");
			$.extend(this.model.searchSettings, this.defaults.searchSettings);
		},
        _renderByFrozenDesign: function () {
            var $div = $(document.createElement('div')), col = this._getMetaColGroup().find("col"), colgroups = {};
            colgroups["colgroup1"] = $div.append(ej.buildTag("colgroup").append(col.splice(0, this.model.scrollSettings.frozenColumns))).html();
            colgroups["colgroup2"] = $div.html(ej.buildTag("colgroup").append(col)).html();
            this.getContent().find("div").first().get(0).innerHTML = $.render[this._id + "_FrozenTemplate"]({ datas: this.model.currentViewData }, colgroups);
            this.setGridContentTable(this.getContent().find(".e-table").attr("role", "grid"));
        },
        addFrozenTemplate: function () {
            var template = "<div class='e-frozencontentdiv'>"
            + "<table cellspacing='0.25px' class='e-table'>{{:~colgroup1}}<tbody>"
            + "{{for datas tmpl='" + this._id + "_JSONFrozenTemplate'/}}"
            + "</tbody></table></div>"
            + "<div class='e-movablecontent'><div class='e-movablecontentdiv'><table cellspacing='0.25px' class='e-table'>{{:~colgroup2}}<tbody>"
            + "{{for datas tmpl='" + this._id + "_JSONTemplate'/}}"
            + "</tbody></table></div></div>", templates = {};
            templates[this._id + "_FrozenTemplate"] = template;
            $.templates(templates);
        },
        _getTopRow: function (offsetTop) {
            var currentTopRow = this.model.scrollSettings.frozenRows, i = 0;
            if (offsetTop > 10) {
                for (var i = 0; i < this._rowHeightCollection.length; i++) {
                    if (this._rowHeightCollection[i] > offsetTop) {
                        currentTopRow = this.model.scrollSettings.frozenRows + i - 1;
                        break;
                    }
                }
            }
            return { imaginaryIndex: currentTopRow, actualIndex: i };
        },
        _showHideRow: function (from, to, action, scrollPosition) {
            var rows = this.getRows();
            if (this.model.scrollSettings.frozenColumns > 0)
                $(rows[0]).slice(from, to).add($(rows[1]).slice(from, to).toArray())[action]();
            else
                $(rows).slice(from, to)[action]();
            this._currentTopFrozenRow = action == "show" ? from : to;
            this.getScrollObject()._changevHandlerPosition(scrollPosition);
        },
        _scroll: function (args) {
            if (args.scrollData != null && args.scrollData.dimension != "width") {
                args.cancel = true;
                var rows = this.getRows(), indexes = this._getTopRow(args.scrollTop), currentTopRow = indexes.imaginaryIndex, frozenRows;
                if (currentTopRow > this._currentTopFrozenRow)
                    this._showHideRow(this.model.scrollSettings.frozenRows, currentTopRow, "hide", args.scrollTop);
                else if (currentTopRow < this._currentTopFrozenRow)
                    this._showHideRow(currentTopRow, this._currentTopFrozenRow + 1, "show", args.scrollTop);
                var movableContent = this.getContentTable().last().find("tr");
                var border = (parseInt(movableContent.last().find("td:first").css("border-top-width")) * 2) + 1;
                if (args.scrollTop == this.getScrollObject()._vScrollbar.model.maximum && ((movableContent.last()[0].offsetTop + movableContent.last().height() - border) > this.element.find(".e-content").height())) {
                    var totalHeight = movableContent.last().prev()[0].offsetTop + movableContent.last().prev().height();
                    var count = 1;
                    for (var i = (movableContent.length - 2) ; totalHeight - border > this.element.find(".e-content").height() ; i++) {
                        totalHeight = movableContent[i].offsetTop + movableContent.eq(i).height();
                        count++;
                        break;
                    }
                    this._showHideRow(this.model.scrollSettings.frozenRows, currentTopRow + count, "hide", args.scrollTop);
                }
                args.model.scrollTop = args.scrollTop;
            }
            else {
                if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && !ej.isNullOrUndefined(this.getScrollObject()._vScrollbar._scrollData))
                    this.getScrollObject()._vScrollbar._scrollData.skipChange = true;
            }
        },
        _renderAlertDialog: function () {
            var $contentDiv = ej.buildTag('div.e-content', this._getLocalizedLabels("frozenColumnsMessage"))
                , $buttons = ej.buildTag('span.e-buttons', "<input type='button' id=" + this._id + 'ConfirmDialogOK' + " value='" + this._getLocalizedLabels("OkButton") + "'/>");
            this._alertDialog = ej.buildTag('div#' + this._id + 'AlertDialog');
            this._alertDialog.append($contentDiv).append($buttons);
            this.element.append(this._alertDialog);
            $buttons.find("input").ejButton({
                cssClass: this.model.cssClass,
                showRoundedCorner: true,
                size: "mini",
                click: $.proxy(function (args) {
                    this._alertDialog.ejDialog("close");
                }, this)
            });
            this._renderFDialog(this._id + 'AlertDialog');
            this._alertDialog.ejDialog({ width: "auto", enableModal: true });
        },
        _renderFDialog: function (id) {
            $("#" + id).ejDialog({ showOnInit: false, "enableRTL": this.model.enableRTL, "cssClass": this.model.cssClass, "showHeader": false, width: 260, enableResize: false, allowKeyboardNavigation: false, content: "#" + this._id });
        },
        _virtualScroll: function (e) {
            if (e != null) {
                var flag = 0;
                var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
                var pageInfo = this.model.pageSettings;
                var tbody = this.getContentTable()[0].tBodies[0];
                var virtualRows = $(tbody).find('tr.e-virtualrow');
                pageInfo.totalPages = Math.ceil(recordCount / pageInfo.pageSize);
                if (e.scrollTop !== undefined)
                    e.model.scrollTop = e.scrollTop;
                if (e.reachedEnd != undefined) e.model.reachedEnd = e.reachedEnd;
                var currentPageNo = this._calculateCurrenPage(virtualRows, this.getContentTable(), e.model);
                if (currentPageNo > pageInfo.totalPages)
                    currentPageNo = pageInfo.totalPages;
                if (pageInfo.currentPage != currentPageNo && $.inArray((currentPageNo - 1) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
                    this._isVirtualRecordsLoaded = false;
                }
                if (!this._isVirtualRecordsLoaded) {
                    if ($.inArray((currentPageNo - 1) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
                        if (this.model.scrollSettings.virtualScrollMode == "continuous" && !e.reachedEnd)
                            return
                        if (currentPageNo == pageInfo.totalPages && $.inArray((currentPageNo - 2) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
                            flag++;
                            this.set_currentPageIndex(currentPageNo);
                        }
                        if (flag == 1) this._lastRow = true;
                        this.set_currentPageIndex(currentPageNo);
                    }
                    pageInfo.currentPage = currentPageNo;
                }
                else
                    pageInfo.currentPage = currentPageNo;
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
            }
        },

        _createPagerStatusBar: function () {
            var $statusBar = this.element.find(".e-pagerstatusbar");
            if ($statusBar.length)
                $statusBar.remove();
            var $pagermsgDiv = ej.buildTag('div.e-pagermsgdiv');
            this.$pagerStatusBarDiv = ej.buildTag('div.e-pagerstatusbar').append($pagermsgDiv);
            this.$pagerStatusBarDiv.appendTo(this.element);
            this.$pagerStatusBarDiv.css("display", "none");
        },
        _refreshVirtualContent: function (currentPage) {
            var rowHeight = this.getRowHeight();
            var recordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
            if (currentPage != null) {
                this._currentPage(currentPage);
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
            }
            var currentIndex = this.getCurrentIndex();
            var tbody = this.getContentTable()[0].tBodies[0];
            if (currentIndex > 0) {
                var virtualTRTop = document.createElement("tr");
                $(virtualTRTop).addClass("e-virtualrow").css("height", rowHeight * currentIndex).prependTo(tbody);
            } if (currentIndex + this.model.pageSettings.pageSize <= recordsCount) {
                var virtualTRBottom = document.createElement("tr");
                var virtualHeight = this.model.scrollSettings.virtualScrollMode == "normal" ? rowHeight * (recordsCount - (currentIndex + this.model.pageSettings.pageSize)) : 1;
                $(virtualTRBottom).addClass("e-virtualrow").css("height", virtualHeight).appendTo($(tbody));
            }
            this.virtualLoadedPages = new Array();
            this.orderedVirtualLoadedPage = [];
            this.virtualLoadedPages.push(currentIndex >= 0 ? currentIndex : 0);
            this.orderedVirtualLoadedPage.push(currentIndex >= 0 ? currentIndex : 0);
            var focusTR = $(tbody).find('tr:not(.e-virtualrow)').attr('name', currentIndex >= 0 ? currentIndex : 0)[0];
            if (focusTR && focusTR.previousSibling && ($(focusTR.previousSibling).hasClass("e-virtualrow") || focusTR.previousSibling.offsetTop > (currentIndex * this.getContent().height()))) {
                this.getContent().children("div").first().scrollTop(this.getContent().find(".content").scrollTop() - (this.getContent().find(".content").scrollTop() - focusTR.offsetTop));
                this._isVirtualRecordsLoaded = true;
            }
        },

        _calculateCurrenPage: function (virtualRows, target, args) {
            var pageSize = this.model.pageSettings.pageSize;
            var currentPage, tempCPage, diff, proxy = this, trEle, isLast, viewTr = [], cur, oTop, len,currentRowValue,$currentRow;
            var rowHeight = this.getRowHeight();
            currentPage = (args.scrollTop + this.model.scrollSettings.height) / rowHeight / pageSize;            
            currentRowValue = (this.model.pageSettings.pageSize * (this.model.pageSettings.currentPage -1 ));
			 $currentRow = this.getContentTable().find("tr[name="+currentRowValue+"]").eq(0);
			if ($currentRow.length && $currentRow.offset().top > 0 &&  args.scrollTop < this._scrollValue && this.virtualLoadedPages.indexOf(Math.ceil(currentPage - 1) * pageSize) !== -1)
                currentPage = Math.floor(currentPage);
            else
                currentPage = Math.ceil(currentPage);

            if (args.scrollTop >= this._scrollValue && args.virtualScrollMode == "continuous" && args.reachedEnd) {
                currentPage = this.virtualLoadedPages[this.virtualLoadedPages.length - 1] / pageSize + 2;
            }

            if ($.inArray((currentPage - 1) * pageSize, this.virtualLoadedPages) !== -1) {
                var viewTrs = this.getContentTable().children("tbody").children("tr"); len = viewTrs.length;
                isLast = args.scrollTop >= this._scrollValue;
                for (var i = 0; i < len; i++) {
                    cur = viewTrs[i];
                    oTop = cur.offsetHeight + cur.offsetTop;
                    if (oTop > args.scrollTop + proxy.model.scrollSettings.height) {
                        if (viewTr.length === 0 && i !== 0)
                            viewTr = [viewTrs[cur.offsetTop <= args.scrollTop + proxy.model.scrollSettings.height ? i : i - 1]];
                        break;
                    }
                    if (oTop >= args.scrollTop && oTop <= args.scrollTop + proxy.model.scrollSettings.height) {
                        viewTr.push(cur);
                        if (isLast === false && viewTr.length > 1)
                            break;
                    }
                }
                trEle = $(args.scrollTop >= this._scrollValue ? viewTr[viewTr.length - 1] : viewTr[0]);
                if (trEle.hasClass('e-virtualrow')) {
                    if (viewTr.length === 1) {
                        currentPage++;
                    }
                }
                else
                    currentPage = parseInt(trEle.attr("name"), 10) / pageSize + 1;
            }
            this._scrollValue = args.scrollTop;
            for (var index = 0; index < virtualRows.length; index++) {
                var val = virtualRows[index];
                if (val.offsetTop + val.offsetHeight >= args.scrollTop) {
                    var prevVirtualPage = this._calculatePrevPage(virtualRows, target, args);
                    this._prevPageNo = prevVirtualPage;
                    if (currentPage == 0)
                        currentPage = 1;
                    currentPage = currentPage > this.model.pageSettings.totalPages ? this.model.pageSettings.totalPages : currentPage;
                    return currentPage;
                }
            }
            return currentPage;
        },
        _calculatePrevPage: function (virtualRows, target, args) {
            for (var i = 0; i < virtualRows.length; i++) {
                var val = virtualRows[i];
                if (val.offsetTop + val.offsetHeight >= args.scrollTop) {
                    var trElement = $(val).prevAll('tr[name]')[0];
                    if (trElement != null) {
                        return Math.ceil(parseInt($(trElement).attr('name'), 10) / this.model.pageSettings.pageSize) + 1;
                    }
                }
            }
            return -1;
        },
        _refreshVirtualPagerInfo: function () {
            var model = {};
            model.pageSize = this.model.pageSettings.pageSize;
            model.currentPage = this._currentPage();
            model.totalRecordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
            model.totalPages = Math.ceil(model.totalRecordsCount / model.pageSize);

            return model;
        },
        _showPagerInformation: function (model) {
            var from = (model.currentPage - 1) * model.pageSize;
            $(this.$pagerStatusBarDiv).find("div:first").html(String.format(this._getLocalizedLabels("PagerInfo"), model.currentPage, model.totalPages, model.totalRecordsCount), from, from + model.pageSize);
            $(this.$pagerStatusBarDiv).css('display', 'block');
        },
        _cellMerging: function (args) {
            args.colMerge = function (range) {
                if (this.cell.className.indexOf("e-colmerge") == -1) {
                    this.cell.className += " e-colmerge";
                    if (this.model.columns.length - this.cell.cellIndex < range)
                        range = this.model.columns.length - this.cell.cellIndex;
                    this.cell.colSpan = range;
                    for (var i = 1; i < range; i++) {
                        if (!ej.isNullOrUndefined(this.cell.parentElement.children[this.cell.cellIndex + i]))
                            this.cell.parentElement.children[this.cell.cellIndex + i].className += " e-hide";
                    }
                }
            };
            args.rowMerge = function (range) {
                if (this.cell.className.indexOf("e-rowmerge") == -1) {
                    this.cell.className += " e-rowmerge";
                    var ele = this.cell.parentNode.parentNode;
                    if (ele.rows.length - this.cell.parentElement.rowIndex < range)
                        range = ele.rows.length - this.cell.parentElement.rowIndex;
                    this.cell.rowSpan = range;
                    for (var i = 0; i < range - 1; i++) {
                        if (!ej.isNullOrUndefined(ele.children[this.cell.parentElement.rowIndex + i].nextSibling)) {
                            if (!($(".e-grid").children().is('.e-dialog')) || ($(".e-grid").find('.e-dialog').attr("style").indexOf("display: none")) != -1 || this.model.allowFiltering)
                                ele.children[this.cell.parentElement.rowIndex + i].nextSibling.children[this.cell.cellIndex].className += " e-merged e-hide";
                        }
                        else
                            break;
                    }
                }
            };
            args.merge = function (col, row) {
                if (col > 1 && row > 1) {
                    if (this.cell.className.indexOf("e-colmerge") == -1) {
                        this.cell.className += " e-colmerge";
                        var ele = this.cell.parentNode.parentNode;
                        if (ele.rows.length - this.cell.parentElement.rowIndex < row)
                            row = ele.rows.length - this.cell.parentElement.rowIndex;
                        if (!($(".e-grid").children().is('.e-dialog')) || ($(".e-grid").find('.e-dialog').attr("style").indexOf("display: none")) != -1 || this.model.allowFiltering) {
                            for (var i = 0; i < row ; i++) {
                                if (!ej.isNullOrUndefined(ele.children[this.cell.parentElement.rowIndex + i])) {
                                    var selectCell = ele.children[this.cell.parentElement.rowIndex + i].children[this.cell.cellIndex];
                                    if (this.model.columns.length - selectCell.cellIndex < col)
                                        col = this.model.columns.length - selectCell.cellIndex;
                                    selectCell.colSpan = col;
                                    for (var j = 1; j < col; j++) {
                                        if (!ej.isNullOrUndefined(selectCell.parentElement.children[this.cell.cellIndex + j]))
                                            selectCell.parentElement.children[this.cell.cellIndex + j].className += " e-hide";
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        else {
                            this.cell.colSpan = col;
                            for (var j = 1; j < col; j++) {
                                if (!ej.isNullOrUndefined(this.cell.nextSibling))
                                    this.cell.parentElement.children[this.cell.cellIndex + j].className += " e-hide";
                            }
                        }
                        args.rowMerge(row);
                    }
                }
                else {
                    if (col > 1)
                        args.colMerge(col);
                    if (row > 1)
                        args.rowMerge(row);
                }
            };
        },
        _replacingContent: function () {
            var temp = document.createElement('div');
            var currentIndex = this.getCurrentIndex();
            var contentTable = this.getContentTable()[0];
            var colGroup = $(contentTable).find("colgroup").first();
            var rowHeight = this.getRowHeight();
            colGroup.replaceWith(this._getMetaColGroup());
            this.model.detailsTemplate != null && colGroup.prepend(this._getIndentCol());
            var tbody = contentTable.tBodies[0];
            var cloneEle = $(tbody).clone();
            var currentData = this.model.currentViewData;
            if (!ej.isNullOrUndefined(this._currentPageData)) {
                this._virtualLoadRecords[this._currentPage()] = this._currentPageData;
                this._currentPageData = null;
            }
            else
                this._virtualLoadRecords[this._currentPage()] = currentData;
            var elementTbody = $("<tbody></tbody>").append($.render[this._id + "_JSONTemplate"](currentData));
            var proxy = this;
            var $elementTbody = elementTbody.children("tr");
            this.virtualLoadedPages.push(currentIndex >= 0 ? currentIndex : 0);
            var orderedVirtualPages = ej.dataUtil.mergeSort(ej.distinct(this.virtualLoadedPages));
            var tempTbody = $("<tbody></tbody>");
            $($elementTbody).attr('name', currentIndex);
            var minValue = ej.dataUtil.min(orderedVirtualPages);
            var maxValue = ej.dataUtil.max(orderedVirtualPages);
            $(cloneEle).children(".e-virtualrow").remove();
            $(tempTbody).append($(cloneEle).children("tr"));
            for (var i = 0; i < orderedVirtualPages.length; i++) {
                var val = orderedVirtualPages[i];
                var pVal = orderedVirtualPages[i - 1];
                if (val != this.orderedVirtualLoadedPage[i] || this.orderedVirtualLoadedPage[i] == undefined) {
                    if (pVal != undefined)
                        $elementTbody.insertAfter($(tempTbody).children('[name=' + pVal + ']:last'));
                    else
                        $elementTbody.insertBefore($(tempTbody).children('[name=' + this.orderedVirtualLoadedPage[i] + ']:first'));
                    this.orderedVirtualLoadedPage = orderedVirtualPages;
                }
                if (val != 0) {
                    var prevValue = val == minValue ? minValue : pVal;
                    var middleRows = val - prevValue - proxy.model.pageSettings.pageSize;
                    if (middleRows > 0) {
                        var virtualTRMiddle = document.createElement("tr");
                        $(virtualTRMiddle).addClass("e-virtualrow").css("height", rowHeight * middleRows).insertBefore($(tempTbody).children('[name=' + val + ']:first'));
                    }
                }
                if (val == maxValue) {
                    var bottomRows = proxy._gridRecordsCount - maxValue - proxy.model.pageSettings.pageSize;
                    if (bottomRows > 0) {
                        var virtualTRBottom = document.createElement("tr");
                        $(virtualTRBottom).addClass("e-virtualrow").css("height", rowHeight * bottomRows).appendTo(tempTbody);
                    }
                }
            }
            if (minValue > 0) {
                var virtualTRTop = document.createElement("tr");
                $(virtualTRTop).addClass("e-virtualrow").css("height", rowHeight * minValue).prependTo(tempTbody);
            }
            var $content = this.getContent();
            var focusTR = $(tbody).html($(tempTbody).html()).children("tr[name=" + currentIndex + "]")[0];
            var focusPrev = focusTR.previousSibling;
            var con = $content.height();
            var focus = focusTR.offsetTop
            if ((focusTR && focusPrev && ((this._virIndex || $(focusPrev).hasClass("e-virtualrow")) || focusPrev.offsetTop > (currentIndex * con))
            && (this._gridRecordsCount - currentIndex >= this.model.pageSettings.pageSize || focusTR.offsetParent.offsetHeight - focus < con)) || this._lastRow) {
                if (this._lastRow) this._lastRow = false;
                if (this._virIndex) this._virIndex = false;
                this._isVirtualRecordsLoaded = true;
                //this.getContent().children("div").first().scrollTop(this.getContent().find(".content").scrollTop() - (this.getContent().find(".content").scrollTop() - focusTR.offsetTop));
                $content.find(".e-content").scrollTop(focus);
                this._scrollValue = this.getContent()[0].firstChild.scrollTop;
            }
            $(temp).append($("<table></table>").append(tempTbody));
            var $contentTableTr = $(contentTable).get(0);
            var tFirst = temp.firstChild;
            $contentTableTr.replaceChild(this.model.rowTemplate != null ? tFirst.lastChild : tFirst.firstChild, $contentTableTr.lastChild);
            this._currentJsonData = currentData;
            this._gridRows = $(contentTable).get(0).rows;
            var lastVirtualRow = $(contentTable).find(".e-virtualrow").last();
            var lastVirtualRowHeight = this.model.scrollSettings.virtualScrollMode == "normal" ? (lastVirtualRow.height() - ($(contentTable).height() - (this._gridRecordsCount * rowHeight))) : 1;
            lastVirtualRow.css("height", lastVirtualRowHeight);
            this._eventBindings();
        },
        _refreshPagerTotalRecordsCount: function () {
            if (this.model.filterSettings.filteredColumns.length)
                this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount, currentPage: this._currentPage() });
            else
                this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount, currentPage: this._currentPage() });
        },
        _maxZindex: function () {
            var maxZ = 1;
            maxZ = Math.max.apply(null, $.map($('body *'), function (e, n) {
                if ($(e).css('position') == 'absolute')
                    return parseInt($(e).css('z-index')) || 1;
            }));
            if (maxZ == undefined || maxZ == null)
                maxZ = 1;
            return maxZ;
        },
        _keyPressed: function (action, target, e) {
            var $target = $(target);
            if ($target.hasClass('e-tooltxt') && e.code == 13) {
                var args = { currentTarget: target, target: target.firstChild }, $toolbar = $(target).closest(".e-gridtoolbar");
                $toolbar.ejToolbar("instance")._trigger("click", args);
                return false;
            }
            if ($target.hasClass('e-ddl') && e.code == 13 && $(document.activeElement).parents('td').hasClass("e-templatecell") )
            return true;
            if (!this.model.allowKeyboardNavigation || (target.tagName == 'INPUT' && this.model.keyConfigs[action].indexOf(",") == -1 && e.code != 40 && e.code != 38 && e.code != 13 && e.code != 27 && e.code != 9) || String.fromCharCode(e.code).toLowerCase() == this.element[0].accessKey.toLowerCase())
                return true;
			if(this.model.editSettings.editMode == "batch" && (target.tagName == 'INPUT' && e.code != 13 && e.code != 9) && ((target.selectionStart != 0 && action != "moveCellRight")||(target.selectionEnd != target.value.length && action != "moveCellLeft")))
				return true;
            if (this.model.allowFiltering && ($target.hasClass('e-filtertext') && e.code == 13) || ($target.hasClass('e-fltrbtn') && e.code == 13))
                return true;
            if ((this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") && $(target).closest("#" + this._id + "EditForm").length)
                return true;
            else if ($(target).parent().siblings("#" + this._id + "EditForm").length)
                return true;
            if (e.code == 13 && $target.parent().hasClass("e-unboundcelldiv"))
                return true;
            if (e.code == 13 && target.tagName == 'INPUT' && $target.parent().is("#" + this._id + "_search"))
                action = "searchRequest";
            if (e.code == 13 && $(target).hasClass("e-gridtoolbar")) {
                toolbarId = $target.find(".e-hover").attr("Id");
                action = "toolbarOperationRequest";
            }
            if (this.getPager() != null)
                var pager = this.getPager().ejPager("model"), pageIndex = pager.currentPage;
            var returnValue = false, curEl, $target = $(target);

            switch (action) {
                case "insertRecord":
                    if (ej.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_add");
                    break;
                case "toolbarOperationRequest":
                    this._toolbarOperation(toolbarId);
                    break;
                case "searchRequest":
                    this.search($target.val());
                    break;
                case "saveRequest":
                    if (ej.gridFeatures.edit) {
                        $target.blur();
                        if (this.model.editSettings.editMode == "batch")
                            this._moveCurrentCell("down");
                        else
                            this._toolbarOperation(this._id + "_update");
                    }
                    break;
                case "cancelRequest":
                    if (ej.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_cancel");
                    break;
                case "deleteRecord":
                    if (ej.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_delete");
                    break;
                case "editRecord":
                    if (ej.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_edit");
                    break;
                case "totalGroupCollapse":
                    if (ej.gridFeatures.group) {
                        this.collapseAll();
                        this.element.focus();
                    }
                    break;
                case "totalGroupExpand":
                    if (ej.gridFeatures.group) {
                        this.expandAll();
                        this.element.focus();
                    }
                    break;
                case "selectedGroupExpand":
                    if (ej.gridFeatures.group) {
                        this._$currentTr = $(this.getRows()).eq(this._selectedRow());
                        curEl = this._$currentTr.parents("tr").first().prev().find(".e-recordpluscollapse");
                        this.expandCollapse(curEl);
                    }
                    break;
                case "selectedGroupCollapse":
                    if (ej.gridFeatures.group) {
                        this._$currentTr = $(this.getRows()).eq(this._selectedRow());
                        curEl = this._$currentTr.parents("tr").first().prev().find(".e-recordplusexpand");
                        this.expandCollapse(curEl);
                    }
                    break;
                case "firstRowSelection":
                    if (ej.gridFeatures.selection)
                        this.selectRows(0);
                    break;
                case "lastRowSelection":
                    if (ej.gridFeatures.selection)
                        this.selectRows($(this.getRows()).length - 1);
                    break;
                case "upArrow":
                    if (ej.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined)) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        if (this._selectedRow() > 0) {
                            this.selectRows(this._selectedRow() - 1);
                            if (this.model.editSettings.editMode == "batch")
                                this._moveCurrentCell("up");
                        }
                        if (this._previousRowCellIndex && this._previousRowCellIndex.length != 0 && this._previousRowCellIndex[0][0] != 0 && this._allowcellSelection) {
                            this.selectCells([[this._previousRowCellIndex[0][0] - 1, this._previousRowCellIndex[0][1]]]);
                            if (this.model.editSettings.editMode == "batch")
                                this._moveCurrentCell("down");
                        }
                    }
                    break;
                case "downArrow":
                    if (ej.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined)) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var lastRow = this._excludeDetailRows().length - 1;
                        if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.getRows()[0]))
                            lastRow = this.getRows()[0].length - 1;
                        if (this._selectedRow() != lastRow && this._selectedRow() != -1) {
                            this.selectRows(this._selectedRow() + 1);
                            if (this.model.editSettings.editMode == "batch")
                                this._moveCurrentCell("down");
                        }
                        if (this._previousRowCellIndex && this._previousRowCellIndex.length != 0 && this._previousRowCellIndex[0][0] != lastRow && this._allowcellSelection) {
                            this.selectCells([[this._previousRowCellIndex[0][0] + 1, this._previousRowCellIndex[0][1]]]);
                            if (this.model.editSettings.editMode == "batch")
                                this._moveCurrentCell("down");
                        }
                    }
                    break;
                case "rightArrow":
                    if (ej.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var lastRow = $(this.getRows()).length - 1;
                        if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] == this.model.columns.length - 1 && this._previousRowCellIndex[0][0] != lastRow) {
                            this.selectCells([[this._previousRowCellIndex[0][0] + 1, [0]]]);
                        } else if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] != this.model.columns.length - 1)
                            this.selectCells([[this._previousRowCellIndex[0][0], [parseInt(this._previousRowCellIndex[0][1]) + 1]]]);

                    }
                    break;
                case "leftArrow":
                    if (ej.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] == 0 && this._previousRowCellIndex[0][0] != 0)
                            this.selectCells([[this._previousRowCellIndex[0][0] - 1, [this.model.columns.length - 1]]]);
                        else if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] != 0)
                            this.selectCells([[this._previousRowCellIndex[0][0], [parseInt(this._previousRowCellIndex[0][1]) - 1]]]);

                    }
                    break;
                case "firstCellSelection":
                    if (ej.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var lastRow = $(this.getRows()).length - 1;
                        lastRow > -1 && this.selectCells([[0, [0]]]);
                    }
                    break;
                case "lastCellSelection":
                    if (ej.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var lastRow = $(this.getRows()).length - 1;
                        lastRow > -1 && this.selectCells([[lastRow, [this.model.columns.length - 1]]]);
                    }
                    break;
                case "nextPage":
                    if (this.getPager() != null)
                        pageIndex = pageIndex + 1;
                    break;
                case "previousPage":
                    if (this.getPager() != null)
                        pageIndex = pageIndex - 1;
                    break;
                case "lastPage":
                    if (this.getPager() != null)
                        pageIndex = pager.totalPages;
                    break;
                case "firstPage":
                    if (this.getPager() != null)
                        pageIndex = 1;
                    break;
                case "nextPager":
                    if (this.getPager() != null)
                        pageIndex = Math.ceil(pager.currentPage / pager.pageCount) * pager.pageCount + 1;
                    break;
                case "previousPager":
                    if (this.getPager() != null)
                        pageIndex = (Math.floor(pager.currentPage / pager.pageCount) - 1) * pager.pageCount + 1;
                    break;
                case "moveCellLeft":
                    if (this.model.editSettings.editMode == "batch")
                        returnValue = this._moveCurrentCell("left");
                    else
                        returnValue = true;
                    break;
                case "moveCellRight":
                    if (this.model.editSettings.editMode == "batch" && $target)
                        returnValue = this._moveCurrentCell("right");
                    else
                        returnValue = true;
                    break;
                default:
                    returnValue = true;
            }
            if (this.getPager() != null && pageIndex <= pager.totalPages && pager.currentPage !== pageIndex && action != "searchRequest" && action !== "deleteRecord")
                this.getPager().ejPager("goToPage", pageIndex);
            return returnValue;
        },
        _findColumnsWidth: function () {
            var j = this.getHeaderTable().find(".e-headercell").not(".e-stackedHeaderCell"), index = 0;
            if (j.eq(0).hasClass("e-detailheadercell"))
                index = 1;
            for (var i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i]["visible"])
                    this.columnsWidthCollection[i] = j.eq(i + index).outerWidth();
            }
        },
        _calculateWidth: function () {
            var j = this.getHeaderTable().find(".e-columnheader").last().find("th:visible"), width = 0;
            for (var i = 0; i < j.length; i++)
                width += j.eq(i).outerWidth();
            return width;

        },
        _initIndicators: function () {
            var indicatorId = this._id + "_ColumnDropIndicator";
            if ($("#" + indicatorId).length)
                $("#" + indicatorId).remove();
            this._Indicator = document.createElement("DIV");
            $(this._Indicator).attr('id', indicatorId).addClass("e-columndropindicator").addClass("e-dropAcceptor").appendTo(document.body);
            $(this._Indicator).css({ "display": "none" });

        },
        _refreshGroupSummary: function () {
            var headerCols = this.getHeaderContent().find("colgroup col").clone();
            headerCols.splice(0, this.model.groupSettings.groupedColumns.length);
            var $gsColgroup = this.getContentTable().find(".e-groupsummary colgroup");
            for (var i = 0; i < $gsColgroup.length; i++) {
                if (!$($gsColgroup[i]).find(".e-summary").is("visible"))
                    $($gsColgroup[i]).find(".e-summary").show();
                $($gsColgroup[i]).find("col:not('.e-summary')").remove();
                $($gsColgroup[i]).append(headerCols.clone());
            }
        },
        
        reorderColumns: function (fromfname, tofname) {
            var fromindex = this.model.columns.indexOf(this.getColumnByField(fromfname));
            var toindex = this.model.columns.indexOf(this.getColumnByField(tofname));
            this.set_dropColumn(fromindex, toindex);
            if (this.model.showStackedHeader)
                this._refreshStackedHeader();
            if (this.model.scrollSettings.allowVirtualScrolling)
                this._refreshVirtualContent();
        },
        
        columns: function (details, action) {
            if (ej.isNullOrUndefined(details)) return;
            var isString = false;
            if (typeof details === "string") {
                details = [details];
                isString = true;
            }
            else if (details instanceof Array && details.length && typeof details[0] === "string")
                isString = true;
            for (i = 0; i < details.length; i++) {
                var index = $.inArray(this.getColumnByField(isString ? details[i] : details[i]["field"]), this.model.columns);
                if (action == "add" || ej.isNullOrUndefined(action)) {
                    if (index == -1)
                        this.model.columns.push(isString ? { field: details[i] } : details[i]);
                    else
                        this.model.columns[index] = isString ? { field: details[i] } : details[i];
                }
                else {
                    if (index != -1)
                        this.model.columns.splice(index, 1);
                }
            }
            var $header = this.element.find(".e-gridheader");
            this.columnsWidthCollection = [], tooltip = false;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                this.columnsWidthCollection.push(this.model.columns[columnCount]["width"]);
                if (!ej.isNullOrUndefined(tooltip))
                    tooltip = true;
            }
            this._enableRowHover(tooltip);
            this.element[0].replaceChild(this._renderGridHeader()[0], $header[0]);
            this._headerCellgDragDrop();
            this.model.allowReordering && this._headerCellreorderDragDrop();
            this.model.showColumnChooser && this._renderColumnChooserData(true);
            this.refreshContent(true);
        },
        _enableRowHover: function (isTooltip) {
            var tooltip = true;
            if (ej.isNullOrUndefined(isTooltip)) {
                for (var i = 0 ; i < this.model.columns.length; i++) {
                    if (!ej.isNullOrUndefined(this.model.columns[i]['tooltip'])) {
                        tooltip = true;
                        break;
                    }
                }
            }
            else
                tooltip = isTooltip;
            if (this.model.enableRowHover || tooltip)
                this._on(this.element, "mouseenter mouseleave", ".e-gridcontent tr td", this._rowHover);
            else
                this._off(this.element, "mouseenter mouseleave", ".e-gridcontent tr td");
        },
        _rowHover: function (e) {
            var $target = $(e.target);
            var $gridRows = $(this.getRows());
            if (($target.closest("#" + this._id + "EditForm").length && $target.hasClass("e-rowcell")) || !$target.hasClass("e-rowcell"))
                return;
            if (e.type == "mouseenter" && $target.hasClass("e-gridtooltip"))
                this._showTooltip($target);
            if (this.model.enableRowHover) {
                if (e.type == "mouseenter" && !this._dragActive) {
                     if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined($gridRows[0]) && !ej.isNullOrUndefined($gridRows[1]))	
					 {
						$gridRows = $($gridRows[0]).add($gridRows[1]);
						$gridRows.removeClass("e-hover");
						var index = this.getIndexByRow($target.parent());
						index != -1 && this.getRowByIndex(index).addClass("e-hover");
					}
                 else {
                     $gridRows.removeClass("e-hover");
                     if( $target.parent().hasClass('e-row') ||$target.parent().hasClass ('e-alt_row'))
                         $target.parent().addClass("e-hover");
					}
                } else {
                    if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined($gridRows[0]) && !ej.isNullOrUndefined($gridRows[1]))
                        $gridRows = $($gridRows[0]).add($gridRows[1]);
                    $gridRows.removeClass("e-hover");
                }
            }
            return false;
        },
        _showTooltip: function ($target) {
            var index = $target.index();
            if ($target.hasClass("e-headercelldiv"))
                index = $target.parent(".e-headercell").index();
            var col = this.getColumnByIndex(index);
            if (col["clipMode"] != ej.Grid.ClipMode.Ellipsis) {
                if (col["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip) {
                    var td = $target;
                    var $span = ej.buildTag('span', {}, {})
                    $span.html($target.html());
                    td.html($span);
                    var width = td.find('span:first')[0].getBoundingClientRect().width;
                    if ($target.width() > width)
                        return;
                }

                var val = { text: $target.text() };
                if (ej.isNullOrUndefined(col["tooltip"]))
                    return;
                var str = $("#" + col["tooltip"]).render(val);
                $target.attr('title', str);
            }
            else
                $target.removeAttr('title');

        },
        _rightClickHandler: function (e) {
            e.preventDefault(); var browser = ej.browserInfo();
            if (e.which == 3 || (browser.name == "msie" && browser.version == "8.0")) {
                var args = {};
                $target = $(e.target);
                $gridRow = $(this.getRows());
                if (this.getContentTable().has($target).length) {
                    var index = $gridRow.index($target.parent());
                    if (index == -1)
                        return;
                    args = { rowIndex: index, row: this.getRowByIndex(index), data: this._currentJsonData[index], cellIndex: $target.index(), cellValue: $target.html(), cell: $target };
                }
                else if (this.getHeaderTable().has($target).length) {
                    var index = 0
                    $th = this.getHeaderTable().find('th').not('.e-detailheadercell,.e-grouptopleftcell,.e-filterbarcell');
                    if ($target.is('.e-headercelldiv'))
                        index = $th.index($target.closest('.e-headercell'));
                    else
                        index = $th.index($target);
                    if (index == -1)
                        return;
                    args = { headerIndex: index, headerText: this.getColumnFieldNames()[index], headerCell: $th.eq(index), column: this.getColumnByIndex(index) }
                }
                else if ($target.is('.e-pager') || (this.getPager() != null && this.getPager().has($target).length)) {
                    args = { pager: this.model.pageSettings }
                }
                this._trigger("rightClick", args);
            }
        },
        _touchGrid: function (e) {
            var curPage = this._currentPage();
            switch (e.type) {
                case "swipeleft":
                    if (this.model.allowPaging && curPage != this.model.pageSettings.totalPages && !this.model.isEdit)
                        this.element.ejGrid("gotoPage", curPage + 1);
                    break;
                case "swiperight":
                    if (this.model.allowPaging && curPage > 1 && !this.model.isEdit)
                        this.element.ejGrid("gotoPage", curPage - 1);
                    break;
            }
        },
        _recorddblClickHandler: function (e) {
            var args = {}, $target = $(e.target).is(".e-rowcell") ? $(e.target) : $(e.target).closest("td");
            if ($target.closest(".e-grid").attr("id") !== this._id) return;
            if ((!$target.is('.e-rowcell') && !$target.closest("td").is(".e-rowcell")) || ($target.closest('.e-editcell,.e-editedbatchcell').length > 0))
                return;
            var indx = this.getIndexByRow($target.closest('tr'));
            var cellIndx = $target.index();
            args = { rowIndex: indx, row: this.getRowByIndex(indx), data: this._currentJsonData[indx], cell: $target, cellIndex: cellIndx, columnName: this.getColumnByIndex(cellIndx)["headerText"], cellValue: $target.text() };
            this._trigger("recordDoubleClick", args);
        },
        _recordClick: function (e) {
            var args = {}, $target = $(e.target).is(".e-rowcell") ? $(e.target) : $(e.target).closest("td");
            if ($target.closest(".e-grid").attr("id") !== this._id) return;
            if ((!$target.is('.e-rowcell') && !$target.closest("td").is(".e-rowcell")) || ($target.closest('.e-editcell,.e-editedbatchcell')).length > 0)
                return;
            var index = this.getIndexByRow($target.closest('tr'));
            var cellIndx = $target.index();
            args = { rowIndex: index, row: this.getRowByIndex(index), data: this._currentJsonData[index], cell: $target, cellIndex: cellIndx, columnName: this.getColumnByIndex(cellIndx)["headerText"], cellValue: $target.text() };
            this._trigger("recordClick", args);
        },
        _headerMouseDown: function (e) {
            if (this.model.allowResizing)
                this._resizer._mouseDown(e);
            if (($(e.target).hasClass("e-headercelldiv") && !$(e.target).parent().hasClass("e-grouptopleftcell")) || $(e.target).hasClass("e-headercell")) {
                var $headercell = $(e.target).hasClass("e-headercelldiv") ? $(e.target).parent() : $(e.target);
                this.model.enableHeaderHover && $headercell.removeClass("e-hover e-headercell-hover").addClass("e-headercellactive e-active");
            }
        },
        _headerHover: function (e) {
            var $target = $(e.target);
            if (e.type == "mouseover" || e.type == "mousemove" || e.type == "touchmove" || e.type == "MSPointerMove") {
                if (this.model.allowResizing || this.model.allowResizeToFit)
                    this._resizer._mouseHover(e);

                if (this.model.enableHeaderHover && !this._dragActive && (($target.hasClass("e-headercelldiv") && !$target.parent().hasClass("e-grouptopleftcell")) || $target.hasClass("e-headercell"))) {
                    if ($target.hasClass("e-headercelldiv"))
                        $target = $target.parent();
                    this.getHeaderTable().find(".e-columnheader").find(".e-headercell-hover").removeClass("e-headercell-hover").removeClass("e-hover");
                    $target.addClass("e-headercell-hover e-hover");
                }
                if ($target.hasClass("e-gridtooltip"))
                    this._showTooltip($target);
                if (e.type == "mouseover")
                    this._addCursor();
            } else
                this.model.enableHeaderHover && this.getHeaderTable().find(".e-columnheader").find(".e-headercell-hover").removeClass("e-headercell-hover").removeClass("e-hover");
        },
        _addCursor: function () {
            var flag = (this.model.allowResizing || this.model.allowResizeToFit || this.model.allowGrouping || this.model.allowFiltering || this.model.allowSorting || this.model.allowReordering || this.model.contextMenuSettings.enableContextMenu || this.model.selectionSettings.selectionMode == "column");
            if (!flag) {
                this.getHeaderTable().find(".e-columnheader").addClass("e-defaultcursor");
                this.getHeaderTable().find(".e-headercell").removeClass("e-defaultcursor");
            }
            else {
                this.getHeaderTable().find(".e-columnheader").removeClass("e-defaultcursor");
                if (!(this.model.contextMenuSettings.enableContextMenu || this.model.selectionSettings.selectionMode == "column")) {
                    var propArray = [{ val: this.model.allowSorting, str: "sort" }, { val: this.model.allowGrouping, str: "group" }, { val: this.model.allowReordering, str: "reorder" }, { val: this.model.allowFiltering, str: "filter" }];
                    var colpropcount = 0;
                    for (var i = 0; i < propArray.length; i++) {
                        if (propArray[i].val == false) {
                            propArray.splice(i, 1);
                            i--;
                        }
                    }

                    for (i = 0; i < this.model.columns.length && propArray.length > 0 ; i++) {
                        for (j = 0; j < propArray.length; j++) {
                            switch (propArray[j].str) {
                                case "sort":
                                    if (!ej.isNullOrUndefined(this.model.columns[i].allowSorting) && !this.model.columns[i].allowSorting)
                                        colpropcount++;
                                    break;
                                case "group":
                                    if (!ej.isNullOrUndefined(this.model.columns[i].allowGrouping) && !this.model.columns[i].allowGrouping)
                                        colpropcount++
                                    break;
                                case "reorder":
                                    if (!ej.isNullOrUndefined(this.model.columns[i].allowReordering) && !this.model.columns[i].allowReordering)
                                        colpropcount++
                                    break;
                                case "filter":
                                    if (!ej.isNullOrUndefined(this.model.columns[i].allowFiltering) && !this.model.columns[i].allowFiltering)
                                        colpropcount++;
                                    break;
                            }
                        }
                        if (colpropcount == propArray.length)
                            this.getHeaderTable().find(".e-headercell").eq(i).addClass("e-defaultcursor");
                        colpropcount = 0;
                    }
                }
            }
        },
        _colgroupRefresh: function () {
            if (this.model.allowResizing && this.model.scrollSettings.frozenColumns > 0) {
                var gridheaderCol = $(this.getHeaderTable()).find('colgroup');
                var gridcontentCol = $(this.getContentTable()).find('colgroup');
            }
            else {
                var gridheaderCol = $(this.getHeaderTable()).find('colgroup')[0];
                var gridcontentCol = $(this.getContentTable()).find('colgroup')[0];
            }
            var headerColClone = $(gridheaderCol).clone();
            var contentColClone = $(gridcontentCol).clone();
            $(gridcontentCol).remove();
            $(gridheaderCol).remove();
            if (this.model.allowResizing && this.model.scrollSettings.frozenColumns > 0) {
                $(headerColClone[0]).prependTo(this.getHeaderTable()[0]);
                $(headerColClone[1]).prependTo(this.getHeaderTable()[1]);
                $(contentColClone[0]).prependTo(this.getContentTable()[0]);
                $(contentColClone[1]).prependTo(this.getContentTable()[1]);
            }
            else {
                $(headerColClone).prependTo(this.getHeaderTable());
                $(contentColClone).prependTo(this.getContentTable());
            }
        },
        _detailColsRefresh: function () {
            this._$headerCols = this.getHeaderTable().children("colgroup").find("col");
            this._$contentCols = this.getContentTable().children("colgroup").find("col");
            var colCount = this.model.columns.length;
            if (this._$headerCols.length > colCount) this._$headerCols.splice(0, (this._$headerCols.length - colCount));
            if (this._$contentCols.length > colCount) this._$contentCols.splice(0, (this._$contentCols.length - colCount));
        },
        _headerdblClickHandler: function (e) {
            if (this.model.allowResizeToFit)
                this._resizer._columnResizeToFit(e);
            if (this.model.allowScrolling)
                this.getScrollObject().refresh();
        },

        _mouseUp: function (e) {
            if (this.model.allowResizing)
                this._resizer._mouseUp(e);
        },

        _mouseMove: function (e) {
            if (this.model.allowResizing)
                this._resizer._mouseMove(e);
        },
        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "enableResponsiveRow":
                        if (options[prop]) {
                            this.element.addClass("e-responsive");
                            if (this.model.minWidth) {
                                this._removeMedia();
                                this._scrollerAddedOnMedia = false;
                            }
                            if (this.model.allowFiltering) {
                                this.element.find('.e-filterDialoge').remove();
                                this._renderFilterDialogs();
                                this._renderResponsiveFilter();
                                this.element.find('.e-gridtoolbar').remove();
                            }
                        } else {
                            this.element.removeClass("e-responsive");
                            if (this.model.minWidth)
                                this._addMedia();
                            if (this.model.allowFiltering) {
                                $('body').find('.e-filterDialoge').remove();
                                this._renderFilterDialogs();
                            }
                        }
                        this._tdsOffsetWidth = [];
                        if (this.model.allowFiltering || this.model.allowSorting) {
                            var index = this.model.toolbarSettings.toolbarItems.indexOf('responsiveFilter');
                            index != -1 && this.model.toolbarSettings.toolbarItems.splice(index, 1);
                            var sortIndex = this.model.toolbarSettings.toolbarItems.indexOf('responsiveSorting');
                            sortIndex != -1 && this.model.toolbarSettings.toolbarItems.splice(sortIndex, 1);
                            this.element.find('.e-gridtoolbar').remove();
                            this._renderToolBar().insertBefore(this.element.find(".e-gridheader").first());
                        }
                        break;
                    case "showColumnChooser":
                        if (options[prop]) {
                            this._visibleColumns = [];
                            this._hiddenColumns = [];
                            this._visibleColumnsField = [];
                            this._hiddenColumnsField = [];
                            this._renderGridHeaderInternalDesign(this.model.columns);
                            this._renderColumnChooser();
                        }
                        else {
                            this.element.find(".e-ccButton").remove()
                            $("#" + this._id + 'ccDiv_wrapper').remove();
                        }
                        break;
                    case "gridLines":
                        this.getContent().removeClass("e-horizontallines e-verticallines e-hidelines");
						this.getHeaderContent().removeClass("e-horizontallines e-verticallines e-hidelines");
						this._showHeaderGridLines();
                        this._showGridLines();
                        break;
                    case "showDeleteConfirmDialog":
                        this.model.editSettings.showDeleteConfirmDialog = options[prop];
                        if (options[prop])
                            this._renderConfirmDialog();
                        else
                            this.element.find("#" + this._id + 'ConfirmDialog_wrapper').remove()
                        break;
                    case "showConfirmDialog":
                        this.model.editSettings.showConfirmDialog = options[prop];
                        if (options[prop])
                            this._renderConfirmDialog();
                        else
                            this.element.find("#" + this._id + 'ConfirmDialog_wrapper').remove()
                        break;
                    case "pageSettings":
                        var pageModel = this.getPager().ejPager("model");
                        if (ej.isNullOrUndefined(options[prop]["currentPage"]) || pageModel.currentPage != this._currentPage()) {
                            for (var pageProp in options[prop]) {
                                if (pageProp != "currentPage" && options[prop][pageProp] === pageModel[pageProp])
                                    delete options[prop][pageProp];
                            }
                            if ($.isEmptyObject(options[prop]))
                                break;
                            options[prop]["currentPage"] = this._currentPage();
                            this.getPager().ejPager("option", options[prop]);
                            this._currentPage(this._currentPage() > pageModel.totalPages ? pageModel.totalPages : this._currentPage());
                            this.refreshContent();
                        }
                        break;
                    case "columns":
                        var columns = options.columns;
                        this.model.columns = [];
                        this.columns(columns, "add");
                        break;
                    case "allowPaging":
                        this.model.allowPaging = options[prop];
                        if (options[prop] && this.element.children(".e-pager").length == 0) {
                            this.element.append(this._renderGridPager());
                            this.refreshContent();
                            this.getPager().ejPager("refreshPager");
                        } else {
                            this.getPager().remove();
                            this.setGridPager(null);
                            this.refreshContent();
                            if (this.model.filterSettings.filterType == "filterbar" && this.model.allowFiltering)
                                this._createPagerStatusBar();
                        }
                        break;
                    case "allowSearching":
                        this.model.allowSearching = options[prop];
                        break;
                    case "searchSettings":
                        $.extend(this.model.searchSetings, options[prop]);
                        this.refreshContent();
                        break;
                    case "allowGrouping":
                        if (options[prop] && this.element.children(".e-groupdroparea").length == 0) {
                            this.model.allowGrouping = options[prop];
                            this.addGroupingTemplate();
                            this.element.prepend(this._renderGroupDropArea());
                            this._enableGroupingEvents();
                            this._headerCellgDragDrop();
                            this._off(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);
                            this._on(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);
                        } else
                            this.element.children(".e-groupdroparea").remove();
                        if (this.model.allowGrouping) {
                            !ej.isNullOrUndefined(options["groupSettings"]) && $.extend(this.model.groupSettings, options["groupSettings"]);
                            this._enableGrouping();
                        }
                        break;
                    case "groupSettings":
                        $.extend(this.model.groupSettings, options[prop]);
                        if(this.model.allowGrouping && ej.isNullOrUndefined(options["allowGrouping"]))
							this._enableGrouping();
                        break;
                    case "cssClass":
                        this.element.removeClass(this.model.cssClass).addClass(options[prop]);
                        break;
                    case "allowFiltering":
                    case "filterSettings":
                        if (prop == "filterSettings")
                            $.extend(this.model.filterSettings, options[prop]);
                        else
                            this.model.allowFiltering = options[prop];
                        this._$fDlgIsOpen && (this._isExcelFilter ? this._excelFilter.closeXFDialog() : this._closeFilterDlg())
                        if (!this.model.allowFiltering) {
                            if (this.model.filterSettings.filterType == ej.Grid.FilterType.FilterBar)
                                this.getHeaderTable().find(".e-filterbar").remove();
                            else if (this.model.filterSettings.filterType == ej.Grid.FilterType.Menu || this.model.filterSettings.filterType == ej.Grid.FilterType.Excel)
                                this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
                                    .end().find(".e-headercellfilter").removeClass("e-headercellfilter");
                            this.model.filterSettings.filteredColumns = [];
                            this.refreshContent();
                        } else {
                            if (this.model.filterSettings.filterType == ej.Grid.FilterType.FilterBar) {
                                this.getHeaderTable().find(".e-filterbar").remove();
                                this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
                                    .end().find(".e-headercellfilter").removeClass("e-headercellfilter");
                                this._renderFiltering();
                                if (this.model.filterSettings.showFilterBarStatus && !this.model.allowPaging)
                                    this._createPagerStatusBar();
                                else if (this.model.allowPaging)
                                    this.getPager().ejPager({ enableExternalMessage: this.model.filterSettings.showFilterBarStatus });
                                var $filterbar = this.getHeaderTable().find(".e-filterbar");
                                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                                    $filterbar.prepend(this._getEmptyFilterBarCell());
                            } else if (!_filter && (this.model.filterSettings.filterType == ej.Grid.FilterType.Menu || this.model.filterSettings.filterType == ej.Grid.FilterType.Excel)) {
                                var _filter = 1;
                                this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
                                    .end().find(".e-headercellfilter").removeClass("e-headercellfilter");
                                this.getHeaderTable().find(".e-filterbar").remove();
                                var columnHeader = this.getHeaderTable().find(".e-columnheader").last().find(".e-headercell").not(".e-detailheadercell");
                                for (var i = 0; i < columnHeader.length; i++) {
                                    var columnName = columnHeader.eq(i).find(".e-headercelldiv").attr("ej-mappingname");
                                    var column = this.getColumnByField(columnName);
                                    if (ej.isNullOrUndefined(column.allowFiltering) || column.allowFiltering)
                                        columnHeader.eq(i).addClass("e-headercellfilter").append(ej.buildTag('div.e-filtericon e-icon e-filterset'));
                                }
                                if (this.model.filterSettings.filterType == ej.Grid.FilterType.Excel) {
                                    this._isExcelFilter = true;
                                    this._renderExcelFilter();
                                } else if (this._isExcelFilter) {
                                    this._isExcelFilter = false;
                                    this._excelFilter.resetExcelFilter();
                                    this._excelFilter = null;
                                }
                                this._renderFilterDialogs();
                                this.model.filterSettings.filteredColumns = [];
                                this.refreshContent();
                            }
                            this._enableFilterEvents();
                        }
                        break;
                    case "enableRowHover":
                        this.model.enableRowHover = options[prop];
                        this._enableRowHover();
                        break;
                    case "allowScrolling":
                    case "scrollSettings":
                        var $content = this.getContent();
                        if (prop != "allowScrolling") {
                            if (!ej.util.isNullOrUndefined(options["scrollSettings"])) {
                                if ($.isEmptyObject(options["scrollSettings"])) break;
                                $.extend(this.model.scrollSettings, options["scrollSettings"]);
                            }
                            if (options["scrollSettings"]["frozenColumns"] !== undefined || options["scrollSettings"]["frozenRows"] !== undefined ||
                                options["scrollSettings"]["allowVirtualScrolling"] !== undefined || options["scrollSettings"]["virtualScrollMode"] !== undefined) {
                                var model = this.model;
                                model.query = this.commonQuery.clone();
                                if (this._selectedRow() != -1)
                                    this.clearSelection(this._selectedRow());
                                if (options["scrollSettings"]["virtualScrollMode"] != undefined)
                                    model.pageSettings.currentPage = 1;
                                this.element.ejGrid("destroy").ejGrid(model);
                            }
                            else {
                                if (!ej.util.isNullOrUndefined(options["allowScrolling"]))
                                    this.model.allowScrolling = options["allowScrolling"];
                                !ej.util.isNullOrUndefined($content.data("ejScroller")) && $content.ejScroller("destroy");
                                if (this.model.allowScrolling) {
                                    this.getHeaderContent().find("div").first().addClass("e-headercontent");
									 this._originalScrollWidth = this.model.scrollSettings.width;
                                    this._renderScroller();
                                } else {
                                    this.element.children(".e-gridheader").removeClass("e-scrollcss");
                                    this.element.get(0).style.width.length == 0 && this.element.css("width", "auto");
                                }
                                this.setWidthToColumns();
                            }
                        }
                        break;
                    case "locale":
                        this.model.locale = options[prop];
                        var model = this.model;
                        model.query = this.commonQuery.clone();
                        this.element.ejGrid("destroy").ejGrid(model);
                        break;
                    case "dataSource":
                        var $content = this.element.find(".e-gridcontent").first();
                        if (this.model.showSummary && this.model.summaryRows.length > 0) {
                            this.element.children(".e-gridfooter").remove();
                            this._renderGridFooter().insertAfter($content);
                        }
                        if (!$.isFunction(options["dataSource"]))
                            this.resetModelCollections();
                      if(this._gridRecordsCount == 1 && !ej.isNullOrUndefined(this._cDeleteData) && $.inArray(this._cDeleteData[0], this._dataSource()) == -1 && this.model.editSettings.allowDeleting)
						    this._gridRecordsCount =this._dataSource().length;
                             this._refreshDataSource(this._dataSource());
                        if (this._gridRecordsCount && this.model.allowFiltering) {
                            this._initColumns(this.model.currentViewData[0] != undefined ? this.model.currentViewData[0] : this.model.currentViewData.value);
                            this._renderFilterDialogs();
                        }
                        this._addLastRow();
                        break;
                    case "selectedRowIndex":
                        if (this._selectedRow() != -1 && $.inArray(this._selectedRow(), this.selectedRowsIndexes) == -1)
                            this.selectRows(this._selectedRow());
                        else if (this._selectedRow() == -1) {
                            this.clearSelection();
                            this.selectedRowsIndexes = [];
                        }
                        break;
                    case "editType":
                        if (this._selectedRow() != -1 && $.inArray(this._selectedRow(), this.selectedRowsIndexes) == -1)
                            this.selectRows(this._selectedRow());
                        break;
                    case "editSettings":
                        $.extend(this.model.editSettings, options[prop]);
                        this._processEditing();
                        this.refreshBatchEditMode();
                        this.refreshToolbar();
                        this._tdsOffsetWidth = [];
                        $("#" + this._id + "_dialogEdit").data("ejDialog") && $("#" + this._id + "_dialogEdit").ejDialog("destroy");
                        $("#" + this._id + "_dialogEdit_wrapper,#" + this._id + "_dialogEdit").remove();
                        $("#" + this._id + "_externalEdit").remove();
                        this.getContentTable().find(".e-addedrow").remove();
                        if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                            if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate")
                                this.element.append(this._renderDialog());
                            else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                                this.element.append(this._renderExternalForm());
                            else if (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")
                                this._startAdd();
                       }
                        if (this.model.editSettings.allowDeleting && this.model.editSettings.showDeleteConfirmDialog)
                            ej.isNullOrUndefined(this._confirmDialog) && this._renderConfirmDialog();
                        this._enableEditingEvents();
                        break;
                    case "allowResizing":
                        this.model.allowResizing = options[prop];
                        if (this.model.allowResizing) {
                            this._on(this.element, ej.eventType.mouseMove, this._mouseMove);
                            this._on(this.element, "mouseup", this._mouseUp);
                            this._resizer = new ej.gridFeatures.gridResize(this);
                        }
                        else {
                            this._off(this.element, ej.eventType.mouseMove, this._mouseMove);
                            this._off(this.element, "mouseup", this._mouseUp);
                            this._resizer = null;
                        }
                        break;
                    case "allowReordering":
                        this.model.allowReordering = options[prop];
                        if (this.model.allowReordering)
                            this._headerCellreorderDragDrop();
                        break;
                    case "showSummary":
                    case "summaryRows":
                        if (prop == "showSummary" && !options[prop])
                            this.element.children(".e-gridfooter").remove();
                        else if (prop == "summaryRows" && this.model.showSummary || prop == "showSummary") {
                            this.element.children(".e-gridfooter").remove();
                            this.element.children(".e-gridfooter").remove();
                            var $content = this.element.find(".e-gridcontent").first();
                            var query = this.model.query.queries;
                            var pageQuery = [];
                            for (var i = 0; i < query.length; i++) {
                                if (query[i].fn === "onPage") {
                                    pageQuery = query.splice(i, 1);
                                }
                            }
                            var queryManager = this.model.query;
                            this._setSummaryAggregate(queryManager);
                            queryManager.queries.push(pageQuery[0]);
                            if (this._isLocalData) {
                                this._remoteSummaryData = this._dataManager.executeLocal(queryManager).aggregates;
                                this._renderGridFooter().insertAfter($content);
                            }
                            else {
                                var proxy = this;
                                var promise = this._dataManager.executeQuery(queryManager);
                                promise.done(function (e) {
                                    proxy.element.children(".e-gridfooter").remove();
                                    proxy._remoteSummaryData = e.aggregates
                                    proxy._renderGridFooter().insertAfter($content);
                                });
                            }
                            if (this.model.allowGrouping) {
                                this._rowCol = this._captionSummary();
                                this._isCaptionSummary = (this._rowCol != null && this._rowCol.length) > 0 ? true : false;
                                this.refreshContent(true);
                            }
                        }
                        break;
                    case "enableAltRow":
                        this.model.enableAltRow = options[prop];
                        this.addInitTemplate();
                        this.refreshContent();
                        break;
                    case "toolbarSettings":
                        $.extend(this.model.toolbarSettings, options[prop]);
                        this.element.children(".e-gridtoolbar").remove();
                        if (this.model.toolbarSettings.showToolbar)
                            this._renderToolBar().insertBefore(this.element.find(".e-gridheader").first());
                        break;
                    case "selectionSettings":
                        $.extend(this.model.selectionSettings, options[prop]);
                        this._allowrowSelection = this._allowcellSelection = this._allowcolumnSelection = false;
                        this._initSelection();
                        break;
                    case "sortSettings":
                        $.extend(this.model.sortSettings, options[prop]);
                        this.refreshContent();
                        break;
                    case "contextMenuSettings":
                        $.extend(this.model.contextMenuSettings, options[prop]);
                        !ej.isNullOrUndefined($("#" + this._id + "_Context").data("ejMenu")) && $("#" + this._id + "_Context").ejMenu("destroy");
                        if (this.model.contextMenuSettings.enableContextMenu)
                            this._renderContext()
                        break;
                    case "enableRTL":
                        this.model.enableRTL = options[prop];
                        var model = this.model;
                        model.query = this.commonQuery.clone();
                        this.element.ejGrid("destroy");
                        model.enableRTL ? $("#" + this._id).addClass("e-rtl") : $("#" + this._id).removeClass("e-rtl");
                        $("#" + this._id).ejGrid(model);
                        break;
                    case "enableTouch":
                        this.model.enableTouch = options[prop];
                        if (!this.model.enableTouch) {
                            this.element.addClass("e-touch");
                            this._off(this.element, "swipeleft swiperight", ".e-gridcontent .e-table");
                        }
                        else {
                            this._on(this.element, "swipeleft swiperight", ".e-gridcontent .e-table", $.proxy(this._touchGrid, this));
                            this.element.removeClass("e-touch");
                        }
                        break;
                    case "allowSelection":
                        if (options[prop]) {
                            this._off(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", this._clickHandler);
                            this._on(this.element, "click", this._clickHandler);
                        }
                        break;
                    case "query":
                        this.commonQuery = $.extend(true, {}, options[prop]);
                        break;
                    case "showStackedHeader":
                    case "stackedHeaderRows":
                        this.model.stackedHeaderRows = options[prop];
                        this._refreshStackedHeader();
                        break;
                    case "allowTextWrap":
                        this.element.addClass("e-wrap");
                        break;
                    case "rowTemplate":
                        this.refreshContent(true);
                        break;
                    case "detailsTemplate":
                        var $header = this.element.children(".e-gridheader");
                        $header.find("div").first().empty().append(this._renderGridHeader().find("table"));
                        this.setGridHeaderContent($header);
                        this.refreshContent(true);
                        if (this.model.allowGrouping)
                            this._headerCellgDragDrop();
                        break;
                }
            }

        },
        
        resetModelCollections: function () {
            this.model.groupSettings.groupedColumns = [];
            this.model.filterSettings.filteredColumns = [];
            this.model.sortSettings.sortedColumns = [];
            this.model.pageSettings.currentPage = this.defaults.pageSettings.currentPage;
            this.model.summaryRows = [];
        },
        _enableGrouping: function(){
			this.refreshTemplate();
			if (this.model.groupSettings.showToggleButton) {
			    for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
			        var headercell = this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").eq(columnCount);
 					var field = this.model.columns[columnCount].field;
			        if ($.inArray(field, this._disabledGroupableColumns) == -1 && !ej.isNullOrUndefined(field) && field != "") {
			            if (!headercell.find(".e-groupbutton").length) {
			                if ($.inArray(field, this.model.groupSettings.groupedColumns) != -1)
			                    headercell.append(this._getToggleButton().addClass("e-toggleungroup"));
			                else
			                    headercell.append(this._getToggleButton().addClass("e-togglegroup"));
			            }
			        }
			    }
			}
			if (!this.model.groupSettings.showToggleButton)
			    this.getHeaderTable().find(".e-groupbutton").remove();
			if (!ej.isNullOrUndefined(this.model.groupSettings.groupedColumns.length)) {
				var args = {};
				args.columnName = this.model.groupSettings.groupedColumns[this.model.groupSettings.groupedColumns.length - 1];
				args.requestType = ej.Grid.Actions.Grouping;
				$(".e-grid").find(".e-groupdroparea").empty();
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length - 1; i++)
					this._addColumnToGroupDrop(this.model.groupSettings.groupedColumns[i]);
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
					if (ej.isNullOrUndefined(this.getsortColumnByField(this.model.groupSettings.groupedColumns[i])))
						this.model.sortSettings.sortedColumns.push({ field: this.model.groupSettings.groupedColumns[i], direction: ej.sortOrder.Ascending});
				}
				this._processBindings(args);
			}
			if (!this.model.groupSettings.enableDropAreaAnimation)
				this.expandGroupDropArea();
			else
				this.collapseGroupDropArea();
        },
        
        addIgnoreOnExport: function (args) {
            if (typeof (args) == 'string')
                this.ignoreOnExport.push(args);
            else
                this.ignoreOnExport = this.ignoreOnExport.concat(args);
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.edit = {
        _processEditing: function () {
            var query = this._columnToSelect();
            this.model.query._fromTable != "" && query.from(this.model.query._fromTable);
            if (this._dataSource() instanceof ej.DataManager && query.queries.length && !this._dataManager.dataSource.offline) {
                var queryPromise = this._dataSource().executeQuery(query);
                queryPromise.done(ej.proxy(function (e) {
                    this._dropDownManager = ej.DataManager(e.result);
                    if (this.model.editSettings.editMode == "normal") this.addEditingTemplate();
                    else if (this.model.editSettings.editMode == "batch") this.addBatchEditTemplate();
                    else if (this.model.editSettings.editMode == "dialog" ||
                        this.model.editSettings.editMode == "externalform" ||
                        this.model.editSettings.editMode == "inlineform")
                        this.addDialogEditingTemplate();
                    else this.addExternalDialogEditingTemplate();
                }, this));
            } else {
                if (this.model.editSettings.editMode == "normal") this.addEditingTemplate();
                else if (this.model.editSettings.editMode == "batch") this.addBatchEditTemplate();
                else if (this.model.editSettings.editMode == "dialog" ||
                    this.model.editSettings.editMode == "externalform" ||
                    this.model.editSettings.editMode == "inlineform")
                    this.addDialogEditingTemplate();
                else this.addExternalDialogEditingTemplate();
            }
        },
        addEditingTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var $tbody = ej.buildTag('tbody');
            var $tr = ej.buildTag('tr');
            var $td = ej.buildTag('td', "", {}, { colSpan: this.model.scrollSettings.frozenColumns > 0 ? this.model.scrollSettings.frozenColumns : this.model.columns.length });
            var $form = ej.buildTag('form', "", {}, { id: this._id + "EditForm", "class": "gridform" });
            var $table = ej.buildTag('table.e-table', "", {}, { cellspacing: 0.25 });
            var $innerTbody = ej.buildTag('tbody');
            var $innerTr = ej.buildTag('tr');
            $tbody.append($tr);
            $tr.append($td);
            $td.append($form);
            var $colGroup = $(document.createElement('colgroup'));
            $form.append($table);
            $table.append($colGroup);
            $innerTbody.append($innerTr).appendTo($table);
            if (this.model.scrollSettings.frozenColumns > 0) {
                var $tbodyClone = $tbody.clone();
                $tbodyClone.find("td").first().prop("colSpan", this.model.columns.length - this.model.scrollSettings.frozenColumns);
            }
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                var $innerTd = ej.buildTag('td.e-rowcell');
                $innerTr.append($innerTd.get(0));
                if (ej.isNullOrUndefined(this.model.columns[columnCount]["isUnbound"]) && ej.isNullOrUndefined(this.model.columns[columnCount]["template"])) {
                    this._initCellEditType(columnCount, $innerTd);
                } else if (this.model.columns[columnCount]["template"]) {
                    var helpers = {}, htxt = this.model.columns[columnCount].headerText;
                    helpers["_" + this._id + "ColumnTemplating"] = ej.proxy(this._gridTemplate, null, this);
                    $.views.helpers(helpers);
                    if (!ej.isNullOrUndefined(htxt) && !ej.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
                        htxt = htxt.replace(/[^0-9\s\w]/g, "_");
                    $("#" + this._id + htxt + columnCount + "_Template").remove();
                    var scriptElement = this._createTemplateElement(this.model.columns[columnCount]);
                    $innerTd.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "')}}");
                } else if (this.model.columns[columnCount]["isUnbound"]) {
                    var helpers = {};
                    helpers["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
                    $.views.helpers(helpers);
                    $("#" + this._id + this.model.columns[columnCount].headerText.replace(/[^a-z0-9|s_]/gi, '')+ "_UnboundTemplate").remove();
                    divElement = this._createUnboundElement(this.model.columns[columnCount]);
                    $innerTd.addClass("e-unboundcell").addClass("e-" + this.model.columns[columnCount]["headerText"].replace(/[^a-z0-9|s_]/gi, '') + columnCount).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                    this.model.scrollSettings.frozenColumns > 0 && $innerTd.addClass("e-frozenunbound");
                    this._isUnboundColumn = true;
                }
                if (this.model.columns[columnCount]["textAlign"] != undefined)
                    $innerTd.css("text-align", this.model.columns[columnCount]["textAlign"]);
                this.model.columns[columnCount]["allowEditing"] == false && $innerTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                if (this.model.columns[columnCount]["isPrimaryKey"] === true) {
                    $innerTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                    this._primaryKeys.push($.trim(this.model.columns[columnCount].field));
                    this._primaryKeys = $.unique(this._primaryKeys);
                }
                if (this.model.columns[columnCount]["isIdentity"] === true) {
                    $innerTd.find(".e-field").addClass("e-identity");
                    this._identityKeys.push($.trim(this.model.columns[columnCount].field));
                    this._identityKeys = $.unique(this._identityKeys);
                }
                var $col = $(document.createElement('col'));
                if (this.model.columns[columnCount]["priority"]) {
                    $innerTd.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
                    $col.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
                }
                if (this.model.columns[columnCount]["visible"] === false) {
                    $col.css("display", "none");
                    $innerTd.addClass("e-hide");
                }
                if (!ej.isNullOrUndefined(this.model.columns[columnCount]["cssClass"])) {
                    $innerTd.addClass(this.model.columns[columnCount]["cssClass"]);
                }
                !this.model.groupSettings.showGroupedColumn && $innerTd.addClass("{{for ~groupedColumns}}" +
                    " {{if #data == '" + this.model.columns[columnCount]["field"] + "'}}e-hide{{/if}}" +
                    "{{/for}}") && $col.css("display", "none");
                $colGroup.append($col);
                if (columnCount == this.model.scrollSettings.frozenColumns - 1) {
                    $innerTr = $tbodyClone.find("tr").last();
                    $colGroup = $tbodyClone.find("colgroup");
                    $.templates(this._id + "_JSONFrozenEditingTemplate", $tbody.html());
                    $tbody = $tbodyClone;
                }
            }
            $.templates(this._id + "_JSONEditingTemplate", $tbody.html());
        },

        addDialogEditingTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var $tbody = ej.buildTag('div');
            var $form = ej.buildTag('form.gridform', "", {}, { id: this._id + "EditForm" });
            var $table = ej.buildTag('table', "", {}, { cellspacing: "14px" });
            var $innerTr, $labelTd, $valueTd, trElement, tdElement;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                if (this.model.editSettings.editMode == "dialog") {
                    trElement = 'tr';
                    tdElement = 'td';
                }
                else trElement = tdElement = 'div';
                $innerTr = ej.buildTag(trElement);
                $labelTd = ej.buildTag(tdElement, "", { "text-align": "right" }).addClass("e-label");
                $valueTd = ej.buildTag(tdElement, "", { "text-align": "left" }).addClass("e-rowcell");
                 if (this.model.columns[columnCount]["priority"] && this.model.editSettings.editMode == "inlineform") 
                    $innerTr.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
                $innerTr.append($labelTd.get(0)).append($valueTd.get(0));
                if (this.model.columns[columnCount].headerText == undefined)
                    this.model.columns[columnCount].headerText = this.model.columns[columnCount].field;
                $labelTd.append("<label for='" + this.model.columns[columnCount].field + "'>" + this.model.columns[columnCount].headerText + "</label>");
                if (ej.isNullOrUndefined(this.model.columns[columnCount]["isUnbound"]) && ej.isNullOrUndefined(this.model.columns[columnCount]["template"]))
                    this._initCellEditType(columnCount, $valueTd);
                else if (this.model.columns[columnCount]["template"]) {
                    var helpers = {}, htxt = this.model.columns[columnCount].headerText;
                    helpers["_" + this._id + "ColumnTemplating"] = ej.proxy(this._gridTemplate, null, this);
                    $.views.helpers(helpers);
                    if (!ej.isNullOrUndefined(htxt) && !ej.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
                        htxt = htxt.replace(/[^0-9\s\w]/g, "_");
                    $("#" + this._id + htxt + columnCount + "_Template").remove();
                    var scriptElement = this._createTemplateElement(this.model.columns[columnCount]);
                    $valueTd.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "')}}");
                } else if (this.model.columns[columnCount]["isUnbound"]) {
                    var helpers = {};
                    helpers["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
                    $.views.helpers(helpers);
                    $("#" + this._id + this.model.columns[columnCount].headerText.replace(/[^a-z0-9|s_]/gi, '')+ "_UnboundTemplate").remove();
                    divElement = this._createUnboundElement(this.model.columns[columnCount]);
                    $valueTd.addClass("e-unboundcell").addClass("e-" + this.model.columns[columnCount]["headerText"].replace(/[^a-z0-9|s_]/gi, '')+columnCount).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                    this.model.scrollSettings.frozenColumns > 0 && $valueTd.addClass("e-frozenunbound");
                    this._isUnboundColumn = true;
                    $innerTr.addClass("e-hide");
                }
                this.model.columns[columnCount]["allowEditing"] == false && $valueTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                if (this.model.columns[columnCount]["isIdentity"] === true) {
                    $valueTd.find(".e-field").addClass("e-identity");
                    this._identityKeys.push($.trim(this.model.columns[columnCount].field));
                    this._identityKeys = $.unique(this._identityKeys);
                }
                if (this.model.columns[columnCount]["visible"] === false)
                    $innerTr.addClass("e-hide");
                 if (!ej.isNullOrUndefined(this.model.columns[columnCount]["cssClass"])) {
                     $valueTd.addClass(this.model.columns[columnCount]["cssClass"]);
                }
                if (this.model.editSettings.editMode == "dialog") {
                    $form.append($table);
                    $table.append($innerTr);
                } else
                    $form.append($innerTr);
                $form.appendTo($tbody);
                if (this.model.columns[columnCount]["isPrimaryKey"] === true) {
                    $valueTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                    this._primaryKeys.push($.trim(this.model.columns[columnCount].field));
                    this._primaryKeys = $.unique(this._primaryKeys);
                }
            }
            if (this.model.editSettings.editMode == "dialog") $form.append($table);
            $tbody = this.renderDiaglogButton($form, $tbody);
            $.templates(this._id + "_JSONDialogEditingTemplate", $tbody.html());
        },
        _editEventTrigger: function (args) {
            if (args.requestType == "save" || args.requestType == "delete") {
                var params = {
                    data: args.data,
                    action: args.action !== undefined ? args.action : args.requestType,
                };
                if (!ej.isNullOrUndefined(args.foreignKeyData))
                    params.foreignKeyData = args.foreignKeyData;
				this._trigger("end" + params.action.charAt(0).toUpperCase() + params.action.slice(1), params);
            }
        },
        _compiledDropDownTemplate: function (valueField, textField, colType, format) {
            var helpers = { _gridFormatting: this.formatting };
            $.views.helpers(helpers);
            var $select = ej.buildTag('select');
            var $option = ej.buildTag("option", ej.isNullOrUndefined(textField) ? "{{:text}}" : colType == "date" && format != null ? "{{:~_gridFormatting('" + format + "'," + textField + ",'"+ this.model.locale +"')}}" : "{{:" + textField + "}}", {}, { value: ej.isNullOrUndefined(valueField) ? "{{:value}}" : "{{:" + valueField + "}}" });
            $select.append($option);
            return $.templates($select.html());
        },
        _initCellEditType: function (columnCount, element) {
            var fName = this.model.columns[columnCount].field;
            if (this.model.columns[columnCount]["foreignKeyValue"])
                this.model.columns[columnCount]["editType"] = "dropdownedit";
            if (this.model.columns[columnCount]["editTemplate"])
                this.model.columns[columnCount]["editType"] = "edittemplate";
            if (ej.isNullOrUndefined(this.model.columns[columnCount]["editType"]))
                if (this.model.columns[columnCount]["type"] == "date" || this.model.columns[columnCount]["type"] == "datetime")
                    this.model.columns[columnCount]["editType"] = this.model.columns[columnCount]["type"] + "picker";
                else
                    this.model.columns[columnCount]["editType"] = "stringedit";
            if (this.model.isResponsive)
                element.attr("data-cell", this.model.columns[columnCount]["headerText"]);
            var splits = (fName || "").split("."), sLen = splits.length - 1, braces = "";
            if (!ej.isNullOrUndefined(fName))
                fName = fName.replace(/[^a-z0-9\s_]/gi, '');
            while (sLen) {
                braces += "(";
                sLen--;
            }
            switch (this.model.columns[columnCount]["editType"]) {
                case "edittemplate":
                    var temp = this.model.columns[columnCount].editTemplate.create;
                    if (typeof temp == "string") {
                        var temp1 = ej.util.getObject(temp, window);
                        if (!$.isFunction(temp1)) {
                            if ($(temp).length == 1 && $(temp).get(0).tagName == "SCRIPT")
                                var $edittemplate = $($(temp).html()).attr({ id: this._id + fName, name: this.model.columns[columnCount].field });
                            else
                                var $edittemplate = $(temp).attr({ id: this._id + fName, name: this.model.columns[columnCount].field });
                        }
                        else
                            var $edittemplate = $(temp1()).attr({ id: this._id + fName, name: this.model.columns[columnCount].field });
                    }
                    else
                        var $edittemplate = $(temp()).attr({ id: this._id + fName, name: this.model.columns[columnCount].field });
                    element.append($edittemplate);
                    break;
                case "stringedit":
                    element.html(ej.buildTag('input.e-field e-ejinputtext', "", {}, { value: "{{html:" + braces + "#data['" + splits.join("'] || {})['") + "']}}", id: this._id + fName, name: this.model.columns[columnCount].field }));
                    break;
                case "booleanedit":
                    element.html('{{if #data["' + splits.join('"]["') + '"]}} <input class="e-field e-checkbox" type ="checkbox" id=' + this._id + fName + ' name=' + this.model.columns[columnCount].field + ' checked="checkbox"></input>{{else}} <input class="e-field e-checkbox" type ="checkbox" id=' + this._id + fName + ' name=' + this.model.columns[columnCount].field + ' > {{/if}}');
                    if (this.model.editSettings.editMode == "normal")
                        element.addClass("e-boolcell");
                    break;
                case "numericedit":
                    var $numericText = ej.buildTag('input.e-numerictextbox e-field', "", {}, { type: "text", value: "{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}", id: this._id + fName, name: this.model.columns[columnCount].field });
                    element.append($numericText);
                    break;
                case "datepicker":
                case "datetimepicker":
                    var $datePicker = ej.buildTag('input.e-' + this.model.columns[columnCount]["editType"] + ' e-field', "", {}, { type: "text", value: "{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}", id: this._id + fName, name: this.model.columns[columnCount].field });
                    element.append($datePicker);
                    break;
                case "dropdownedit":
                    var currColumn = this.model.columns[columnCount];
                    if (ej.isNullOrUndefined(currColumn.dataSource)) {
                        var arrayOfDatas;                            
                            var query = new ej.Query().select(currColumn.field);
                            if (ej.isNullOrUndefined(this._dropDownManager) || (!this._dataManager.dataSource.offline && this._dataManager.dataSource.json.length))
                            arrayOfDatas = this._dataManager.executeLocal(query);
                        else{
                            if( this._dataManager.adaptor instanceof ej.JsonAdaptor && currColumn.field.indexOf('.') != -1 ){
                                var field = currColumn.field.replace(/\./g, ej.pvt.consts.complexPropertyMerge);
                                query = new ej.Query().select(field);
                            }
                            arrayOfDatas = this._dropDownManager.executeLocal(query);
                        }
                        var selectedItems = [];
                        var uniqueData = uniqueData = ej.dataUtil.mergeSort(ej.distinct(arrayOfDatas));
                        for (var index = 0; index < uniqueData.length; index++)
                            selectedItems.push({ text: uniqueData[index], value: uniqueData[index] });
                    }
                    else
                        selectedItems = currColumn.dataSource;
                    var dropDownTemplate;
                    var fieldName = ej.isNullOrUndefined(currColumn.foreignKeyField) ? currColumn.field : currColumn.foreignKeyField;
                    if (currColumn.foreignKeyValue)
                        dropDownTemplate = this._compiledDropDownTemplate(fieldName, currColumn.foreignKeyValue, currColumn.type, currColumn.format);
                    else
                        dropDownTemplate = this._compiledDropDownTemplate();
                    if(!ej.isNullOrUndefined(currColumn.editParams) && !ej.isNullOrUndefined(currColumn.dataSource))
						element.get(0).innerHTML = "<input>";
					else
						element.get(0).innerHTML = ["<select>", dropDownTemplate.render(selectedItems), "</select>"].join("");
					element.find("select,input").prop({ id: this._id + fName, name: currColumn.field }).addClass("e-field e-dropdownlist");
                    break;
            }
        },
        addBatchEditTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var $outerDiv = ej.buildTag('div', "", { display: "none" }, { id: this._id + "_BulkEditTemplate" }), i, columnCount, $innerDiv;
            for (i = 0, columnCount = this.model.columns.length; i < columnCount; i++) {
                if (!this.model.columns[i]["template"] || !this.model.columns[i]["isUnbound"]) {
                    $innerDiv = ej.buildTag('div', "", {}, { id: this.model.columns[i].field.replace(/\./g, ej.pvt.consts.complexPropertyMerge) + "_BulkEdit" });
                    this._initCellEditType(i, $innerDiv);
                    $outerDiv.append($innerDiv);
                }
                if (this.model.columns[i]["isPrimaryKey"] === true) {
                    this._primaryKeys.push($.trim(this.model.columns[i].field));
                    this._primaryKeys = $.unique(this._primaryKeys);
                }
                if (this.model.columns[i]["isIdentity"] === true) {
                    $innerDiv.find(".e-field").addClass("e-identity");
                    this._identityKeys.push($.trim(this.model.columns[i].field));
                    this._identityKeys = $.unique(this._identityKeys);
                }
            }
            if ($outerDiv.children().length)
                this._bulkEditTemplate = $outerDiv;

        },
        addExternalDialogEditingTemplate: function () {
            if (this.model.columns.length == 0)
                return;
			  var  $valueTd;
			   $valueTd = ej.buildTag('td', "", { "text-align": "left" }).addClass("e-rowcell");
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
				if (ej.isNullOrUndefined(this.model.columns[columnCount]["isUnbound"]) && ej.isNullOrUndefined(this.model.columns[columnCount]["template"]) && !ej.isNullOrUndefined(this.model.columns[columnCount].editTemplate) )
                    this._initCellEditType(columnCount, $valueTd);
                if (this.model.columns[columnCount]["isPrimaryKey"] === true) {
                    this._primaryKeys.push($.trim(this.model.columns[columnCount].field));
                    this._primaryKeys = $.unique(this._primaryKeys);
                }
            }
            var $tbody = ej.buildTag('div', "", { 'display': 'none' });
            var $form = ej.buildTag('form.gridform', "", {}, { id: this._id + "EditForm" });
            var cloneElement;
            if (this.model.editSettings.editMode == "dialogtemplate" && this.model.editSettings.dialogEditorTemplateID != null)
                cloneElement = this.model.editSettings.dialogEditorTemplateID;
            else if (this.model.editSettings.editMode == "externalformtemplate" && this.model.editSettings.externalFormTemplateID != null) {
                cloneElement = this.model.editSettings.externalFormTemplateID;
                $form.addClass("e-display");
            }
            else {
                cloneElement = this.model.editSettings.inlineFormTemplateID;
                $form.addClass("e-display");
            }

            $form.html($(cloneElement).html());
            $tbody = this.renderDiaglogButton($form, $tbody);
            $.templates(this._id + "_JSONdialogTemplateMode", $tbody.html());
        },
        _editdblClickHandler: function (e) {
            var $target = $(e.target);
            if ($target.hasClass("e-rowcell")) {
                if (!this.model.isEdit || (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")) {
                    this._$currentTr = (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0)
                        ? this.getRowByIndex($target.closest('tr').index())
                        : $target.closest('tr');
                    this.startEdit(this._$currentTr);
                }
            }
            return false;
        },
        _columnToSelect: function () {
            var column = [];
            for (var i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i]["editType"] === ej.Grid.EditingType.Dropdown && ej.isNullOrUndefined(this.model.columns[i]["dataSource"]))
                    column.push(this.model.columns[i].field);
            }
            if (column.length)
                return ej.Query().select(column);
            return ej.Query();
        },
        _renderExternalForm: function () {
            var $externalform = ej.buildTag("div", "", { display: "none" }, { id: this._id + "_externalEdit", 'class': "e-form-container" });
            var $eformHeader = ej.buildTag("div", "", "", { id: this._id + "_eFormHeader", 'class': "e-form-titlebar" });
            var $eformTitle = ej.buildTag("span", "", "", { 'class': "e-form-title" });
            var $eformToggleBtn = ej.buildTag("div", "", "", { id: this._id + "_eFormToggleBtn", 'class': "e-form-togglebtn" });
            var $eformToggleIcon = ej.buildTag("span", "", "", { 'class': "e-form-toggle-icon e-icon" });
            $eformToggleBtn.append($eformToggleIcon);
            $eformHeader.append($eformTitle).append($eformToggleBtn);

            var $eformContent = ej.buildTag("div", "", "", { id: this._id + "_eFormContent", 'class': "e-form-content" });
            var $eform = ej.buildTag("div", "", "", { id: this._id + "_externalForm", 'class': "e-externalform" });
            var $contentOuterDiv = ej.buildTag("div", "", "", { 'class': "e-externalformedit" });
            $eform.append($contentOuterDiv);
            $eformContent.append($eform);
            return $externalform.append($eformHeader).append($eformContent);;
        },
        _buttonClick: function (e) {
            if (e.type == "close") {
                if (!this.model.isEdit)
                    return;
                this.model.isEdit = false;
                this.element.ejGrid("cancelEdit");
                this.refreshToolbar();
                return;
            }
            if (e.keyCode !== undefined && e.keyCode != 13 || this.model == null)
                return true;
            if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                if (e.target.id == "EditDialog_" + this._id + "_Save") {
                    if (this.element.ejGrid("endEdit").length !== undefined && $("#" + this._id + "_dialogEdit").data("ejDialog"))
                        $("#" + this._id + "_dialogEdit").ejDialog("close");
                } else if (e.target.id == "EditDialog_" + this._id + "_Cancel") {
                    this.element.ejGrid("cancelEdit");
                    $("#" + this._id + "_dialogEdit").ejDialog("close");
                }
            }
            else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
                if ($(e.target).hasClass("e-form-toggle-icon")) {
                    this.element.ejGrid("cancelEdit");
                    $("#" + this._id + "_externalEdit").css("display", "none");
                }
                else {
                    if (e.target.id == "EditExternalForm_" + this._id + "_Save") {
                        if (this.element.ejGrid("endEdit").length !== undefined)
                            $("#" + this._id + "_externalEdit").css("display", "none");
                    } else if (e.target.id == "EditExternalForm_" + this._id + "_Cancel") {
                        this.element.ejGrid("cancelEdit");
                        $("#" + this._id + "_externalEdit").css("display", "none");
                    }
                }
            }
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                if (e.target.id == "InlineEditForm_" + this._id + "_Save")
                    this.element.ejGrid("endEdit");
                else if (e.target.id == "InlineEditForm_" + this._id + "_Cancel")
                    this.element.ejGrid("cancelEdit");
            }
            else
                this.element.ejGrid("cancelEdit");
        },
        _enableEditingEvents: function () {
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                if (this.model.editSettings.allowEditing && this.model.editSettings.editMode != "batch" && this.model.editSettings.allowEditOnDblClick)
                    this._on(this.element, "dblclick", ".e-gridcontent", this._editdblClickHandler);
                else
                    this._off(this.element, "dblclick", ".e-gridcontent");
                this._off($("#" + this._id + "_dialogEdit"), "click keypress", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel");
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                    this._on($("#" + this._id + "_dialogEdit"), "click keypress", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel", this._buttonClick);
                }
                else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
                    this._on($("#" + this._id + "_externalEdit"), "click keypress", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel", this._buttonClick);
                    $(this.element).on("click", ".e-form-toggle-icon", $.proxy(this._buttonClick, this));
                }
                else if (this.model.editSettings.editMode == "batch")
                    this._on($(document), "mousedown", this._saveCellHandler);

                else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")
                    $(this.element).on("click keypress", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel", $.proxy(this._buttonClick, this));

            } else {
                this._off($("#" + this._id + "_dialogEdit"), "click", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel");
                $(this.element).off("click", ".e-icon");
                this._off($("#" + this._id + "_externalEdit"), "click", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel");
                $(this.element).off("click", ".e-form-toggle-icon");
                $(this.element).off("click", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel");
            }
        },

        _deleteRow: function ($tr) {
            if (!this.model.editSettings.allowDeleting || (this.model.isEdit && this.model.editSettings.editMode != "batch" && !this.model.editSettings.showAddNewRow))
                return;
            if (this.model.editSettings.editMode == "batch")
                this._bulkDelete(this.getIndexByRow($tr));
            else {
                if (this._primaryKeys.length == 0 && !this.model.editSettings.allowEditing && !this.model.editSettings.allowAdding) {
                    for (i = 0; i < this.model.columns.length; i++) {
                        if (this.model.columns[i]["isPrimaryKey"] === true) {
                            this._primaryKeys.push($.trim(this.model.columns[i].field));
                            this._primaryKeys = $.unique(this._primaryKeys);
                        }
                    }
                }
                if (this._selectedRow() == -1 && ej.isNullOrUndefined($tr)) {
                    alert(this._getLocalizedLabels("DeleteOperationAlert"));
                    return;
                }
                if (ej.isNullOrUndefined($tr))
                    $tr = this.getRowByIndex(this._selectedRow());
                this._primaryKeyValues = [];
                for (var index = 0; index < this._primaryKeys.length; index++) {
                    var column = this.getColumnByField(this._primaryKeys[index]);
                    var trIndex = this.getIndexByRow($tr);
                    if (this.model.editSettings.showAddNewRow && this.model.editSettings.rowPosition == "top")
                        trIndex = trIndex - 1;
                    this._primaryKeyValues.push(this._currentJsonData[trIndex][column.field]);
                }
                var deleteManager = ej.DataManager(this._currentJsonData);
                var query = new ej.Query();
                for (var i = 0; i < this._primaryKeys.length; i++)
                    query = query.where(this._primaryKeys[i], ej.FilterOperators.equal, this._primaryKeyValues[i]);
                currentData = deleteManager.executeLocal(query);
                var args = {};
                args.tr = $tr;
                args.data = currentData[0];
                var foreignKeyData = this._getForeignKeyData(args.data);
                if (!ej.isNullOrUndefined(foreignKeyData))
                    args.foreignKeyData = foreignKeyData;
                args.requestType = ej.Grid.Actions.Delete;
                if (this._trigger("actionBegin", args))
                    return true;
                this._cDeleteData = currentData;
                var promise;
                if (this._dataSource() instanceof ej.DataManager && (!this._dataManager.dataSource.offline && this._dataManager.dataSource.json !== undefined) || (this._dataSource().adaptor instanceof ej.remoteSaveAdaptor)) {
                    promise = this._dataManager.remove(this._primaryKeys[0], currentData[0][this._primaryKeys[0]]);
                    var proxy = this;
                    if ($.isFunction(promise.promise)) {
                        promise.done(function(e) {
                            proxy._processBindings(args);
                            proxy._primaryKeyValues = [];
                            proxy._cDeleteData = null;
                        });
                        promise.fail(function(e) {
                            args.error = e
                            proxy._trigger("actionFailure", args)
                        });
                    } else
                        this._processBindings(args);
                } else
                    this._processBindings(args);
                if (promise == undefined || !$.isFunction(promise.promise)) {
                    this._primaryKeyValues = [];
                    this._cDeleteData = null;
                }
            }
        },
        
        _htmlEncode: function (html) {
            var str =isNaN(html) ? html.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&apos;/g, '\'') : html;
            return str;
        },
        startEdit: function ($tr) {
		    if (!this.model.editSettings.allowEditing)
                return;
            if (this._selectedRow() == -1 && ej.isNullOrUndefined($tr)) {
                alert(this._getLocalizedLabels("EditOperationAlert"));
                return;
            }
            if (ej.isNullOrUndefined($tr)) {
                this._currentTrIndex = this._selectedRow();
                this._$currentTr = this.getRowByIndex(this._currentTrIndex);
            } else {
                this._currentTrIndex = $tr.index();
                this._$currentTr = $tr;
            }
            if (!$(this._$currentTr).is(":visible"))
                return false;
            this._primaryKeyValues = [];
            for (var index = 0; index < this._primaryKeys.length; index++) {
                var column = this.getColumnByField(this._primaryKeys[index]);
                var trIndex = this.getIndexByRow(this._$currentTr);
                if (this.model.editSettings.showAddNewRow && this.model.editSettings.rowPosition == "top")
                    trIndex = trIndex - 1;
                this._primaryKeyValues.push(this._htmlEncode(this._currentJsonData[trIndex][column.field]));
            }
            var args = { row: this._$currentTr, rowIndex: this._currentTrIndex, primaryKey: this._primaryKeys, primaryKeyValue: this._primaryKeyValues };
            var cancel = this._trigger("beginEdit", args);
            if (cancel) {
                this._primaryKeyValues = [];
                return;
            }
            args.requestType = ej.Grid.Actions.BeginEdit;
            this._processBindings(args);

        },
         _startAdd: function() {
            if (!this.model.editSettings.allowAdding)
                return;
			this._isAddNew = true;
            if (this.model.editSettings.editMode == "batch")
                this._bulkAddRow();
            else {
                var cloneData = {};
                for (var i = 0; i < this.model.columns.length; i++) {
                    if (!ej.isNullOrUndefined(this.model.parentDetails) && this.model.columns[i].field == this.model.parentDetails.parentKeyField)
                        this.model.columns[i].defaultValue = this.model.parentDetails.parentKeyFieldValue;
                    cloneData[this.model.columns[i].field] = !ej.isNullOrUndefined(this.model.columns[i].defaultValue) ? this.model.columns[i].defaultValue : "";
                }
                var args = {}, complexObject = {};
                args.data = cloneData;
                if (this.model.editSettings.editMode.indexOf('template') != -1) {
                    for (var i = 0; i < this.model.columns.length; i++) {
                        if (!ej.isNullOrUndefined(this.model.columns[i].field) && this.model.columns[i].field.indexOf(".") != -1) {
                            var splits = this.model.columns[i].field.split('.');
                            ej.createObject(this.model.columns[i].field, args.data[this.model.columns[i].field], complexObject);
                            args.data[splits[0]] = complexObject;
                            delete args.data[this.model.columns[i].field];
                        }
                    }
                }
                var foreignKeyData = this._getForeignKeyData(args.data);
                if (!ej.isNullOrUndefined(foreignKeyData))
                    args.foreignKeyData = foreignKeyData;
                args.requestType = "add";
                this.clearSelection();
                var returnValue = this._processBindings(args);
                if (!returnValue)
                    this.model.editSettings.showAddNewRow ? this._selectedRow(-1) : this._selectedRow(0);
                var groupedColumns = this.model.groupSettings.groupedColumns.length;
                if (groupedColumns > 1) {
                    var $editCol = this.getContentTable().find(".e-addedrow").find("table").find("colgroup").children();
                    $($editCol.slice(0, groupedColumns - 1)).css('width', this.getHeaderTable().find('colgroup').children()[0].style.width);
                }
            }
        },
        
        endEdit: function () {
            if (this.model.isEdit) {
                var formElement, $formElement, editedTr;
                if (!this.editFormValidate())
                    return true;
                var obj = {};
                var editedRowWrap;
                if (this.model.editSettings.editMode == "batch")
                    this.saveCell();
                else {
					if(this.model.editSettings.showAddNewRow)
						editedTr = this.getContentTable().find(".e-editedrow");
                    formElement = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : !ej.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr[0].lastChild.lastChild: document.getElementById(this._id + "EditForm");
                    $formElement = $(formElement);
                    if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")
                        editedRowWrap = $formElement.closest('tr');
                    else
                        editedRowWrap = $formElement.closest('div');
                    editedRowWrap.find('td.e-rowcell').removeClass('e-validError');
                    formElement = this.model.scrollSettings.frozenColumns > 0 ? formElement[0] : formElement;
                    for (var index = 0; index < formElement.length; index++) {
                        if (editedRowWrap.hasClass("e-addedrow") && $(formElement[index]).hasClass("e-identity"))
                            continue;
                        var columnName = formElement[index].name, $element = $(formElement[index]);
						if($element.hasClass("e-dropdownlist e-input") && $element.attr("id").indexOf("_input") != -1)
							continue;
                        if (columnName != undefined) {
                            if (columnName == "") {
                                if (formElement[index].id.indexOf("Save") != -1 || formElement[index].id.indexOf("Cancel")!= -1)
                                    columnName = "";
                                else
                                    columnName = formElement[index].id.replace(this._id, "");
                            }
                            if (columnName != "" && obj[columnName] == null) {
                                var column = this.getColumnByField(columnName), value = formElement[index].value;
                                if (!ej.isNullOrUndefined(column) && (column.editType == "edittemplate")) {
                                    if (!ej.isNullOrUndefined(formElement[index + 1]) && formElement[index].type == 'hidden') index++;
                                    if (formElement[index].type != 'hidden') {
                                        var temp1 = column.editTemplate.read; $element = $(formElement[index]);
                                        if (typeof temp1 == "string")
                                            temp1 = ej.util.getObject(temp1, window);
                                        value = ej.isNullOrUndefined(column.foreignKeyField) ? temp1($element) : $element.ejDropDownList("getSelectedValue");
                                    }
                                }
                                else if ($(formElement[index]).hasClass("e-datepicker")) {
                                    value = $element.ejDatePicker("model.value");
                                }
                                else if ($(formElement[index]).hasClass("e-datetimepicker")) {
                                    value = $element.ejDateTimePicker("model.value");
                                }
                                else if ($element.is(".e-numerictextbox")) {
                                    value = $element.ejNumericTextbox("getValue");
									value = value || "";
								}
								else if ($element.data("ejDropDownList")) {
                                    value = $element.ejDropDownList("getSelectedValue");
                                }
                                if (column == null)
                                    value = !isNaN(parseFloat(value)) && isFinite(value) ? parseFloat(value) : value;
                                else if (column.type == "number" && value.length)
                                    value = parseFloat(value.replace(/[\,\%]/g, ""));
                                var originalvalue;
                            if (formElement[index].type != "checkbox")
                                originalvalue = value;
                            else
                                originalvalue = $(formElement[index]).is(':checked');
                            if (columnName.indexOf(".") != -1)
                                ej.createObject(columnName, originalvalue, obj);
                            else
                                obj[columnName] = originalvalue;
                            }
                        }
                        if (index == formElement.length - 1 && $formElement.length > 1 && $formElement.index(formElement) == 0) {
                            formElement = $formElement[1];
                            index = -1;
                        }

                    }
                    var args = { data: obj };
                    var foreignKeyData = this._getForeignKeyData(args.data);
                    if (!ej.isNullOrUndefined(foreignKeyData))
                        args.foreignKeyData = foreignKeyData;
                    args.requestType = ej.Grid.Actions.Save;
                    args.selectedRow = this._selectedRow();
                    var currentData;
                    if (this._trigger("actionBegin", args))
                        return true;
                    if (editedRowWrap.hasClass("e-editedrow")) {
                        this._cModifiedData = obj;
                        args.action = "edit";
                    } else if (editedRowWrap.hasClass("e-addedrow")) {
                        this._cAddedRecord = obj;
                        args.action = "add";
                    }
                    this._updateAction(args);
                }
            }
        },
        _updateAction: function (args) {
            var promise;
            if (this._dataSource() instanceof ej.DataManager && (!this._dataManager.dataSource.offline && this._dataManager.dataSource.json !== undefined) || (this._dataSource().adaptor instanceof ej.remoteSaveAdaptor)) {
                if (!ej.isNullOrUndefined(this._cModifiedData))
                    promise = this._dataManager.update(this._primaryKeys[0], args.data);
                else
                    promise = this._dataManager.insert(args.data);
				this.model.isEdit = false;
                var proxy = this;
                if ($.isFunction(promise.promise)) {
                    promise.done(function (e) {
                        if (!ej.isNullOrUndefined(e) && $.isPlainObject(e.record)) {
                            args.data = e.record;
                            if (args.action == "add")
                                proxy._cAddedRecord = e.record;
                            if (args.action == "edit")
                                proxy._cModifiedData = e.record;
                        }
                        proxy._processBindings(args);
                        proxy._cModifiedData = null;
                        proxy._cAddedRecord = null;
                        proxy._primaryKeyValues = [];
                    });
                    promise.fail(function (e) {
                        args.error = (e && e.error) ? e.error : e;
                        proxy._trigger("actionFailure", args)
                    });
                } else
                    proxy._processBindings(args);
            } else
                this._processBindings(args);
            if (promise == undefined || !$.isFunction(promise.promise)) {
                this._cModifiedData = null;
                this._cAddedRecord = null;
                this._primaryKeyValues = [];
            }
        },
        
        cancelEdit: function () {
            var args = {};
            args.requestType = ej.Grid.Actions.Cancel;
            this._processBindings(args);
            this._primaryKeyValues = [];
            this._currentData = null;
        },
        
        refreshToolbar: function () {
            var $toolbar = $("#" + this._id + "_toolbarItems");
            var lis = $toolbar.find("li");
            $toolbar.ejToolbar("enableItem", lis);
			var editedTr = this.getContentTable().find(".e-editedrow");
			if(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal" && editedTr.length==0)
				this._disabledToolItems.push(lis.filter('[id='+this._id+'_add]'));
			else
			{
				for (var i = 0; i < lis.length; i++) {
					switch (lis[i].id) {
						case this._id + "_add":
						case this._id + "_edit":
						case this._id + "_delete":
					    case this._id + "_responsiveFilter":
					    case this._id + "_responsiveSorting":
					    case this._id + "_search":
					        if (this.model.isEdit) {
					            if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal") || editedTr.length != 0)
					                this._disableToolBarItems(lis[i]);
					        }
					        else if (!this.model.editSettings.allowAdding && lis[i].id == this._id + "_add")
					            this._disableToolBarItems(lis[i]);
					        else if (!this.model.editSettings.allowEditing && lis[i].id == this._id + "_edit")
					            this._disableToolBarItems(lis[i]);
					        else if (!this.model.editSettings.allowDeleting && lis[i].id == this._id + "_delete")
					            this._disableToolBarItems(lis[i]);
					        break;
					    case this._id + "_update":
						case this._id + "_cancel":
						    if (!this.model.isEdit) {
						        $(lis[i]).hasClass("e-hover") && $(lis[i]).removeClass("e-hover");
						        this._disabledToolItems.push(lis[i]);
						    }
							break;
					}
				}
			}
            $toolbar.ejToolbar("disableItem", this._disabledToolItems);
            $toolbar.ejToolbar("model.enableRTL", this.model.enableRTL);
            this._disabledToolItems = $();

        },
        _disableToolBarItems: function (element) {
            $(element).hasClass("e-hover") && $(element).removeClass("e-hover");
            this._disabledToolItems.push(element);
        },
        _getHiddenCount: function (elements) {
            var count = 0;
            for (var i = 0; i < elements.length; i++) {
                if (elements.eq(i).hasClass("e-hide"))
                    count++;
            }
            return count;
        },
        _refreshTemplateCell: function (temp, data) {
            var tempcell = temp.find('.e-templatecell');
			for(var i =0; i< tempcell.length;i++){						
				var args = { cell: tempcell[i], data: data, column: this.model.columns[$(tempcell[i]).index()], rowIndex: temp.index()};
				this._trigger("templateRefresh", args);	
			}			
        },
        _edit: function (args) {
            var editingManager = ej.DataManager(this._currentJsonData), $tempFirstTR;
            var queryManager = new ej.Query();
            if (this.model.allowFiltering)
                this._previousFilterCount = this._filteredRecordsCount;
            for (var index = 0; index < this._primaryKeys.length; index++)
                queryManager = queryManager.where(this._primaryKeys[index], ej.FilterOperators.equal, this._primaryKeyValues[index]);
            this._currentData = editingManager.executeLocal(queryManager);
            var temp = document.createElement('div');
            var formTitle = !ej.isNullOrUndefined(this.model.editSettings.titleColumn) ? this.model.editSettings.titleColumn : this._primaryKeys[0];
            var $temp = $(temp), $tempSecondTR;
            if (this.model.editSettings.editMode == "normal") {
                temp.innerHTML = ['<table>', $.render[this._id + "_JSONEditingTemplate"](this._currentData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
                var $tr = $temp.find("tr").first(), detailCount = 0, firstHidden = this.model.columns.length
                , $currentTrFr = args.row.first();
                if (this.model.scrollSettings.frozenColumns > 0) {
                    $temp.prepend(['<table>', $.render[this._id + "_JSONFrozenEditingTemplate"](this._currentData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join(""));
                    $tr.splice(0, 0, $temp.find("table").first().find("tr").first().get(0));
                    $currentTrLa = args.row.last();
                    $tempLastTR = $tr.last();
                }
                $tempFirstTR = $temp.find("tr").first();
                $temp.find('td').not(".e-rowcell").addClass("e-editcell e-normaledit");
                this._setEditDropdownValue($temp);
                if (this.model.groupSettings.groupedColumns.length >= 2) {
                    var $indentCell = args.row.find("td.e-indentcell");
                    $temp.find("tr").first().prepend($indentCell);
                }
                if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                    detailCount++;                    
                    $temp.find(".e-editcell").find("tr").prepend(args.row.find("[class^=e-detailrow]").removeClass("e-selectionbackground e-active"));
                    if (this.model.gridLines != "both")
                        $temp.find(".e-editcell .e-rowcell:first").addClass("e-detailrowvisible");
                }
                if (this.model.scrollSettings.frozenColumns > 0) {
                    $temp.find(".e-editcell").get(1).colSpan = this.model.columns.length - this.model.scrollSettings.frozenColumns - args.row.last().find(".e-hide").length + detailCount;
                    firstHidden = this.model.scrollSettings.frozenColumns;
                    $currentTrLa.hasClass("e-alt_row") && $tempLastTR.addClass("e-alt_row")
                }
                $temp.find(".e-editcell").get(0).colSpan = firstHidden - $currentTrFr.find("td").not(":visible").length + detailCount;
                $currentTrFr.hasClass("e-alt_row") && $tempFirstTR.addClass("e-alt_row");                
                $currentTrFr.empty().replaceWith($tempFirstTR.addClass("e-editedrow"));
                if (!$tempFirstTR.is(":last-child"))
                    $tempFirstTR.find('td.e-rowcell').addClass('e-validError');
                if (this.model.scrollSettings.frozenColumns > 0)
                    $currentTrLa.empty().replaceWith($tempLastTR.addClass("e-editedrow"));
                this._refreshUnboundTemplate($tr.find(".gridform"));
                if(this.model.scrollSettings.frozenColumns == 0)
					this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr").toArray();
				else
					this._gridRows = $(this.getContentTable().get(0).rows).toArray();                 
                if (this.model.scrollSettings.frozenColumns > 0) {
					this.getScrollObject().scrollY(this.getScrollObject().model.scrollTop, true);
                    this._gridRows = [this._gridRows, $(this.getContentTable().get(1).rows).toArray()];
				}
            }
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                var hideCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                var detailCount = 0;
                temp.innerHTML = this.model.editSettings.editMode == "inlineform" ? $.render[this._id + "_JSONDialogEditingTemplate"](this._currentData) : $.render[this._id + "_JSONdialogTemplateMode"](this._currentData);
				this._setEditDropdownValue($temp);
                var tr = ej.buildTag('tr');
                var td = ej.buildTag('td');
                tr.addClass("e-editedrow");
                td.addClass("e-inlineformedit");
                td.html($(temp).children());
                tr.append(td);
                if (!tr.is(":last-child"))
                    tr.find('.e-rowcell').addClass('e-validError');
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var $trClone = tr.clone();
                    $trClone.find("td").empty().prop("colspan", this.model.scrollSettings.frozenColumns);
                    args.row.eq(1).after(tr).end().eq(0).after($trClone);
                    this._gridRows = [this._gridRows, this.getContentTable().last().find("tr").toArray()];
                }
                else
                    args.row.after(tr);
                this._gridRows = this.getContentTable().first().find(".e-rowcell,.e-inlineformedit").closest("tr").toArray();
				if (this.model.detailsTemplate != null || this.model.childGrid != null)
                        detailCount++;
                if (this.model.scrollSettings.frozenColumns > 0)
                    td.prop("colspan", this.model.columns.length - this.model.scrollSettings.frozenColumns - tr.find("form").children().not(":visible").length - hideCount + detailCount);
                else
                    td.prop("colspan", this.model.columns.length - this._hiddenColumns.length - hideCount + detailCount);
                if (this.model.scrollSettings.frozenColumns > 0)
                    this._gridRows = [this._gridRows, this.getContentTable().last().find("tr").toArray()];
                $("#" + this._id + "_inlineFormTitle").text(this._getLocalizedLabels("EditFormTitle") + this._currentData[0][formTitle]);
                args.row.find("input").attr('disabled', 'disabled').addClass("e-disable");
            }
            else {
                $temp.addClass("e-editedrow");
                temp.innerHTML = this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ? $.render[this._id + "_JSONDialogEditingTemplate"](this._currentData) : $.render[this._id + "_JSONdialogTemplateMode"](this._currentData);
                this._setEditDropdownValue($temp);
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                    $("#" + this._id + "_dialogEdit").html($(temp));
                    var model = {};
                    model.cssClass = this.model.cssClass;
                    model.enableRTL = this.model.enableRTL;
                    model.width = "auto";
                    model.enableResize = this.phoneMode;
                    model.close = $.proxy(this._buttonClick, this);
                    model.content = "#" + this._id;
                    model.enableModal = true;
                    model.allowKeyboardNavigation = false;
                    model.title = this._getLocalizedLabels("EditFormTitle") + this._currentData[0][formTitle];
                    $("#" + this._id + "_dialogEdit").ejDialog(model);
                    $("#" + this._id + "_dialogEdit").ejDialog("open");
                }
                else {
                    $("#" + this._id + "_externalEdit").css("display", "block").css('z-index', this._maxZindex() + 1);
                    $(".e-externalformedit").html($(temp));
                    $("#" + this._id + "_eFormHeader").find(".e-form-title").text(this._getLocalizedLabels("EditFormTitle") + this._currentData[0][formTitle]);
                    this._externalFormPosition();
                    args.row.find("input").attr('disabled', 'disabled').addClass("e-disable");
                }
            }
            if (this.model.editSettings.editMode != "normal")
                $tempFirstTR = $(temp);
			if(!ej.isNullOrUndefined(this.model.templateRefresh) && $tempFirstTR.find(".e-templatecell").length != 0) 
				this._refreshTemplateCell($tempFirstTR, this.model.currentViewData[$tempFirstTR.index()]);
        },
        _setEditDropdownValue: function ($temp) {
            var $select = $temp.find("select.e-field"), x, inputDrop =  $temp.find("input.e-field.e-dropdownlist");
            for (var i = 0; i < $select.length; i++) {
                var ddlTemplate = {}, opPara = "";
                if ($select[i].name.indexOf('.') != -1) {
                    for (var j = 1; j < $select[i].name.split(".").length; j++)
                        opPara = opPara.concat("(");
                    ddlTemplate[this._id + "ddlTemp"] = "{{:" + opPara + "#data['" + $select[i].name.split('.').join("'] || {})['") + "']}}";
                }
                else
                    ddlTemplate[this._id + "ddlTemp"] = "{{:" + $select[i].name.replace(/[^a-z0-9\s]/gi, '') + "}}"
                $.templates(ddlTemplate);
			    x = $.render[this._id + "ddlTemp"](this._currentData);
			    $temp.find("select").eq(i).val(x).attr("selected", "selected");
                $select.eq(i).val(x);
            }
			for(var j=0;j<inputDrop.length;j++){
				inputDrop.eq(j).val(ej.getObject(inputDrop.eq(j).attr("name"),this._currentData[0]));
			}
        },
        _add: function (args) {
            var temp = document.createElement('div'), $editTr;
            if (this._isLocalData && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0)
                !(this._dataSource() instanceof ej.DataManager) ? this._dataSource().splice(0, 1) : this._dataSource().dataSource.json.splice(0, 1);
            this._previousFilterCount = this._filteredRecordsCount;
            if (this.model.editSettings.editMode == "normal") {
                var $tempFirstTR, $temp = $(temp), frozenColSpan = this.model.columns.length;
                temp.innerHTML = ['<table>', $.render[this._id + "_JSONEditingTemplate"](args.data, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
                var $select = $(temp).find('select.e-field');
                for (var i = 0; i < $select.length; i++)
                    $select.eq(i).val(args.data[$select[i].name]);
                if (this.model.scrollSettings.frozenColumns > 0) {
                    $tempLastTR = $temp.find("table").first().find("tr").first();
                    $temp.prepend(['<table>', $.render[this._id + "_JSONFrozenEditingTemplate"](args.data, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join(""));
					$($tempLastTR).find("td").first().addClass("e-editcell");
                }
                $tempFirstTR = $temp.find("tr").first();
                var td = $(temp).find(".e-editcell").get(0);
                $(temp).find('td').first().addClass("e-editcell");
                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this._currentJsonData.length && this.model.groupSettings.groupedColumns.length == 0 && !this.model.editSettings.showAddNewRow)
                    this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $(this.getContentTable().get(0).lastChild.lastChild).children('.e-detailrowexpand').length)
                    this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                if (this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0)
                    this.getContentTable().find('tr').first().replaceWith($(temp).find("tr").first().addClass("e-addedrow e-normaledit"));
                else {
					var  $contentTbody = this.getContentTable().first().find('tbody').first();
                    if (this.model.editSettings.rowPosition == "top")
                        $contentTbody.prepend($tempFirstTR.addClass("e-addedrow e-normaledit"));
                    else if (this.model.editSettings.rowPosition == "bottom")
                        $contentTbody.append($tempFirstTR.addClass("e-addedrow e-normaledit"));
                    if (this.model.scrollSettings.frozenColumns > 0)
                        this.getContentTable().last().find('tbody').first().prepend($tempLastTR.addClass("e-addedrow e-normaledit"));
                }
                $editTr = this.getContentTable().find("tr.e-addedrow");
                if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    $editTr.find('tr').first().prepend(ej.buildTag('td.e-detailrowcollapse'));
                var hideCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                if (this.model.groupSettings.groupedColumns.length) {
                    for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                        if (i == 0)
                            $editTr.prepend(ej.buildTag("td.e-indentcell"));
                        else {
                            $editTr.find("tr").prepend(ej.buildTag("td.e-indentcell"));
                        }
                    }
                    if (this.model.groupSettings.groupedColumns.length >= 2)
                        $editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length + (this.model.groupSettings.groupedColumns.length - 1) - this._hiddenColumns.length - hideCount));
                    else
                        $editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length - hideCount));
                } else if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    $editTr.find(".e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length - hideCount + 1));
                else {
                    if (this.model.scrollSettings.frozenColumns > 0) {
                        $editTr.find(".e-editcell").last().prop("colspan", (this.model.columns.length - this.model.scrollSettings.frozenColumns - $tempLastTR.find("td").not(":visible").length - hideCount));
                        frozenColSpan = this.model.scrollSettings.frozenColumns;
                    }
                    $editTr.find(".e-editcell").first().prop("colspan", (frozenColSpan - $tempFirstTR.find("td").not(":visible").length - hideCount));

                }
                if (!$editTr.is(":last-child"))
                    $editTr.find('td.e-rowcell').addClass('e-validError');
                if (this.getBrowserDetails().browser == "msie" && this.model.editSettings.rowPosition == "bottom")
					this._colgroupRefresh();
                this._refreshUnboundTemplate($editTr.find(".gridform"));
                this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr").toArray();
                if (this.model.scrollSettings.frozenColumns > 0)
                    this._gridRows = [this._gridRows, this.getContentTable().last().find(".e-rowcell").closest("tr").toArray()];
            }
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                temp.innerHTML = this.model.editSettings.editMode == "inlineform" ? $.render[this._id + "_JSONDialogEditingTemplate"](args.data) : $.render[this._id + "_JSONdialogTemplateMode"](args.data);
                var $select = $(temp).find('select.e-field');
                for (var i = 0; i < $select.length; i++)
                    $select.eq(i).val(args.data[$select[i].name]);
                var hideCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                var detailCount = 0;
                var tr = ej.buildTag('tr');
                var td = ej.buildTag('td');
                tr.addClass("e-addedrow");
                td.addClass("e-inlineformedit e-editcell");
                td.html($(temp).children());
                tr.append(td);
                if (!tr.is(":last-child"))
                    tr.find('.e-rowcell').addClass('e-validError');
                var hideCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                if (this.model.groupSettings.groupedColumns.length) {
                    for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                        tr.prepend(ej.buildTag("td.e-indentcell"));
                    }
                } else
                    tr.find("td.e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length - hideCount));
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var $trClone = tr.clone(), $divs = td.find(".gridform").children();
                    $trClone.find("td").empty().prop("colSpan", this.model.scrollSettings.frozenColumns - this._getHiddenCount($divs.slice(0, this.model.scrollSettings.frozenColumns)));
                    td.prop("colSpan", this.model.columns.length - this.model.scrollSettings.frozenColumns - this._getHiddenCount($divs.slice(this.model.scrollSettings.frozenColumns)));
                    this.getContentTable().first().find('tbody').first().prepend($trClone);
                    this.getContentTable().last().find('tbody').first().prepend(tr);
                }
                else {
					if (this.model.detailsTemplate != null || this.model.childGrid != null)
                        detailCount++;
                    td.prop("colspan", this.model.columns.length - this._hiddenColumns.length - hideCount + detailCount);
                    if (this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0)
                        this.getContentTable().find('tr').first().replaceWith($(tr));
                    else
                        if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && this.model.groupSettings.groupedColumns.length == 0)
                            this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                    if (this.model.editSettings.rowPosition == "top")
                        this.getContentTable().first().find('tbody').first().prepend(tr);
                    else if (this.model.editSettings.rowPosition == "bottom")
                        this.getContentTable().first().find('tbody').first().append(tr);
                }
                
                if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $(this.getContentTable().get(0).lastChild.lastChild).children('.e-detailrowexpand').length)
                    this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                $("#" + this._id + "_inlineFormTitle").text(this._getLocalizedLabels("AddFormTitle"));
                this._refreshUnboundTemplate($("#" + this._id + "EditForm"));
                this._gridRows = this.getContentTable().first().find(".e-rowcell,.e-inlineformedit").closest("tr").toArray();
                if (this.model.scrollSettings.frozenColumns > 0)
                    this._gridRows = [this._gridRows, this.getContentTable().last().find(".e-rowcell").closest("tr").toArray()];
            }
            else {
                $(temp).addClass("e-addedrow");
                temp.innerHTML = this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ? $.render[this._id + "_JSONDialogEditingTemplate"](args.data) : $.render[this._id + "_JSONdialogTemplateMode"](args.data);
                var $select = $(temp).find('select.e-field');
                for (var i = 0; i < $select.length; i++)
                    $select.eq(i).val(args.data[$select[i].name]);
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                    $("#" + this._id + "_dialogEdit").html($(temp));
                    var model = {};
                    model.cssClass = this.model.cssClass;
                    model.width = "auto";
                    model.enableResize = this.phoneMode;
                    model.content = "#" + this._id;
                    model.enableModal = true;
                    model.close = $.proxy(this._buttonClick, this);
                    model.enableRTL = this.model.enableRTL;
                    model.allowKeyboardNavigation = false;
                    model.title = this._getLocalizedLabels("AddFormTitle");
                    $("#" + this._id + "_dialogEdit").ejDialog(model);
                    $("#" + this._id + "_dialogEdit").ejDialog("open");
                }
                else {
                    $("#" + this._id + "_externalEdit").css("display", "block").css('z-index', this._maxZindex() + 1);
                    $(".e-externalformedit").html($(temp));
                    $("#" + this._id + "_eFormHeader").find(".e-form-title").text(this._getLocalizedLabels("AddFormTitle"));
                    this._externalFormPosition();
                }
            }
            if (this.model.editSettings.editMode != "normal")
                $editTr = $(temp);
			if(!ej.isNullOrUndefined(this.model.templateRefresh) && $editTr.find(".e-templatecell").length != 0) 
				this._refreshTemplateCell($editTr, args.data);
            if (this.model.allowPaging) {
                if (this.model.filterSettings.filteredColumns.length)
                    this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount, currentPage: this._currentPage() });
                else
                    this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount, currentPage: this._currentPage() });
                this._refreshGridPager();
            }
        },
        editFormValidate: function () {
            if ($.isFunction($.validator)) {
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var forms = this.element.find(".gridform");
                    return forms.length > 1 ? forms.eq(0).validate().form() && forms.eq(1).validate().form() : forms.validate().form();
                }
                return $("#" + this._id + "EditForm").validate().form();
            }
            return true;
        },
        _refreshAltRow: function () {
            var $gridRows = this._excludeDetailRows();
            for (var r = 0; r < $gridRows.length; r++) {
                var $row = $($gridRows[r]);
                $row.hasClass("e-alt_row") && $row.removeClass("e-alt_row");
                if ( r % 2 != 0)
                    $row.addClass("e-alt_row");
            }
        },
        _editCompleteAction: function (args) {
            var $form = this.element.find(".gridform");
            this.model.isEdit = true;
            var $cols1 = this.getContentTable().children("colgroup").find("col");
            var width = this.element.width()
            this.setWidthToColumns();
            if (ej.Grid.Actions.Add == args.requestType) {
                var disabledElements = $form.find(".e-field:disabled");
                for (var j = 0; j < disabledElements.length; j++) {
                    var fieldName = $(disabledElements[j]).attr("name");
                    if (!$(disabledElements[j]).hasClass("e-identity"))
                        if ($.inArray(fieldName, this._disabledEditableColumns) == -1 || $.inArray(fieldName, this._primaryKeys) !== -1)
                            $(disabledElements[j]).removeAttr("disabled").removeClass("e-disable");
                }
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length - 1; i++)
                    $form.find("colgroup").prepend(this._getIndentCol());
            }
            if (this._tdsOffsetWidth.length == 0 || this.model.groupSettings.groupedColumns.length)
                this._setoffsetWidth();
            this._refreshEditForm(args);
            if (this.model.scrollSettings.frozenColumns > 0 && (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")) {
                if (args.requestType == "beginedit")
                    args.row.eq(0).next().find("td").height(args.row.eq(1).next().find("td").height());
                else
                    this.getContentTable().first().find("tr").first().find("td").height(this.getContentTable().last().find("tr").first().find("td").height());
            }
            if (this.model.scrollSettings.frozenRows > 0 && args.requestType == "beginedit")
                this._initFrozenRows();
            if ($.isFunction($.validator))
                this.initValidator();
        },
        _refreshEditForm: function (args) {
			var editedTr; 
			if(this.model.editSettings.showAddNewRow)
				editedTr = this.getContentTable().find(".e-editedrow");
            var form = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : !ej.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr[0].lastChild.lastChild : document.getElementById(this._id + "EditForm");
            var elementFocused = false, columnIndex, matchMedia;
            if (this.model.enableResponsiveRow && $.isFunction(window.matchMedia))
                matchMedia = window.matchMedia("(max-width: 320px)");
            var $formElement = $(form).find("input,select,div.e-field"), percent = 86;
            if (this._isUnboundColumn || this.getContentTable().find(".e-templatecell") != null)
                $formElement = $formElement.filter(function () { return (!$(this).closest(".e-rowcell").hasClass("e-unboundcell") && !$(this).closest(".e-rowcell").hasClass("e-templatecell")) })
            for (var i = 0; i < $formElement.length; i++) {
                var $element = $formElement.eq(i);
                var inputWidth, column = this.getColumnByField(!ej.isNullOrUndefined($element.prop("name")) ? $element.prop("name") : $element.attr("name"));
                if (column != null)
                    columnIndex = $.inArray(column, this.model.columns);
                if (this.model.editSettings.editMode == "batch") {
                    percent = 95;
                }
                else if (this.model.editSettings.editMode == "normal")
                    percent = 96;
                if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                    $element.parent().css("width", ej.dataUtil.max(this._tdsOffsetWidth) + "px");
                    inputWidth = ej.max(this._tdsOffsetWidth) * (percent / 100);
                }
                else
                    inputWidth = this._tdsOffsetWidth[i] * (percent / 100);
                if (this.model.isResponsive && this.model.editSettings.editMode == "normal")
                    inputWidth = "100%";
                if (column !=null && columnIndex !== undefined && (columnIndex < this.model.columns.length && this.model.columns[columnIndex].editTemplate)) {
                    var temp = { rowdata: this.model.editSettings.editMode == "batch" ? this._batchEditRowData : this._currentJsonData[this._bulkEditCellDetails.rowIndex], column: this.model.columns, element: $element };
                    var temp1 = this.model.columns[columnIndex].editTemplate.write;
                    if (!ej.isNullOrUndefined(args) && args.requestType == "add") temp.rowdata = {};
                    if (typeof temp1 == "string")
                        temp1 = ej.util.getObject(temp1, window);
                    temp1(temp);
                }
                else if ($element.hasClass("e-numerictextbox")) {
                    var params = { width: inputWidth }, value = $element.val(), customParams = this.getColumnByField($element.prop("name"));
                    if ((!ej.isNullOrUndefined(matchMedia) && matchMedia.matches) || customParams["width"] && typeof customParams["width"] == "string" && customParams["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
                        params.width = "100%";
                    params.enableRTL = this.model.enableRTL;
                    params.showSpinButton = true;
                    params.cssClass = this.model.cssClass;
                    if (value.length)
                        params.value = parseFloat(value);
                    if ($element.hasClass("e-disable"))
                        params.enabled = false;
                    if (!ej.isNullOrUndefined(customParams["editParams"]))
                        $.extend(params, customParams["editParams"]);
                    $element.ejNumericTextbox(params);
                    $element.prop("name", $element.prop("name").replace(this._id, ""));
                } else if ($element.hasClass("e-datepicker")) {
                    var params = { width: inputWidth }, column = this.getColumnByField($element.prop("name"));
                    if ((!ej.isNullOrUndefined(matchMedia) && matchMedia.matches) || column["width"] && typeof column["width"] == "string" && column["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
                        params.width = "100%";
                    params.enableRTL = this.model.enableRTL;
                    params.cssClass = this.model.cssClass;
                    params.displayDefaultDate = true;
                    params.showPopupButton = false;
                    params.watermarkText = this._getLocalizedLabels("DatePickerWaterMark");
                    if ($element.val().length)
                        params.value = new Date($element.val());
                    if ($element.hasClass("e-disable"))
                        params.enabled = false;
                    if (column["format"] !== undefined && column.format.length > 0) {
                        var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                        var formatVal = toformat.exec(column.format);
                        params.dateFormat = formatVal[2];
                    }
                    if (!ej.isNullOrUndefined(column["editParams"]))
                        $.extend(params, column["editParams"]);
                    $element.ejDatePicker(params);
					if(this.model.editSettings.editMode == "batch")
                        $element.ejDatePicker("show");
				}
                else if ($element.hasClass("e-datetimepicker")) {
                    var column = this.getColumnByField($element.prop("name")),
                        params = {
                            width: inputWidth,
                            enableRTL: this.model.enableRTL,
                            cssClass: this.model.cssClass,
                            showPopupButton: false
                        };
                    if ((!ej.isNullOrUndefined(matchMedia) && matchMedia.matches) || column["width"] && typeof column["width"] == "string" && column["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
                        params.width = "100%";
                    if ($element.val().length)
                        params.value = new Date($element.val());
                    if ($element.hasClass("e-disable"))
                        params.enabled = false;
                    if (column["format"] !== undefined && column.format.length > 0) {
                        var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                        var formatVal = toformat.exec(column.format);
                        params.dateTimeFormat = formatVal[2];
                    }
                    if (!ej.isNullOrUndefined(column["editParams"]))
                        $.extend(params, column["editParams"]);
                    $element.ejDateTimePicker(params);
					if(this.model.editSettings.editMode == "batch")
                        $element.ejDateTimePicker("show");
                }
                else if ($element.hasClass("e-dropdownlist")) {
                    var column = this.getColumnByField($element.prop("name")),
                        params = {
                            width: inputWidth,
                            enableRTL: this.model.enableRTL,
                            enableIncrementalSearch: true
                        };
                    if ((!ej.isNullOrUndefined(matchMedia) && matchMedia.matches) || column["width"] && typeof column["width"] == "string" && column["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
                        params.width = "100%";
                    if (!ej.isNullOrUndefined(column["editParams"]))
                        $.extend(params, column["editParams"]);
					if (!ej.isNullOrUndefined(column.dataSource) && !ej.isNullOrUndefined(column.editParams)) 
						params.dataSource = column.dataSource;
                    $element.ejDropDownList(params);
                    $element.ejDropDownList("setSelectedValue", args.requestType == "add" && ej.isNullOrUndefined(column.defaultValue) ? $element.val("") : $element.val());
                    if ($element.hasClass("e-disable"))
                        $element.ejDropDownList("disable");
                }
				 else if ($element.hasClass("e-save e-button") || $element.hasClass("e-cancel e-button") )
					 $element.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, width: "100","text-align":"centre",height:"35px"});
                    //else if ($element.hasClass("checkbox"))
                    //{
                    //    var value = $element.prop("checked");
                    //    $element.ejCheckBox({
                    //        id: $element[0].id,
                    //        checked: value
                    //    });
                    //}
                else {
                    switch ($element.prop('tagName')) {
                        case "INPUT":
                            if (!ej.isNullOrUndefined(column) && column.format && $element.val() != "") {
                                switch (column.type) {
                                    case ("date" || "datetime"):
                                        var value = $element.val();
                                        var date = new Date(value);
                                        var format = column.format.replace("{0:", "").replace("}", "");
                                        var newformat = Globalize.format(date, format);
                                        $element.val(newformat);
                                        break;
                                    case "number":
                                        var value = $element.val();
                                        var format = new RegExp("\\{0(:([^\\}]+))?\\}", "gm").exec(column.format);
                                        format[2].toLowerCase().split("")[0] == "c" ? format[2] = format[2].toLowerCase().replace("c", "n") : format[2];
                                        $element.val(Globalize.format(parseFloat(value), format[2]));
                                        break;
                                }
                            }
                            if ($element.attr("type") != "checkbox") {
                                $element.css("text-align", $element.attr("name") != null && this.getColumnByField($element.attr("name")) != null ?
                                this.getColumnByField($element.attr("name")).textAlign : "center");
                                if (this.model.editSettings.editMode == "batch"){
                                    $element.css('width', '100%').css("height", "28px");
									if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version, 10) == 8)
									   $element.css("line-height", "22px");
							    }
                                else if (this.model.editSettings.editMode == "normal"){
                                    $element.css('width', '100%').css("height", "30px");
									if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version, 10) == 8)
									   $element.css("line-height", "24px");
								}	
                                else{
                                    $element.outerWidth(inputWidth).height(28);
									if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version, 10) == 8)
									   $element.css("line-height", "26px");
								}

                            }
                            else
                                $element.width(inputWidth > 0 ? ($element.width() > inputWidth ? inputWidth : $element.width()) : this.model.editSettings.editMode.indexOf("template") != -1 ? $element.width() : 1);
								if(this.model.editSettings.editMode == "batch")
									$element.is(':checked') ? $element.prop("checked",false) : $element.prop("checked",true);
                            break;
                        case "SELECT":
                            $element.width(inputWidth).height(28);
                            break;
                    }
                }
                if (column != null && !column.visible && column.validationRules && !(this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineformtemplate")){
					if(column.editType == ej.Grid.EditingType.Dropdown)
						$element.closest(".e-rowcell").find("input").addClass("e-hide");					
					$element.addClass("e-hide");
				}
                if (!$element.is(":disabled") && !elementFocused && (!$element.is(":hidden") || typeof ($element.data("ejDropDownList") || $element.data("ejNumericTextbox")) == "object")) {
                    this._focusElements($element.closest('td'));
                    elementFocused = true;
                }
            }

        },
        _focusElements: function ($currentCell) {
            if ($currentCell.length) {
                var $childElem = $currentCell.children();
                if ($childElem[0].tagName.toLowerCase() == "select" || $childElem[0].tagName.toLowerCase() == "input") {
                    $childElem.focus().select();
                    $childElem[0].focus();
                }
                else if ($childElem.find(".e-field.e-dropdownlist").length) {
                    if ($childElem.is(".e-ddl"))
                        $($childElem[0]).focus();
                    else
                        $childElem.find(".e-ddl").focus();
                }
                else
                    $childElem.find('input:visible,select').first().select().focus();
            }
        },
        _renderToolBar: function () {
            var $div = ej.buildTag('div.e-gridtoolbar', "", {}, { id: this._id + "_toolbarItems" });
            var $ul = ej.buildTag("ul");
            (!ej.isNullOrUndefined(this.model.toolbarSettings.toolbarItems) && this.model.toolbarSettings.toolbarItems.length) && this._renderLi($ul);
            $div.append($ul);
            var $customUl = ej.buildTag("ul");
            $div.append($customUl);
            (!ej.isNullOrUndefined(this.model.toolbarSettings.customToolbarItems) && this.model.toolbarSettings.customToolbarItems.length) && this._renderCustomLi($customUl);
            var model = {};
            model.click = this._toolBarClick;
            model.cssClass = this.model.cssClass;
            model.enableRTL = this.model.enableRTL;
            model.enableSeprator = false;
            $div.ejToolbar(model);
            $div.ejToolbar("disableItem", this._disabledToolItems);
            this._disabledToolItems = $();
            return $div;
        },
        _renderCustomLi: function ($ul) {
            var $li; var customToolbar;
            for (var i = 0; i < this.model.toolbarSettings.customToolbarItems.length; i++) {
                customToolbar = this.model.toolbarSettings.customToolbarItems[i]["templateID"] ? this.model.toolbarSettings.customToolbarItems[i]["templateID"].replace("#", "") : this.model.toolbarSettings.customToolbarItems[i];
                $li = ej.buildTag("li", "", {}, { id: this._id + "_" + customToolbar, title: customToolbar });
                switch (typeof this.model.toolbarSettings.customToolbarItems[i]) {
                    case "string":
                        var $item = ej.buildTag("a.e-toolbaricons e-icon", "", {}).addClass(this.model.toolbarSettings.customToolbarItems[i]);
                        break;
                    case "object":
                        $li.attr("title", this.model.toolbarSettings.customToolbarItems[i]["templateID"].replace("#", ""));
                        var $item = $(this.model.toolbarSettings.customToolbarItems[i]["templateID"]).hide().html();
                        break;
                }
                $li.html($item);
                $ul.append($li);
            }
        },
        _renderLi: function ($ul) {
            if ($.isFunction(window.matchMedia)) {
                if (this.model.enableResponsiveRow && window.matchMedia("(max-width: 320px)").matches) {
                    var searchIndex = this.model.toolbarSettings.toolbarItems.indexOf('search');
                    searchIndex != -1 && this.model.toolbarSettings.toolbarItems.splice(searchIndex, 1);
                    if (this.model.allowFiltering)
                        this.model.toolbarSettings.toolbarItems.push('responsiveFilter');
                    if (this.model.allowSorting) {
                        this.model.toolbarSettings.toolbarItems.push('responsiveSorting');
                    }
                    searchIndex != -1 && this.model.toolbarSettings.toolbarItems.push('search');
                }
            }
            for (var i = 0; i < this.model.toolbarSettings.toolbarItems.length; i++) {
                var $li = ej.buildTag("li", "", {}, { id: this._id + "_" + this.model.toolbarSettings.toolbarItems[i], title: this._getLocalizedLabels(this.model.toolbarSettings.toolbarItems[i].slice(0, 1).toUpperCase() + this.model.toolbarSettings.toolbarItems[i].slice(1)) });
                this._renderLiContent($li, this.model.toolbarSettings.toolbarItems[i]);
                $ul.append($li);
            }
        },
        _renderLiContent: function ($li, item) {
            var $a, $input;
            switch (item) {
                case "add":
                    $a = ej.buildTag("a.e-addnewitem e-toolbaricons e-icon e-addnew", "", {});
                    break;
                case "edit":
                    $a = ej.buildTag("a.e-edititem e-toolbaricons e-icon e-edit", "", {});
                    break;
                case "delete":
                    $a = ej.buildTag("a.e-deleteitem e-toolbaricons e-icon e-delete", "", {});
                    break;
                case "update":
                    $a = ej.buildTag("a.e-saveitem e-toolbaricons e-disabletool e-icon e-save", "", {});
                    this._disabledToolItems.push($li.get(0));
                    break;
                case "cancel":
                    $a = ej.buildTag("a.e-cancel e-toolbaricons e-disabletool e-icon e-gcancel", "", {});
                    this._disabledToolItems.push($li.get(0));
                    break;
				
                case "search":
                    $a = ej.buildTag("a.e-searchitem e-toolbaricons e-disabletool e-icon e-searchfind", "", {});
                    if (!this.model.enableResponsiveRow) {
                        $input = ej.buildTag("input.e-ejinputtext", "", {}, { type: "text" });
                        $li.append($input);
                        if (!ej.isNullOrUndefined(this.model.searchSettings.key))
                            $input.val(this.model.searchSettings.key);
                    }
                    this.model.allowSearching = true;
                    break;
				case "printGrid":
					 $a = ej.buildTag("a.e-print e-toolbaricons e-icon", "", {});
					 break;
                case "excelExport":
                    $a = ej.buildTag("a.e-toolbaricons e-excelIcon e-icon", "", {});
                    break;
                case "wordExport":
                    $a = ej.buildTag("a.e-toolbaricons e-wordIcon e-icon", "", {});
                    break;
                case "pdfExport":
                    $a = ej.buildTag("a.e-toolbaricons e-pdfIcon e-icon", "", {});
                    break;
                case "responsiveFilter":
                    $a = ej.buildTag("a.e-toolbaricons e-filterset e-icon", "", {});
                    break;
                case "responsiveSorting":
                    $a = ej.buildTag("a.e-toolbaricons e-respponsiveSorting e-icon", "", {});
                    break;
            }
            $li.append($a);

        },
        _toolBarClick: function (Sender) {
            var $gridEle = $(this.itemsContainer).closest(".e-grid"), gridInstance = $gridEle.ejGrid("instance"), gridId = $gridEle.attr('id');
            if (Sender.event == undefined && Sender.target.tagName == "INPUT" && Sender.currentTarget.id == gridId + "_search")
                return;
            $.isFunction($.fn.ejDatePicker) && $("#" + gridId + "EditForm").find(".e-datepicker").ejDatePicker("hide");
            var currentTarget = Sender.currentTarget; var target = Sender.target;
            var args = { itemName: currentTarget.title, itemId: currentTarget.id, currentTarget: currentTarget, target: target, itemIndex: $(currentTarget).index(), itemCurrentTarget: currentTarget.outerHTML, gridModel:gridInstance.model, itemTarget: target.outerHTML, toolbarData: Sender };
            if ($gridEle.ejGrid("instance")._trigger("toolbarClick", args))
                return;
            switch (args.itemId) {
                case gridId + "_add":
                    gridInstance._toolbarOperation(gridId + "_add");
                    break;
                case gridId + "_edit":
                    gridInstance._toolbarOperation(gridId + "_edit");
                    break;
                case gridId + "_delete":
                    gridInstance._toolbarOperation(gridId + "_delete");
                    break;
                case gridId + "_update":
                    gridInstance._toolbarOperation(gridId + "_update");
                    break;
                case gridId + "_cancel":
                    if (gridInstance.model.editSettings.editMode == "batch")
                        gridInstance._confirmDialog.find(".e-content").html(gridInstance._getLocalizedLabels("CancelEdit")).end().ejDialog("open");
                    else
                        gridInstance._toolbarOperation(gridId + "_cancel");
                    break;
                case gridId + "_search":
                    if (gridInstance.model.enableResponsiveRow) {
                        if (ej.isNullOrUndefined(gridInstance.element.find('.e-responsesearch')[0])) {
                            var $div = ej.buildTag('div.e-gridtoolbar', "", {}, { id: this._id + "_toolbarItems" });
                            var $ul = ej.buildTag('div.e-responsesearch', '', { 'width': '95%', 'height': '38px', 'margin-top': '7px', 'margin-left': '6px' });
                            var $span = ej.buildTag('span.e-ttoltxt', '', { width: '98%', 'margin-left': '2%' }, { id: gridInstance._id + "_search" });
							$a = ej.buildTag("span.e-searchitem e-toolbaricons e-disabletool e-icon e-searchfind", "", { 'position': 'absolute', 'right': '2%', 'margin-top': '1%' });
                            if (ej.browserInfo().name === "webkit")
                                $a.css("margin-top", "-2px");
                            var $input = ej.buildTag("input.e-ejinputtext", "", { width: '97%', 'height': '30px' }, { type: "search", id: gridInstance._id + "_searchInput" });
                            if (!ej.isNullOrUndefined(gridInstance.model.searchSettings.key))
                                $input.val(gridInstance.model.searchSettings.key);
                            $span.append($input);
                            $span.append($a);
                            $ul.append($span);
                            $div.append($ul);
                            $div.ejToolbar({
                                click: function (sender) {
                                    gridInstance._toolbarOperation(gridId + "_search", $(sender.currentTarget).find("input").val());
                                }
                            });
                            $input.bind('keyup', function (e) {
                                if ($input.val() != '') {
                                    $a.removeClass('e-searchfind');
                                    $a.addClass('e-cancel')
                                }
                                else {
                                    $a.removeClass('e-cancel');
                                    $a.addClass('e-searchfind');
                                }
                            });
                            $a.click(function () {
                                if ($a.hasClass('e-cancel')) {
                                    $input.val('');
                                    $a.removeClass('e-cancel');
                                    $a.addClass('e-searchfind');
                                    gridInstance._toolbarOperation(gridId + "_search", $("#" + gridId + "_searchInput").val());
                                }
                            })
                            $div.insertBefore(gridInstance.getHeaderContent());
                        }
                        else {
                            if (gridInstance.element.find('.e-responsesearch').css('display') == 'block')
                                gridInstance.element.find('.e-responsesearch').css('display', 'none');
                            else
                                gridInstance.element.find('.e-responsesearch').css('display', 'block');
                        }
                    }
                    else
                        gridInstance._toolbarOperation(gridId + "_search", $(Sender.currentTarget).find("input").val());
                    break;
				case gridId + "_printGrid":
                    gridInstance._toolbarOperation(gridId + "_printGrid");
                    break;
                case gridId + "_excelExport":
                    gridInstance._toolbarOperation(gridId + "_excelExport");
                    break;
                case gridId + "_wordExport":
                    gridInstance._toolbarOperation(gridId + "_wordExport");
                    break;
                case gridId + "_pdfExport":
                    gridInstance._toolbarOperation(gridId + "_pdfExport");
                    break;
                case gridId + "_responsiveFilter":
                    gridInstance._toolbarOperation(gridId + "_responsiveFilter");
                    break;
                case gridId + "_responsiveSorting":
                    gridInstance._toolbarOperation(gridId + "_responsiveSorting");
                    break;
            }
            return false;
        },

        _toolbarOperation: function (operation, searchEle) {
            var $gridEle = this.element, gridObject = $gridEle.ejGrid("instance"), batchEnable = gridObject.model.editSettings.editMode == "batch", gridId = $gridEle.attr('id'), fieldName;
            gridObject._exportTo = gridObject["export"];
            switch (operation) {
                case gridId + "_add":
                    if (batchEnable)
                        gridObject._bulkAddRow();
                    else
                        gridObject._startAdd();
                    break;
                case gridId + "_edit":
                    if (batchEnable && gridObject.model.editSettings.allowEditing) {
					    if (gridObject._bulkEditCellDetails.columnIndex == -1) {
                            alert(this._getLocalizedLabels("EditOperationAlert"));
                            return;
                        }
                        fieldName = gridObject.model.columns[gridObject._bulkEditCellDetails.columnIndex].field;
                        fieldName && gridObject.editCell(gridObject._bulkEditCellDetails.rowIndex, fieldName);
                    }
                    else
                        gridObject.startEdit();
                    break;
                case gridId + "_delete":
                    if (this._selectedRow() == -1) {
                        alert(this._getLocalizedLabels("DeleteOperationAlert"));
                        return;
                    }
                    if (this.model.editSettings.showDeleteConfirmDialog)
                        this._confirmDialog.find(".e-content").html(this._getLocalizedLabels("ConfirmDelete")).end().ejDialog("open");
                    else
                        batchEnable ? this._bulkDelete() : this._deleteRow();
                    break;
                case gridId + "_update":
                    if (batchEnable && $("#" + this._id + "EditForm").children().find(".e-field-validation-error").length == 0)
                        this.model.editSettings.showConfirmDialog ? this._confirmDialog.find(".e-content").html(this._getLocalizedLabels("BatchSaveConfirm")).end().ejDialog("open") : this.batchSave();
                    else
                        gridObject.endEdit();
                    break;
                case gridId + "_cancel":
                    if (batchEnable) {
                        if ($("#" + gridId + "ConfirmDialog").ejDialog("isOpened") === true)
                            this._triggerConfirm();
                        else
                            gridObject.cancelEditCell();
                    }
                    else
                        gridObject.cancelEdit();
                    break;
                case gridId + "_search":
                    if (args.type == 'click' && args.target.nodeName != "INPUT")
                        $gridEle.ejGrid("search", searchEle);
                    break;
				case gridId + "_printGrid":
                    this.print();
                    break;
                case gridId + "_excelExport":
                    gridObject._exportTo(gridObject.model.exportToExcelAction, 'excelExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_wordExport":
                    gridObject._exportTo(gridObject.model.exportToWordAction, 'wordExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_pdfExport":
                    gridObject._exportTo(gridObject.model.exportToPdfAction, 'pdfExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_responsiveFilter":
                    $("#responsiveFilter").css('display', 'block');
                    setTimeout(function () { gridObject.element.css('display', 'none'), 0 });
                    break;
                case gridId + "_responsiveSorting":
                    this._sortColumns = []; this._removeSortCol = []
                    for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                        this._sortColumns.push({ field: this.model.sortSettings.sortedColumns[i].field, direction: this.model.sortSettings.sortedColumns[i].direction });
                    }
                    if (ej.isNullOrUndefined($("#responsiveSort")[0])) {
                        var $dlg = $("#responsiveFilter").clone().css('display', 'block');
                        $dlg.insertAfter(this.element);
                        $dlg.attr('id', 'responsiveSort');
                        gridObject._setSortingButton();
                        var $btnDiv = ej.buildTag('div.btnContainer', '', { width: '100%', 'bottom': '0px', 'position': 'absolute' });
                        var $inputOk = ej.buildTag('input.e-resposnsiveFilterBtnLeft', 'OK', { 'width': '45.6%' });
                        var $inputCancel = ej.buildTag('input.e-resposnsiveFilterBtnRight', 'Cancel', { 'width': '46%' });
                        var $closeIcon = ej.buildTag('div.e-resFIlterRigthIcon');
                        var $cspanIcon = ej.buildTag('span.e-icon e-responsiveClose e-resIcon');
                        $dlg.find('.e-resFilterleftIcon').remove();
                        $dlg.find('.labelRes').text('Sorting');
                        $dlg.find('.e-resFilterDialogHeaderDiv').append($closeIcon.append($cspanIcon))
                        $dlg.find('.e-resFilterDialogHeaderDiv').find('.e-resFIlterRigthIcon').click(function (e) {
                            $("#responsiveSort").css('display', 'none');
                            gridObject.element.css('display', 'block');
                        })
                        var $divIcon = ej.buildTag('div.e-resFilterleftIcon', '', { 'margin-top': '3%' });
                        var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responsiveSortClear');
                        $divIcon.click(function () {
                            $dlg.find('.e-responsivefilterColDiv').find('.e-button').remove();
                            gridObject._setSortingButton(true);
                            for (var i = 0; i < gridObject._sortColumns.length; i++) {
                                if (gridObject._removeSortCol.indexOf(gridObject._sortColumns[i].field) == -1)
                                    gridObject._removeSortCol.push(gridObject._sortColumns[i].field);
                            }
                            gridObject._sortColumns = [];
							gridObject._removeSortCol = [];
                        });
                        $dlg.find('.e-resFilterDialogHeaderDiv').prepend($divIcon.append($spanIcon));
                        $dlg.append($btnDiv);
                        $btnDiv.append($inputOk).append($inputCancel);
                        $inputOk.ejButton({
                            text: 'OK', type: 'button',
                            click: $.proxy(this._resSortOperation, this)
                        })
                        $inputCancel.ejButton({
                            text: 'Cancel', type: 'button',
                            click: function () {
                                $("#responsiveSort").css('display', 'none');
                                gridObject.element.css('display', 'block');
                                gridObject._sortColumns = [];
                                $dlg.find('.e-responsivefilterColDiv').find('.e-button').remove();
                                gridObject._setSortingButton();
                            }
                        })
                    }
                    else {
                        $("#responsiveSort").find('.e-responsivefilterColDiv').find('.e-button').remove();
                        this._setSortingButton();
                    }
                    $("#responsiveSort").find('.e-responsivefilterColDiv').find('.e-filternone').remove();
                    $("#responsiveSort").css('display', 'block');
                    setTimeout(function () { gridObject.element.css('display', 'none'), 0 });
                    break;
            }
            return false;
        },
        _resSortOperation: function (sender) {
            var rCol=[];
			for(var i=0; i< this.model.sortSettings.sortedColumns.length;i++)
				rCol.push(this.model.sortSettings.sortedColumns[i].field);
            for (var i = 0; i < rCol.length; i++)
                this.removeSortedColumns(rCol[i]);
            for (var i = 0 ; i < this._sortColumns.length; i++) {
                if (this.model.allowMultiSorting)
                    this.multiSortRequest = true;
                this.sortColumn(this._sortColumns[i].field, this._sortColumns[i].direction);
            }
            $("#responsiveSort").css('display', 'none');
            this.element.css('display', 'block');
        },
        _setSortingButton: function (clear) {
            var $sortDiv = $("#responsiveSort");
            var gridObj = this;
            this._sortCols = [];
            if (ej.isNullOrUndefined($sortDiv.find('.e-responsivefilterColDiv').find('.e-button')[0])) {
                $sortDiv.find('.e-responsivefilterColDiv').each(function (index, object) {
                    var $btnDiv = ej.buildTag('div', '', { 'float': 'right', 'margin-right': '2%', 'margin-top': '-1%' })
                    var fieldName = $(object).attr('ej-MappingName');
                    var $but = ej.buildTag('button#' + fieldName + ".e-sortingBtn", '');
                    $(object).append($btnDiv.append($but));
                    var btnText = 'None', icon = '';
                    if (!clear) {
                        for (var sortC = 0; sortC < gridObj.model.sortSettings.sortedColumns.length; sortC++) {
                            if (gridObj.model.sortSettings.sortedColumns[sortC].field == fieldName) {
                                btnText = gridObj.model.sortSettings.sortedColumns[sortC].direction == 'ascending' ? 'Ascending' : 'Descending';
                                icon = btnText == 'Ascending' ? 'e-resIcon e-respponsiveSortingAsc' : 'e-resIcon e-respponsiveSortingDesc';
                            }
                        }
                        if (icon != '') {
                            $but.ejButton({
                                text: btnText, type: 'button',
                                height: 28,
                                width: 120,
                                cssClass: 'e-resSortIconBtn',
                                id: fieldName,
                                prefixIcon: icon,
                                imagePosition: "imageright",
                                contentType: "textandimage",
                                showRoundedCorner: true,
                                click: $.proxy(gridObj._resSortButClick, gridObj)
                            })
                        }
                        else {
                            $but.ejButton({
                                text: btnText, type: 'button',
                                height: 28,
                                cssClass: 'e-resSortIconBtn',
                                width: 120,
                                id: fieldName,
                                showRoundedCorner: true,
                                click: $.proxy(gridObj._resSortButClick, gridObj)
                            })
                        }
                    }
                    else {
                        $but.ejButton({
                            text: btnText, type: 'button',
                            height: 28,
                            width: 120,
                            id: fieldName,
                            showRoundedCorner: true,
                            click: $.proxy(gridObj._resSortButClick, gridObj)
                        })
                    }
                });
            }
        },
        _sortOperation: function (field, direction) {
            if (this._removeSortCol.indexOf(field) != -1) {
                this._sortColumns.splice(this._removeSortCol.indexOf(field), 0);
				this._removeSortCol.splice(this._removeSortCol.indexOf(field), 0);
            }
            for (var column = 0; column < this._sortColumns.length; column++) {
                if (this._sortColumns[column]["field"] == field)
                    break;
            }
            if (this.model.allowMultiSorting) {
                this.multiSortRequest = true;
                if (column != -1) {
                    this._sortColumns.splice(column, 1);
					if (this._removeSortCol.indexOf(field) == -1)
						this._removeSortCol.push(field);
                }
            }
            else {
                $("#responsiveFilter").find('.e-responsivefilterColDiv').find('.e-button').removeClass('e-disable');
                var $divColg = $("#responsiveFilter").find('.e-responsivefilterColDiv').not(".e-responsivefilterColDiv[ej-mappingname='" + field + "']");
                var $btn = $divColg.find('.e-button').addClass('e-disable');
                $btn.text('None');
                if (this._sortColumns.length > 0) {
                    this._removeSortCol.push(this._sortColumns[0].field);
                    this._sortColumns = [];
                }
            }
            this._sortColumns.push({ field: field, direction: direction });
        },
        _resSortButClick: function (sender) {
            var text = '', prefixIcon = '', fieldName = sender.model.id;
            var obj = $("#" + sender.model.id).ejButton('instance');
            if (sender.model.text == 'None') {
                text = 'Ascending';
                prefixIcon = 'e-resIcon e-respponsiveSortingAsc';
                this._sortOperation(fieldName, 'ascending');
            }
            else if (sender.model.text == 'Ascending') {
                text = 'Descending';
                prefixIcon = 'e-resIcon e-respponsiveSortingDesc';
                this._sortOperation(fieldName, 'descending');
            }
            else {
                obj.model.text = 'None';
                obj.model.prefixIcon = '';
                obj.type = 'button';
                obj.model.contentType = "text";
                obj._render();
                for (var column = 0; column < this._sortColumns.length; column++) {
                    if (this._sortColumns[column]["field"] == fieldName)
                        break;
                }
                this._removeSortCol.push(fieldName);
                this._sortColumns.splice(column, 1);
                $("#responsiveFilter").find('.e-responsivefilterColDiv').find('.e-button').removeClass('e-disable');
                return;
            }
            obj.model.text = text; obj.model.prefixIcon = 'e-resIcon ' + prefixIcon; obj.model.imagePosition = "imageright";
            obj.model.contentType = "textandimage"; obj._render();
        },
        renderDiaglogButton: function (form, tbody) {
            var btnId;
            if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                btnId = "EditExternalForm_";
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                btnId = "InlineEditForm_";
                var inlineTitleBar = ej.buildTag("div", "", "", { id: this._id + "_inlineFormTitle", 'class': "e-inlineform-titlebar" });
                inlineTitleBar.appendTo(tbody);
                    }
					
            else
                btnId = "EditDialog_";
            var savebtn = ej.buildTag('input.e-save', "", { 'margin-left': '30px' }, { type: "button", id: btnId + this._id + "_Save" });
            savebtn.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: this._getLocalizedLabels("SaveButton"), width: "100" });
            var cancelbtn = ej.buildTag('input.e-cancel', "", { 'margin-left': '19px', 'margin-right': '13px' }, { type: "button", id: btnId + this._id + "_Cancel" });
            cancelbtn.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: this._getLocalizedLabels("CancelButton"), width: "100" });
            var btnDiv = (this.model.editSettings.editMode != "dialog" && this.model.editSettings.editMode != "dialogtemplate") ? ej.buildTag('div', "", "", { 'class': "e-editform-btn" }) : ej.buildTag('div');
            btnDiv.append(savebtn);
            btnDiv.append(cancelbtn);
            form.appendTo(tbody);
            if (this.model.editSettings.editMode != "dialog" && this.model.editSettings.editMode != "dialogtemplate")
                btnDiv.appendTo(tbody);
            else
                form.append(btnDiv);
            return tbody;
        },
        _externalFormPosition: function () {
            var pos = $(this.element).offset();
            var width = $(this.element).width();
            var height = $(this.element).height();
            var DivElement = $("#" + this._id + "_externalEdit");
            switch (this.model.editSettings.formPosition) {
                case "topright":
                    $(DivElement).find('.e-form-toggle-icon').removeClass('e-bottomleft').addClass('e-topright');
                    $(DivElement).css({ "left": (pos.left + width + 1) + "px", "top": pos.top + "px", "position": "absolute", "width": "290px" });
                    $("#" + this._id + "_eFormContent").height("auto");
                    break;
                case "bottomleft":
                    $(DivElement).find('.e-form-toggle-icon').removeClass('e-topright').addClass('e-bottomleft');
                    $(DivElement).css({ "left": (pos.left) + "px", "top": (pos.top + height + 1) + "px" });
                    $("#" + this._id + "_eFormContent").width("100%");
                    break;
            }
        },
        _setoffsetWidth: function () {
            var tds, $form = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
            if (this._gridRecordsCount == 0 && this.model.editSettings.editMode != "batch")
                return;
            if (this.model.editSettings.editMode == "batch")
                tds = $form.closest("td");
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                tds = $form.find(".e-rowcell").not(".e-unboundcell,.e-templatecell");
            else
                tds = $form.find("tr").find(".e-rowcell").not(".e-unboundcell,.e-templatecell");
            for (var i = 0; i < tds.length; i++)
                this._tdsOffsetWidth[i] = tds.get(i).offsetWidth;
        },
        _bulkChangesAcquired: function () {
            if (this.batchChanges.added.length > 0 || this.batchChanges.changed.length || this.batchChanges.deleted.length)
                return true;
            return false;
        },
        _renderDialog: function () {
            var $dialog = ej.buildTag("div.e-dialog e-dialog-content e-shadow e-widget-content", "", { display: "none" }, { id: this._id + "_dialogEdit" });
            return $dialog;
        },
        
        getCurrentEditCellData: function () {
            if (this.model.isEdit && $("#" + this._id + "EditForm").length) {
                var $element = $("#" + this._id + this._bulkEditCellDetails.fieldName.replace(/[^a-z0-9\s_]/gi, '')), cellValue;
                switch (this._bulkEditCellDetails.cellEditType) {
                    case ej.Grid.EditingType.String:
					case ej.Grid.EditingType.Numeric:
                        cellValue = $element.val();
                        break;                                          
                    case ej.Grid.EditingType.Dropdown:
                        cellValue = this._bulkEditCellDetails.isForeignKey ? { "value": $element.ejDropDownList("getSelectedValue"), "text": $element.ejDropDownList("getValue") } : $element.ejDropDownList("getSelectedValue");
                        break;
                    case ej.Grid.EditingType.Boolean:
                        cellValue = $element.is(':checked');
                        break;
                    case ej.Grid.EditingType.DatePicker:
                        cellValue = $element.ejDatePicker("model.value");
                        break;
                    case ej.Grid.EditingType.DateTimePicker:
                        cellValue = $element.ejDateTimePicker("model.value");
                        break;
                }
                if (typeof cellValue == "string" && cellValue.length && this.model.columns[this._bulkEditCellDetails.columnIndex].type == "number")
                    cellValue = parseFloat(cellValue);
                return cellValue;
            }
            return null;
        },
        cancelEditCell: function () {
            if (this.model.isEdit) {
                var tr = this.getRows()[this._bulkEditCellDetails.rowIndex], cellData = {}, cell;
                cellData[this._bulkEditCellDetails.fieldName] = this._bulkEditCellDetails.cellValue;
                if ($(tr).hasClass("e-insertedrow"))
                    cell = tr.cells[this._bulkEditCellDetails.columnIndex + this.model.groupSettings.groupedColumns.length];
                else
                    cell = tr.cells[this._bulkEditCellDetails.columnIndex];
                $(cell).removeClass("e-editedbatchcell").empty().html($($.templates[this._id + "_JSONTemplate"].render(cellData))[0].cells[this._bulkEditCellDetails.columnIndex].innerHTML);
                this.model.isEdit = false;
                this.element.focus();
            }
        },
        saveCell: function (preventSaveEvent) {
            if (this.model.isEdit) {
                if (!this.editFormValidate())
                    return true;
                var $form = $("#" + this._id + "EditForm"), $targetTR = $form.closest("tr"), $targetTD = $form.closest("td"), $toolBar, tempVal, formattedValue
                , args = {}, column = this.model.columns[this._bulkEditCellDetails.columnIndex], $element = $("#" + this._id + this._bulkEditCellDetails.fieldName.replace(/[^a-z0-9\s_]/gi,'')), getVal, setVal;
                args = {
                    columnName: column.field,
                    value: this.getCurrentEditCellData(),
                    rowData: this._bulkEditCellDetails.rowData,
                    previousValue: this._bulkEditCellDetails.cellValue,
                    columnObject: column,
                    cell: $targetTD,
                    isForeignKey: this._bulkEditCellDetails.isForeignKey
                };
                if (!preventSaveEvent && this._trigger("cellSave", args)) {
                    this._focusElements(args.cell);
                    this._bulkEditCellDetails.cancelSave = true;
                    return;
                }
                if (this._bulkEditCellDetails.cellEditType == "datetimepicker" || this._bulkEditCellDetails.cellEditType == "dropdownedit" || this._bulkEditCellDetails.cellEditType == "datepicker")
                    $element[$element.data("ejWidgets")[0]]("destroy");
                if (!ej.isNullOrUndefined(column.format)) {
                    formattedValue = this.formatting(column.format, args.isForeignKey ?
                                              (!isNaN(parseFloat(args.value.text)) && isFinite(args.value.text)
                                              ? parseFloat(args.value.text)
                                              : args.value.text) : args.value,this.model.locale);
                    args.cell.empty().html(formattedValue);
                }
                if (this._bulkEditCellDetails.cellEditType == "edittemplate") {
                    var temp1 = column.editTemplate.read;
                    if (typeof temp1 == "string")
                        temp1 = ej.util.getObject(temp1, window);
                    args.value = args.isForeignKey ? { "value": $element.ejDropDownList("getSelectedValue"), "text": $element.ejDropDownList("getValue") } : temp1($element);
                    ej.createObject(this._bulkEditCellDetails["fieldName"], args.value, args.rowData);
                    args.cell.empty().html(args.isForeignKey ? args.value.text : args.value);
                }
                else {
                    if (args.columnObject.type == "boolean" || args.columnObject.editType == "booleanedit") {
                        var cellData = {};
                        ej.createObject(args.columnObject.field, args.value, cellData);
                        args.cell.empty().html($($.templates[this._id + "_JSONTemplate"].render(cellData))[0].cells[this._bulkEditCellDetails.columnIndex].innerHTML);					
					}
					else if(args.columnObject.editType == "datepicker" || args.columnObject.editType == "datetimepicker")
						args.cell.empty().html(formattedValue);
                    else {
                        if (ej.isNullOrUndefined(column.format))
                            args.cell.empty().html(args.isForeignKey ? args.value.text : args.value)
                    }
                }
                args.cell.removeClass('e-validError');
                if (args.cell.hasClass('e-updatedtd'))
                    args.cell.addClass("e-gupdatenotify");
                tempVal = args.isForeignKey ? args.value.value : args.value;
                var isValueModified = ((this._bulkEditCellDetails.cellEditType == "datepicker" || this._bulkEditCellDetails.cellEditType == "datetimepicker")
										 && tempVal instanceof Date && args.previousValue instanceof Date) ? (tempVal.getTime() !== args.previousValue.getTime()) : (tempVal != args.previousValue);
                this.model.isEdit = false;
                if (isValueModified) {
                    this._enableSaveCancel();
                    args.cell.addClass("e-updatedtd e-icon e-gupdatenotify");
                    getVal = ej.getObject(this._bulkEditCellDetails["fieldName"], args.rowData);
                    if (typeof getVal == "string" && getVal.length)
                        setVal = args.isForeignKey ? args.value.value.toString() : args.value.toString();
                    else
                        setVal = args.isForeignKey ? (!isNaN(parseInt(args.value.value)) ? parseInt(args.value.value) : args.value.value) : args.value;
                    ej.createObject(this._bulkEditCellDetails["fieldName"], setVal, args.rowData);
                    if ($.inArray(args.rowData, this.batchChanges.changed) == -1 && $.inArray(args.rowData, this.batchChanges.added) == -1)
                        this.batchChanges.changed.push(args.rowData);
                }
                $targetTR.removeClass("e-editedrow").removeClass("e-batchrow");
                args.cell.removeClass("e-editedbatchcell");
            }
        },
        _enableSaveCancel: function () {
            if (this.model.toolbarSettings.showToolbar) {
                $toolBar = this.element.find("#" + this._id + "_toolbarItems");
                $toolBar.ejToolbar("enableItemByID", this._id + "_update");
                $toolBar.ejToolbar("enableItemByID", this._id + "_cancel");
            }
        },
        setCellText: function (rowIndex, cellIndex, value) { /*Supports only local datasource*/
            var byField = typeof cellIndex == "string", rows = this.getRows(), cell,
                isGrouped = this.model.groupSettings.groupedColumns.length != 0, isVirtualized = this.model.scrollSettings.allowVirtualScrolling,
                column = this[byField ? "getColumnByField" : "getColumnByIndex"](cellIndex), current = ej.getObject(["currentViewData", (isGrouped ? ".records" : "")].join(""), this.model),
                edited = {}, dm = isVirtualized ? this._dataManager : new ej.DataManager(current),
                key = this._primaryKeys[0], keyValue = byField || ej.getObject(rowIndex + "." + key, isVirtualized ? this._dataManager.dataSource.json : current);

            ej.createObject(column.field, value, edited);

            if (byField) {
                keyValue = rowIndex;
                rowIndex = dm.executeLocal(new ej.Query().select(key)).indexOf(rowIndex);
                cellIndex = this.getColumnIndexByField(column.field);
            }
            if (isVirtualized) {
                var pageSize = this.model.pageSettings.pageSize, page, name, mod = rowIndex % pageSize;
                page = (rowIndex + pageSize - mod)/ pageSize;        
                name = (page - 1) * pageSize; isCached = $.inArray(name, this.virtualLoadedPages) != -1
                if (isCached) {
                    cell = this.getContentTable().find("tr[name=" + name + "]")[mod].cells[cellIndex];
                }
            }

            canSkip = rowIndex == -1 || cellIndex == -1 || (isVirtualized && !isCached)
                || rowIndex > (isVirtualized ? this._dataSource() : current).length || cellIndex > this.model.columns.length;

            if (!canSkip) { /*Skip when not in current page*/
                cell = cell || rows[rowIndex].cells[cellIndex];
                cell.innerHTML = column.format === undefined ? value : this.formatting(column.format, value, this.model.locale);
                this._trigger("queryCellInfo", { cell: cell, text: cell.innerHTML, column: column, data: edited });
            }

            ej.createObject(key, keyValue, edited);
            this._dataManager.update(key, edited);
        },
        setCellValue: function (index, fieldName, cellValue) {
            var data = this.getDataByIndex(index), tr = this.getRows()[index], dataIndex, columnIndex = this.getColumnIndexByField(fieldName);
            ej.createObject(fieldName, cellValue, data);
            if ($(tr).hasClass("e-insertedrow"))
                $(tr.cells).not(".e-detailrowcollapse, .e-detailrowexpand")[columnIndex + this.model.groupSettings.groupedColumns.length].innerHTML = cellValue;
            else {
                $.inArray(data, this.batchChanges.changed) == -1 && this.batchChanges.changed.push(data);
                $(tr.cells).not(".e-detailrowcollapse, .e-detailrowexpand")[columnIndex].innerHTML = cellValue;
            }
            this._enableSaveCancel();
        },
        setDefaultData: function (defaultData) {
            if (ej.isNullOrUndefined(defaultData)) {
                var fieldNames = this.getColumnFieldNames();
                if (ej.isNullOrUndefined(this._bulkEditCellDetails._data))
                    this._bulkEditCellDetails._data = [];
                defaultData = {};
                var setter = function (field, value) { ej.createObject(field, value, defaultData) };
                for (var i = 0; i < fieldNames.length; i++) {
                    var index = i, field = fieldNames[i], val = ej.getObject(field, this._bulkEditCellDetails._data[0]);
                    var isChild = !ej.isNullOrUndefined(this.model.parentDetails) ? this.model.parentDetails.parentKeyField : "";
                    if (field == isChild)
                        this.model.columns[index].defaultValue = this.model.parentDetails.parentKeyFieldValue;
                    if (!ej.isNullOrUndefined(this.model.columns[index]["defaultValue"])) {
                        setter(field, this.model.columns[index]["defaultValue"]);
                    }
                    else {
                        switch (typeof val) {
                            case "number":
                                setter(field, 0);
                                break;
                            case "string":
                                setter(field, "");
                                break;
                            case "boolean":
                                setter(field, false);
                                break;
                            case "object":
                                if ($.isArray(val))
                                    setter(field, new Array());
                                else
                                    setter(field, "");
                        }
                    }
                }
            }
            this._bulkEditCellDetails.defaultData = defaultData;
        },
        _bulkDelete: function (index) {
            if (this.model.editSettings.allowDeleting) {
                if (ej.isNullOrUndefined(index))
                    index = this._selectedRow();
                if (index == -1) {
                    alert(this._getLocalizedLabels("DeleteOperationAlert"));
                    return;
                }
                var tr = this.getRows()[index], $tr = $(tr), data = this.getDataByIndex(index), args = {};
                args = {
                    primaryKey: this._primaryKeys,
                    rowIndex: index,
                    rowData: data,
                    row: $tr
                };
                if (this._trigger("beforeBatchDelete", args))
                    return;
                if ($tr.hasClass("e-insertedrow")) {
                    $tr.remove();
                    index = $.inArray(tr, this._bulkEditCellDetails.insertedTrCollection);
                    if (index != -1) {
                        this._bulkEditCellDetails.insertedTrCollection.splice(index, 1);
                        this.batchChanges.added.splice(index, 1);
                    }
                }
                else {
                    $tr.hide();
                    this.batchChanges.deleted.push(data);
                }
                this._enableSaveCancel();
                this._selectedRow(-1);
                args = {
                    primaryKey: this._primaryKeys,
                    rowIndex: index,
                    rowData: data
                };
                this._trigger("batchDelete", args);
            }
        },
        _bulkAddRow: function (defaultData) {
            if (this.model.editSettings.allowAdding) {
                var args = {}, $tr, editCellIndex, rows = this.getRows();
                if (!ej.isNullOrUndefined(defaultData))
                    this._bulkEditCellDetails.defaultData = defaultData;
                ej.isNullOrUndefined(this._bulkEditCellDetails.defaultData) && this.setDefaultData();
                args = {
                    defaultData: $.extend(true, {}, this._bulkEditCellDetails.defaultData),
                    primaryKey: this._primaryKeys,
                };
                if (this._trigger("beforeBatchAdd", args))
                    return;
                $tr = $($.render[this._id + "_JSONTemplate"](args.defaultData)).addClass("e-insertedrow");
                rows != null && $(rows[0]).hasClass("e-alt_row") && $tr.removeClass("e-alt_row");
                if (this.model.editSettings.rowPosition == "top")
                    this.getContentTable().first().find('tbody').first().prepend($tr);
                else if (this.model.editSettings.rowPosition == "bottom")
                    this.getContentTable().first().find('tbody').first().append($tr);
                if (this._gridRecordsCount === 0)
                    this.getContentTable().find("tbody .emptyrecord").first().remove();
                this._gridRows = this.getContentTable().find("td.e-rowcell").closest("tr").toArray();
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                    $tr.prepend(ej.buildTag("td.e-indentcell"));
                this._bulkEditCellDetails.insertedTrCollection.push($tr.get(0));
                this.batchChanges.added.push(args.defaultData);
                this._enableSaveCancel();
                var rowindex = this._gridRows.length - 1;
                if (this.model.editSettings.rowPosition == "bottom") {
                    editCellIndex = this._findNextEditableCell(0);
                    this.selectRows(rowindex);
                    this.editCell(rowindex, this.model.columns[editCellIndex].field);
                }
                else {
                    editCellIndex = this._findNextEditableCell(0);
                    this.selectRows(0);
                    this.editCell(0, this.model.columns[editCellIndex].field);
                }
                $tr.find(".e-rowcell").addClass("e-updatedtd e-icon e-gupdatenotify");
                args = { defaultData: args.defaultData };
                $.extend(args, {
                    columnObject: this.model.columns[editCellIndex],
                    columnIndex: editCellIndex,
                    row: $tr,
                    primaryKey: this._primaryKeys,
                    cell: $($tr[0].cells[editCellIndex])
                });
                this._trigger("batchAdd", args);
            }
        },
        getDataByIndex: function (rowIndex) {
            var $tr = $(this.getRows()[rowIndex]), insertedRowIndex, currentRowData, index;
            if ($tr.hasClass("e-insertedrow")) {
                insertedRowIndex = $.inArray($tr[0], this._bulkEditCellDetails.insertedTrCollection);
                return this.batchChanges.added[insertedRowIndex];
            }
            else
                return this._bulkEditCellDetails._data[rowIndex - this._bulkEditCellDetails.insertedTrCollection.length];

        },
        
        refreshBatchEditChanges: function () {
            this._bulkEditCellDetails = {
                cellValue: null,
                rowIndex: -1,
                _data: null,
                columnIndex: -1,
                fieldName: null,
                cellEditType: "",
                cancelSave: false,
                defaultData: null,
                insertedTrCollection: [],
                rowData: null,
                isForeignKey: false
            };
            this.batchChanges = {
                added: [],
                deleted: [],
                changed: []
            };
        },
        refreshBatchEditMode: function () {
            if (this.model.editSettings.editMode == "batch") {
                this.refreshBatchEditChanges();
                this._bulkEditCellDetails._data = $.extend(true, [], this.getCurrentViewData());
            }
        },
        
        batchCancel: function () {
            this.cancelEdit();
        },
        
        batchSave: function () {
            var args = {}, deferedObject, gridObject = this;
            this.saveCell();
            args["batchChanges"] = this.getBatchChanges();
            if (this._trigger("beforeBatchSave", args))
                return;
            args = {};
            args.requestType = "batchsave";
            var deferedObject = this._dataManager.saveChanges(this.getBatchChanges(), this._primaryKeys[0], this.model.query._fromTable);
            if (this._dataManager instanceof ej.DataManager && !this._dataManager.dataSource.offline) {
                deferedObject.done(function (e) {
                    gridObject._processBindings(args);
                });
				deferedObject.fail(function (e) {
                    var args = { error: e.error };
                    gridObject._trigger("actionFailure", args);
                });
            }
            else
                this._processBindings(args);

        },
        
        getBatchChanges: function () {
            return this.batchChanges;
        },
        
        editCell: function (index, fieldName) {
            if (this.model.editSettings.allowEditing && $.inArray(fieldName, this._disabledEditableColumns) == -1) {
                var $form = $("#" + this._id + "EditForm");
                this.model.isEdit && this.saveCell();
                if ($.isFunction($.validator) && $form.length && $form.validate().errorList.length)
                    return;
                var $targetTR = $(this.getRows()[index]), columnIndex = this.getColumnIndexByField(fieldName), $targetTd = $targetTR.find(".e-rowcell").eq(columnIndex), column = this.model.columns[columnIndex], rowData = this.getDataByIndex(index);
                var args = {
                    validationRules: ej.isNullOrUndefined(column.validationRules) ? {} : $.extend(true, {}, column.validationRules),
                    columnName: column.field,
                    value: ej.getObject(fieldName, rowData),
                    rowData: rowData,
                    primaryKey: this._primaryKeys,
                    columnObject: column,
                    cell: $targetTd,
                    isForeignKey: !ej.isNullOrUndefined(column.foreignKeyValue) && this.model.editSettings.editMode == "batch" ? true : false,
                }, isEditable = true;
                this._batchEditRowData = rowData;
                if (this._trigger("cellEdit", args))
                    return;
                if ($targetTR.hasClass("e-insertedrow")) args.requestType = "add";
                if ($.inArray(fieldName, this._primaryKeys) != -1 || args.columnObject.allowEditing === false || args.columnObject.template || args.columnObject.isUnbound) {
                    $.extend(this._bulkEditCellDetails, {
                        cellValue: args.value,
                        rowIndex: index,
                        fieldName: fieldName,
                        rowData: args.rowData,
                        columnIndex: columnIndex,
                        isForeignKey: ej.isNullOrUndefined(args.columnObject.foreignKeyValue) ? false : true
                    });
                    isEditable = false;
                }
                if ($targetTR.hasClass("e-insertedrow") && (!args.columnObject.template && !args.columnObject.isUnbound))
                    isEditable = true;
                if (isEditable) {
                    $.extend(this._bulkEditCellDetails, {
                        rowIndex: index,
                        cellValue: args.value,
                        columnIndex: columnIndex,
                        fieldName: fieldName,
                        cellEditType: args.columnObject.editType,
                        rowData: rowData,
                        isForeignKey: ej.isNullOrUndefined(args.columnObject.foreignKeyValue) ? false : true
                    });
                    this._renderBulkEditObject(args, $targetTd);
                    $targetTR.addClass("e-editedrow").addClass("e-batchrow");
                    args.cell.addClass("e-editedbatchcell");
                    if (args.columnObject.editType == "booleanedit")
                        args.cell.addClass("e-boolrowcell");
                }
            }
        },
        _findNextEditableCell: function (columnIndex) {
            var endIndex = this.model.columns.length;
            for (var i = columnIndex; i < endIndex; i++) {
                if (!this.model.columns[i].template && !this.model.columns[i].isUnbound)
                    return i;
            }
            return -1;
        },
        _findNextCell: function (columnIndex, direction) {
            var splittedColumn, visibleColumns = [], predicate, rows = this.getRows();
            predicate = ej.Predicate("visible", "equal", true).and("template", "notequal", true);
            if (!$(rows[this._bulkEditCellDetails.rowIndex]).hasClass("e-insertedrow"))
                predicate = predicate.and("allowEditing", "notequal", false);
            splittedColumn = direction == "right" ? this.model.columns.slice(columnIndex) : this.model.columns.slice(0, columnIndex + 1).reverse();
            visibleColumns = ej.DataManager(splittedColumn).executeLocal(ej.Query().where(predicate));
            if (visibleColumns.length == 0 && (!(direction == "left" && this._bulkEditCellDetails.rowIndex == 0) && !(direction == "right" && this._bulkEditCellDetails.rowIndex + 1 == this.getRows().length))) {
                splittedColumn = direction == "right" ? this.model.columns.slice(0, columnIndex) : this.model.columns.slice(columnIndex).reverse();
                visibleColumns = ej.DataManager(splittedColumn).executeLocal(ej.Query().where(predicate));
                this._bulkEditCellDetails.rowIndex = visibleColumns.length && direction == "right" ? this._bulkEditCellDetails.rowIndex + 1 : this._bulkEditCellDetails.rowIndex - 1;
            }
            return visibleColumns.length ? $.inArray(visibleColumns[0], this.model.columns) : -1;
        },
        _moveCurrentCell: function (direction) {
            var editCellIndex, rowIndex = this._bulkEditCellDetails.rowIndex, currentRow, $form = $("#" + this._id + "EditForm");
            if (this._bulkEditCellDetails.rowIndex == -1 && this._bulkEditCellDetails.columnIndex == -1)
                return true;
            switch (direction) {
                case "right":
                    if ((this._bulkEditCellDetails.rowIndex == this.getRows().length - 1 && this._bulkEditCellDetails.columnIndex == this.model.columns.length - 1) || (!this.element.is(document.activeElement) && $form.length == 0))
                        return true;
                    if (this._bulkEditCellDetails.columnIndex == this.model.columns.length - 1) {
                        editCellIndex = 0;
                        this._bulkEditCellDetails.rowIndex = this._bulkEditCellDetails.rowIndex + 1;
                    }
                    else
                        editCellIndex = this._bulkEditCellDetails.columnIndex + 1;
                    if (this.model.columns[editCellIndex].template === true || this.model.columns[editCellIndex].visible === false || this.model.columns[editCellIndex].allowEditing === false)
                        editCellIndex = this._findNextCell(editCellIndex, direction);
                    this._bulkEditCellDetails.rowIndex != rowIndex && this.selectRows(this._bulkEditCellDetails.rowIndex);
                    editCellIndex != -1 && this.editCell(this._bulkEditCellDetails.rowIndex, this.model.columns[editCellIndex].field);
                    break;
                case "left":
                    if ((this._bulkEditCellDetails.rowIndex == 0 && this._bulkEditCellDetails.columnIndex == 0) || (!this.element.is(document.activeElement) && $form.length == 0))
                        return true;
                    if (this._bulkEditCellDetails.columnIndex == 0) {
                        editCellIndex = this.model.columns.length - 1;
                        this._bulkEditCellDetails.rowIndex = this._bulkEditCellDetails.rowIndex - 1;
                        this.selectRows(this._bulkEditCellDetails.rowIndex);
                    }
                    else
                        editCellIndex = this._bulkEditCellDetails.columnIndex - 1;
                    if (this.model.columns[editCellIndex].template === true || this.model.columns[editCellIndex].visible === false || this.model.columns[editCellIndex].allowEditing === false)
                        editCellIndex = this._findNextCell(editCellIndex, direction);
                    this._bulkEditCellDetails.rowIndex != rowIndex && this.selectRows(this._bulkEditCellDetails.rowIndex);
                    editCellIndex != -1 && this.editCell(this._bulkEditCellDetails.rowIndex, this.model.columns[editCellIndex].field);
                    break;
                case "up":
                    if (this._bulkEditCellDetails.rowIndex == 0)
                        return;
                    editCellIndex = this._bulkEditCellDetails.columnIndex;
                    this.selectRows(this._bulkEditCellDetails.rowIndex - 1);
                    this.editCell(this._bulkEditCellDetails.rowIndex - 1, this.model.columns[this._bulkEditCellDetails.columnIndex].field);
                    break;
                case "down":
                    if (this._bulkEditCellDetails.rowIndex == this.getRows().length - 1)
                        return;
                    editCellIndex = this._bulkEditCellDetails.columnIndex;
                    this.selectRows(this._bulkEditCellDetails.rowIndex + 1);
                    this.editCell(this._bulkEditCellDetails.rowIndex + 1, this.model.columns[this._bulkEditCellDetails.columnIndex].field);
                    break;

            }
            addedRow = !$(this.getRows()[this._bulkEditCellDetails.rowIndex]).hasClass("e-insertedrow");
            if (editCellIndex != -1 && (this.model.columns[editCellIndex].isUnbound || (this.model.columns[editCellIndex].isPrimaryKey && addedRow) || this.model.columns[editCellIndex].template))
                this.element.focus();
            return false;
        },
        _renderBulkEditObject: function (cellEditArgs, $td) {
            var $form = ej.buildTag("form", "", {}, { id: this._id + "EditForm" }), $bulkEditTemplate = this._bulkEditTemplate, mappingName = this._id + cellEditArgs.columnObject.field, $element, htmlString, cellData = {};
            ej.createObject(cellEditArgs.columnObject.field, cellEditArgs.value, cellData);
            var args = { requestType: cellEditArgs.requestType };
            $td.empty();
            if (!$td.parent().is(":last-child")){
                $td.addClass('e-validError');
                $td.removeClass('e-gupdatenotify');
             }
            htmlString = $bulkEditTemplate.find("#" + cellEditArgs.columnObject.field.replace(/\./g, ej.pvt.consts.complexPropertyMerge) + "_BulkEdit").html();
            $element = $($.templates(htmlString).render(cellData));
            if ($element.get(0).tagName == "SELECT") {
                $element.val(ej.getObject(cellEditArgs.columnObject.field, cellData));
                $element.val() == null && $element.val($element.find("option").first().val());
            }
            $form.append($element);
            $td.append($form);
            this._setoffsetWidth();
            this._refreshEditForm(args);
            if ($.isFunction($.validator) && !$.isEmptyObject(cellEditArgs.validationRules)) {
                this.initValidator();
                this.setValidationToField(cellEditArgs.columnObject.field, cellEditArgs.validationRules);
            }
            this.model.isEdit = true;
        },
        _triggerConfirm: function (args) {
            if (args !== undefined && args.model.text == this._getLocalizedLabels("OkButton")) {
                if (this._confirmDialog.find(".e-content").text() == this._getLocalizedLabels("BatchSaveConfirm"))
                    this.batchSave();
                else if (this._confirmDialog.find(".e-content").text() == this._getLocalizedLabels("ConfirmDelete"))
                    this.model.editSettings.editMode == "batch" ? this._bulkDelete() : this._deleteRow();
                else if (this._confirmDialog.find(".e-content").text() == this._getLocalizedLabels("CancelEdit"))
                    this.cancelEdit();
                else {
                    this._confirmedValue = true;
                    this._processBindings(this._requestArgs);
                }
            }
            else {
                if (this._confirmDialog.find(".e-content").text() != this._getLocalizedLabels("BatchSaveConfirm") && this._confirmDialog.find(".e-content").text() != this._getLocalizedLabels("ConfirmDelete")) {
                    if (this._confirmDialog.find(".e-content").text() != this._getLocalizedLabels("CancelEdit")) {
                        switch (this._requestArgs.requestType) {
                            case "grouping":
                                this.model.groupSettings.groupedColumns.pop();
                                break;
                            case "ungrouping":
                                this.model.groupSettings.groupedColumns.push(this._requestArgs.columnName);
                                break;
                            case "sorting":
                                this._cSortedDirection = this._cSortedColumn = null;
                                break
                            case "filtering":
                                this.model.filterSettings.filteredColumns.reverse().splice(0, this._requestArgs.currentFilterObject);
                                this.model.filterSettings.filteredColumns.reverse();
                                break;
                            case "paging":
                                this._currentPage(this._requestArgs.previousPage);
                                this.getPager().ejPager("model.currentPage", this._requestArgs.previousPage);
                                break

                        }
                    }
                }
                this._confirmedValue = false;
            }
            this._requestArgs = null;
            this._confirmDialog.ejDialog("close");
        },
        _saveCellHandler: function (e) {
            var $target = $(e.target);
            e.stopPropagation();
            if ($target.closest(".e-popup").length == 0 && $target.closest(".e-rowcell").find("#" + this._id + "EditForm").length == 0)
                this.saveCell();
        },
        initValidator: function () {
            var gridObject = this, elements = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
            for (var i = 0; i < elements.length ; i++) {
                elements.eq(i).validate({
                    ignore: ".e-hide",
                    errorClass: 'e-field-validation-error',
                    errorElement: 'div',
                    wrapper: "div",
                    errorPlacement: function (error, element) {
                        if (element.is(":hidden"))
                            element = element.siblings("input:visible");
                        var $td = element.closest("td"), $container = $(error).addClass("e-error")
                        , $tail = ej.buildTag("div.e-errortail e-toparrow"), $container;
                        $td.find(".e-error").remove();
                        if (element.parent().hasClass("e-in-wrap"))
                            $container.insertAfter(element.closest(".e-widget"));
                        else
                            $container.insertAfter(element);
                        $container.prepend($tail)
						if (gridObject.model.enableRTL)
                            gridObject.model.editSettings.editMode != "dialog" && $container.offset({ top: element.offset().top + element.height() });
                        else
							gridObject.model.editSettings.editMode != "dialog" && $container.offset({ left: element.offset().left, top: element.offset().top + element.height() });
                        $container.fadeIn("slow");
                    },

                });
            }
        },
        setValidation: function () {
            for (var i = 0; i < this.model.columns.length; i++) {
                if (!ej.isNullOrUndefined(this.model.columns[i]["validationRules"])) {
                    this.setValidationToField(this.model.columns[i].field, this.model.columns[i].validationRules);
                }
            }
        },
        
        setValidationToField: function (name, rules) {
            var fName = name, ele;
            if (!ej.isNullOrUndefined(name))
                fName = fName.replace(/[^a-z0-9\s_]/gi, '');
            if (this.model.editSettings.editMode == "batch")
                var form = this.element.find("#" + this._id + "EditForm");
            else
                var form = this.element.find(".gridform");
            ele = form.find("#" + this._id + fName).length > 0 ? form.find("#" + this._id + fName) : form.find("#" + fName);
            if (rules["regex"]) {
                rules[name + "regex"] = rules["regex"]; delete rules["regex"];
                $.validator.addMethod(fName + "regex", function (value, element, options) {
                    var ptn = options instanceof RegExp ? options : new RegExp(options);
                    return ptn.test(value);
                }, ej.getObject("messages.regex", rules) || this.getColumnByField(name).headerText + " should match the given pattern");
            }
            !ele.attr("name") && ele.attr("name", name);
            ele.rules("add", rules);
            var validator = $("#" + this._id + "EditForm").validate();
            validator.settings.messages[name] = validator.settings.messages[name] || {};
            if (!ej.isNullOrUndefined(rules["required"])) {
                if (!ej.isNullOrUndefined(rules["messages"] && rules["messages"]["required"]))
                    var message = rules["messages"]["required"];
                else
                    var message = $.validator.messages.required;
                if (message.indexOf("This field") == 0)
                    message = message.replace("This field", this.getColumnByField(name).headerText);               
                validator.settings.messages[name]["required"] = message;
                if (ele.hasClass("e-datepicker"))
                    ele.ejDatePicker({watermarkText: ""});
            }
        },
        _renderConfirmDialog: function () {
            var $contentDiv = ej.buildTag('div.e-content', this._getLocalizedLabels("BatchSaveConfirm"))
            , $buttons = ej.buildTag('span.e-buttons', "<input type='button' id=" + this._id + 'ConfirmDialogOK' + " value='" + this._getLocalizedLabels("OkButton") + "' /> "
                + "<input type='button' id=" + this._id + 'ConfirmDialogCancel' + " value='" + this._getLocalizedLabels("CancelButton") + "' />");

            this._confirmDialog = ej.buildTag('div#' + this._id + 'ConfirmDialog');
            this._confirmDialog.append($contentDiv).append($buttons);
            this.element.append(this._confirmDialog);
            $buttons.find("input").ejButton({
                cssClass: this.model.cssClass,
                showRoundedCorner: true,
                size: "mini",
                click: $.proxy(this._triggerConfirm, this)
            });
            this._renderFDialog(this._id + 'ConfirmDialog');
            this._confirmDialog.ejDialog({ width: "auto",minWidth:0,minHeight:0, enableModal: true });
        },
        _unboundClickHandler: function (e) {
            var $target = $(e.target).closest("button");
            if ($target.hasClass("e-button") && ($target.hasClass("e-disable") || $target.prop("disabled"))) return;
            var $editTrLen = 0, params = {};
            if ($(e.target).hasClass("e-unboundcelldiv"))
                return;
            var index = $target.hasClass("e-savebutton") ? this.getIndexByRow($(".e-editedrow")) : this.getIndexByRow($target.closest("tr"));
            var rowData = this._currentJsonData[index];
            var btnObj = $($target).ejButton("instance");
            if ($target.hasClass("e-cancelbutton"))
                this.model.isEdit = false;
            if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlinetemplate")
                $editTrLen = $("#" + this._id).find(".e-editedrow").length;
            this.model.allowSelection && !this.model.isEdit && this.selectRows(this.getIndexByRow($target.closest("tr")) - $editTrLen);
            $.isFunction($.fn.ejDatePicker) && $("#" + this._id + "EditForm").find(".e-datepicker").ejDatePicker("hide");
            if ($target.hasClass("e-editbutton")) {
                if (this.model.isEdit)
                    this.cancelEdit();
                var $tr = this.getRowByIndex(index);
                this.startEdit($tr);
            } else if ($target.hasClass("e-deletebutton")) {
                var $tr = this.getRowByIndex(index);
                if (this.model.editSettings.showDeleteConfirmDialog) {
                    this._toolbarOperation(this._id + "_delete");
                    return;
                }
                this._deleteRow($tr);
            }
            else if ($target.hasClass("e-savebutton")) {
                this.endEdit();
                rowData = this._currentJsonData[index];
            }
            else if ($target.hasClass("e-cancelbutton"))
                this.cancelEdit();
            params = { rowIndex: index, data: rowData, buttonModel: btnObj.model };
            if (ej.raiseWebFormsServerEvents) {
                var serverArgs = { model: this.model, originalEventType: "commandButtonClick" };
                var clientArgs = params;
				if(!ej.isNullOrUndefined(this.model.serverEvents) && $.inArray("commandButtonClick",this.model.serverEvents) != -1)
                  ej.raiseWebFormsServerEvents("commandButtonClick", serverArgs, clientArgs);
            }
        },
          
        addRecord: function (data, serverChange) {
            if (this.model.editSettings.allowAdding && ($(".e-gridcontent").find(".gridform").length == 0)) {
            if (data) {
                if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                    var $addRow = ej.buildTag('tr.e-addedrow');
                    this.getContentTable().find('tbody').first().prepend($addRow);
                }
                var args = { data: data };
                args.action = "add";
                args.selectedRow = this._selectedRow();
                this._cAddedRecord = data;
                args.requestType = ej.Grid.Actions.Save;
                this._updateAction(args);
                args.selectedRow  != -1 && this.selectRows( args.selectedRow + 1)
                if (this._isUnboundColumn)
                    this._refreshUnboundTemplate(this.getContentTable());
                if (!serverChange) {
                    if ((this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") && this.model.allowPaging && this.model.pageSettings.pageSize < this.model.currentViewData.length && this.model.groupSettings.groupedColumns.length == 0 && !this.model.editSettings.showAddNewRow)
                        this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                }
            } else
                    this._startAdd();
            }
        },
        
        updateRecord: function (keyField, data, action) {
            this._updateDeleteRecord(keyField, data, "update");
            if (this.model.sortSettings.sortedColumns.length || this.model.groupSettings.groupedColumns.length || !ej.isNullOrUndefined(this._searchCount) || this.filterColumnCollection.length)
                this.refreshContent();
        },
        _updateDeleteRecord: function (keyField, data, action) {
            var dataMgr = ej.DataManager(this._currentJsonData), dataFilter, index, $row, $newrow;
            dataFilter = dataMgr.executeLocal(ej.Query().where(keyField, ej.FilterOperators.equal, data[keyField]));
            if (dataFilter.length) {
                index = $.inArray(dataFilter[0], this._currentJsonData);
                if (index != -1) {
                    $row = this.getRowByIndex(index);
                    if (action == "update") {
                        $newrow = $($.render[this._id + "_JSONTemplate"](data));
                        $row.replaceWith($newrow);
                        !$row.hasClass("e-alt_row") && $newrow.removeClass("e-alt_row");
                        if (this._isUnboundColumn)
                            this._refreshUnboundTemplate(this.getContentTable());
                            this._dataManager[action](keyField, data);
                    }
                    else {
                        if ($.inArray(index, this.selectedRowsIndexes)==-1) 
                            this.selectedRowsIndexes.push(index);
                        this._deleteRow($row);
                    }
                }
            }
           
        },
        
        deleteRecord: function (keyField, data) {
            this._updateDeleteRecord(keyField, data, "remove");
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.sort = {
        _addSortElementToColumn: function (field, direction) {
            var duplicateColumn = ej.DataManager(this.model.columns).executeLocal(ej.Query().where("field", "equal", field)), imageDirection;
            if (duplicateColumn.length > 1)
                var column = this.getColumnByHeaderText(this._$curSElementTarget.text());
            else
                var column = this.getColumnByField(field);
            if (ej.isNullOrUndefined(column))
                return;
            var index = $.inArray(column, this.model.columns);
            var sortcolumn = this.getsortColumnByField(field);
            var sortindex = $.inArray(sortcolumn, this.model.sortSettings.sortedColumns);
            var $headerCellDiv = this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").find(".e-headercell").not(".e-detailheadercell").eq(index).find(".e-headercelldiv");
            direction = ej.isNullOrUndefined(direction) ? "ascending" : direction.toLowerCase();
            $headerCellDiv.find(".e-ascending,.e-descending").remove();
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this.element.find(".e-groupdroparea").find("div[ej-mappingname='" + field + "']").find(".e-ascending,.e-descending").not(".e-ungroupbutton").remove();
            imageDirection = direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
            var opacity = 1;
            if (this.model.allowSorting && this.model.allowMultiSorting && this.model.sortSettings.sortedColumns.length > 1) {
                for (var i = 1; i <= sortindex; i++) {
                    opacity = opacity + 1;
                }
                if ($headerCellDiv.css("text-align") == "right") {
                    $headerCellDiv.prepend(this._createSortNumber(opacity, $headerCellDiv).addClass("e-sortnumber"));
                    $headerCellDiv.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
                }
                else {
                    $headerCellDiv.prepend(this._createSortNumber(opacity, $headerCellDiv).addClass("e-sortnumber"));
                    $headerCellDiv.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
                }
            }
            else
                $headerCellDiv.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this.element.find(".e-groupdroparea").find("div[ej-mappingname='" + field + "']").append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
            $headerCellDiv.parent().attr("aria-sort", direction);
        },
        _removeSortElementFromColumn: function (field) {
            var column = this.getColumnByField(field);
            var index = $.inArray(column, this.model.columns);
            var $headerCellDiv = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell").eq(index).find(".e-headercelldiv");
            $headerCellDiv.find(".e-ascending,.e-descending").remove();
            $headerCellDiv.parent().removeAttr("aria-sort");
        },
        _sortCompleteAction: function (args) {
            var imageDirection;
            this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv")
                    .find(".e-ascending,.e-descending,.e-number").remove();
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this.element.find(".e-groupdroparea").find("div[ej-mappingname='" + args.columnName + "']").find(".e-ascending,.e-descending,.e-number").not(".e-ungroupbutton").remove();
            this.getHeaderTable().find("[aria-sort]").removeAttr("aria-sort");
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
            if (this.model.groupSettings.groupedColumns.length && this._$curSElementTarget != null) {
                var $element = this._checkEinGroupDrop($.trim(this._$curSElementTarget.attr("ej-mappingname")));
                if (!ej.isNullOrUndefined($element)) {
                    imageDirection = (ej.isNullOrUndefined(args.columnSortDirection) || args.columnSortDirection == "" ? this.getsortColumnByField(this._$curSElementTarget.attr("ej-mappingname")).direction.toLowerCase() : args.columnSortDirection) == "ascending" ? "e-rarrowup-2x" : "e-rarrowdown-2x"
                    $element.find(".e-ascending,.e-descending").removeClass().addClass("e-icon e-" + (ej.isNullOrUndefined(args.columnSortDirection) || args.columnSortDirection == "" ? this.getsortColumnByField(this._$curSElementTarget.attr("ej-mappingname")).direction.toLowerCase() : args.columnSortDirection) + " " + imageDirection);
                }
            }
            this.multiSortRequest = false;
            this.setWidthToColumns();
        },
        
        removeSortedColumns: function (fieldName) {
            if ($.isArray(fieldName)) {
                for (var i = 0; i < fieldName.length; i++) {
                    this._removeSortedColumnFromCollection(fieldName[i]);
                }
            }
            else
                this._removeSortedColumnFromCollection(fieldName);
            this.multiSortRequest = true;
            this.sortColumn(null, null);
        },
        _removeSortedColumnFromCollection: function (fieldName) {
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                if (this.model.sortSettings.sortedColumns[i].field == fieldName) {
                    this.model.sortSettings.sortedColumns.splice(i, 1);
                    break;
                }
            }
        },
        
        clearSorting: function () {
            var proxy = this;
            this.model.sortSettings.sortedColumns = $.grep(this.model.sortSettings.sortedColumns, function (value, index) {
                if ($.inArray(value.field, proxy.model.groupSettings.groupedColumns) != -1)
                    return true;
                return false;
            });
            this._$prevSElementTarget = null;
            this._$curSElementTarget = null;
            this.refreshContent();
        },
        
        sortColumn: function (columnName, columnSortDirection) {
            if (!this.model.allowSorting || $.inArray(columnName, this._disabledSortableColumns) != -1 || (columnName != null && columnName.length == 0))
                return;
            var args = {};
            if (!this.multiSortRequest) {
                var proxy = this;
                this.model.sortSettings.sortedColumns = $.grep(this.model.sortSettings.sortedColumns, function (value, index) {
                    if ($.inArray(value.field, proxy.model.groupSettings.groupedColumns) != -1)
                        return true;
                    return false;
                });
            }
            args.requestType = ej.Grid.Actions.Sorting;
            this._cSortedColumn = args.columnName = columnName;
            this._cSortedDirection = args.columnSortDirection = ej.isNullOrUndefined(columnSortDirection) ? ej.sortOrder.Ascending : columnSortDirection.toLowerCase();
            if (this._cSortedColumn !== null) {
                this._removeSortedColumnFromCollection(columnName);
                this.model.sortSettings.sortedColumns.push({ field: this._cSortedColumn, direction: this._cSortedDirection });
            }
            var returnValue = this._processBindings(args);
            if (returnValue)
                this._cSortedDirection = this._cSortedColumn = null;
            this._primaryKeyValues = [];
        },
        _createSortElement: function () {
            return ej.buildTag('span.e-icon', "&nbsp;");
        },
        _renderMultiTouchDialog: function () {
            this._customPop = ej.buildTag("div.e-gridpopup", "", { display: "none" });
            var $content = ej.buildTag("div.e-content"), $downTail = ej.buildTag("div.e-downtail e-tail");
            if (this.model.allowMultiSorting) {
                var $selElement = ej.buildTag("span.e-sortdirect e-icon");
                $content.append($selElement);
            }
            if (this.model.selectionType == "multiple") {
                var $selElement = ej.buildTag("span.e-rowselect e-icon");
                $content.append($selElement);
            }
            this._customPop.append($content);
            this._customPop.append($downTail);
            this.element.append(this._customPop);
        },

    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.filter = {
        
        getFilterBar: function () {
            return this._gridFilterBar;
        },

        setGridFilterBar: function (value) {
            this._gridFilterBar = value;
        },
        
        filterColumn: function (fieldName, filterOperator, filterValue, predicate, matchcase, actualFilterValue) {
            if (!this.model.allowFiltering)
                return;
            var args = {};
            args.requestType = ej.Grid.Actions.Filtering;
            args.currentFilterObject = [];
			this._$curFieldName =  fieldName;
            if (!$.isArray(filterOperator))
                filterOperator = $.makeArray(filterOperator);
            if (!$.isArray(filterValue))
                filterValue = $.makeArray(filterValue);
            var firstLoop = false;
            var filterCol = this._filterCollection;
            if (ej.util.isNullOrUndefined(this._currentFilterColumn))
                this._currentFilterColumn = this.getColumnByField(fieldName);
            for (var index = 0; index < filterOperator.length; index++) {
                var filterObject = {
                    field: fieldName,
                    operator: filterOperator[index],
                    value: filterValue[index],
                    matchcase: matchcase,
                    predicate: predicate,
                    actualFilterValue: actualFilterValue
                };
                if (this.model.filterSettings.filterType == "filterbar")
                    this._$colType = this._currentFilterColumn.type;
                if (this.model.filterSettings.filteredColumns.length == 0 && filterObject.value !== "") {
                    if ((this._$colType == "date" || this._$colType == "datetime") && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
                        this._setDateFilters(filterObject);
                    else
                        this.model.filterSettings.filteredColumns.push(filterObject);
                } else {
                    var proxy = this;
                    if (!firstLoop) {
                        var dataManger = ej.DataManager(this.model.filterSettings.filteredColumns);
                        var query = new ej.Query().where("field", ej.FilterOperators.equal, filterObject.field);
                        var object = dataManger.executeLocal(query);
                        for (var i = 0; i < object.length; i++) {
                            var objectIndex = $.inArray(object[i], this.model.filterSettings.filteredColumns)
                            if (objectIndex != -1)
                                this.model.filterSettings.filteredColumns.splice(objectIndex, 1);
                        }
                    }
                    if (filterObject.value !== "") {
                        if ((this._$colType == "date" || this._$colType == "datetime") && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
                            this._setDateFilters(filterObject);
                        else
                            this.model.filterSettings.filteredColumns.push(filterObject);
                    }
                }
                firstLoop = true;
                args.currentFilterObject.push(filterObject);
            }
            args.filterCollection = this.model.filterSettings.filteredColumns;
            args.currentFilteringColumn = fieldName;
            var returnValue = this._processBindings(args);
            if (returnValue) {
                this.model.filterSettings.filteredColumns.reverse().splice(0, filterOperator.length);
                this.model.filterSettings.filteredColumns.reverse();
            }

        },
        
        search: function (searchString) {
            var args = {};
            if ($("#" + this._id + "_search").find("input").val() != searchString);
                $("#" + this._id + "_search").find("input").val(searchString);
            args.requestType = ej.Grid.Actions.Search;
            args.keyValue = searchString;
            if (this.model.locale != "en-US")
                this.model.searchSettings.key = searchString.toLowerCase() == this._getLocalizedLabels("True").toLowerCase() ? "true" : searchString.toLowerCase() == this._getLocalizedLabels("False").toLowerCase() ? "false" : searchString;
            else
                this.model.searchSettings.key = searchString;
            this._processBindings(args);
            this._primaryKeyValues = [];
        },
        _filterBarHandler: function (e) {
            var keycode = e.keyCode;
            if ((this.model.filterSettings["filterBarMode"] == "immediate" || keycode == 13) && keycode != 9) {
                var $target = $(e.target);
                this.filterStatusMsg = "";
                var fieldName = $target.prop("id").replace("_filterBarcell", "");
                var column = this.getColumnByField(fieldName);
                if (column == null)
                    return;
                this._currentFilterColumn = column;
                if (this._currentFilterColumn != this._oldFilterColumn)
                    this.filterValueOldLength = 0;
				if (this.model.locale != "en-US")
                    this._currentFilterbarValue = $target.val().toLowerCase() == this._getLocalizedLabels("True").toLowerCase() ? "true" : $target.val().toLowerCase() == this._getLocalizedLabels("False").toLowerCase() ? "false":$target.val();
                else
                    this._currentFilterbarValue = $target.val();
                this.filterValueCurrentLength = this._currentFilterbarValue.length;
                if (((this.filterValueCurrentLength == 0 && this.filterValueOldLength == 0) || this._currentFilterbarValue == this.OldfilterValue) && this._currentFilterColumn == this._oldFilterColumn) {
                    this._showFilterMsg();
                    return;
                }
                this._skipFilterProcess = this._checkForSkipInput();
                if (!this._skipFilterProcess) {
                    this._processFilter();
                } else {
                    if (this._currentFilterColumn.type == "string") {
                        this.filterStatusMsg = "Invalid Filter Data";
                        this._showFilterMsg();
                    } else {
                        this._skipFilterProcess = false;
                        this._showFilterMsg();
                        return;
                    }
                }
            }
        },
        _renderResponsiveFilter: function () {
            var $outerDiv = ej.buildTag('div#responsiveFilter.resFilterDiv', '', { 'width': '100%', 'padding': '0px' });
            var height = $(window).height() + 1;
            var headerHieght = height * (8 / 100);
            var width = this.element.height() > height ? $(window).width() + 16.5 : $(window).width();
            var $columnDiv = ej.buildTag('div.columnDiv', '', { width: '100%' });
            for (var i = 0; i < this.model.columns.length; i++) {
                var $cDiv = ej.buildTag('div.e-responsivefilterColDiv', '', { width: '100%' }, { 'ej-MappingName': this.model.columns[i].field });
                var $span = ej.buildTag('span', this.model.columns[i].headerText, { 'margin-left': '4%' });
                $cDiv.append($span);
                $columnDiv.append($cDiv);
            }
            $outerDiv.append($columnDiv);
            this.element.append($outerDiv);
            var gridObj = this;
            var widt = this.element.outerWidth();
            var $headerDiv = ej.buildTag('div.e-resFilterDialogHeaderDiv', '', { 'height': headerHieght });
            var $span = ej.buildTag('div.labelRes', '<span>Filter</span>');
            var $resIcon = ej.buildTag('div.e-resFilterleftIcon', '', { 'margin-top': '3%' });
            var $resspan = ej.buildTag('span.e-icon e-responsiveFilterClear e-resIcon', '', { 'font-size': '23px' });
            var $divIcon = ej.buildTag('div.e-resFIlterRigthIcon', '', { 'float': 'right', 'margin-top': '3%' }, { closeDialogue: 'responsiveFilter', gridEle: true });
            var $spanIcon = ej.buildTag('span.e-icon e-responisveClose e-resIcon', '', { 'font-size': '23px' }, { closeDialogue: 'responsiveFilter', gridEle: true });
            $divIcon.click(function (e) {
                $("#responsiveFilter").css('display', 'none');
                gridObj.element.css('display', 'block');
            });
            $resIcon.click(function (e) {
                $("#responsiveFilter").find('.e-responsivefilterColDiv').find('.e-filternone').click();
            });
            $headerDiv.append($resIcon.append($resspan));
            $headerDiv.append($span).append($divIcon.append($spanIcon));
            $outerDiv.prepend($headerDiv);
            $outerDiv.insertAfter(this.element);
            $(".resFilterDiv").bind('keydown', $.proxy(this._responsiveDialogueKeyUp, this))
            $outerDiv.css('display', 'none');
            $(".e-responsivefilterColDiv").bind('click', $.proxy(this._mouseClickHandler, this));
        },
        _closeDivIcon: function (sender) {
            var $div = $(sender.target);
            if (!ej.isNullOrUndefined($div.attr('closeDialogue'))) {
                var $dialog = $("#" + $div.attr('closeDialogue'));
                if (!ej.isNullOrUndefined($dialog.data('ejDialog')))
                    $dialog.ejDialog('close');
                else
                    $dialog.css('display', 'none');
            }
            if (!ej.isNullOrUndefined($div.attr('gridEle'))) {
                this.element.css('display', 'block');
            }
            if (!ej.isNullOrUndefined($div.attr('openDialogue'))) {
                if (this.model.enableResponsiveRow || $div.attr('closeDialogue').indexOf('Custom') != -1) {
                    var $dialog = $("#" + $div.attr('openDialogue'));
                    if (!ej.isNullOrUndefined($dialog.data('ejDialog')))
                        $dialog.ejDialog('open');
                    else
                        $dialog.css('display', 'block');
                }
                else
                    this.element.css('display', 'block');
            }
        },
        _setResponsiveFilterIcon: function () {
            var $div = $("#responsiveFilter").find('.columnDiv'), $proxy = this;
            $div.find('.e-filtericon').remove();
            for (var i = 0; i < this.model.filterSettings.filteredColumns.length; i++) {
                var column = this.model.filterSettings.filteredColumns[i];
                var $selcDiv = $div.find('.e-responsivefilterColDiv[ej-MappingName=' + column.field + ']');
                var $divIcon = ej.buildTag('div.e-filtericon e-icon e-resIcon e-filterset e-filternone e-filterreset', '', { float: 'right', height: '22px', width: '21px', 'font-size': '20px', 'margin-right': '3%', 'margin-top': '2%' });
                var $iconSapn = ej.buildTag('span.e-filtericon e-icon e-resIcon e-filterset e-filternone', '', {}, { 'colType': column.type });
                $selcDiv.find('.e-filternone').remove();
                $selcDiv.append($divIcon);
                $iconSapn.click(function (e) {
                    var $target = e.target;
                    $proxy._$colType = $target.attr('colType');
                    $proxy._fltrClrHandler();
                    $target.remove();
                })
            }
        },
        _renderExcelFilter: function () {
            var filterCol = this.model.filterSettings.filteredColumns.length != 0 ? this.model.filterSettings.filteredColumns[0].field : null;
            var model = {
                instance: this,
                showSortOptions: this.model.allowSorting,
                allowFormatFiltering: this.model.filterSettings.allowFormatFiltering,
                allowCaseSensitive: this.model.filterSettings.enableCaseSensitivity,
                maxFilterLimit: this.model.filterSettings.maxFilterChoices,
                filterHandler: ej.proxy(this._filterHandler, this),
                initFilterCol: filterCol,
                actionBegin: "actionBegin",
                actionComplete: "actionComplete"
            };
            this._excelFilter = new ej.excelFilter(model);
        },
        _filterHandler: function (args) {
            var arg = {}, fQMgr;
            arg.requestType = args.action == "sorting" ? args.action : "filtering";
            var temp = this.model.filterSettings.filteredColumns;
            if (args.action == "filtering") {
                fQMgr = ej.DataManager(this.model.filterSettings.filteredColumns);
                var query = new ej.Query().where("field", ej.FilterOperators.equal, args.fieldName);
                var object = fQMgr.executeLocal(query);
                for (var i = 0; i < object.length; i++) {
                    var objectIndex = $.inArray(object[i], this.model.filterSettings.filteredColumns)
                    if (objectIndex != -1)
                        this.model.filterSettings.filteredColumns.splice(objectIndex, 1);
                }
                ej.merge(this.model.filterSettings.filteredColumns, args.filterCollection);
                args.currentFilterCollection = args.filterCollection;
            }
            else if (args.action == "clearfiltering") {
                var filterObj = args.filterDetails;
                delete this._excelFilter._predicates[0][args.fieldName];
                this.filterColumn(filterObj.field, filterObj.operator, filterObj.value, filterObj.predicate);
                return;
            }
            else if (args.action == "sorting") {
                var sortObj = args.sortDetails;
                if (ej.gridFeatures.sort)
                    this.sortColumn(sortObj.field, sortObj.direction);
                this._excelFilter.closeXFDialog();
                return;
            }

            arg.currentFilteringColumn = args.fieldName;
            arg.predicated = args.ejpredicate;
            var returnValue = this._processBindings(arg);
            if (returnValue)
                this.model.filterSettings.filteredColumns = temp;
        },
        _renderFiltering: function () {
            var $headerTable = this.getHeaderTable();
            var $tr = ej.buildTag('tr.e-filterbar'), $trClone, filteredFields = [];
            if (this.model.detailsTemplate || this.model.childGrid) $tr.append(ej.buildTag('th.e-filterbarcell e-mastercell'));
            for (var column = 0; column < this.model.columns.length; column++) {
                var $input = ej.buildTag('input.e-ejinputtext e-filtertext', "", {}, { title: this.model.columns[column]["headerText"] + this._getLocalizedLabels("FilterbarTitle"), type: "search", id: this.model.columns[column]["field"] + "_filterBarcell" });
                var $th = ej.buildTag('th.e-filterbarcell'), $div = ej.buildTag('div.e-filterdiv'), $span = ej.buildTag('span.e-cancel e-icon e-hide');
                if (this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "filterbar" && $.inArray(this.model.columns[column].field, filteredFields) == -1) {
                    for (var fColumn = 0; fColumn < this.model.filterSettings.filteredColumns.length; fColumn++) {
                        if (this.getColumnIndexByField(this.model.filterSettings.filteredColumns[fColumn].field) == column) {
                            if (this.model.filterSettings.filteredColumns[fColumn].operator == "greaterthan")
                                $input.val(">" + this.model.filterSettings.filteredColumns[fColumn].value);
                            else if (this.model.filterSettings.filteredColumns[fColumn].operator == "lessthan")
                                $input.val("<" + this.model.filterSettings.filteredColumns[fColumn].value);
                            else if (this.model.filterSettings.filteredColumns[fColumn].operator == "notequal")
                                $input.val("!=" + this.model.filterSettings.filteredColumns[fColumn].value);
                            else
                                $input.val(this.model.filterSettings.filteredColumns[fColumn].value);
                            if ($.inArray(this.model.filterSettings.filteredColumns[fColumn].field, filteredFields) == -1) filteredFields.push(this.model.filterSettings.filteredColumns[fColumn].field);
                        }
                    }
                }
                if (this.model.columns[column]["allowFiltering"] === false || this.model.columns[column]["field"] == "" || ej.isNullOrUndefined(this.model.columns[column]["field"])) {
                    $input.attr("disabled", true).addClass("e-disable");
                    this._disabledFilterableColumns.push(this.model.columns[column]["headerText"]);
                }
                this.model.columns[column]["visible"] === false && $th.addClass("e-hide");
                $div.append($input).append($span);
                $tr.append($th.append($div));
                if (column == this.model.scrollSettings.frozenColumns - 1) {
                    $trClone = $tr.clone();
                    $headerTable.find("thead").first().append($trClone);
                    $tr.empty();
                }
            }
            $headerTable.find("thead").last().append($tr);
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10) {
                var filterBarCell = $headerTable.find("thead").find(".e-filtertext");
                for (var cell = 0; cell < filterBarCell.length; cell++)
                    ej.ieClearRemover(filterBarCell[cell]);
            }
            this.setGridFilterBar($tr);
        },
        _closeFilterDlg: function () {
            if (!ej.isNullOrUndefined($("#" + this._id + "_" + this._$colType + "Dlg").data('ejDialog')))
                $("#" + this._id + "_" + this._$colType + "Dlg").ejDialog('close');
            else
                $("#" + this._id + "_" + this._$colType + "Dlg").css('display', 'none');
            this._$fDlgIsOpen = false;
        },
        _filterBarClose: function (e) {
            var $target = $(e.target);
            if (e.type == "click" && $target.hasClass("e-cancel")) {
                var $targetText = $target.prev();
                $targetText.focus().val("");
                $targetText.trigger("keyup");
                e.stopPropagation();
            }
            if (e.type == "focusin" && $target.hasClass("e-filtertext")) {
                $target = $(e.target).next();
                this.getFilterBar().find(".e-cancel").addClass("e-hide");
                $target.removeClass("e-hide");
            }
        },
        _processFilter: function () {
            if (!this._alreadyFilterProcessed) {
                this._alreadyFilterProcessed = true;
                this._startTimer();
            } else {
                this._stopTimer();
                this._startTimer();
            }
        },
        _startTimer: function () {
            var proxy = this;
            this._timer = window.setTimeout(
                function () {
                    proxy._onTimerTick();
                },
                1500);
        },
        _stopTimer: function () {
            this._oldFilterColumn = this._currentFilterColumn;
            this.filterValueOldLength = this.filterValueCurrentLength;
            if (this._timer != null)
                window.clearTimeout(this._timer);
        },

        _onTimerTick: function () {
            this.OldfilterValue = this._currentFilterbarValue;
            this._findPredicate();
            var result = null;
            var matchcase = this._currentFilterColumn.type == "string" ? false : true;
            if (this._currentFilterColumn.foreignKeyValue && this._currentFilterColumn.dataSource && this._currentFilterbarValue != "")
                result = this._fltrForeignKeyValue(this._operator, this._currentFilterbarValue, matchcase,
                         this._currentFilterColumn.dataSource, this._currentFilterColumn.foreignKeyField,
                         this._currentFilterColumn.foreignKeyValue, this._currentFilterColumn.type);
            var collection = $.extend([], this.model.filterSettings.filteredColumns);
            for (var i = 0; i < collection.length; i++) {
                if (this.getHeaderContent().find(".e-filterbar #" + collection[i].field + "_filterBarcell").val() == "") {
                    this.model.filterSettings.filteredColumns.splice(i, 1);
                    this.filterColumnCollection.splice(i, 1);
                }
            }
			if (this._currentFilterColumn.type == "date" || this._currentFilterColumn.type == "datetime") {
                for (var j = 0; j < this.model.filterSettings.filteredColumns.length; j++) {
                    if (this.model.filterSettings.filteredColumns[j].isComplex) {
                        var preobject = this.model.filterSettings.filteredColumns[j].predicates;
                        if (this.model.filterSettings.filteredColumns.length == 1) {
                           this.model.filterSettings.filteredColumns = preobject;
                        }
                        else {
                            this.model.filterSettings.filteredColumns[j] = preobject[0];
                            this.model.filterSettings.filteredColumns.push(preobject[1]);
                        }
                    }
                }
            }
            if (!this._skipFilterProcess) {
                if (ej.isNullOrUndefined(result))
                    this.filterColumn(this._currentFilterColumn.field, this._operator, this._currentFilterbarValue, this._predicate, matchcase);
                else
                    this.filterColumn(this._currentFilterColumn.field, result.operator, result.value, result.value.length > 1 ? "or" : this._predicate, matchcase, result.filterValue);
            }
            else
                this.filterStatusMsg = "Invalid Filter Data";
            this._showFilterMsg();
            this._stopTimer();
        },

        _findPredicate: function () {
            var _value = this._currentFilterbarValue.replace(/ && /i, " and ").replace(" || ", " or ");
            var _predicateFinder = _value.split(' ');
            this._predicate = "and";
            if (_predicateFinder.length != 0) {
                if ($.isFunction(ej.Predicate[_predicateFinder[1]])) {
                    this._skipFilterProcess = false;
                    this._predicate = _predicateFinder[1];
                    var valuesArray = _value.split(" " + _predicateFinder[1] + " ");
                    var tempOperator = [];
                    var filterValues = [];
                    for (var i = 0; i < valuesArray.length; i++) {
                        this._validateFilterValue(valuesArray[i]);
                        tempOperator.push(this._operator);
                        if (this._currentFilterColumn.type == "number")
                            filterValues.push(this._currentFilterbarValue);
                        else if (this._currentFilterColumn.type == "string")
                            filterValues.push(valuesArray[i]);
                    }
                    this._currentFilterbarValue = filterValues;
                    this._operator = tempOperator;
                } else
                    this._validateFilterValue($.trim(this._currentFilterbarValue));
            } else
                this._validateFilterValue($.trim(this._currentFilterbarValue));
        },

        _validateFilterValue: function (_value) {
            switch (this._currentFilterColumn.type) {
                case "number":
                    this._operator = ej.FilterOperators.equal;
                    var stringSkipInput = new Array(">", "<", "=", "!");
                    for (var i = 0; i < _value.length; i++) {
                        if (jQuery.inArray(_value[i], stringSkipInput) != -1) {
                            break;
                        }
                    }
                    if (i != _value.length) {
                        this._getOperator(_value.substring(i));
                        if (i != 0)
                            this._currentFilterbarValue = _value.substring(0, i);
                    }
                    if (this._currentFilterbarValue != "" && _value.length >= 1)
                        this._currentFilterbarValue = parseFloat(this._currentFilterbarValue);
                    else
                        this._currentFilterbarValue = _value.length > 1 ? parseFloat(_value) : _value;
                    break;
                case "date":
                case "datetime":
                    this._operator = ej.FilterOperators.equal;
                    this._getOperator(_value);
                    var _format;
                    if (ej.isNullOrUndefined(this._currentFilterColumn.format)) {
                        if (this._currentFilterColumn.type == "date")
                            _format = Globalize.culture().calendar.patterns.d; //System Date format
                        else
                            _format = Globalize.culture().calendar.patterns.f; //System DateTime format
                    }
                    else
                        _format = this._currentFilterColumn.format.replace("{0:","").replace('}', "");
                    if (this._currentFilterbarValue != "") {
                        var filterbarValue = Globalize.parseDate(this._currentFilterbarValue, _format);
                        if (!ej.isNullOrUndefined(filterbarValue))
                            this._currentFilterbarValue = Globalize.parseDate(this._currentFilterbarValue, _format);
                        else
                            this.filterStatusMsg = "Invalid Filter Data";
                    }
                    break;
                case "string":
                    this._operator = ej.FilterOperators.startsWith;
                    break;
                case "boolean":
                    if (this._currentFilterbarValue.toLowerCase() == "true" || this._currentFilterbarValue == "1")
                        this._currentFilterbarValue = true;
                    else if (this._currentFilterbarValue.toLowerCase() == "false" || this._currentFilterbarValue == "0")
                        this._currentFilterbarValue = false;
                    this._operator = ej.FilterOperators.equal;
                    break;
                default:
                    this._operator = ej.FilterOperators.equal;
            }
        },
        _getOperator: function (_value) {
            if (_value.charAt(0) == "=") {
                this._operator = ej.FilterOperators.equal;
                this._currentFilterbarValue = _value.substring(1);
            }
            if (ej.data.operatorSymbols[_value.charAt(0)] !== undefined || ej.data.operatorSymbols[_value.slice(0, 2)] !== undefined) {
                this._operator = ej.data.operatorSymbols[_value.charAt(0)];
                this._currentFilterbarValue = _value.substring(1);
                if (this._operator === undefined) {
                    this._operator = ej.data.operatorSymbols[_value.slice(0, 2)];
                    this._currentFilterbarValue = _value.substring(2);
                }
            }
            if (this._operator == ej.FilterOperators.lessThan || this._operator == ej.FilterOperators.greaterThan) {
                if (this._currentFilterbarValue.charAt(0) == "=") {
                    this._operator = this._operator + "orequal";
                    this._currentFilterbarValue = this._currentFilterbarValue.substring(1);
                }
            }

        },

        _checkForSkipInput: function () {
            var isSkip = false;
            var skipInput = new Array("=", " ", "!");
            var context = this;
            if (this._currentFilterColumn.type == "number") {
                if (ej.data.operatorSymbols[this._currentFilterbarValue] !== undefined || $.inArray(this._currentFilterbarValue, skipInput) != -1)
                    isSkip = true;
            }
            if (this._currentFilterColumn.type == "string") {
                var stringSkipInput = new Array(">", "<", "=", "!");
                for (var i = 0; i < this._currentFilterbarValue.length; i++) {
                    if ($.inArray(this._currentFilterbarValue[i], stringSkipInput) != -1)
                        isSkip = true;
                }
            }
            return isSkip;
        },
        _showFilterMsg: function () {
            var index = $.inArray(this._currentFilterColumn, this.filterColumnCollection);
            if (this._currentFilterbarValue !== "" && index == -1)
                this.filterColumnCollection.push(this._currentFilterColumn);
            if (this._currentFilterbarValue == "" && index != -1) {
                this.filterColumnCollection.splice(index, 1);
            }
            if ((!this._skipFilterProcess || this.filterColumnCollection.length > 0) && this.filterStatusMsg != "Invalid Filter Data") {
                for (var index = 0; index < this.filterColumnCollection.length; index++) {
                    if (index > 0)
                        this.filterStatusMsg += " && ";
                    this.filterStatusMsg += this.filterColumnCollection[index].headerText + ": " + $("#" + this.filterColumnCollection[index].field + "_filterBarcell").val();
                }
            }

            if (this.model.allowPaging)
                this.getPager().ejPager("model.externalMessage", this.filterStatusMsg);
            else {
                this.$pagerStatusBarDiv.find("div").html(this.filterStatusMsg);
                if (this.filterStatusMsg.length)
                    this.$pagerStatusBarDiv.css("display", "block");
                else
                    this.$pagerStatusBarDiv.hide();
            }
            if (this.filterStatusMsg == "Invalid Filter Data") {
                index = $.inArray(this._currentFilterColumn, this.filterColumnCollection);
                this.filterColumnCollection.splice(index, 1);
            }
            this.filterStatusMsg = "";
        },
        _renderFilterDialogs: function () {
            var $strDlg, $numDlg, $boolDlg, $dateDlg, $datetimeDlg,$guidDlg;

            $.each(this.model.columns, ej.proxy(function (indx, col) {
                if (this._isExcelFilter && col.type =='datetime')
                    col.type = "date";
                if (col.type == "string" && !$strDlg) {
                    $strDlg = true;
                    !this._isExcelFilter ? this._renderStringDialog() : this._excelFilter.renderDialog("string");
                }else if (col.type == "guid" && !$guidDlg) {
                    $guidDlg = true;
                    !this._isExcelFilter ? this._renderGuidDialog() : this._excelFilter.renderDialog("guid");
				}else if (col.type == "number" && !$numDlg) {
                    $numDlg = true;
                    !this._isExcelFilter ? this._renderNumDialog() : this._excelFilter.renderDialog("number");
                } else if (col.type == "date" && !$dateDlg) {
                    $dateDlg = true;
                    !this._isExcelFilter ? this._renderDateDialog(col.field) : this._excelFilter.renderDialog("date");
                } else if (col.type == "datetime" && !$datetimeDlg) {
                    $datetimeDlg = true;
                    this._renderDateTimeDialog();
                } else if (col.type == "boolean" && !$boolDlg) {
                    $boolDlg = true;
                    !this._isExcelFilter ? this._renderBoolDialog() : this._excelFilter.renderDialog("boolean");
                }
            }, this));
        },
        _renderStringDialog: function () {
            var $id = this._id + "_stringDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialoge");
            $content.appendTo("body");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
            this._renderDlgContent($content, "string");

        },
        _renderBoolDialog: function () {
            var $id = this._id + "_booleanDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialoge");
            $content.appendTo("body");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
            if (!this.model.filterSettings.showPredicate)
                $("#" + $id).ejDialog({ minHeight: 90, width:"100%" });
            else
                $("#" + $id).ejDialog({ minHeight: 136, width:"100%" });
            this._renderDlgContent($content, "boolean");
        },
		 _renderGuidDialog: function () {
            var $id = this._id + "_guidDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialoge");
            $content.appendTo("body");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
            this._renderDlgContent($content, "guid");

        },
        _renderNumDialog: function () {
            var $id = this._id + "_numberDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialoge");
            $content.appendTo("body");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
            this._renderDlgContent($content, "number");
        },
        _renderDateDialog: function (col) {
            var $id = this._id + "_dateDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialoge");
            $content.appendTo("body");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
            this._renderDlgContent($content, "date", col);

        },
        _renderDateTimeDialog: function () {
            var $id = this._id + "_datetimeDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialoge");
            $content.appendTo("body");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
            this._renderDlgContent($content, "datetime");
        },
        _renderFDialog: function (id) {
            $("#" + id).ejDialog({ showOnInit: false, "enableRTL": this.model.enableRTL, "cssClass": this.model.cssClass, "showHeader": false, width: 260, enableResize: false, allowKeyboardNavigation: false, content: "#" + this._id });
        },
        _renderDlgContent: function (content, type, col) {
            content.addClass("e-grid");
            var $predicate = ej.buildTag("div.e-predicate"), $operator = ej.buildTag("div.e-operator"), $value = ej.buildTag("div.e-value");
            var $strOp = this._getLocalizedLabels("StringMenuOptions");
            var $numOp = this._getLocalizedLabels("NumberMenuOptions");
            var $drdown = ej.buildTag("input#" + this._id + type + "_ddinput", {}, {}, { "type": "text" });
            var $drdownDiv = ej.buildTag("div#" + this._id + type + "_dropdown");
            var $drdownUl = ej.buildTag("ul");
            var $radio = ej.buildTag("input", {}, {}, { "type": "radio", "name": this._id + "_predicate" + type, "value": "or" });
            var $andRadio = ej.buildTag("input", {}, {}, { "type": "radio", "name": this._id + "_predicate" + type, "value": "and", "checked": "checked" });
            var $cbox;
            $predicate.append($andRadio)
                .append(ej.buildTag("span.e-caption").html(this._getLocalizedLabels("PredicateAnd")))
                .append($radio)
                .append(ej.buildTag("span.e-caption").html(this._getLocalizedLabels("PredicateOr")));
            !this.model.filterSettings.showPredicate && $predicate.hide();
            if (type == "string") {
                $cbox = ej.buildTag("input", {}, {}, { "type": "checkbox" });
                $predicate.append($cbox)
                    .append(ej.buildTag("span.e-caption").html(this._getLocalizedLabels("MatchCase")));
                $.each($strOp, function (indx, operator) {
                    $drdownUl.append(ej.buildTag("li", {}, {}, { "value": operator.value }).html(operator.text));
                });
            }
            if (type == "number" || type == "date" || type == "datetime"|| type == "guid" ) {
                if(type=="guid")
                $numOp = $numOp.slice(4,6);
                $.each($numOp, function (indx, operator) {
                $drdownUl.append(ej.buildTag("li", {}, {}, { "value": operator.value }).html(operator.text));
                });
            }
            if (type != "boolean") {
                $drdownDiv.append($drdownUl);
                $operator.append($drdown);
                $operator.append($drdownDiv);
            }
            var $tBox = ej.buildTag("input", {}, {}, { "type": "text" });
            var $tchkBox = ej.buildTag("input", {}, {}, { "type": "checkbox" });
            var filterVal = this.model.enableResponsiveRow ? 'Ok' : 'Filter';
            var clearVal = this.model.enableResponsiveRow ? 'Cancel' : 'Clear';
            var $filter = ej.buildTag("input.e-filter", {}, {}, { "type": "button", "value":this._getLocalizedLabels( filterVal) });
            var $clear = ej.buildTag("input.e-clear", {}, {}, { "type": "button", "value": this._getLocalizedLabels(clearVal) });
            $value.append(ej.buildTag("span.e-caption").html(this._getLocalizedLabels("FilterMenuCaption") + " : "));
            content.append($predicate);
            if (type == "boolean") {
                $value.find("span.e-caption").css("top","1px");
                $value.append($tchkBox);
            }
            else {
                $value.append(ej.buildTag("br")).append($tBox);
                content.append($operator);
            }
            content.append($value);
            content.append(ej.buildTag("div.e-dlgBtns").append($filter)
                .append($clear));
            if (type != "boolean")
                $drdown.ejDropDownList({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "targetID": this._id + type + "_dropdown", width: "100%", height: "26px", selectedItemIndex: 0 });
            $radio.ejRadioButton({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL });
            $andRadio.ejRadioButton({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, checked: true });
            if ($cbox)
                $cbox.ejCheckBox({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL });
            content.css("display", "none");
            this._createButton("filter", $filter);
            this._createButton("clear", $clear);
            if (type == "number")
                $tBox.ejNumericTextbox({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "value": 0, showSpinButton: false, height: "26px", decimalPlaces: 2, width: "100%" });
            else if (type == "guid" )
                $tBox.css({  "height": "26px", "width": "100%" });
			else if (type == "date") {
                $tBox.attr("id", this._id + "_dpDate")
                $tBox.ejDatePicker({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, width: "100%", watermarkText: this._getLocalizedLabels("DatePickerWaterMark"), locale: this.model.locale });
            }
            else if (type == "datetime") {
                $tBox.attr("id", this._id + "_dpDateTime")
                $tBox.ejDateTimePicker({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, width: "100%", locale: this.model.locale });
            }
            else if (type == "boolean")
                $tchkBox.ejCheckBox({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL });
            else if (type == "string") {
                $tBox.attr("id", this._id + "_acString");
                $tBox.ejAutocomplete({
                    "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "dataSource": this._dataSource(), width: "100%", height: 26, enableDistinct: true, focusIn: function (args) {
                        var $dropdown = this.element.closest(".e-dialog").find(".e-dropdownlist");
                        var $matchcase = this.element.closest(".e-dialog").find(".e-checkbox").prop("checked");
                        this.model.filterType = $dropdown.ejDropDownList("model.value");
                        this.model.caseSensitiveSearch = $matchcase;
                    },
                    open: function (args) {
                        var doped = !this.element.closest(".e-dialog").ejDialog("isOpened")
                        this.suggestionList.css({ visibility: (doped ? "hidden" : "visible") });
                    }
                    
                });
            }
        },
        _createButton: function (name, element) {
            var $func = name == "filter" ? ej.proxy(this._fltrBtnHandler, this) : ej.proxy(this._fltrClrHandler, this);
            element.ejButton({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "click": $func });
        },
        _getIdField: function () {
            var $key;
            $.each(this.model.columns, function (indx, col) {
                if (col.key) {
                    $key = col.field;
                    return false;
                }
            });
            return $key;
        },
        _filterCompleteAction: function () {
            if (this.model.allowPaging)
                this._refreshGridPager();
            if (this.model.filterSettings.filterType == "menu" || this._isExcelFilter) {
                if (!this._isExcelFilter)
                    this._closeFilterDlg();
                else if (this._excelFilter._openedFltr) {
                    this._excelFilter.closeXFDialog();
                }
                var column = this.getColumnByField(this._$curFieldName);
                var index = $.inArray(column, this.model.columns), proxy = this, _addicon = false;
                $.each(this.model.filterSettings.filteredColumns, function (indx, col) {
                    if (col.field == proxy._$curFieldName) {
                        _addicon = true;
                        return false;
                    }
                    else if (col.isComplex) {
                        if (col.predicates[0].field == proxy._$curFieldName) {
                            _addicon = true;
                            return false;
                        }
                    }
                });
                var $fIcon = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell").eq(index).find(".e-filtericon");
                if (_addicon)
                    $fIcon.addClass("e-filteredicon e-filternone");
                else
                    $fIcon.removeClass("e-filteredicon e-filternone");
            }
        },
        _refreshFilterIcon: function () {
            if (!this.model.filterSettings.filteredColumns.length)
                return;
            var filteredCols = ej.distinct(this.model.filterSettings.filteredColumns, "field", true), _$headerCells = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell"), index, col;
            if (this.model.showStackedHeader)
                _$headerCells = _$headerCells.not(".e-stackedHeaderCell");
            if (this.model.allowReordering)
                _$headerCells.find(".e-filtericon").removeClass("e-filteredicon e-filternone");
            for (var i = 0, flen = filteredCols.length; i < flen; i++) {
                col = filteredCols[i]
                index = this.getColumnIndexByField(col.isComplex ? col.predicates[0].field : col.field);
                _$headerCells.eq(index).find(".e-filtericon").addClass("e-filteredicon e-filternone");
            }
        },
        _setFilterFieldValues: function (id) {
            var $fVal = "", proxy = this;
            var flchk = -1;
            $.each(this.model.filterSettings.filteredColumns, function (indx, value) {
            
                  if (value.field == proxy._$curFieldName|| (value instanceof ej.Predicate && value['predicates'][0].field==proxy._$curFieldName))    
				flchk = indx;
            });
            if (flchk == -1 && this._$colType != "boolean") {
                if (this._$colType == "string") {
                    $(".e-predicate input[type='checkbox']").ejCheckBox({
                        checked: false
                    });
                }
                $(".e-predicate input[name =" + this._id + "_predicate" + this._$colType + "]:first").ejRadioButton({ checked: true });
                $("#" + this._id + this._$colType + "_ddinput").ejDropDownList({
                    selectedItemIndex: 0, change: function (args) {
                        this.element.closest(".e-dialog").find(".e-autocomplete").val($fVal);
                    }
                });
            }
            if (this._$curFieldName != this._$prevFieldName) {
                $.each(this.model.filterSettings.filteredColumns, function (indx, col) {
                    if (col.field == proxy._$curFieldName) {
                        var index;
                        var option = proxy._$colType == "number" || proxy._$colType == "date" || proxy._$colType == "datetime" ? "Number" : "String";
                        var $dlist = proxy._getLocalizedLabels(option + "MenuOptions");
						 if (col instanceof ej.Predicate) {
                            if (col['predicates'][0].operator == "greaterthan")
                                col.operator = "equal";
                            else
                                col.operator = "notequal";
                        }
                        for (index = 0; index < $dlist.length; index++) {
                            if ($dlist[index].value.toLowerCase() == col.operator)
                                break;
                        }
                        if (proxy._$colType == "string")
                            $(".e-predicate input[type='checkbox']").ejCheckBox({ checked: col.matchcase });
                        $("input[value=" + col.predicate + "]").ejRadioButton({ checked: true });
                        $("#" + proxy._id + proxy._$colType + "_ddinput").ejDropDownList({ selectedItemIndex: index });
                        $fVal = col.actualFilterValue != null ? col.actualFilterValue : col.value;
                        return false;
                    }
                });
                if (this._$colType == "boolean") {
                    if ($fVal && $fVal != "")
                        $(id).find(".e-value input").attr("checked", true);
                    else
                        $(id).find(".e-value input").attr("checked", false);
                } else if (this._$colType == "date" || this._$colType == "datetime") {
                    $(id).find(".e-value .e-datepicker")[this._$colType == "date" ? "ejDatePicker" : "ejDateTimePicker"]("model.value", $fVal);
                } else if(this._$colType == "number"){
					$(id).find(".e-value .e-numerictextbox").ejNumericTextbox("model.value", $fVal);
				} else
                    $(id).find(".e-value input").val($fVal);
            }
        },
        _fltrBtnHandler: function (e) {
            var id = this._id + "_" + this._$colType + "Dlg", str;
            var $par = $("#" + id);
            var $input = $par.find(".e-value input"), $operator, result;
            var value = $input.val(), matchcase = undefined, filterValue;
            if (this._$colType == "number") {
                $input = $input.filter(".e-numerictextbox");
                value = parseFloat($input.ejNumericTextbox("getValue"));
                matchcase = true;
            }
            if (this._$colType == "string")
                matchcase = $par.find(".e-predicate input[type='checkbox']").is(":checked");
            if (this._$colType == "date" || this._$colType == "datetime") {
                str = this._$colType == "date" ? "_dpDate" : "_dpDateTime";
                value = $("#" + this._id + str)[this._$colType == "date" ? "ejDatePicker" : "ejDateTimePicker"]("model.value");                
                matchcase = true;
            }
            if (this._$colType == "boolean") {
                value = $input.ejCheckBox("model.checked") != null ? $input.ejCheckBox("model.checked") : false;
                $operator = "equal";
            } else
                $operator = $("#" + this._id + this._$colType + "_ddinput").ejDropDownList("getSelectedValue").toLowerCase();
            if (this._$colForeignKeyValue && this._$colDropdownData)
                result = this._fltrForeignKeyValue($operator, value, matchcase, this._$colDropdownData, this._$colForeignKeyField, this._$colForeignKeyValue);
            if (ej.isNullOrUndefined(result))
                this.filterColumn(this._$curFieldName, $operator, value, $par.find(".e-predicate input[type='radio']:checked").attr("value"), matchcase);
            else {
                if ($par.find(".e-predicate input[type='radio']:checked").css("display") == "none" && result.value.length > 1)
                    this.filterColumn(this._$curFieldName, result.operator, result.value, "or", matchcase, result.filterValue);
                else
                    this.filterColumn(this._$curFieldName, result.operator, result.value, $par.find(".e-predicate input[type='radio']:checked").attr("value"), matchcase, result.filterValue);
            }
            if (this.model.isResponsive) {
                $par.css('display', 'none');
                this._setResponsiveFilterIcon();
                this.element.css('display', 'block');
                if (this.model.allowScrolling && (!this.model.enableResponsiveRow || !this.model.minWidth)) {
                    var args = {};
                    args.requestType = 'refresh';
                    this._refreshScroller(args);
                }
            }
        },
        _fltrClrHandler: function (e) {                        
			this.clearFiltering(this._$curFieldName);
        },

        _fltrForeignKeyValue: function (operator, value, matchcase, dataSource, fieldName, mapFieldName, colType) {
            if (ej.isNullOrUndefined(matchcase))
                matchcase = true;
            var operatorCol = [], query, filterValue;
            var data = ej.DataManager(dataSource);
            if (colType == "date") {
                var $prevDate = new Date(value.setDate(value.getDate() - 1));
                var $nextDate = new Date(value.setDate(value.getDate() + 2));
                if (operator == "equal" || operator == "notequal") {
                    if (operator == "equal")
                        query = new ej.Query().where(ej.Predicate(mapFieldName, ">", $prevDate, !matchcase)
                            .and(mapFieldName, "<", $nextDate, !matchcase)).select(fieldName);
                    else
                        query = new ej.Query().where(ej.Predicate(mapFieldName, "<=", $prevDate, !matchcase)
                           .or(mapFieldName, ">=", $nextDate, !matchcase)).select(fieldName);
                }
                else
                    query = new ej.Query().where(mapFieldName, operator, value, !matchcase).select(fieldName);
            }
            else
                query = new ej.Query().where(mapFieldName, operator, value, !matchcase).select(fieldName);
            filterValue = value;
            value = data.executeLocal(query);
            operatorCol.push("equal");
            for (i = 1; i < value.length ; i++) {
                operatorCol.push("equal");
            }
            return { operator: operatorCol, value: value, filterValue: filterValue };
        },
        _setDateFilters: function (filterObject,forGrouping) {
            var $prevDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() - 1));
            var $nextDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() + 2));
            var $prevObj = $.extend({}, filterObject);
            var $nextObj = $.extend({}, filterObject);
            $prevObj.value = $prevDate;
            $nextObj.value = $nextDate;
            if (filterObject.operator == "equal") {
                $prevObj.operator = "greaterthan";
                $prevObj.predicate = "and";
                $nextObj.operator = "lessthan";
                $nextObj.predicate = "and";
            } else {
                $prevObj.operator = "lessthanorequal";
                $prevObj.predicate = "or";
                $nextObj.operator = "greaterthanorequal";
                $nextObj.predicate = "or";
            }
            pred = ej.Predicate($prevObj.field, $prevObj.operator, $prevObj.value, false);
            predicate = pred[$nextObj.predicate](ej.Predicate($nextObj.field, $nextObj.operator, $nextObj.value, false));
			if(forGrouping){
                filterObject.value = new Date(filterObject.value.setSeconds($nextObj.value.getSeconds() - 1));
                return predicate;
            }
            else
				this.model.filterSettings.filteredColumns.push(predicate);
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.group = {
        _renderGroupDropArea: function () {
            if (!this.model.groupSettings.enableDropAreaAutoSizing)
                this.model.groupSettings.enableDropAreaAnimation = this.model.groupSettings.enableDropAreaAutoSizing;
            var dragLabel = this.model.groupSettings.enableDropAreaAnimation ? "" : this._getLocalizedLabels("GroupDropArea");
            if (this.model.groupSettings.showDropArea) {
                var $div = ej.buildTag("div.e-groupdroparea", dragLabel);
                this.model.groupSettings.enableDropAreaAutoSizing && $div.append(ej.buildTag("div.e-animatebutton e-icon").addClass(this.model.groupSettings.enableDropAreaAnimation ? "e-animatebuttondown e-gdownarrow" : "e-animatebuttonup e-guparrow"));
                return $div;
            }
        },
        _getColGroup: function (gridObjectId) {
            var gridObject = this.getRsc("helpers", gridObjectId);
            if (gridObject.model.groupSettings.groupedColumns.length == 1)
                var level = this.data.items.level === undefined ? 0 : this.data.items.level - 1;
            else
                var level = this.data.items.level === undefined ? gridObject.model.groupSettings.groupedColumns.length : this.data.items.level - 1;
            var $div = $(document.createElement("div"));
            var $colGroup;
            if (gridObject._isCaptionSummary)
                $colGroup = gridObject._getCaptionColGroup(level);
            else {
                $colGroup = gridObject._getMetaColGroup();
                if (level != gridObject.model.groupSettings.groupedColumns.length && gridObject.model.groupSettings.groupedColumns.length > 1)
                    $colGroup.prepend(gridObject._getIndentCol());
            }
            $div.html($colGroup);
            return $div.html();
        },
        _colSpanAdjust: function (gridObjectId, type, captionDetails) {
            var gridObject, groupData;
            if (ej.isNullOrUndefined(gridObjectId)) {
                gridObject = this;
                groupData = captionDetails;
            }
            else {
                gridObject = this.getRsc("helpers", gridObjectId);
                groupData = this;
            }
            if (gridObject.model.groupSettings.groupedColumns.length == 1) {
                var level = groupData.data.items.level === undefined ? 1 : groupData.data.items.level - 1;
                if (type == "groupcaption")
                    gridObject._currentJsonData = gridObject._currentJsonData.concat(groupData.data.items);
            } else {
                var level = groupData.data.items.level === undefined ? gridObject.model.groupSettings.groupedColumns.length : groupData.data.items.level - 1;
                if (type == "groupcaption" && groupData.data.items.level === undefined)
                    gridObject._currentJsonData = gridObject._currentJsonData.concat(groupData.data.items);
            }
            var hideGroupColumnCount = !gridObject.model.groupSettings.showGroupedColumn ? gridObject.model.groupSettings.groupedColumns.length : 0;
            var count = 0;
            $.each(gridObject._hiddenColumnsField, function (indx, col) {
                var tempIndex = $.inArray(col, gridObject.model.groupSettings.groupedColumns);
                if (tempIndex != -1) {
                    count = count + 1;
                    if (gridObject.model.groupSettings.showGroupedColumn)
                        hideGroupColumnCount = hideGroupColumnCount + 1;
                }
            })
            var colspan = gridObject.model.columns.length + gridObject.model.groupSettings.groupedColumns.length - level - gridObject._hiddenColumnsField.length - hideGroupColumnCount + count;
            colspan = (gridObject.model.detailsTemplate != null || gridObject.model.childGrid != null) ? colspan + 1 : colspan;

            if (gridObject._isCaptionSummary && type == "groupcaption") {
                var index = [], cIndex = 0;
                var row = gridObject._captionSummary();
                var hiddenIndexCount = 0, summaryColIndexes = [];
                $.each(row[0].summaryColumns, function (cindx, col) {
                    if ($.inArray(col.displayColumn, gridObject._hiddenColumnsField) != -1)
                        cIndex++;
                    summaryColIndexes.push(gridObject.getColumnIndexByField(col.displayColumn));
                    index.push(gridObject.getColumnIndexByField(col.displayColumn) + gridObject.model.groupSettings.groupedColumns.length - level);
                });
                var sumColIndex = ej.min(summaryColIndexes)
                for (var i = 0; i < gridObject._hiddenColumnsField.length; i++) {
                    var colIndex = ej.isNullOrUndefined(gridObject.getColumnByField(gridObject._hiddenColumnsField[i])) ? gridObject.getColumnIndexByHeaderText(gridObject._hiddenColumnsField[i], ej.isNullOrUndefined(gridObject.getColumnByField(gridObject._hiddenColumnsField[i]))) : gridObject.getColumnIndexByField(gridObject._hiddenColumnsField[i]);
                    if (sumColIndex > colIndex)
                        hiddenIndexCount++;
                }
                if (index.length > 0)
                    colspan = ej.min(index);
                colspan = colspan - hiddenIndexCount;
                colspan = gridObject.model.detailsTemplate != null ? colspan + 1 : colspan;
            }
            return colspan;
        },
        _captionEncode: function (gridObjectId) {
            var gridObject = this.getRsc("helpers", gridObjectId);
            var column = gridObject.getColumnByField(this.data.field);
            return column.disableHtmlEncode;
        },
        _captionFormat: function (gridObjectId) {
            var gridObject = this.getRsc("helpers", gridObjectId);
            var keyValue, captionData = this.data;
            var column = gridObject.getColumnByField(captionData.field);
            if (column.foreignKeyValue && column.dataSource)
                keyValue = gridObject._foreignKeyBinding(column, captionData.key, gridObject._id);
            else
                keyValue = captionData.key;
            captionData.key = column.format ? gridObject.formatting(column.format, keyValue, gridObject.model.locale) : keyValue;
            captionData.headerText = column.headerText;
            return $.render[gridObject._id + "_CaptionTemplate"](captionData);
        },
        _getCaptionColGroup: function (level) {
            var cloneColGroup = this.getHeaderTable().find("colgroup").clone();
            var colColl = cloneColGroup.find("col");
            var indentCol = colColl.length - this.model.columns.length;
            if (this.model.detailsTemplate != null)
                indentCol = indentCol - 1;
            cloneColGroup.find("col:lt(" + indentCol + ")").remove();
            if (level > 0 && level != this.model.groupSettings.groupedColumns.length) {
                if (this.model.groupSettings.groupedColumns.length > 2 && level != this.model.groupSettings.groupedColumns.length - 1) {
                    for (var i = 0; i < this.model.groupSettings.groupedColumns.length - level; i++) {
                        cloneColGroup.prepend(this._getIndentCol());
                    }
                }
                else
                    cloneColGroup.prepend(this._getIndentCol());
            }
            return cloneColGroup;
        },
        _groupSummaryRow: function (item, aggregates, gridObjectId, showGroup) {
            var gridObject = this.getRsc("helpers", gridObjectId), showGroup = !ej.isNullOrUndefined(showGroup);
            if (gridObject.model.showSummary) {
                if (gridObject.getFooterTable() == null)
                    gridObject._renderGridFooter();
                gridObject._createSummaryRows(gridObject.getFooterTable(), item.records == null ? item : item.records, aggregates, item, showGroup);
                if (gridObject._isCaptionSummary && !showGroup) {
                    var index = [];
                    var row = gridObject._captionSummary();
                    $.each(row[0].summaryColumns, function (cindx, col) {
                        index.push(gridObject.getColumnIndexByField(col.displayColumn));
                    });
                    if (index.length > 0)
                        colIndex = ej.min(index);
                    var colLength = gridObject.model.columns.length;
                    gridObject.getFooterTable().find("tbody td").slice(-(colLength - colIndex)).removeClass("e-summaryrow").addClass("e-groupcaptionsummary");
                }
                if (!gridObject.model.groupSettings.showGroupedColumn) {
                    var groupedcolumns = gridObject.model.groupSettings.groupedColumns;
                    var count = 0;
                    var gridfooterrow = gridObject.getFooterTable().children('tbody').find('tr');
                    for (var j = 0; j < gridObject.model.summaryRows.length; j++) {
                        for (var k = 0; k < gridObject.model.summaryRows[j].summaryColumns.length; k++) {
                            for (var i = 0; i < groupedcolumns.length; i++) {
                                if (groupedcolumns[i] == gridObject.model.summaryRows[j].summaryColumns[k].displayColumn) {
                                    count++;
                                    if (gridObject.model.summaryRows[j].summaryColumns.length == count) {
                                        $(gridfooterrow[j]).addClass("e-hide")
                                    }
                                }
                            }
                        }
                        count = 0;
                    }
                }
                return !showGroup ? gridObject.getFooterTable().find("tbody").find("tr").html() : gridObject.getFooterTable().find("tbody").html();
            }
        },
        addGroupingTemplate: function () {
            var tbody = document.createElement('tbody');
            var expandTd = "<td class='e-recordplusexpand' ej-mappingname='{{:field}}' ej-mappingvalue='{{:key}}'><div class='e-icon e-gdiagonalnext'></div></td>";
            var proxy = this;
            var helpers = {};
            helpers["_" + proxy._id + "ColSpanAdjust"] = this._colSpanAdjust;
            helpers["_" + proxy._id + "Colgroup"] = this._getColGroup;
            if (ej.isNullOrUndefined(this.model.groupSettings.captionFormat))
                $.templates(proxy._id + "_CaptionTemplate", this._getLocalizedLabels("GroupCaptionFormat"));
            else
                $.templates(proxy._id + "_CaptionTemplate", this.model.groupSettings.captionFormat);
            helpers["_" + proxy._id + "CaptionFormat"] = this._captionFormat;
            helpers["_" + proxy._id + "GroupSummaryRow"] = this._groupSummaryRow;
            helpers["_" + proxy._id + "CaptionEncode"] = this._captionEncode;
            helpers[proxy._id + "Object"] = this;
            $.views.helpers(helpers);
            var caption = " ~_" + proxy._id + "CaptionFormat('" + proxy._id + "Object')";
            var cpationTd = expandTd + "<td class='e-groupcaption' colspan='{{:~_" + proxy._id + "ColSpanAdjust('" + proxy._id + "Object" + "','groupcaption') }}'>{{if ~_" + proxy._id + "CaptionEncode('" + proxy._id + "Object')}}{{html:" + caption + "}}{{else}}{{:" + caption + "}}{{/if}}</td>";
            if (this._isCaptionSummary && this.model.showSummary)
                cpationTd = cpationTd + "{{:~_" + proxy._id + "GroupSummaryRow(items, aggregates,'" + proxy._id + "Object')}}";
            var captionTr = "<tr>" + cpationTd + "</tr>";
            var $tbody = ej.buildTag("tbody");
            $tbody.html("{{if items.GROUPGUID}}" +
                "{{for items tmpl='" + proxy._id + "_GroupingTemplate'/}}" +
                "{{else}}" +
                "{{for items tmpl='" + proxy._id + "_JSONTemplate'/}}" +
                "{{/if}}");
            var indentTd = "<td class='e-indentcell'></td>";
            var table = "<table class='e-table {{if items.GROUPGUID}}{{else}}e-recordtable{{/if}}' cellspacing='0.25px' >" +
                "{{:~_" + proxy._id + "Colgroup('" + proxy._id + "Object')}}" +
                $tbody.html() + "{{:~_" + proxy._id + "GroupSummaryRow(items, aggregates,'" + proxy._id + "Object', '" + proxy._id + "showGroupCaption')}}" +
            "</table>";
            var tableTd = "<td class='e-tabletd' colspan='{{:~_" + proxy._id + "ColSpanAdjust('" + proxy._id + "Object" + "','table')}}'>" + table + "</td>";
            var tr = "<tr>" + indentTd + tableTd + "</tr>";
            $.templates(proxy._id + "_GroupingTemplate", captionTr + tr);
        },
        _getGroupTopLeftCell: function () {
            var $th = ej.buildTag("th.e-grouptopleftcell");
            $th.append(ej.buildTag("div.e-headercelldiv e-emptyCell", "&nbsp;"));
            return $th;
        },
        _getEmptyFilterBarCell: function () {
            return ej.buildTag("th.e-filterbarcell");
        },
        _groupingAction: function (refWidth) {
            var $groupTopCell = this.getHeaderTable().find("thead").find(".e-columnheader:not(.e-stackedHeaderRow)").find(".e-grouptopleftcell"), $col = this.getHeaderTable().find("colgroup").find("col");
            var groupColumn = $groupTopCell.length;
            if (groupColumn) {
                this.getHeaderTable().find("colgroup").replaceWith(this._getMetaColGroup());
                (this.model.detailsTemplate != null || this.model.childGrid != null) && this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());
                $groupTopCell.remove();
                this.getHeaderTable().find("thead").find(".e-filterbar").find(".e-filterbarcell:lt(" + groupColumn + ")").remove();
            }
            if (!this.model.allowResizeToFit || refWidth)
                this.setWidthToColumns();
            for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());
                this.getHeaderTable().find("thead").find(".e-columnheader").prepend(this._getGroupTopLeftCell());
                this.getHeaderTable().find("thead").find(".e-filterbar").prepend(this._getEmptyFilterBarCell());
            }
            this.getHeaderTable().find("thead").find("th.e-grouptopleftcell").last().addClass("e-lastgrouptopleftcell");
        },
        
        groupColumn: function (columnName) {
            if (!this.model.allowGrouping || $.inArray(columnName, this._disabledGroupableColumns) != -1)
                return;
            if (ej.isNullOrUndefined(this.getColumnByField(columnName)) || $.inArray(columnName, this.model.groupSettings.groupedColumns) != -1)
                return;
            this.model.groupSettings.groupedColumns.push(columnName);
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                if (this.model.sortSettings.sortedColumns[i].field == columnName) {
                    break;
                }
            }
            this.model.sortSettings.sortedColumns.length == i && this.model.sortSettings.sortedColumns.push({ field: columnName, direction: ej.sortOrder.Ascending });
            var args = {};
            args.columnName = columnName;
            args.requestType = ej.Grid.Actions.Grouping;
            var returnValue = this._processBindings(args);
            if (returnValue) {
                if (!($.inArray(columnName, this._scolumns) != -1 || this._gridSort == columnName))
                    this.model.sortSettings.sortedColumns.pop();
                this.model.groupSettings.groupedColumns.pop();
            }
            this._primaryKeyValues = [];
        },
        
        ungroupColumn: function (columnName) {
            if (!this.model.allowGrouping)
                return;
            if ($.inArray(columnName, this.model.groupSettings.groupedColumns) != -1)
                this.model.groupSettings.groupedColumns.splice($.inArray(columnName, this.model.groupSettings.groupedColumns), 1);
            else
                return null;
            var column = this.getColumnByField(columnName)
            if (!this.model.groupSettings.showGroupedColumn && !column["visible"]) {
                var index = this._hiddenColumnsField.indexOf(columnName);
                this._hiddenColumnsField.splice(index, 1);
                column["visible"] = true;
            }
            var args = {};
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                if (this.model.sortSettings.sortedColumns[i].field == columnName) {
                    if (this._scolumns.indexOf(columnName) != -1 && this.model.allowSorting && this.model.allowMultiSorting || this._gridSort == columnName)
                        if (this.model.allowSorting && this.model.allowMultiSorting) {
                            var no = $.inArray(columnName, this._scolumns);
                            this._scolumns.splice(no, 1);
                            break;
                        }
                        else {
                            this._gridSort = null;
                            break;
                        }
                    else
                        this.model.sortSettings.sortedColumns.splice(i, 1);
                    break;
                }
            }
            args.columnName = columnName;
            args.requestType = ej.Grid.Actions.Ungrouping;
            var returnValue = this._processBindings(args);
            if (returnValue)
                this.model.groupSettings.groupedColumns.push(columnName);
            this._primaryKeyValues = [];
        },
        
        collapseGroupDropArea: function () {
            var $groupDropArea = this.element.find(".e-groupdroparea").first(), proxy = this;
            this.model.groupSettings.groupedColumns.length == 0 && this.model.groupSettings.enableDropAreaAnimation && $groupDropArea.animate({ height: "10px" }, 200, function () {
                if (proxy.model != null && proxy.model.groupSettings.groupedColumns.length == 0) {
                    $(this).html("").append(ej.buildTag("div.e-animatebutton e-animatebuttondown e-icon e-gdownarrow"));
                    $(this).dequeue().css("height", "auto");
                }
            });
        },
        
        expandGroupDropArea: function () {
            var $groupDropArea = this.element.find(".e-groupdroparea").first(), proxy = this;
            this.model.groupSettings.groupedColumns.length == 0 && proxy.model.groupSettings.enableDropAreaAnimation && $groupDropArea.animate({ height: "30px" }, 150, function () {
                proxy.model.groupSettings.groupedColumns.length == 0 && $groupDropArea.html(proxy._getLocalizedLabels("GroupDropArea")).append(ej.buildTag("div.e-animatebutton e-animatebuttonup e-icon e-guparrow"));
                $groupDropArea.dequeue().css("height", "30px");
            });
        },
        _enableGroupingEvents: function () {
            if (this.model.allowGrouping) {
                this._on(this.element, "click", ".e-groupdroparea,.e-groupheadercell", this._groupHeaderCellClick);
                
                this._on(this.element, "mousedown", ".e-groupheadercell", function (e) {
                    return false;
                });
            }

        },
        _recalculateIndentWidth: function () {
            var proxy = this;
            var browserDetails = this.getBrowserDetails();
            var indentWidth = this.getHeaderTable().find(".e-lastgrouptopleftcell").width(), newWidth = indentWidth, perPixel = indentWidth / 30, $col;
            if (perPixel >= 1)
                newWidth = (30 / perPixel);
            this.getHeaderTable().find("colgroup").find("col").slice(0, this.model.groupSettings.groupedColumns.length).css("width", newWidth + "px");
            var $conCol = this.getContentTable().find("table").filter(":not(.e-recordtable)");
            indentWidth = this.getHeaderTable().find(".e-lastgrouptopleftcell").width();
            if (indentWidth > 30 || (this._isCaptionSummary && (indentWidth >= 30 || (indentWidth > newWidth)))) {
                if (this._isCaptionSummary) {
                    var colgroup = this.model.isEdit ? $conCol.parent(":not(.gridform)").children("colgroup") : $conCol.children("colgroup");
                    $.each(colgroup, function (index, item) {
                        var indentCol = $(item).find("col").length - proxy.model.columns.length;
                        if (proxy.model.detailsTemplate != null) {
                            if (indentCol > 0)
                                indentCol = indentCol - 1;
                        }
                        $(item).find("col").slice(0, indentCol).css("width", newWidth + "px");
                    });
                }
                else
                    this.model.isEdit ? $conCol.parent(":not(.gridform)").children("colgroup").find("col:first-child").css("width", indentWidth + "px") : $conCol.children("colgroup").find("col:first-child").css("width", indentWidth + "px");
                $col = this.getContentTable().find("colgroup").first().find("col").slice(0, this.model.groupSettings.groupedColumns.length);
                if (browserDetails.browser != "msie")
                    $col.css("width", newWidth + "px");
                else{
                    if (this._isCaptionSummary) 
						$col.css("width", newWidth + "px");
					else
						$col.first().css("width", ((indentWidth / this.element.width()) * 100) + "%");
				}
            } else {
                this.getContentTable().find("colgroup").first().find("col").slice(0, this.model.groupSettings.groupedColumns.length).css("width", newWidth + "px");
                this.getContentTable().find("table").filter(":not(.e-recordtable)").children("colgroup").find("col:first-child").css("width", indentWidth + "px");
            }
            if (this.model.showSummary) {
                var sumCols = this.getContentTable().find("table").filter(".e-groupsummary").find(".e-summary");
                sumCols.css("width", newWidth + "px");
            }
        },
        
        getFieldNameByHeaderText: function (headerText) {
            if (ej.isNullOrUndefined(this._fieldColumnNames[headerText]))
                return null;
            return this._fieldColumnNames[headerText];
        },
        
        getHeaderTextByFieldName: function (field) {
            if (ej.isNullOrUndefined(this._headerColumnNames[field]))
                return null;
            return this._headerColumnNames[field];
        },
        
        expandAll: function () {
            var recordPlus = this.element.find(".e-recordpluscollapse");
            var detailRow = this._excludeDetailRows().find(".e-detailrowcollapse");
            if (recordPlus.length != 0) {
                for (var i = 0; i < recordPlus.length; i++)
                    this.expandCollapse($(recordPlus[i]));
            }
            if (detailRow.length != 0) {
                for (var i = 0; i < detailRow.length; i++)
                    this.expandCollapse($(detailRow[i]));
            }
        },
        
        collapseAll: function () {
            var recordPlus = this.element.find(".e-recordplusexpand");
            var detailRow = this.element.find(".e-detailrowexpand");
            if (recordPlus.length != 0) {
                for (var i = 0; i < recordPlus.length; i++)
                    this.expandCollapse($(recordPlus[i]));
            }
            if (detailRow.length != 0) {
                for (var i = 0; i < detailRow.length; i++)
                    this.expandCollapse($(detailRow[i]));
            }
        },
        _group: function (args) {
            if (this.model.groupSettings.groupedColumns.length && this.model.currentViewData) {
                this._currentJsonData = [];
                var temp = document.createElement('div');
                if (!this.model.groupSettings.showGroupedColumn) {
                    if (!this.initialRender && !ej.isNullOrUndefined(args.columnName) && args.requestType == "grouping") {
                        var col = this.getColumnByField(args.columnName);
                        if ($.inArray(args.columnName, this._hiddenColumnsField) == -1) {
                            this._hiddenColumnsField.push(args.columnName)
                            col.visible = false;
                        }
                    }
                    else {
                        for (i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                            if ($.inArray(this.model.groupSettings.groupedColumns[i], this._hiddenColumnsField) == -1) {
                                this._hiddenColumnsField.push(this.model.groupSettings.groupedColumns[i])
                                this.getColumnByField(this.model.groupSettings.groupedColumns[i]).visible = false;
                            }
                        }
                    }
                    this._hideHeaderColumn(this.model.groupSettings.groupedColumns, true);
                    this.getContentTable().children("colgroup").replaceWith(this.getHeaderTable().find('colgroup').clone());
                }
                if (args.requestType == "reorder")
                    this._isReorder = true;
                else
                    this._isReorder = false;
                var $col = this.getContentTable().children("colgroup").find('col');
                var length = $col.length - this.model.columns.length;
                if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    length--;
                if ($col.length > this.model.columns.length)
                    this.getContentTable().children("colgroup").find('col:lt(' + length + ')').remove();
                this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
                var dlen;
                if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                    dlen = this.model.groupSettings.groupedColumns.length + 1;
                }
                else
                    dlen = this.model.groupSettings.groupedColumns.length;
                for (var i = 0; i < dlen; i++)
                    this.getContentTable().children("colgroup").prepend(this._getIndentCol());
                if (this.model.currentViewData.length) {
                    var $tbody = this.getContentTable().children('tbody');
                    $tbody.empty();
                    temp.innerHTML = ['<table>', $.render[this._id + "_GroupingTemplate"](this.model.currentViewData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
                    this.getContentTable().get(0).replaceChild(temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                    this._hideCaptionSummaryColumn();
                }
                this._groupingAction();
                this._gridRows = this.getContentTable().find(".e-recordtable").find("tbody").find("tr").not(".e-gridSummaryRows");
                this._eventBindings();
            }
        },
        _ungroup: function () {
            if (!ej.isNullOrUndefined(this.model.detailsTemplate))
                this._detailsOuterWidth = null;
            var $header = this.element.children(".e-gridheader");
            var $filterInput = $header.find(".e-filterbar").find("th").find("input");
            $header.find("div").first().empty().append(this._renderGridHeader().find("table"));
            this.setGridHeaderContent($header);
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
                this._renderFiltering();
                var filterThNew = this.element.children(".e-gridheader").find(".e-filterbar").find("th").find("input");
                for (var i = 0; i < $filterInput.length; i++)
                    filterThNew.eq(i).val($filterInput.eq(i).val());
            }
            if (!this.model.groupSettings.showGroupedColumn)
                this._hideHeaderColumn(this.model.groupSettings.groupedColumns, true);
            this.refreshTemplate();
            this.element.find(".e-gridcontent").children("div").first().empty().append(this._renderGridContent().find("table").first());
            this.setGridContent(this.element.find(".e-gridcontent"));
            if (this.model.groupSettings.groupedColumns.length != 0)
                this._gridRows = this.getContentTable().find(".e-recordtable").find("tbody").find("tr").toArray();
            else
                this._gridRows = this.getContentTable().get(0).rows;
            this._eventBindings();
        },
        _groupHeaderCellClick: function (e) {
            var $target = $(e.target);
            if ($target.hasClass('e-groupdroparea'))
                return;
            if ($target.hasClass("e-ungroupbutton")) {
                var field = $target.parent().attr("ej-mappingname");
                this.ungroupColumn(field);
            } else if ($target.hasClass("e-togglegroupbutton")) {
                var field = $target.parent().attr("ej-mappingname");
                $target.hasClass("e-toggleungroup") && this.ungroupColumn(field);
            } else if ($target.hasClass("e-animatebutton")) {
                if (!this.model.groupSettings.enableDropAreaAnimation) {
                    this.model.groupSettings.enableDropAreaAnimation = true;
                    this.collapseGroupDropArea();
                } else {
                    this.expandGroupDropArea();
                    this.model.groupSettings.enableDropAreaAnimation = false;
                }
            }
            else {
                $target.addClass("e-headercelldiv");
                this._mouseClickHandler(e);
                $target.removeClass("e-headercelldiv");
            }

            return false;
        },
        _captionSummary: function (nocaption) {
            var summary = null, cols = this.model.summaryRows, k, len = cols.length;
            for (k = 0; k < len; k++) {
                if (cols[k].showCaptionSummary == true) {
                    summary = $(cols[k]);
                    break;
                }
            }
            
            if (nocaption) {
                left = cols.slice(0, k), right = cols.slice(k + 1, len);
                ej.merge(summary = left, right);
            }

            return summary;
        },
        _dropAreaHover: function (e) {
            var $target = $(e.target), proxy = this;
            if (e.type == "mouseenter") {
                if (this._dragActive) {
                    if ($target.hasClass("e-groupdroparea"))
                        $target.addClass("e-hover");
                } else
                    $target.removeClass("e-hover");
                $target.hasClass("e-groupheadercell") && this.model.groupSettings.showUngroupButton && $target.find(".e-ungroupbutton").show(150);
            } else if (e.type == "mouseleave") {
                if ($target.hasClass("e-groupdroparea")) {
                    $target.find(".e-ungroupbutton").hide(150);
                    $target.removeClass("e-hover");
                }
                $target.hasClass("e-groupheadercell") && this.model.groupSettings.showUngroupButton && $target.find(".e-ungroupbutton").hide(150);
            }
            return false;
        },
        _groupingCompleteAction: function (args) {
            var $groupDrop = this.element.children(".e-groupdroparea");
            if (this.model.groupSettings.groupedColumns.length && $groupDrop.find(".e-grid-icon").length == 0 || ej.Grid.Actions.Refresh == args.requestType)
                $groupDrop.empty();
            if (this.initialRender || ej.Grid.Actions.Refresh == args.requestType) {
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                    this._addColumnToGroupDrop(this.model.groupSettings.groupedColumns[i]);
                this._refreshGridPager();
            } else
                this._addColumnToGroupDrop(args.columnName);
            this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-ascending,.e-descending,.e-number").remove();
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
            if (!this.initialRender && ej.gridFeatures.dragAndDrop)
                this._groupHeaderCelldrag();
            this.model.allowScrolling && this.getContentTable().parent().scrollLeft(this.getHeaderTable().parent().scrollLeft() - 1);
            this.element.children(".e-cloneproperties").remove();
            if (ej.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType))
                this._refreshFilterIcon();
        },
        _ungroupingCompleteAction: function (args) {
            var $groupDrop = this.element.children(".e-groupdroparea");
            if (args.requestType != ej.Grid.Actions.Refresh)
               this._removeColumnFromDrop(args.columnName);
            this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-ascending,.e-descending,.e-number").remove();
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
            if (this.model.groupSettings.groupedColumns.length == 0) {
                $groupDrop.html(this.model.groupSettings.enableDropAreaAnimation ? "" : this._getLocalizedLabels("GroupDropArea"));
                this.model.groupSettings.enableDropAreaAutoSizing && $groupDrop.append(ej.buildTag("div.e-animatebutton e-icon").addClass(this.model.groupSettings.enableDropAreaAnimation ? "e-animatebuttondown e-gdownarrow" : "e-animatebuttonup e-guparrow"));
                $groupDrop.css("height", "auto");
            }
            if (ej.gridFeatures.dragAndDrop)
                this._headerCellgDragDrop();
            if (this.model.allowReordering && ej.gridFeatures.dragAndDrop)
                this._headerCellreorderDragDrop();
            this.model.allowScrolling && this.getContentTable().parent().scrollLeft(this.getHeaderTable().parent().scrollLeft() + 10);
            this.element.children(".e-cloneproperties").remove();
            if (ej.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType))
                this._refreshFilterIcon();
        },
        _getToggleButton: function () {
            return ej.buildTag("span.e-togglegroupbutton e-icon e-groupbutton", "&nbsp;");
        },
        _checkEinHeader: function (field) {
            var $headerCell = this.element.children(".e-gridheader").find("thead").find(".e-columnheader").find(".e-headercell");
            for (var i = 0; i < $headerCell.length; i++) {
                if ($.trim($headerCell.eq(i).find("div").attr("ej-mappingname")) == field)
                    return $headerCell.eq(i);
                else if (this.model.allowSorting && this.model.allowMultiSorting) {
                    var header = $($headerCell.eq(i)).clone();
                    header.find(".e-number").remove();
                    if ($.trim(header.find("div").attr("ej-mappingname")) == field)
                        return header;
                }
            }
            return null;

        },

        _checkEinGroupDrop: function (field) {
            var $groupHeaderCell = this.element.children(".e-groupdroparea").find(".e-grid-icon");
            for (var i = 0; i < $groupHeaderCell.length; i++) {
                if ($.trim($groupHeaderCell.eq(i).find("div").attr("ej-mappingname")) == field)
                    return $groupHeaderCell.eq(i);
            }
            return null;
        },

        _addColumnToGroupDrop: function (field) {
            var $groupedColumn = ej.buildTag("div.e-grid-icon e-groupheadercell"), $groupDropArea = this.element.find(".e-groupdroparea").first();
            var $childDiv = ej.buildTag("div", {}, {}, { "ej-mappingname": field }), imageDirection = "e-rarrowup-2x";
            var column = this.getColumnByField(field)
            if (column.disableHtmlEncode)
                $groupedColumn.append($childDiv.text(column.headerText));
            else if (column.headerTemplateID)
                $groupedColumn.append($childDiv.html($(column.headerTemplateID).html()))
            else
                $groupedColumn.append($childDiv.html(column.headerText));
            var $headerCell = this._checkEinHeader(field);
            if (this.model.groupSettings.showToggleButton) {
                $childDiv.append(this._getToggleButton().addClass("e-toggleungroup"));
                $headerCell.find(".e-headercelldiv").find(".e-togglegroupbutton").remove().end().append(this._getToggleButton().addClass("e-toggleungroup"));
            }
            var direction = "ascending";
            if ($headerCell.find(".e-ascending,.e-descending").length) {
                direction = $headerCell.find(".e-ascending,.e-descending").hasClass("e-ascending") ? "ascending" : "descending";
                imageDirection = direction == "ascending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
            }
            $childDiv.append(this._createSortElement().addClass("e-" + direction + " " + imageDirection));
            this.model.groupSettings.showUngroupButton && $childDiv.append(ej.buildTag("span.e-ungroupbutton e-icon e-cancel", " ", {}, { title: this._getLocalizedLabels("UnGroup") }));
            $groupDropArea.append($groupedColumn).css("height", "auto");
            var left = $groupedColumn.offset().left, $cloned = $groupedColumn.clone().css("position", "absolute"), proxy = this;
            $groupedColumn.css("visibility", "hidden")
            $groupDropArea.append($cloned).dequeue();
            $cloned.css({ "left": left + 150 }).animate({ left: left }, 150, function (e) {
                $groupedColumn.css("visibility", "visible");
                $cloned.remove();
            });
        },
        _removeColumnFromDrop: function (field) {
            var headerText = this.getHeaderTextByFieldName(field), proxy = this, $groupDropArea = this.element.children(".e-groupdroparea");
            var $groupHeaderCell = $groupDropArea.css("height", "30px").find(".e-grid-icon");
            for (var i = 0; i < $groupHeaderCell.length; i++) {
                if ($.trim($groupHeaderCell.eq(i).find("div").attr("ej-mappingname")) == field) {
                    if (this.model.groupSettings.groupedColumns.length == 0) {
                        this.collapseGroupDropArea();
                    } else
                        $groupHeaderCell.eq(i).remove();
                }
            }
        },
        _setAggreatedCollection: function (clonedQuery) {
            if (this._dataSource() instanceof ej.DataManager && this._dataManager.dataSource.url != undefined && !this._isRemoteSaveAdaptor)
                return;
            var data;
            data = this._dataManager.executeLocal(clonedQuery).result;
            this._aggregatedCollection = data;
        },
        _setAggregates: function (data, collection) {
            var indx, pred, query = new ej.Query();
            data = data || this.model.currentViewData, collection = collection || this._aggregatedCollection;
            var dLen = data.length, cLen;
            if (dLen != 0){
                var fieldPred = ej.Predicate("field", "equal", data[0].field), keyPred = ej.Predicate("key", "equal", data[0].key);
                if(data[0].key instanceof Date) {
                    var dateObject = { value: data[0].key, operator : "equal", field : "key" };
                    keyPred = this._setDateFilters(dateObject,true);
                }
                pred = (fieldPred["and"](keyPred));
            }
            for (indx = 1; indx < dLen; indx++) {
                var fieldPred = ej.Predicate("field", "equal", data[indx].field), keyPred = ej.Predicate("key", "equal", data[indx].key);
                if(data[indx].key instanceof Date) {
                    var dateObject = { value: data[indx].key, operator : "equal", field : "key" };
                    keyPred = this._setDateFilters(dateObject,true);
                }
                pred = pred["or"](fieldPred["and"](keyPred));
            }
            collection = pred ? new ej.DataManager(collection).executeLocal(query.where(pred)) : collection;
            cLen = collection.length;
            if (data.length > 0) {
                for (indx = 0; indx < cLen; indx++) {
                    if (indx > 0 && indx < cLen - 1) continue;
                    data[indx].count = collection[indx].count; 
                    if (data[indx].items.GROUPGUID)
                        this._setAggregates(data[indx].items, collection[indx].items);
                    if (this.model.showSummary) { 
                        var agg = data[indx]["aggregates"] = [];
                        var rows = this.model.summaryRows, scolumns, summaryData;
                        for (var row = 0, rlen = rows.length; row < rlen; row++) {
                            scolumns = rows[row].summaryColumns;
                            for (var col = 0, clen = scolumns.length; col < clen; col++) {
                                summaryData = collection[indx].items.level ? collection[indx].items.records : collection[indx].items;
                                agg[scolumns[col].dataMember + " - " + scolumns[col].summaryType] = this.getSummaryValues(scolumns[col], summaryData);
                            }
                        }
                    }
                }
            }
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.dragAndDrop = {
        _headerCellgDragDrop: function () {
            var proxy = this;
            this.dragHeaderElement();
            var $droppableElements = this.element.children("div.e-groupdroparea");
            $droppableElements.ejDroppable({
                accept: $droppableElements,
                drop: function (event, ui) {
                    if (ej.isNullOrUndefined(ui.helper) || !ui.helper.is(":visible"))
                        return;
                    var column = proxy.getColumnByField($.trim($(ui.draggable.context).find("div").attr("ej-mappingname")));
                    ui.helper.remove();
                    if ($.inArray(column["field"], proxy._disabledGroupableColumns) != -1)
                        return;
                    if (!(ej.isNullOrUndefined(column.field) || column.field == ""))
                        proxy.groupColumn(column.field);
                }
            });
        },
        _headerCellreorderDragDrop: function () {
            var proxy = this;
            this.dragHeaderElement();
            var $droppableElements = this.element.find(".e-headercell:not(.e-stackedHeaderCell)");
            $droppableElements.ejDroppable({
                accept: $droppableElements,
                drop: function (event, ui) {
                    if (ej.isNullOrUndefined(ui.helper) || !ui.helper.is(":visible"))
                        return;
                    if (ui.draggable.attr("aria-sort") == "ascending" || ui.draggable.attr("aria-sort") == "descending") {
                        var scolumn = proxy.getColumnByField($.trim($(ui.draggable.context).find("div").attr("ej-mappingname")));
                        if (proxy.model.allowSorting && proxy.model.allowMultiSorting)
                            proxy._scolumns.push(scolumn.field);
                        else
                            proxy._gridSort = scolumn.field;
                    }
                    var column = proxy.getColumnByField($.trim($(ui.draggable.context).find("div").attr("ej-mappingname")));
                    ui.helper.remove();
                    //if ($.inArray(column["headerText"], proxy._disabledGroupableColumns) != -1)
                    //  return;
                    var header = $(event.dropTarget).clone();
                    header.find(".e-number").remove();
                    if (!ej.isNullOrUndefined(column.field)) {
                        if ($(event.dropTarget).hasClass("e-droppable")) {
                            header = header.children(".e-headercelldiv");
                            var eDropTarget = $(event.dropTarget).children(".e-headercelldiv");
                        }
                        else {
                            header = $(event.dropTarget).parent();
                            var eDropTarget = $(event.dropTarget);
                            if ($(eDropTarget).hasClass("e-filtericon"))
                                eDropTarget = header = $(eDropTarget).siblings(".e-headercelldiv");
                        }
                        if (proxy.model.allowSorting && proxy.model.allowMultiSorting)
                            if (event.dropTarget.hasClass("e-number") || event.dropTarget.hasClass("e-icon")) {
                                var toColumn = proxy.getColumnByField($.trim(header.attr("ej-mappingname")));
                            }
                            else {
                                var toColumn = proxy.getColumnByField($.trim(eDropTarget.attr("ej-mappingname")));
                            }
                        else {
                            if (event.dropTarget.hasClass("e-icon") && !event.dropTarget.hasClass("e-filtericon"))
                                var toColumn = proxy.getColumnByField($.trim(header.attr("ej-mappingname")));
                            else
                                var toColumn = proxy.getColumnByField($.trim(eDropTarget.attr("ej-mappingname")));
                        }
                        proxy.reorderColumns(column.field, toColumn.field);
                    }
                }
            });
        },

        dragHeaderElement: function () {
            var proxy = this;
            var $dragableElements = this.element.children("div.e-gridheader").find("th.e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell");
            var $visualElement = ej.buildTag('div.e-cloneproperties e-grid', "", { 'height': '20px', 'z-index': 2 }), column;
            //header element columnDrag
            $dragableElements.ejDraggable({
                cursorAt: { top: -50, left: -2 },
                helper: function (event, ui) {
                    if (proxy.element.find(".e-dragclone").length > 0) proxy.element.find(".e-dragclone").remove();
                    var $th;
                    if ($(event.sender.target).hasClass("e-headercell"))
                        $th = $(event.sender.target);
                    else
                        $th = $(event.sender.target).closest("th");
                    column = proxy.getColumnByField($th.find(".e-headercelldiv").attr("ej-mappingname"));
                    if (proxy.model.allowSorting && proxy.model.allowMultiSorting) {
                        var header = $($th).clone();
                        header.find(".e-number").remove();
                        return $visualElement.text(header.text()).clone().width($th.outerWidth() + 2).height($th.height() + 2).css({ "font-size": parseInt(($th.height() + 3) / 2) }).addClass("e-dragclone").appendTo(proxy.element);
                    }
                    else
                        return $visualElement.text($th.text()).clone().width($th.outerWidth() + 2).height($th.height() + 2).css({ "font-size": parseInt(($th.height() + 3) / 2) }).addClass("e-dragclone").appendTo(proxy.element);
                },
                dragStart: function (args) {
                    var target = args.target;
                    var data = { target: target, draggableType: "headercell", column: column };
                    if (proxy._resizer != null && proxy._resizer._expand) {
                        $(".e-dragclone").remove();
                        return false;
                    }
                    proxy._dragActive = true;
                    var $target = proxy.element.find(".e-groupdroparea");
                    if (proxy.model.allowGrouping)
                        proxy.expandGroupDropArea();
                    if (proxy._trigger("columnDragStart", data))
                        return false;
                },
                drag: function (args) {
                    var $target = $(args.target);
                    var data = { target: $target, draggableType: "headercell", column: column };
                    if (proxy._trigger("columnDrag", data))
                        return false;

                    if (($target.hasClass('e-headercelldiv') || $target.hasClass('e-headercell')) && proxy.model.allowReordering) {
                        document.body.style.cursor = '';
                        $target.addClass("e-allowDrop");
                        proxy.getHeaderTable().find(".e-reorderindicate").removeClass("e-reorderindicate");
                        if($target.hasClass('e-headercell') && !$target.hasClass('e-stackedHeaderCell')) $target.addClass("e-reorderindicate");
                        else $target.parent().addClass("e-reorderindicate");
                    }
                    if ($target.hasClass('e-groupdroparea') || $target.closest('.e-groupdroparea').length) {
                        document.body.style.cursor = '';
                        $target.addClass("e-allowDrop");
                    } else
                        document.body.style.cursor = 'not-allowed';
                },
                dragStop: function (args) {
                    if (!args.element.dropped) {
                        var $target = $(args.target);
                        var data = { target: $target, draggableType: "headercell", column: column };
                        proxy._trigger("columnDrop", data);
                        proxy.element.find(".e-groupdroparea").removeClass("e-hover");
                        proxy.getHeaderTable().find(".e-columnheader").find(".e-headercellactive").removeClass("e-headercellactive").removeClass("e-active");
                        $(".e-dragclone").remove();
                        proxy._dragActive = false;
                        proxy.getHeaderTable().find(".e-reorderindicate").removeClass("e-reorderindicate");
                        if (proxy.model.allowGrouping)
                            proxy.collapseGroupDropArea();
                        document.body.style.cursor = '';
                        $(proxy._Indicator).css('display', 'none');
                    }
                }
            });
        },
        _groupHeaderCelldrag: function () {
            //grouped header cell drag.
            var $visualElement = ej.buildTag('div.e-cloneproperties e-grid', "", { 'height': '20px', 'z-index': 2 });
            var proxy = this;
            var $groupedHeaderCells = this.element.children(".e-groupdroparea").find(".e-groupheadercell");
            $groupedHeaderCells.ejDraggable({
                cursorAt: { top: -35, left: -2 },
                helper: function (event, ui) {
                    var $div = $(event.sender.target).closest(".e-grid-icon");
                    return $visualElement.text($(event.sender.target).closest(".e-groupheadercell").text()).clone().width($div.width() + 2).height($div.height() + 2).addClass("e-dragclone").appendTo(proxy.element);
                },
                dragStart: function (args) {
                    var target = args.target;
                    args.model.cursorAt = { top: -35, left: -2 };
                    var data = { target: target, draggableType: "groupheadercell" };
                    if (proxy._trigger("columnDragStart", data))
                        return false;
                },
                drag: function (args) {
                    $(".Sibling").remove();
                    var $target = $(args.target);
                    var data = { target: $target, draggableType: "groupheadercell" };
                    if (proxy._trigger("columnDrag", data))
                        return false;
                    if ($target.closest('div.e-gridcontent').length) {
                        document.body.style.cursor = '';
                        $target.addClass("e-allowDrop");
                    } else
                        document.body.style.cursor = 'not-allowed';
                },
                dragStop: function (args) {
                    if (!args.element.dropped) {
                        var $target = $(args.target);
                        var data = { target: $target, draggableType: "groupheadercell" };
                        proxy._trigger("columnDrop", data);
                        $(".e-dragclone").remove();
                        document.body.style.cursor = '';
                    }
                }
            });

            //grid content drop
            var $contentDroppableElements = this.element.children(".e-gridcontent, .e-gridheader");
            $contentDroppableElements.ejDroppable({
                accept: proxy.element.children("div.e-groupdroparea").find(".e-groupheadercell"),
                drop: function (event, ui) {
                    if (ej.isNullOrUndefined(ui.helper) || !ui.helper.is(":visible") || !ui.draggable.hasClass("e-groupheadercell"))
                        return;
                    var field = $(ui.draggable.context).find("div").attr("ej-mappingname");
                    ui.helper.remove();
                    if (!ej.isNullOrUndefined(field))
                        proxy.ungroupColumn(field);


                }
            });
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.selection = {
        
        selectRows: function (rowIndex, toIndex, target) {
            if (!this.model.allowSelection)
                return false;
            if ($.inArray("row", this.model.selectionSettings.selectionMode) == -1)
                return false;
            var rowIndexCollection = [];
            if ($.isArray(rowIndex)) {
                rowIndexCollection = rowIndex;
                rowIndex = rowIndexCollection[0];
            }
            var $gridRows = $(this.getRows());
            var args = {}, ascend,res;  
			var Data = this._currentJsonData[ej.isNullOrUndefined(rowIndex) ? toIndex : rowIndex];
			if(this.model.scrollSettings.allowVirtualScrolling){			
				var pageSize = this.model.pageSettings.pageSize;
				var nameIndx = this.getRowByIndex(rowIndex).attr("name");                
				var pageIndex = !ej.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx)/pageSize) + 1 : rowIndex;
				var trIndex = (rowIndex)%(pageSize);
                var pageto = parseInt(rowIndex / pageSize);
				 var nameattr = pageto * pageSize;
				 if ((!ej.isNullOrUndefined(pageto) && pageto > 0 && $.inArray(nameattr, this.virtualLoadedPages) == -1) && ej.isNullOrUndefined(target)) {
				    trIndex--; this._virIndex = true;
                    this.gotoPage(pageto + 1);
					var proxy=this;
					if(this._dataSource() instanceof ej.DataManager){
					this._queryPromise.done(function(){
						proxy._virtualdata = proxy._currentJsonData;
						proxy._pageTo=pageto;
						proxy.selectRows((rowIndex % pageSize));
						return false;
					});
					}
					else{
					  proxy._virtualdata = proxy._currentJsonData;
					  proxy._pageTo=pageto;
					}
				 }
				 for (var i = 0; i < this._loadedJsonData.length; i++) {
				     if (this._loadedJsonData[i].pageIndex == pageIndex)
				         res = this._loadedJsonData[i].data;
				     if (this.model.pageSettings.totalPages == pageIndex && this._loadedJsonData[i].pageIndex == pageIndex && this._tempPageRendered) {
				         var dupCount = this.model.pageSettings.pageSize - this._previousPageLength;
				         trIndex = trIndex + dupCount;
				     }
				 }
				 Data = ej.isNullOrUndefined(res) ? this._currentJsonData[trIndex] : res[trIndex];
                var nameattr = this._pageTo * pageSize;
                if (!ej.isNullOrUndefined(this._virtualdata) && this._virtualdata.length > 0) {
                    rowIndex = $(document.getElementsByName(nameattr)[trIndex]).index();
                    Data = this._virtualdata[trIndex];
                    this._virtualdata = [];
                }
                else if ($(document.getElementsByName(pageto * pageSize)).length > 0 && !ej.isNullOrUndefined(this._pageTo)) 
                    rowIndex = $(document.getElementsByName(pageto * pageSize)[rowIndex % pageSize]).index();

			}
		    args = { rowIndex: rowIndex, row: $gridRows.eq(rowIndex), data: Data, target: target, prevRow: this.getRowByIndex(this._previousIndex), prevRowIndex : this._previousIndex };
            if (this._trigger("rowSelecting", args))
                return;
			var $gridRows = $(this.getRows());
            if ((this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) && this.model.isEdit && this.model.enableAutoSaveOnSelectionChange) {
                if(!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal") || this.getContentTable().find(".e-editedrow").length!=0){ 
                    if (this.endEdit())
                        return;
                    else if(this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                           $("#" + this._id + "_externalEdit").css("display", "none");
                    }
            }
            if (rowIndexCollection.length > 0) {
                for (var i = 0; i < rowIndexCollection.length; i++) {
                    this.selectedRowsIndexes.push(rowIndexCollection[i]);
                }
                rows =this.getRowByIndex(rowIndexCollection);
                if (this.model.scrollSettings.frozenColumns)
                    rows = $(rows[0]).add(rows[1]);
                $(rows).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
            }
            else if (ej.isNullOrUndefined(toIndex) || ej.isNullOrUndefined(rowIndex)) {
                rowIndex = ej.isNullOrUndefined(rowIndex) ? toIndex : rowIndex;
                switch (this.model.selectionType) {
                    case ej.Grid.SelectionType.Multiple:
                        if (this.multiSelectCtrlRequest) {
							this.model.selectedRecords = [];
                            var selectedRowIndex = $.inArray(rowIndex, this.selectedRowsIndexes);
                            selectedRowIndex != -1 && this.clearSelection(rowIndex) && this.selectedRowsIndexes.splice(selectedRowIndex, 0);
                            if (selectedRowIndex == -1) {
                                this.selectedRowsIndexes.push(rowIndex);
                                this.getRowByIndex(rowIndex).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                                this._virtualSelectAction(pageIndex, rowIndex, pageSize);
                            }
                            Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                            break;
                        }
                    case ej.Grid.SelectionType.Single:
                        this.clearSelection();
                        this.clearColumnSelection();
                        this.selectedRowsIndexes = [];
                        this.model.selectedRecords = [];
                        this._virtualSelectedRecords = {};
                        this.selectedRowsIndexes.push(rowIndex);
                        this.getRowByIndex(rowIndex).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                        this._virtualSelectAction(pageIndex, rowIndex, pageSize);
                        Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                        break;
                }
            } else {
                if (this.model.selectionType == ej.Grid.SelectionType.Multiple) {
                    this.clearSelection();
                    this.clearColumnSelection();
                    this.selectedRowsIndexes = [];
                    this.model.selectedRecords = [];
                    ascend = rowIndex - toIndex < 0;
                    rows = ascend ? this.getRowByIndex(rowIndex, toIndex + 1) : this.getRowByIndex(toIndex, rowIndex + 1);
                    if (this.model.scrollSettings.frozenColumns)
                        rows = $(rows[0]).add(rows[1]);
                     for (var i = ascend ? rowIndex : toIndex, to = ascend ? toIndex : rowIndex; i <= to; i++) {
                        var nameIndx = this.getRowByIndex(i).attr("name");
                        var pageIndex = !ej.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx) / pageSize) + 1 : rowIndex;
                        this._virtualSelectAction(pageIndex, i, pageSize);
                        this.selectedRowsIndexes.push(i);
                    }
                    $(rows).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                    Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                }
            }
            if (this._selectedRow() !== rowIndex)
                this._selectedRow(rowIndex);
            var args = { rowIndex: this._selectedRow(), row: this.getRowByIndex(this._selectedRow()), data: Data, target: target, prevRow: this.getRowByIndex(this._previousIndex), prevRowIndex : this._previousIndex };
            this._previousIndex = this.selectedRowsIndexes.length ? rowIndex : undefined;
            if ($(this.getRowByIndex(rowIndex)).is('[role="row"]'))
                this._trigger("rowSelected", args);
            // this.multiSelectCtrlRequest = false;
        },

        _virtualSelectAction: function (pageIndex, rowIndex, pageSize) {
            if (this.model.scrollSettings.allowVirtualScrolling && !ej.isNullOrUndefined(rowIndex)) {
                if (!ej.isNullOrUndefined(this._virtualLoadRecords[pageIndex]))
                    this._virtualSelectedRecords[rowIndex] = this._virtualLoadRecords[pageIndex][rowIndex % pageSize];
                else
                    this._virtualSelectedRecords[rowIndex] = this._currentJsonData[rowIndex % pageSize];
            }
        },
        selectCells: function (rowCellIndexes) {
            if (!this.model.allowSelection && !this._allowcellSelection)
                return false;
            var $cell = null;
            var gridRows = this._excludeDetailRows();
            if (this.model.scrollSettings.frozenColumns)
                $cell = this._frozenCell(rowCellIndexes[0][0], rowCellIndexes[0][1][0]);
            else
                $cell = gridRows.eq(rowCellIndexes[0][0]).find(".e-rowcell:eq(" + rowCellIndexes[0][1] + ")");
            if(!ej.isNullOrUndefined(this._previousRowCellIndex) && this._previousRowCellIndex.length != 0 )
                var previousRowCell = $(this.getRowByIndex(this._previousRowCellIndex[0][0]).find(".e-rowcell:eq("+this._previousRowCellIndex[0][1]+")"))	
            var args = { currentCell: $cell, cellIndex: rowCellIndexes[0][1], data: this._currentJsonData[rowCellIndexes[0][0]], previousRowCellIndex: this._previousRowCellIndex, previousRowCell: previousRowCell };
            if (this.model.selectionType == "multiple") {
                args["isCtrlPressed"] = this.multiSelectCtrlRequest;
                args["isShiftPressed"] = this.multiSelectShiftRequest;
            }
            if (this._trigger("cellSelecting", args))
                return;
            switch (this.model.selectionType) {
                case ej.Grid.SelectionType.Multiple:
                    if (this.multiSelectCtrlRequest) {
                        var selectedCellIndex = $.inArray(rowCellIndexes[0][0], this._rowIndexesColl);
                        if (selectedCellIndex != -1)
                            this.selectedRowCellIndexes[selectedCellIndex].cellIndex.push(parseInt(rowCellIndexes[0][1].toString()));
                        else {
                            if ($.inArray(rowCellIndexes[0][0], this._rowIndexesColl) == -1)
                                this._rowIndexesColl.push(rowCellIndexes[0][0]);
                            this.selectedRowCellIndexes.push({ rowIndex: rowCellIndexes[0][0], cellIndex: rowCellIndexes[0][1] });
                        }
                        $cell.addClass("e-cellselectionbackground e-activecell");
                        break;
                    }
                    else if (this.multiSelectShiftRequest && this._previousRowCellIndex != undefined) {
                        this.clearCellSelection();
                        this.clearColumnSelection();
                        this.selectedRowCellIndexes = [];
                        var previousRowIndex = this._previousRowCellIndex[0][0];
                        var previousCellIndex = parseInt(this._previousRowCellIndex[0][1]);
                        var currentRowIndex = rowCellIndexes[0][0];
                        var currentCellIndex = parseInt(rowCellIndexes[0][1]);
                        var newCellColl = [];
                        var min, max;
                        if(this.model.selectionSettings.cellSelectionMode == "box"){
							var $rowCount =  this.model.scrollSettings.frozenColumns ? this.getRows()[0].length - 1 : this.getRows().length - 1;
							var pCellIndex = previousCellIndex < currentCellIndex ? previousCellIndex : currentCellIndex;
							var cCellIndex = pCellIndex == currentCellIndex ? previousCellIndex : currentCellIndex;	
							var newRowColl = [], newCellColl = [];							
							for (var i = pCellIndex; i <= cCellIndex; i++) {								
								min = previousRowIndex;									
								max = currentRowIndex;
								if( min < max ){
									for (var j = min; j <= max; j++) {
										$.inArray(j, newRowColl) == -1 && newRowColl.push(j);											
										this._selectMultipleCells(j, i, currentCellIndex, previousCellIndex);										
									}
								}
								else{
									for (var j = max; j <= min; j++) {
										$.inArray(j, newRowColl) == -1 && newRowColl.push(j);											
										this._selectMultipleCells(j, i, currentCellIndex, previousCellIndex);										
									}
								}
								newCellColl.push(i);								
							}
							for(var i = 0; i < newRowColl.length; i++){
								this.selectedRowCellIndexes.push({ rowIndex: newRowColl[i], cellIndex: newCellColl });										
							}
							this._rowIndexesColl = ej.distinct(newRowColl);
						}
                        else if (currentRowIndex > previousRowIndex) {
                            for (var i = previousRowIndex; i <= currentRowIndex; i++) {
                                newCellColl = [];
                                min = i == previousRowIndex ? previousCellIndex : 0;
                                max = i == currentRowIndex ? currentCellIndex : this.model.columns.length - 1;
                                for (var j = min; j <= max; j++) {
                                    newCellColl.push(j);
                                    this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
                                }
                                this.selectedRowCellIndexes.push({ rowIndex: i, cellIndex: newCellColl });
                                this._rowIndexesColl.push(i);
                            }
                        } 						 						
						else {
                            for (var i = previousRowIndex; i >= currentRowIndex; i--) {
                                newCellColl = [];
                                min = i == previousRowIndex ? previousCellIndex : this.model.columns.length - 1;
                                max = i == currentRowIndex ? currentCellIndex : 0;
								if( min > max ){
									for (var j = min; j >= max; j--) {
										newCellColl.push(j);
										this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
									}
								}
								else{
									for (var j = max; j >= min; j--) {
										newCellColl.push(j);
										this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
									}
								}
                                this.selectedRowCellIndexes.push({ rowIndex: i, cellIndex: newCellColl });
                                this._rowIndexesColl.push(i);
                            }
                        }
                        break;
                    }
                    else {
                        this.clearCellSelection();
                        for (var i = 0; i < rowCellIndexes.length; i++) {
                            if (rowCellIndexes[i][1].length > 1) {
                                var td = gridRows.eq(rowCellIndexes[i][0]).find(".e-rowcell");
                                if (this.model.scrollSettings.frozenColumns)
                                    td = $(gridRows[0]).eq(rowCellIndexes[i][0]).find(".e-rowcell").add($(gridRows[1]).eq(rowCellIndexes[i][0]).find(".e-rowcell"));
                                for (var j = 0; j < td.length; j++) {
                                    var index = (this.model.detailsTemplate != null || this.model.childGrid != null) ? td[j].cellIndex - 1 : j;
                                    if ($.inArray(index, rowCellIndexes[i][1]) != -1) {
                                        $(td[j]).addClass("e-cellselectionbackground e-activecell");
                                        var selectedCellIndex = $.inArray(rowCellIndexes[i][0], this._rowIndexesColl);
                                        if (selectedCellIndex != -1)
                                            this.selectedRowCellIndexes[selectedCellIndex].cellIndex.push(td[j].cellIndex);
                                        else {
                                            this.selectedRowCellIndexes.push({ rowIndex: rowCellIndexes[i][0], cellIndex: [td[j].cellIndex] });
                                            this._rowIndexesColl.push(rowCellIndexes[i][0]);
                                        }
                                    }
                                }
                            }
                            else {
                                if (this.model.scrollSettings.frozenColumns)
                                    this._frozenCell(rowCellIndexes[i][0], rowCellIndexes[i][1][0]).addClass("e-cellselectionbackground e-activecell");
                                else
                                    $(this.getRowByIndex(rowCellIndexes[i][0]).find(".e-rowcell:eq(" + rowCellIndexes[i][1] + ")")).addClass("e-cellselectionbackground e-activecell");
                                this.selectedRowCellIndexes.push({ rowIndex: rowCellIndexes[i][0], cellIndex: rowCellIndexes[i][1] });
                                this._rowIndexesColl.push(rowCellIndexes[i][0]);
                            }
                        }

                        break;

                    }
                case ej.Grid.SelectionType.Single:
                    this.clearCellSelection();
                    this.clearColumnSelection();
                    this.selectedRowCellIndexes = [];
                    if ($.inArray(rowCellIndexes[0][0], this._rowIndexesColl) == -1)
                       this._rowIndexesColl.push(rowCellIndexes[0][0]);
                    this.selectedRowCellIndexes.push({ rowIndex: rowCellIndexes[0][0], cellIndex: rowCellIndexes[0][1] });
                    if (this.model.scrollSettings.frozenColumns)
                        this._frozenCell(rowCellIndexes[0][0], rowCellIndexes[0][1][0]).addClass("e-cellselectionbackground e-activecell");
                    else
                    $(this.getRowByIndex(rowCellIndexes[0][0]).find(".e-rowcell:eq(" + rowCellIndexes[0][1] + ")")).addClass("e-cellselectionbackground e-activecell");
                    break;
            }
            var args = { currentCell: $cell, cellIndex: rowCellIndexes[0][1], data: this._currentJsonData[rowCellIndexes[0][0]], selectedRowCellIndex: this.selectedRowCellIndexes, previousRowCellIndex: this._previousRowCellIndex, previousRowCell: previousRowCell};
            if (!this.multiSelectShiftRequest || ej.isNullOrUndefined(this._previousRowCellIndex)) this._previousRowCellIndex = rowCellIndexes;
            if (this._trigger("cellSelected", args))
                return;
        },
		_selectMultipleCells: function(i, j, currentCellIndex, previousCellIndex){			
			if (this.model.scrollSettings.frozenColumns)
				this._frozenCell(i, j).addClass("e-cellselectionbackground e-activecell");
			else
				$(this.getRowByIndex(i).find(".e-rowcell:eq(" + j + ")")).addClass("e-cellselectionbackground e-activecell");
		},

        
        selectColumns: function (columnIndex, toIndex) {
            if (!this.model.allowcolumnSelection && !this.model.allowSelection)
                return false;
            var gridRows = this.getRows();
            var prevColumnHeaderCell = this.getHeaderTable().find("th.e-headercell")[this._previousColumnIndex];
            var args = { columnIndex: columnIndex == undefined ? toIndex : columnIndex, headerCell: $(this.getHeaderTable().find("th.e-headercell")[columnIndex]), column: this.model.columns[columnIndex], previousColumnIndex: this._previousColumnIndex, prevColumnHeaderCell: prevColumnHeaderCell };
            if (this.model.selectionType == "multiple") {
                args["isCtrlPressed"] = this.multiSelectCtrlRequest;
                args["isShiftPressed"] = this.multiSelectShiftRequest;
            }
            if (this._trigger("columnSelecting", args))
                return;
            if (ej.isNullOrUndefined(toIndex) || ej.isNullOrUndefined(columnIndex)) {
                columnIndex = ej.isNullOrUndefined(columnIndex) ? toIndex : columnIndex;
                switch (this.model.selectionType) {
                    case ej.Grid.SelectionType.Multiple:
                        if (this.multiSelectCtrlRequest) {
                            var selectedColumnIndex = $.inArray(columnIndex, this.selectedColumnIndexes);
                            selectedColumnIndex != -1 && this.clearColumnSelection(columnIndex) && this.selectedColumnIndexes.splice(selectedColumnIndex, 0);
                            if (selectedColumnIndex == -1) {
                                this.selectedColumnIndexes.push(columnIndex);
                                this._previousColumnIndex = this.selectedColumnIndexes.length ? columnIndex : undefined;
                                (this.model.detailsTemplate != null || this.model.childGrid != null) && ++columnIndex;
                                if (this.model.scrollSettings.frozenColumns)
                                    this._frozenColumnSelection(gridRows, columnIndex);
                                else
                                    for (var i = 0; i < gridRows.length; i++) {
                                        $(gridRows[i].cells[columnIndex]).addClass("e-columnselection");
                                    }
                                $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")[columnIndex]).addClass("e-columnselection");
                            }
                            break;
                        }
                    case ej.Grid.SelectionType.Single:
                        this.clearSelection();
                        this.clearCellSelection();
                        this.clearColumnSelection();
                        this.selectedColumnIndexes = [];
                        this.selectedColumnIndexes.push(columnIndex);
                        this._previousColumnIndex = this.selectedColumnIndexes.length ? columnIndex : undefined;
                        (this.model.detailsTemplate != null || this.model.childGrid != null) && ++columnIndex;
                        if (this.model.scrollSettings.frozenColumns)
                            this._frozenColumnSelection(gridRows, columnIndex);
                        else
                        for (var i = 0; i < gridRows.length; i++) {
                            $(gridRows[i].cells[columnIndex]).addClass("e-columnselection");
                        }
                        $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")[columnIndex]).addClass("e-columnselection");
                        break;
                }
            } else {
                if (this.model.selectionType == ej.Grid.SelectionType.Multiple) {
                    this.clearColumnSelection();
                    this.selectedColumnIndexes = [];
                    var indent = 0;
                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                        ++columnIndex; ++toIndex;
                        indent = 1;
                    }
                    var startIndex = columnIndex > toIndex ? toIndex : columnIndex;
                    var endIndex = columnIndex > toIndex ? columnIndex + 1 : toIndex + 1;
                    if (this.model.scrollSettings.frozenColumns)
                        this._frozenColumnSelection(gridRows, startIndex, endIndex);
                    else
                    for (var i = startIndex; i < endIndex; i++) {
                        for (var j = 0; j < gridRows.length; j++) {
                            $(gridRows[j].cells[i]).addClass("e-columnselection");
                        }
                        $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")[i]).addClass("e-columnselection");
                        this.selectedColumnIndexes.push(i - indent);
                    }
                }
            }
            var args = { columnIndex: columnIndex == undefined ? toIndex : columnIndex, headerCell: $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")[columnIndex]), column: this.model.columns[columnIndex], selectedColumnIndex: this.selectedColumnIndexes, previousColumnIndex: this._previousColumnIndex, prevColumnHeaderCell: prevColumnHeaderCell};            
            if (this._trigger("columnSelected", args))
                return;
        },
        
        clearSelection: function (index) {
            if (this._selectedRow() >= -1) {
                var $gridRows = this._excludeDetailRows(), index;
                
                if (!ej.isNullOrUndefined(index)) {
                    this.getRowByIndex(index).removeAttr("aria-selected").find(".e-selectionbackground").removeClass("e-selectionbackground").removeClass("e-active");
                    index = $.inArray(index, this.selectedRowsIndexes);
                    if (index != -1)
                        this.selectedRowsIndexes.splice(index, 1);
                } else {
                    if (this.model.scrollSettings.frozenColumns > 0)
                        $gridRows = $($gridRows[0]).add($gridRows[1]);
                    $gridRows.removeAttr("aria-selected").find(".e-rowcell, .e-detailrowcollapse, .e-detailrowexpand").removeClass("e-selectionbackground").removeClass("e-active");
                    this.selectedRowsIndexes = [];
                    this.model.selectedRecords = [];
                }
                if (!this.selectedRowsIndexes.length)
                    this._selectedRow(-1);
            }
            return true;
        },

        _excludeDetailRows:function()
		{
			var $gridRows;
			if (!ej.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid || this.model.showSummary))
                    $gridRows = $(this.getRows()).not(".e-detailrow,.e-gridSummaryRows");
                else
                    $gridRows = $(this.getRows());
			return $gridRows;
		},
        
        clearCellSelection: function (rowIndex, columnIndex) {
            if (this._allowcellSelection) {
                var $gridRows = this._excludeDetailRows(), cellIndex;
                if (ej.isNullOrUndefined(rowIndex)) {
                    if (this.model.scrollSettings.frozenColumns)
                        $gridRows = $($gridRows[0]).add($gridRows[1]);
                    $gridRows.find(".e-rowcell, .e-detailrowcollapse, .e-detailrowexpand").removeClass("e-cellselectionbackground").removeClass("e-activecell");
                    this.selectedRowCellIndexes = [];
                    this._rowIndexesColl = [];
                }
                else {
                    for (var i = 0; i < this.selectedRowCellIndexes.length ; i++) {
                        if (this.selectedRowCellIndexes[i].rowIndex == rowIndex) {
                            cellIndex = $.inArray(columnIndex, this.selectedRowCellIndexes[i].cellIndex);
                            if (this.model.scrollSettings.frozenColumns)
                                this._frozenCell(rowIndex, columnIndex).removeClass("e-cellselectionbackground").removeClass("e-activecell");
                            else
                            $gridRows.eq(rowIndex).find(".e-rowcell").eq(columnIndex).removeClass("e-cellselectionbackground").removeClass("e-activecell");
                            break;
                        }
                    }
                    if (i != this.selectedRowCellIndexes.length) {
                        this.selectedRowCellIndexes[i].cellIndex.splice(cellIndex, 1);
                        if (this.selectedRowCellIndexes[i].cellIndex.length == 0) {
                            this.selectedRowCellIndexes.splice(i, 1);
                            this._rowIndexesColl.splice($.inArray(rowIndex, this._rowIndexesColl), 1);
                        }
                    }
                }
            }
            return true;
        },

        
        clearColumnSelection: function (index) {
            if (this._allowcolumnSelection) {
                var $gridRows = $(this.getRows());
                if (!ej.isNullOrUndefined(index)) {
                    var indent = 0;
                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                        ++index; indent = 1;
                    }
                    if (this.model.scrollSettings.frozenColumns) {
                        var frozenDiv = 0; currentIndex = index;
                        if (index >= this.model.scrollSettings.frozenColumns) {
                            frozenDiv = 1;
                            currentIndex = index - this.model.scrollSettings.frozenColumns;
                        }
                        for (var j = 0; j < $gridRows[frozenDiv].length; j++) {
                            $($gridRows[frozenDiv][j].cells[currentIndex]).removeClass("e-columnselection");
                        }
                    }
                    else
                        for (var i = 0; i < $gridRows.length; i++) {
                            $($gridRows[i].cells[index]).removeClass("e-columnselection");
                        }
                    $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")[index]).removeClass("e-columnselection");
                    this.selectedColumnIndexes.splice(0, index - indent);

                } else {
                    if (this.model.scrollSettings.frozenColumns)
                        $gridRows = $($gridRows[0]).add($gridRows[1]);
                    $gridRows.find(".e-rowcell").removeClass("e-columnselection");
                    $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")).removeClass("e-columnselection");
                    this.selectedColumnIndexes = [];
                }
            }
            return true;
        },
        
        getSelectedRecords: function () {
            var records = [];
            for (var i = 0; i < this.selectedRowsIndexes.length; i++) {
                if (this.selectedRowsIndexes[i] != -1) {
                    if (this.model.scrollSettings.allowVirtualScrolling)
                        records.push(this._virtualSelectedRecords[this.selectedRowsIndexes[i]]);
                    else
                        records.push(this._currentJsonData[this.selectedRowsIndexes[i]]);
                }
            }
            return records;
        },
        _setCurrentRow: function (requestType) {
            if (requestType == ej.Grid.Actions.Refresh || requestType == ej.Grid.Actions.Ungrouping || requestType == ej.Grid.Actions.Grouping || requestType == ej.Grid.Actions.Filtering || requestType == ej.Grid.Actions.Sorting || requestType == ej.Grid.Actions.Delete || requestType == ej.Grid.Actions.Save || requestType == ej.Grid.Actions.Cancel || requestType == ej.Grid.Actions.Paging) {
                this._selectedRow(-1);
                this.selectedRowsIndexes = [];
            }
        },
        _renderMultiTouchDialog: function () {
            this._customPop = ej.buildTag("div.e-gridpopup", "", { display: "none" });
            var $content = ej.buildTag("div.e-content"), $downTail = ej.buildTag("div.e-downtail e-tail");
            if (this.model.allowMultiSorting) {
                var $selElement = ej.buildTag("span.e-sortdirect e-icon");
                $content.append($selElement);
            }
            if (this.model.selectionType == ej.Grid.SelectionType.Multiple) {
                var $selElement = ej.buildTag("span.e-rowselect e-icon");
                $content.append($selElement);
            }
            this._customPop.append($content);
            this._customPop.append($downTail);
            this.element.append(this._customPop);
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    
    ej.widget("ejGrid", "ej.Grid",  {
        
        _rootCSS: "e-grid",
        // widget element will be automatically set in this
        element: null,
        validTags: ["div"],
        // user defined model will be automatically set in this
        model: null,
        keyConfigs: /** @lends ejGrid# */{
            focus: "e",
            insertRecord: "45", //Insert
            deleteRecord: "46", // delete
            editRecord: "113", //F2
            saveRequest: "13", // enter
            cancelRequest: "27", //Esc
            nextPage: "34", // PgDn
            previousPage: "33", // PgUp
            lastPage: "ctrl+alt+34", //"CtrlAltPgDn",
            firstPage: "ctrl+alt+33", //"CtrlPlusAltPlusPgUp",
            nextPager: "alt+34", //"AltPlusPgDown",
            previousPager: "alt+33", //"AltPlusPgUp",
            firstCellSelection: "36", //"Home",
            lastCellSelection: "35", //"End",
            firstRowSelection: "ctrl+36", //"CtrlPlusHome",
            lastRowSelection: "ctrl+35", //"CtrlPlusEnd",
            upArrow: "38", //Up arrow
            downArrow: "40", //Down arrow
            rightArrow: "39", //Right arrow
            leftArrow: "37", //Left arrow
            moveCellRight: "9", //tab
            moveCellLeft: "shift+9", //shifttab
            selectedGroupExpand: "alt+40", //"AltPlusDownArrow",
            totalGroupExpand: "ctrl+40", //"CtrlPlusDownArrow",
            selectedGroupCollapse: "alt+38", //"AltPlusUpArrow",
            totalGroupCollapse: "ctrl+38" //"CtrlPlusUpArrow",
        },
        _ignoreOnPersist: [
            "query", "isEdit", "toolbarClick", "queryCellInfo", "mergeCellInfo", "currentViewData", "enableAltRow", "enableRTL", "contextClick", "contextOpen",
            "rowDataBound", "rowTemplate", "detailsDataBound", "detailsTemplate", "childGrid", "summaryRows", "toolbarSettings",
            "editSettings", "allowMultiSorting", "enableAutoSaveOnSelectionChange", "locale", "allowScrolling", "allowCellMerging",
            "allowTextWrap", "cssClass", "dataSource", "groupSettings.enableDropAreaAnimation", "enableRowHover", "showSummary", "allowGrouping",
            "enableHeaderHover", "allowKeyboardNavigation", "scrollSettings.frozenRows", "scrollSettings.frozenColumns", "enableTouch", "editSettings.rowPosition", "editSettings.showAddNewRow", "contextMenuSettings.enableContextMenu",
        ],
        ignoreOnExport: [
            "isEdit", "toolbarClick", "query", "queryCellInfo", "selectionType", "currentViewData", "enableRTL", "rowDataBound", "rowTemplate",
            "detailsDataBound", "detailsTemplate", "editSettings", "pageSettings", "enableAutoSaveOnSelectionChange", "localization", "allowScrolling",
            "cssClass", "dataSource", "groupSettings.enableDropAreaAnimation", "enableRowHover", "allowSummary",
            "enableHeaderHover", "allowKeyboardNavigation"
        ],
        observables: ["dataSource", "selectedRowIndex", "pageSettings.currentPage"],
        _tags: [{
            tag: "columns",
            attr: ["allowEditing", "allowFiltering", "allowGrouping", "allowSorting", "cssClass", "customAttributes", "dataSource", "defaultValue",
			"disableHtmlEncode", "editTemplate", "editType", "foreignKeyField", "foreignKeyValue", "headerTemplateID", "headerText", "isFrozen",
			"isIdentity", "isPrimaryKey", "isUnbound", "textAlign", "templateID", "textAlign", "headerTextAlign", "tooltip", "clipMode",
            "validationRules.minlength", "validationRules.maxlength", "validationRules.range", "validationRules.number", "validationRules.required",
            "editParams.decimalPlaces", [{ tag: "commands", attr: ["type", "buttonOptions"] }]
            ],
            content: "template"
        }, {
            tag: "summaryRows",
            attr: ["showCaptionSummary", "showTotalSummary", [{
                tag: "summaryColumns", attr: ["customSummaryValue", "dataMember", "displayColumn", "summaryType"]
            }]]
        }, {
            tag: "stackedHeaderRows",
            attr: [
            [{
                tag: "stackedHeaderColumns", attr: ["headerText", "column"]
            }]]
        }, {
            tag: "filterSettings.filteredColumns", attr: []
        }, {
            tag: "sortSettings.sortedColumns", attr: []
        }],
        _dataSource: ej.util.valueFunction("dataSource"),
        _selectedRow: ej.util.valueFunction("selectedRowIndex"),
        _currentPage: ej.util.valueFunction("pageSettings.currentPage"),
        // default model
        defaults: /** @lends ejGrid# */ {

            
            allowPaging: false,
            
            showColumnChooser: false,
            
            gridLines: "both",
            
            allowSorting: false,
            
            showStackedHeader: false,
            
            
            
            

            

            

            
            selectedRecords: [],
            stackedHeaderRows: [],
            
            allowFiltering: false,
            allowMultipleExporting: false,
            
            allowSelection: true,
            
            allowGrouping: false,
            
            showSummary: false,
            
            allowResizing: false,
            
            allowResizeToFit: false,
            
            allowTextWrap: false,
            
            allowCellMerging: false,
            
            enableRowHover: true,
            
            enablePersistence: false,
            
            selectedRowIndex: -1,
            
            allowSearching: false,
            
            enableHeaderHover: false,
            
            allowReordering: false,
            
            allowKeyboardNavigation: true,
            
            enableTouch: true,

            columnLayout:'auto',
            
            selectionType: "single",
            
            dataSource: null,
            
            cssClass: "",
            
            allowScrolling: false,
            
            locale: "en-US",
            
            enableAutoSaveOnSelectionChange: true,
            
            allowMultiSorting: false,
            exportToExcelAction: "",
            exportToWordAction: "",
            exportToPdfAction: "",

            _groupingCollapsed: [],
            editSettings:  {
                
                allowEditing: false,
                
                showAddNewRow: false,
                
                allowAdding: false,
                
                showAddNewRow: false,
                
                allowDeleting: false,
                
                editMode: "normal",
                
                rowPosition: "top",
                
                dialogEditorTemplateID: null,
                
                allowEditOnDblClick: true,
                
                externalFormTemplateID: null,
                
                inlineFormTemplateID: null,
                
                formPosition: "bottomleft",
               
				titleColumn: null,
			   
                showConfirmDialog: true,
                
                showDeleteConfirmDialog: false
            },
            
            selectionSettings:  {

                
                selectionMode: ["row"],

                
                enableToggle: false,

                
                cellSelectionMode: "flow"
            },

            
            pageSettings:  {
                
                pageSize: 12,
                
                pageCount: 8,
                
                currentPage: 1,
                
                totalPages: null,
                
                enableTemplates: false,
                
                showDefaults: false,
                
                template: null,
                
                totalRecordsCount: null,
                
                enableQueryString: false,
                printMode: "allpages"
            },
            
            groupSettings:  {
                
                showDropArea: true,
                
                showToggleButton: false,
                
                enableDropAreaAnimation: true,
                
                showGroupedColumn: true,
                
                showUngroupButton: true,
                
                enableDropAreaAutoSizing: true,
                
                captionFormat: null,
                
                groupedColumns: []
            },

            

            contextMenuSettings: {
                
                enableContextMenu: false,
                
                contextMenuItems: ["Add Record", "Edit Record", "Delete Record", "Sort In Ascending Order", "Sort In Descending Order", "Next Page", "Last Page", "Previous Page", "First Page", "Save", "Cancel", "Grouping", "Ungrouping"],
                
                customContextMenuItems: [],

                subContextMenu: []
            },
            
            filterSettings:  {
                
                filterType: "filterbar",
                
                filterBarMode: "immediate",
                
                showFilterBarStatus: true,
                statusBarWidth: 450,
                
                showPredicate: false,
                
                filteredColumns: [],
                
                maxFilterChoices: 1000,
                
                enableCaseSensitivity: false
            },
            searchSettings:  {
                
                fields: [],
                
                key: "",
                
                operator: "contains",
                
                ignoreCase: true

            },
            
            sortSettings:  {

                

                

                
                sortedColumns: []
            },
            
            toolbarSettings:  {
                
                showToolbar: false,
                
                toolbarItems: [],
                
                customToolbarItems: []
            },
            
            minWidth: 0,
            
            scrollSettings: 
            {
                
                width: "auto",
                
                height: 0,
                
                enableTouchScroll: true,
                
                allowVirtualScrolling: false,
                
                virtualScrollMode: "normal",
                
                frozenRows: 0,
                
                frozenColumns: 0
            },
            

            

            

            

            

            

            

            

            

            

            

            

            
            summaryRows: [],
            
            enableRTL: false,
            
            enableAltRow: true,
            currentViewData: null,
            
            detailsTemplate: null,
            
            childGrid: null,
            
            keySettings: null,
            
            rowTemplate: null,
            
            detailsDataBound: null,
            
            rowDataBound: null,
            
            queryCellInfo: null,
            
            
            mergeCellInfo: null,
            
            create: null,
            
            actionBegin: null,
            
            actionComplete: null,
            
            actionFailure: null,
            
            beginEdit: null,
            
            endEdit: null,
            
            endAdd: null,
            
            endDelete: null,
            
            beforeBatchAdd: null,
            
            beforeBatchSave: null,
            
            beforeBatchDelete: null,
            
            batchAdd: null,
            
            batchDelete: null,
            
            cellSave: null,
            
            cellEdit: null,
            
            resizeStart: null,
            
            resizeEnd: null,
            
            resized: null,
            
            load: null,
            
            destroy: null,
            
            rowSelecting: null,
            
            rowSelected: null,
            
            cellSelecting: null,
            
            cellSelected: null,
            
            columnSelecting: null,
            
            columnSelected: null,
            
            columnDragStart: null,
            
            columnDrag: null,
            
            columnDrop: null,
            
            dataBound: null,
            
            recordClick: null,
            
            recordDoubleClick: null,
            
            templateRefresh: null,
            
            rightClick: null,
            
            detailsCollapse: null,
            
            detailsExpand: null,
            
            toolbarClick: null,
            

            contextOpen: null,
            
            contextClick: null,

            

            

            

            

            

            

            

            

            

            

            

            

            

            

            

            

            

            

            

            

            
			 

            

            

            

            

            

            

            

            

            

            

            

            

            

            columns: [],
            
            query: null,
            isEdit: false,
            
            isResponsive: false,
            
            enableResponsiveRow: false,
        },
        dataTypes: {
            dataSource: "data",
            query: "data",
            columns: "array",
            childGrid: "parent",
            gridLines: "enum",
            summaryRows: "array",
            stackedHeaderRows: "array",
            toolbarSettings: {
                toolbarItems: "array",
                customToolbarItems: "array"
            },
            contextMenuSettings: {
                contextMenuItems: "array",
                customContextMenuItems: "array"
            },
            selectionSettings: {
                selectionMode: "array",
                selectedRecords: "array"
            },
            sortSettings: {
                sortedColumns: "array"
            },
            filterSettings: {
                filteredColumns: "array",
                filterType: "enum",
                filterBarMode: "enum",
            },
            groupSettings: {
                groupedColumns: "array"
            },
            editSettings: {
                editMode: "enum",
                formPosition: "enum",
                rowPosition: "enum",
            }
        },

        _columns: function (index, property, value, old) {
            var $header = this.element.find(".e-gridheader");
            $header.find("div").first().empty().append(this._renderGridHeader().find("table"));
            this._headerCellgDragDrop();
            this.refreshContent(true);
            this._trigger("refresh");
        },
        _summaryRows: function (index, property, value, old) {
            if (property == "showTotalSummary" || property == "showCaptionSummary") {
                var indx = index.summaryRows;
                var val = value.toLowerCase() == "true" || value.toLowerCase() == "false" ? ej.parseJSON(value) : false;
                this.option("summaryRows")[indx][property] = val;
            }
            this.element.find(".e-gridfooter").remove();
            this._renderGridFooter().insertAfter(this.getContent());
            if (property == "showCaptionSummary" || property == "title") {
                this._isCaptionSummary = this.option("summaryRows")[indx]["showCaptionSummary"];
                this.model.showSummary = this._isCaptionSummary;
                if (this.model.groupSettings.groupedColumns.length != 0)
                    this._refreshCaptionSummary();
            }
        },
        _summaryRows_summaryColumns: function (index, property, value, old) {
            if (property == "displayColumn" || property == "dataMember") {
                if (ej.isNullOrUndefined(this.getColumnByField(value)))
                    return;
            }
            this._createSummaryRows(this.getFooterTable());
            if (this.element.find(".e-groupcaptionsummary").length != 0)
                this._refreshCaptionSummary();
        },
        _stackedHeaderRows_stackedHeaderColumns: function (index, property, value, old) {
            this._refreshStackedHeader();
        },
        _sortSettings_sortedColumns: function (index, property, value, old) {
            var colName, direction;
            var sortObj = this.model.sortSettings.sortedColumns[index["sortSettings.sortedColumns"]];
            if (property == "field") {
                colName = this.getColumnByField(value) != null ? value : null;
                direction = (sortObj.direction == "ascending" || sortObj.direction == "descending") ? sortObj.direction : null;
            }
            else if (property == "direction") {
                colName = this.getColumnByField(sortObj.field) != null ? sortObj.field : null;
                direction = (value == "ascending" || value == "descending") ? value : null;
            }
            if (colName != null && direction != null)
                this.sortColumn(colName, direction);
        },
        _filterSettings_filteredColumns: function (index, property, value, old) {
            var field, operator, matchcase, predicate, filtervalue;
            var filterObj = this.model.filterSettings.filteredColumns[index["filterSettings.filteredColumns"]];
            switch (property) {
                case "field":
                    field = this.getColumnByField(value) != null ? value : null;
                    operator = this._map(ej.FilterOperators, filterObj.operator);
                    filtervalue = filterObj.value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = filterObj.matchcase;
                    break;
                case "matchcase":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(ej.FilterOperators, filterObj.operator);
                    filtervalue = filterObj.value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = value.toLowerCase() == "true" || value.toLowerCase() == "false" ? ej.parseJSON(value) : false;
                    break;
                case "operator":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(ej.FilterOperators, value);
                    filtervalue = filterObj.value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = filterObj.matchcase;
                    break;
                case "predicate":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(ej.FilterOperators, filterObj.operator);
                    filtervalue = filterObj.value;
                    predicate = (value == "and" || value == "or") ? value : null;
                    matchcase = filterObj.matchcase;
                    break;
                case "value":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(ej.FilterOperators, filterObj.operator);
                    filtervalue = value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = filterObj.matchcase;
                    break;
            }
            if (field != null && operator != null && filtervalue != null && predicate != null && matchcase != null)
                this.filterColumn(field, operator, filtervalue, predicate, matchcase);
        },
        _map: function (object, value) {
            var data = $.map(object, function (obj) {
                if (obj === value)
                    return obj;
            });
            return data.length != 0 ? data[0] : null;
        },
        _refreshCaptionSummary: function () {
            var temp = document.createElement('div');
            temp.innerHTML = ['<table>', $.render[this._id + "_GroupingTemplate"](this.model.currentViewData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
            this.getContentTable().get(0).replaceChild(temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
            this.refreshContent();
        },
        
        getContentTable: function () {
            return this._gridContentTable;
        },

        setGridContentTable: function (value) {
            this._gridContentTable = value;
        },
        
        getContent: function () {
            return this._gridContent;
        },

        setGridContent: function (value) {
            this._gridContent = value;
        },
        
        getHeaderContent: function () {
            return this._gridHeaderContent;
        },

        setGridHeaderContent: function (value) {
            this._gridHeaderContent = value;
        },
        
        getHeaderTable: function () {
            return this._gridHeaderTable;
        },

        setGridHeaderTable: function (value) {
            this._gridHeaderTable = value;
        },
        
        getRows: function () {
            return this._gridRows;
        },
        
        getFilteredRecords: function () {
            return this._filteredRecords;
        },
        
        getRowByIndex: function (from, to) {
            try {
                var gridRows = this.getRows(), $gridRows = this._excludeDetailRows(), $row = $();
                if ($.isArray(from)) {
                    for (var i = 0; i < from.length; i++) {
                        if (this.model.scrollSettings.frozenColumns > 0) {
                            $row.push(gridRows[0][from[i]]);
                            $row.push(gridRows[1][from[i]]);
                        }
                        else
                            $row.push(gridRows[from[i]]);
                    }
                    return $row;
                }
                else if (ej.isNullOrUndefined(to)) {
                    if (this.model.scrollSettings.frozenColumns > 0) {
                        $row.push(gridRows[0][from]);
                        $row.push(gridRows[1][from]);
                        return $row;
                    }
                    return $(($gridRows).not(".e-virtualrow")[from]);
                } else {
                    if (this.model.scrollSettings.frozenColumns > 0) {
                        $row.push($(gridRows[0]).slice(from, to));
                        $row.push($(gridRows[1]).slice(from, to));
                        return $row;
                    }
                    return $($gridRows.not(".e-virtualrow").slice(from, to));
                }
            } catch (e) {
                return $();
            }
        },
        
        getColumnIndexByField: function (field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["field"] == field)
                    break;
            }
            return column;
        },
        
        getColumnIndexByHeaderText: function (headerText, field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["headerText"] == headerText) {
                    if (field) {
                        if (ej.isNullOrUndefined(this.model.columns[column]["field"]) || this.model.columns[column]["field"] == "")
                            break;
                    }
                    else
                        break;
                }
            }
            return column;
        },
        
        getIndexByRow: function ($tr) {
            var gridRows = this.getRows(), $gridRows = this._excludeDetailRows(), rowIndex;
            if (this.model.scrollSettings.frozenColumns > 0) {
                rowIndex = $(gridRows[0]).index($tr);
                if (rowIndex == -1)
                    rowIndex = $(gridRows[1]).index($tr);
                return rowIndex;
            } else
                return $gridRows.not(".e-virtualrow").index($tr);
        },
        
        getPrimaryKeyFieldNames: function () {
            if (this._primaryKeys.length != 0)
                return this._primaryKeys;
            for (var key = 0, col = this.model.columns, cLen = col.length; key < cLen; key++) {
                if (col[key]["isPrimaryKey"])
                    this._primaryKeys.push(col[key]["field"]);
            }
            return this._primaryKeys;
        },
        
        getVisibleColumnNames: function (headerText) {
            return this._visibleColumns;
        },
        
        getHiddenColumnNames: function (headerText) {
            return this._hiddenColumns;
        },
        
        getColumnByField: function (field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["field"] == field)
                    break;
            }
            return column == this.model.columns.length ? null : this.model.columns[column];
        },
        
        getsortColumnByField: function (field) {
            for (var column = 0; column < this.model.sortSettings.sortedColumns.length; column++) {
                if (this.model.sortSettings.sortedColumns[column]["field"] == field)
                    break;
            }
            return column == this.model.sortSettings.sortedColumns.length ? null : this.model.sortSettings.sortedColumns[column];
        },
        
        getColumnByHeaderText: function (headerText, field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["headerText"] == headerText) {
                    if (field) {
                        if (ej.isNullOrUndefined(this.model.columns[column]["field"]) || this.model.columns[column]["field"] == "")
                            break;
                    }
                    else
                        break;
                }
            }
            return column == this.model.columns.length ? null : this.model.columns[column];
        },
        
        getCurrentViewData: function () {
            return this._currentJsonData;
        },
        
        getColumnFieldNames: function () {
            var columnNames = [];
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["field"])
                    columnNames.push(this.model.columns[column]["field"]);
            }
            return columnNames;
        },
        
        getBrowserDetails: function () {
            var b = navigator.userAgent.match(/(firefox|chrome|opera|msie|safari)\s?\/?(\d+(.\d+)*)/i);
            if (!!navigator.userAgent.match(/Trident\/7\./))
                return { browser: "msie", version: $.uaMatch(navigator.userAgent).version };
            return { browser: b[1].toLowerCase(), version: b[2] };
        },
        _initPrivateProperties: function () {
            this._click = 0;
            this._gridHeaderTable = null;
            this._gridWidth = this.element.width();
            this._id = this.element.attr("id");
            this._gridRows = null;
            this._gridContentTable = null;
            this._gridContent = null;
            this._remoteSummaryData = null;
            this._gridSort = null;
            this._gridHeaderContent = null;
            this._gridFooterContent = null;
            this._gridFooterTable = null;
            this._gridRecordsCount = this._dataSource() !== null ? (this.model.pageSettings.totalRecordsCount == null ? this._dataSource().length : this.model.pageSettings.totalRecordsCount) : 0;
            this._links = null;
            this._gridPager = null;
            this._cSortedColumn = null;
            this._cSortedDirection = null;
            this._$curSElementTarget = null;
            this._gridFilterBar = null;
            this._$curFieldName = null;
            this._$prevFieldName = null;
            this._mediaStatus = false;
            this._$fDlgIsOpen = false;
            this._$colType = null;
            this._$colFormat = null;
            this._$prevColType = null;
            this._$prevSElementTarget = null;
            this._currentFilterColumn = null;
            this._filteredRecordsCount = null;
            this._filteredRecords = [];
            this.filterColumnCollection = [];
            this._previousFilterCount = null;
            this._excelFilter = null;
            this._isExcelFilter = this.model.filterSettings.filterType == "excel";
            this._primaryKeys = [];
            this._identityKeys = [];
            this._primaryKeyValues = [];
            this._modifiedRecords = [];
            this._addedRecords = [];
            this._tdsOffsetWidth = [];
            this._deletedRecords = [];
            this._disabledToolItems = $();
            this._validationRules = {};
            this._groupedColumns = [];
            this._scolumns = [];
            this._currentJsonData = [];
            this._groupingColumnIndex = 0;
            this._dataManager = this._dataSource() instanceof ej.DataManager ? this._dataSource() : this._dataSource() != null ? ej.DataManager(this._dataSource()) : null;
            if (this._dataManager != null && this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.pageSettings.totalRecordsCount != null && this._dataManager.dataSource.json != null)
                this._dataManager.dataSource.json.splice(this.model.pageSettings.totalRecordsCount);
            this._isRemoteSaveAdaptor = (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.remoteSaveAdaptor);
            this._isLocalData = true;
            this._disabledResizingColumns = [];
            this._disabledSortableColumns = [];
            this._disabledGroupableColumns = [];
            this._disabledFilterableColumns = [];
            this._disabledEditableColumns = [];
            this._hiddenColumns = [];
            this._visibleColumns = [];
            this._visibleColumnsField = [];
            this._hiddenColumnsField = [];
            this._ccVisibleColumns = [];
            this._ccHiddenColumns = [];
            this._sortedColumns = [];
            this.multiSortRequest = false;
            this.multiSelectCtrlRequest = false;
            this.multiSelectShiftRequest = false;
            this._enableSelectMultiTouch = false;
            this._enableSortMultiTouch = false;
            this._templateRefresh = false;
            this.initialRender = false;
            this._isAddNew = false;
            this._fieldColumnNames = {};
            this._headerColumnNames = {};
            this._virtualLoadRecords = {};
            this._virtualSelectedRecords = {};
            this.selectedRowsIndexes = [];
            this._isReorder = false;
            this._searchString = "";
            this._searchCount = null;
            this.columnsWidthCollection = [];
            this._Indicator = null;
            this._resizer = null;
            this._bulkEditCellDetails = {
                cellValue: null,
                rowIndex: -1,
                columnIndex: -1,
                fieldName: null,
                _data: null,
                cellEditType: "",
                cancelSave: false,
                defaultData: null,
                insertedTrCollection: [],
                rowData: null
            };
            this.batchChanges = {
                added: [],
                deleted: [],
                changed: []
            };
            this._bulkEditTemplate = $();
            this._confirmDialog = null;
            this._confirmedValue = false;
            this._lastRow = false;
            this._isVirtualRecordsLoaded = false;
            this._scrollValue = 0;
            this._currentTopFrozenRow = this.model.scrollSettings.frozenRows;
            this._rowHeightCollection = [];
            this._scrollObject = null;
            this._customPop = null;
            this.selectedRowCellIndexes = [];
            this._rowIndexesColl = [];
            this.selectedColumnIndexes = [];
            this.commonQuery = $.extend(true, {}, this.model.query);
            if (ej.gridFeatures.group) {
                this._rowCol = this._captionSummary();
                this._isCaptionSummary = (this._rowCol != null && this._rowCol.length) > 0 ? true : false;
            }
            this.phoneMode = this.model.isResponsive && document.documentElement.clientWidth < 360 ? true : false;
            if (this.model.selectionSettings.selectionMode.length > 0)
                this._initSelection();
            this._mediaQuery = false;
            this._columnChooserList = null;
            this._$headerCols = null;
            this._$contentCols = null;
            this._detailsOuterWidth = null;
            this._editForm = null;
            this._cloneQuery = null;
        },
        _init: function () {
            this._trigger("load");
            if (ej.isNullOrUndefined(this.model.query) || !(this.model.query instanceof ej.Query))
                this.model.query = ej.Query();
            if (ej.gridFeatures.common)
                this._initScrolling();
            this._initPrivateProperties();
            if (this.model.enableResponsiveRow)
                this.element.addClass("e-responsive");
            this._checkDataBinding();
        },
        _initComplexColumn: function (obj, field, cxField) {
            var complexField = cxField || field;
            for (var field1 in obj) {

                if (typeof obj[field1] == "object" && !ej.isNullOrUndefined(obj[field1])) {
                    complexField = complexField.concat(".").concat(field1);
                    this._initComplexColumn(obj[field1], field1, complexField);
                }
                else {
                    var cxFieldName = (complexField).concat(".").concat(field1), value = obj[field1];;
                    this.model.columns.push({
                        field: cxFieldName,
                        type: value != null ? (value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date") : typeof (value)) : null
                    });
                }
            }
        },
        _initColumns: function (object) {
            while (object.items != undefined)
                object = object.items[0];
            if (this.model.columns.length == 0 && object) {
                for (var field in object) {
                    if (object.hasOwnProperty(field) && (typeof (object[field]) != "object" || object[field] instanceof Date)) {
                        var value = object[field];
                        this.model.columns.push({
                            field: field,
                            type: value != null ? (value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date") : typeof (value)) : null
                        });
                    }
                    else if (typeof (object[field]) == "object") {
                        this._initComplexColumn(object[field], field);
                    }
                }
                this.model.columns.length && this._renderAfterColumnInitialize();
            } else {
                for (var index = 0; index < this.model.columns.length; index++) {
                    this.model.columns[index].field = ej.isNullOrUndefined(this.model.columns[index].field) ? "" : this.model.columns[index].field;
                    if (ej.isNullOrUndefined(this.model.columns[index].type)) {
                        var $field;
                        if (this.model.columns[index].dataSource && this.model.columns[index].foreignKeyValue)
                            $field = this.model.columns[index].dataSource[0][this.model.columns[index].foreignKeyValue];
                        else
                            $field = !ej.isNullOrUndefined(this.model.columns[index].field) ? ej.getObject(this.model.columns[index].field, object) : null;
                        this.model.columns[index].type = $field != null ? ($field.getDay ? ($field.getHours() > 0 || $field.getMinutes() > 0 || $field.getSeconds() > 0 || $field.getMilliseconds() > 0 ? "datetime" : "date") : typeof ($field)) : null;
                    }
                    else if (this.model.columns[index]["type"] == "date" && this.model.columns[index].format == undefined)
                        if (ej.isNullOrUndefined(Globalize))
                            $.extend(this.model.columns[index], { format: "{0:" + Globalize.culture().calendars.standard.patterns.d + "}" });
                        else
                            $.extend(this.model.columns[index], { format: "{0:M/d/yyyy}" });
                    else if (this.model.columns[index]["type"] == "datetime" && this.model.columns[index].format == undefined)
                        if (ej.isNullOrUndefined(Globalize))
                            $.extend(this.model.columns[index], { format: "{0:" + Globalize.culture().calendars.standard.patterns.d + " " + Globalize.culture().calendars.standard.patterns.t + "}" });
                        else
                            $.extend(this.model.columns[index], { format: "{0:M/d/yyyy h:mm tt}" });
                }
            }
        },
        _initSelection: function () {
            var mode = this.model.selectionSettings.selectionMode;
            for (i = 0; i < mode.length; i++) {
                this["_allow" + mode[i] + "Selection"] = true;
            }
        },
        _checkDataBinding: function () {
            if (!this.model.columns.length && (((this._dataSource() == null || !this._dataSource().length) && !(this._dataSource() instanceof ej.DataManager)) || ((this._dataSource() instanceof ej.DataManager) && this._dataManager.dataSource.url == undefined && !this._dataSource().dataSource.json.length))) {
                this._renderAlertDialog();
                this._alertDialog.find(".e-content").text(this._getLocalizedLabels("EmptyDataSource"));
                this._alertDialog.ejDialog("open");
                return;
            }
            if (this.model.enablePersistence)
                this.model.query = new ej.Query();
            this._initialRenderings();
            this.initialRender = true;
            this.model.enableRTL && this.element.addClass("e-rtl");
            if (this.model.allowFiltering && this._isExcelFilter)
                this._renderExcelFilter();
            if (this.model.cssClass != null)
                this.element.addClass(this.model.cssClass);
            if (this.model.allowGrouping)
                this.element.append(this._renderGroupDropArea());
            if (this.model.toolbarSettings.showToolbar)
                this.element.append(this._renderToolBar());
            var columns = this.model.columns;
            if (columns && columns.length) {
                var expands = [];
                if (typeof columns[0] === "string")
                    for (var i = 0; i < columns.length; i++)
                        columns[i] = { field: columns[i] };
                for (var i = 0; i < columns.length; i++) {
                    if (!columns[i].field || columns[i].field.indexOf('.') === -1) continue;
                    this._getExpands(columns[i].field, expands);
                }
                this.model.query.expand(expands);
                this.commonQuery.expand(expands);
                this._renderAfterColumnInitialize();
            }
            if (this.model.allowPaging)
                this.element.append(this._renderGridPager());
            if (this.model.contextMenuSettings.enableContextMenu)
                this.element.append(this._renderContext());
            if ($.isFunction($.fn.ejWaitingPopup)) {
                this.element.ejWaitingPopup({ showOnInit: false });
                $("#" + this._id + "_WaitingPopup").addClass("e-gridwaitingpopup");
            }
            if (this.model.scrollSettings.allowVirtualScrolling) {
                this._loadedJsonData = [];
                this._prevPage = 1;
            }
            if (this._dataSource() instanceof ej.DataManager) {
                this.element.ejWaitingPopup("show");
                if (this._dataSource().ready != undefined) {
                    var proxy = this;
                    this._dataSource().ready.done(function (args) {
                        proxy._initDataSource();
                        proxy.model.dataSource = ej.DataManager(args.result);
                    });
                } else {
                    this.element.ejWaitingPopup("show");
                    this._initDataSource();
                }
            } else {
                this._ensureDataSource();
                this._trigger("actionBegin");
                this._initGridRender();
            }
            if (this.model.showColumnChooser)
                this._renderColumnChooser();
        },
        _renderColumnChooser: function () {
            var $columnButton = ej.buildTag("button .e-ccButton", this._getLocalizedLabels("Columns"), { 'float': 'right' }).attr("type", "button");
            this.element.prepend($columnButton);
            $columnButton.ejButton({
                prefixIcon: "e-down-arrow",
                imagePosition: "imageright",
                contentType: "textandimage",
                type: 'button',
                click: $.proxy(this._ccClickHandler, this),
                width: 90
            });
            var buttHeight = $columnButton.outerHeight();
            $columnButton.css('margin-top', 0 - (buttHeight));
            var elementTop = parseInt(this.element.css('margin-top'),10);
            this.element.css('margin-top', elementTop + buttHeight);
            var $mainDiv = ej.buildTag("div");
            var $outerDiv = ej.buildTag("div .e-grid e-columnChooser", '', {}, { id: this._id + "ccDiv" });
            var $searchBox = ej.buildTag("div.e-searchbox e-fields").append(ej.buildTag("input#" + this._id + "_ccSearchBox.e-ejinputtext e-filtertext", {}, {}, { "type": "text" }))
            var $sapnDiv = ej.buildTag('span .e-searchfind e-icon')
            $searchBox.append($sapnDiv);
            var $listOuterDiv = ej.buildTag('div', '', { 'height': '228px' }, { id: this._id + "liScrollerDiv" })
            this._renderColumnChooserData(false);
            $listOuterDiv.append(this._columnChooserList);
            $outerDiv.append($searchBox);
            $outerDiv.append($listOuterDiv);

            var $splitterDiv = ej.buildTag('div .e-columnChooserSplitter', '', { 'border-bottom': '0px' });
            $outerDiv.append($splitterDiv);
            if (this.model.enableRTL) {
                $buttonDiv = ej.buildTag('div', '', { 'float': 'left', 'margin-top': '7px', 'margin-right': '-13px' });
                var $cancelButton = ej.buildTag("button", this._getLocalizedLabels("Cancel"), { 'margin-right': '7px', 'margin-left': '9px' });
                $($sapnDiv).addClass("e-rtl");
            }
            else {
                $buttonDiv = ej.buildTag('div', '', { 'float': 'right', 'margin-top': '7px', 'margin-right': '-13px' });
                var $cancelButton = ej.buildTag("button", this._getLocalizedLabels("Cancel"), { 'margin-right': '20px', 'margin-left': '6px' });
            }
            var $addButton = ej.buildTag("button", this._getLocalizedLabels("Done"));
            $buttonDiv.append($addButton);
            $buttonDiv.append($cancelButton);
            $outerDiv.append($buttonDiv);
            $addButton.ejButton({
                click: $.proxy(this._addButtonCC, this),
                showRoundedCorner: true,
                width: 66
            });
            $cancelButton.ejButton({
                click: $.proxy(this._cancelButtonHandler, this),
                showRoundedCorner: true,
                width: 66
            });
            $outerDiv.insertBefore(this.element)
            $outerDiv.ejDialog({ width: 'auto', beforeClose: $.proxy(this._columnChooserBeforeClose, this), showOnInit: false, allowKeyboardNavigation: false, enableResize: false, "enableRTL": this.model.enableRTL, "cssClass": this.model.cssClass, showHeader: false, width: 260 });
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10) {
                var searchBox = $(".e-columnChooser").find("input#" + this._id + "_ccSearchBox")[0];
                ej.ieClearRemover(searchBox);
            }
        },
        _renderColumnChooserData: function (refresh) {
            var selectAllCheck = this.model.columns.length == this.getVisibleColumnNames().length;
            this._ccCheckedLength = this.getVisibleColumnNames().length;
            this._ccCheckBoxList = [];
            var $listBox = ej.buildTag("div", '', { 'margin-left': '0px', 'width': '250px' }), count = 0;
            for (var index = -1; index < this.model.columns.length; index++) {
                var isSelectAll = index == -1;
                if (isSelectAll || this.model.columns[index].showInColumnChooser) {
                    var column = this.model.columns[index];
                    var colValue = isSelectAll ? this._getLocalizedLabels("SelectAll") : ej.isNullOrUndefined(column.headerText) || column.headerText == "" ? column.field == "" ? null : column.field : column.headerText;
                    if (!ej.isNullOrUndefined(colValue) || isSelectAll) {
                        var $innerDiv = ej.buildTag('div', '', {}, { 'class': 'e-columnChooserListDiv' });
                        var styleAttr = {};
                        var id = isSelectAll ? this._id + 'selectAll' : this._id + colValue.replace(/\s|\.|[^a-zA-Z0-9]|&nbsp/g, "_");
                        var inDom = $listBox.find("#" + id).length; inDom && count++;
                        var $input = ej.buildTag('input', '', styleAttr, { 'id': (!inDom ? id : id + count + ""), 'value': colValue, 'type': 'checkbox', "ej-field": isSelectAll ? '' : column.field, "ej-headertext": isSelectAll ? '' : column.headerText, 'class': isSelectAll ? 'e-selectall' : '' });
                        var label = ej.buildTag('label', colValue, { 'font-size': '13px' }, { 'for': (!inDom ? id : id + count + "") });
                        $innerDiv.append($input);
                        $innerDiv.append(label);
                        $listBox.append($innerDiv);
                        var checked = !isSelectAll && !ej.isNullOrUndefined(column.visible) ? column.visible : true;
                        $input.ejCheckBox({
                            checked: isSelectAll ? selectAllCheck : checked,
                            change: $.proxy(this._columnChooserCheckChange, this)
                        });
                        if (!isSelectAll && !ej.isNullOrUndefined(column.visible))
                            $input[column.visible ? "attr" : "removeAttr"]("checked", true);
                    }
                }
            }
            if (!refresh)
                this._columnChooserList = $listBox;
            else {
                this._columnChooserList.empty().append($listBox.children());
                $("#" + this._id + "liScrollerDiv").is(":visible") && $("#" + this._id + "liScrollerDiv").ejScroller('refresh');
            }
            this._ccCheckBoxList = this._columnChooserList.find("input:checkbox").not(".e-selectall");
        },
        _columnChooserCheckChange: function (args) {
            var checked = args.isChecked;
            if (args.model.id == this._id + 'selectAll') {
                if (!checked)
                    this._ccCheckBoxList.filter(function () { if ($(this).hasClass("e-checkbox") && $(this).prop("checked")) return this; }).ejCheckBox({ checked: checked });
                else
                    this._ccCheckBoxList.filter(":not(:checked)").ejCheckBox({ checked: checked });
            }
            else {
                if (!checked)
                    this._ccCheckedLength--;
                else
                    this._ccCheckedLength++;
                this._columnChooserList.find('input.e-selectall').ejCheckBox('model.checked', this._ccCheckedLength == this.model.columns.length);
                checked = $("#" + this._id + "ccDiv").find(".e-columnChooserListDiv [aria-checked=true]").length != 0;
                this.element[checked ? "attr" : "removeAttr"]("checked", true);
            }
            var operation = !checked ? "addClass" : "removeClass";
            $("#" + this._id + "ccDiv").find("button[aria-describedby='Done']")[operation]("e-disable");
        },
        _columnChooserBeforeClose: function () {
            $(".e-columnChoosertail").remove();
            $(".e-columnChoosertailAlt").remove();
            $("#" + this._id + "ccDiv").find("button[aria-describedby='Done']").removeClass("e-disable");
            $("#" + this._id + "_ccSearchBox").val('');
            var args = {};
            args.target = {}; args.target.value = '';
            this._columnChooserSearch(args);
        },
        _columnChooserSearch: function (e) {
            if (e.type == 'click') {
                e.target.value = '';
                $("#" + this._id + "_ccSearchBox").val('');
            }
            var val = e.target.value;
            var span = $("#" + this._id + "_ccSearchBox").next('span');
            if (val != '') {
                span.removeClass("e-searchfind");
                span.addClass("e-cancel");
            }
            else {
                span.removeClass("e-cancel");
                span.addClass("e-searchfind");
            }
            $(".e-cancel").bind('click', $.proxy(this._columnChooserSearch, this));
            var currentCheckedItemsData = this.model.columns;
            var columnCollection = [], gridColumns = [], tempCollection = [];
            if (val != '') {
                currentCheckedItemsData = ej.DataManager(this.model.columns).executeLocal(ej.Query().where("headerText", ej.FilterOperators.startsWith, val, true));
                tempCollection = ej.DataManager(this.model.columns).executeLocal(ej.Query().where("field", ej.FilterOperators.startsWith, val, true));
                tempCollection.forEach(function (obj) {
                    if (obj.headerText == "" && $.inArray(obj, currentCheckedItemsData) == -1)
                        currentCheckedItemsData.push(obj);
                })
            }
             currentCheckedItemsData.forEach(function (obj) {
                if (obj.showInColumnChooser) {
                    var headerText = ej.isNullOrUndefined(obj.headerText) || obj.headerText == "" ? obj.field == "" ? null : obj.field : obj.headerText;
                    columnCollection.push(headerText);
                }
            });
            if (!ej.isNullOrUndefined($("#nomatches")[0]))
                $("#nomatches").remove();
            var div = $("#" + this._id + "ccDiv").find("#" + this._id + "liScrollerDiv")

            var divs = this._columnChooserList.find(".e-columnChooserListDiv");

            for (i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i].showInColumnChooser && !ej.isNullOrUndefined(this.model.columns[i].headerText)) {
                    if (this.model.columns[i].headerText != "")
                        gridColumns.push(this.model.columns[i].headerText)
                    else if (this.model.columns[i].field != "")
                        gridColumns.push(this.model.columns[i].field)
                }
            }

            for (var index = 0; index < gridColumns.length; index++) {
                var colValue = gridColumns[index];
                var indx = columnCollection.indexOf(colValue)
                if (!ej.isNullOrUndefined(colValue))
                    divs.eq(index + 1)[indx == -1 ? "addClass" : "removeClass"]("e-hide");
            }

            if (columnCollection.length == 0) {
                var $labeldiv = ej.buildTag('div#nomatches', '');
                var $label = ej.buildTag('span', 'No Matches Found');
                $labeldiv.append($label);
                $(div).append($labeldiv);
            }
            divs.eq(0)[columnCollection.length == 0 ? "addClass" : "removeClass"]("e-hide");
            $("#" + this._id + "liScrollerDiv").ejScroller('refresh')
        },
        _addButtonCC: function () {
            this._visibleColumns = [];
            this._hiddenColumns = [];
            this._visibleColumnsField = [];
            this._hiddenColumnsField = [];
            this._columnChooserClick = true;
            var args = {}; args.requestType = "columnchooser";
            var chbxs = this._columnChooserList.find("input:checkbox").not('.e-selectall');
            for (var i = 0, len = chbxs.length; i < len; i++) {
                var ele = $(chbxs[i]), hTxt = ele.attr("ej-headertext"), field = ele.attr("ej-field");
                if(this._id+"selectAll"!=ele.attr("id")){
                    this[chbxs[i].checked ? "_visibleColumns" : "_hiddenColumns"].push(hTxt);
                    this[chbxs[i].checked ? "_visibleColumnsField" : "_hiddenColumnsField"].push(field != "" ? field : hTxt);
                }
            }
            var array1 = this._visibleColumns;
            var array2 = this._hiddenColumns;
            var arr = [], obj, duparr;
            obj = $.merge($.merge([], array1), array2);
            duparr = this._isDuplicate(obj);
            this._trigger("actionBegin", args);
            if (duparr) {
                this.showColumns(this._visibleColumnsField);
                this.hideColumns(this._hiddenColumnsField);
            }
            else {
                this.showColumns(this._visibleColumns);
                this.hideColumns(this._hiddenColumns);
            }
            $("#" + this._id + "ccDiv").ejDialog('close');
            $(".e-columnChoosertail").remove();
            this.refreshScrollerEvent();
            args = { requestType: "columnchooser", removedcolumns: [], addedcolumns: [], visiblecolumns: this.getVisibleColumnNames(), hiddencolumns: this.getHiddenColumnNames() };
            this._ccColumnUpdate(args.addedcolumns, this.getVisibleColumnNames(), this._ccVisibleColumns);
            this._ccColumnUpdate(args.removedcolumns, this.getHiddenColumnNames(), this._ccHiddenColumns);
            this._trigger("actionComplete", args);
        },
        _ccColumnUpdate: function (args, getColumns, ccColumns) {
            for (i = 0; i < getColumns.length; i++) {
                if ($.inArray(getColumns[i], ccColumns) == -1)
                    args.push(getColumns[i]);
            }
        },
        _isDuplicate: function (arr) {
            var temp, count = [], duplicate = [];
            for (var i = 0; i < arr.length; i++) {
                temp = arr[i];
                if (count[temp] >= 1)
                    count[temp] = count[temp] + 1;
                else
                    count[temp] = 1;
            }
            for (temp in count) {
                if (count[temp] > 1)
                    return true;
            }
            return false;
        },
        _cancelButtonHandler: function () {
            $("#" + this._id + "ccDiv").ejDialog('close');
            $(".e-columnChoosertailAlt").remove();
            $(".e-columnChoosertail").remove();
        },
        _ccClickHandler: function (e) {
            var dlgWidth = 230, xPos;
            var chooserButton = this.element.find(".e-ccButton");
            xPos = chooserButton.offset().left + chooserButton.width();
            var dialogObj = $("#" + this._id + "ccDiv").data('ejDialog')
            if (dialogObj && dialogObj.isOpened()) {
                dialogObj.close();
                $(".e-columnChoosertail").remove();
                $(".e-columnChoosertailAlt").remove();
            }
            else {
                $("#" + this._id + "ccDiv").ejDialog({ width: '230px', height: '309px', position: { X: xPos - dlgWidth, Y: chooserButton.offset().top + 35 } })
                   .ejDialog("open");
                var maxZindex = parseInt($("#" + this._id + "ccDiv_wrapper").css('z-index'));
                var $tailDiv = ej.buildTag("div #" + this._id + "_ccTail .e-columnChoosertail", '', { 'display': 'block', 'position': 'absolute', 'left': xPos - 29, 'top': chooserButton.offset().top + 15 });
                var $tailDiv2 = ej.buildTag("div #" + this._id + "_ccTailAlt .e-columnChoosertailAlt", '', { 'display': 'block', 'z-index': maxZindex + 2, 'position': 'absolute', 'left': xPos - 29, 'top': chooserButton.offset().top + 16 });
                $tailDiv.insertBefore($("#" + this._id + "ccDiv_wrapper"));
                $tailDiv2.insertBefore($("#" + this._id + "ccDiv_wrapper"));
            }
            this._refreshColumnChooserList();
            this._ccVisibleColumns = this.getVisibleColumnNames();
            this._ccHiddenColumns = this.getHiddenColumnNames();
            $("#" + this._id + "liScrollerDiv").ejScroller({ height: '228', width: '230', buttonSize: 0 });
            $("#" + this._id + "liScrollerDiv").ejScroller('refresh');
            if (this.getBrowserDetails().browser == 'chrome')
                $('.e-columnChooser .e-hscrollbar').attr('style', 'height: 10px !important;');
            $(".e-ejinputtext").bind('keyup', $.proxy(this._columnChooserSearch, this))
        },
        _refreshColumnChooserList: function (collection) {
            this._ccCheckedLength = this.getVisibleColumnNames().length;
            var chbxs = this._columnChooserList.find("input:checkbox").not('.e-selectall');
			var duparr = this._isDuplicate($.merge($.merge([], this._visibleColumns), this._hiddenColumns));
            for (var i = 0, len = chbxs.length; i < len; i++) {
                var ele = $(chbxs[i]), hTxt = ele.attr("ej-headertext"), field = ele.attr("ej-field"), flag = undefined, isDup = chbxs.filter("[ej-headertext='" + hTxt + "']").length;
                if (this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && $.inArray($(chbxs[i]).attr("ej-field"), this.model.groupSettings.groupedColumns) != -1) {
                    $(chbxs[i]).parents(".e-columnChooserListDiv").css("display", "none")
                    chbxs[i].checked = false;
                }
                else
                    $(chbxs[i]).parents(".e-columnChooserListDiv").css("display", "block")
                var colValue = duparr ? (field == "" ? hTxt : field) : hTxt;
				flag = this[duparr ? "_hiddenColumnsField" : "_hiddenColumns"].indexOf(colValue) != -1;
                ele[!flag ? "attr" : "removeAttr"]("checked", true);
                ele.ejCheckBox("model.checked", !flag);
            }
            this._columnChooserList.find("input:checkbox.e-selectall").ejCheckBox({checked:this.model.columns.length==this.getVisibleColumnNames().length})
        },
        _initDataSource: function () {
            this._isLocalData = (!(this._dataSource() instanceof ej.DataManager) || (this._dataSource().dataSource.offline || this._isRemoteSaveAdaptor));
            this._ensureDataSource();
            this._trigger("actionBegin");
            var queryPromise = this._dataSource().executeQuery(this.model.query);
            if (this._dataManager.dataSource.table != null)
                this._dataManager.dataSource.table.css("display", "none");
            if (!this.element.is(":visible"))
                this.element.ejWaitingPopup("hide");
            queryPromise.done(ej.proxy(function (e) {
                this.element.ejWaitingPopup("hide");
                if (!this.model.columns.length && !e.count) {
                    proxy._renderAlertDialog();
                    proxy._alertDialog.find(".e-content").text(proxy._getLocalizedLabels("EmptyDataSource"));
                    proxy._alertDialog.ejDialog("open");
                    proxy.element.ejWaitingPopup("hide");
                    return;
                }
                if (!ej.isNullOrUndefined(e.aggregates))
                    this._remoteSummaryData = e.aggregates;
                this.model.currentViewData = e.result;
                if (this.model.pageSettings.totalRecordsCount != null && this.model.filterSettings.filteredColumns.length == 0)
                    this._gridRecordsCount = this.model.pageSettings.totalRecordsCount;
                else if (e.count == 0 && e.result.length)
                    this._gridRecordsCount = e.result.length;
                else
                    this._gridRecordsCount = e.count;
                if (this.model.filterSettings.filteredColumns.length > 0)
                    this._filteredRecordsCount = e.count;
                if (this.getPager() != null)
                    this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
                this._initGridRender();
            }, this));
            var proxy = this;
            queryPromise.fail(function (e) {
                var args = { error: e.error };
                proxy._trigger("actionFailure", args)
            })
        },
        _initialRenderings: function () {
            if (this.model.groupSettings.groupedColumns.length) {
                var sortedColumns = new Array();
                for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                    if (ej.isNullOrUndefined(this.model.sortSettings.sortedColumns[i].direction))
                        this.model.sortSettings.sortedColumns[i].direction = ej.sortOrder.Ascending;
                    sortedColumns.push(this.model.sortSettings.sortedColumns[i].field);
                }
                if(this.model.allowGrouping){
					for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
						if ($.inArray(this.model.groupSettings.groupedColumns[i], sortedColumns) == -1)
							this.model.sortSettings.sortedColumns.push({ field: this.model.groupSettings.groupedColumns[i], direction: ej.sortOrder.Ascending });
					}
				}
            }
        },
        _getExpands: function (field, arr) {
            var splits = field.split('.'), tmp = "";
            splits.splice(splits.length - 1, 1);
            for (var i = 0; i < splits.length; i++, tmp = "") {
                for (var j = 0; j < i; j++)
                    tmp += splits[j] + "/";
                tmp = tmp + splits[i];
                if (arr.indexOf(tmp) === -1)
                    arr.push(tmp);
            }
        },
        _renderAfterColumnInitialize: function () {
            this.element.append(this._renderGridHeader());
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                this._renderFiltering();
			if(this.model.gridLines != "both")
				this._showHeaderGridLines();
            if (this.model.allowPaging)
                this.element.append(this.element.find(".e-pager").first());
        },
        _ensureDataSource: function (args) {
            if (this._dataSource() == null && !(this._dataSource() instanceof ej.DataManager)) {
                if (!ej.isNullOrUndefined(args) && args.requestType == "add")
                    this.dataSource([]);
                else
                    return;
            }
            this.model.query.requiresCount();
            var queryManagar = this.model.query;
            var cloneQuery = queryManagar.clone();
            if (!(this._dataSource() instanceof ej.DataManager))
                this.model.currentViewData = this._dataSource();
            if (this._isLocalData && (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) && (!ej.isNullOrUndefined(this._cModifiedData) || !ej.isNullOrUndefined(this._cAddedRecord))) {
                if (ej.isNullOrUndefined(this._cAddedRecord)) {
                    for (var index = 0; index < this._primaryKeys.length; index++)
                        queryManagar = queryManagar.where(this._primaryKeys[index], ej.FilterOperators.equal, this._primaryKeyValues[index]);
                    var currentData = this._dataManager.executeLocal(queryManagar);
                    if (!(this._dataSource() instanceof ej.DataManager))
                        $.extend(this._dataSource()[$.inArray(currentData.result[0], this._dataSource())], this._cModifiedData);
                    else
                        $.extend(this._dataSource().dataSource.json[$.inArray(currentData.result[0], this._dataSource().dataSource.json)], this._cModifiedData);
                    this._cModifiedData = null;
                } else {
                    var tmpRcrd = this._cAddedRecord;
                    this._cAddedRecord = null;
                    (this._dataSource() instanceof ej.DataManager) ? this._dataSource().dataSource.json.unshift(tmpRcrd) : this._dataSource(undefined, true).splice(0, 0, tmpRcrd);
                }
                queryManagar.queries = cloneQuery.queries;
                if (!this.model.editSettings.showAddNewRow)
                    this.model.isEdit = false;
            }
            if (args && this.model.editSettings.allowDeleting && args.requestType == "delete" && this._excludeDetailRows().length == 1 && this.model.pageSettings.currentPage != 1)
                this._currentPage(this.model.pageSettings.totalPages - 1)
            if (args && this.model.editSettings.allowDeleting && args.requestType == "delete" && !ej.isNullOrUndefined(this._cDeleteData) && this._isLocalData) {
                if (!(this._dataSource() instanceof ej.DataManager)) {
                    var index = $.inArray(this._cDeleteData[0], this._dataSource());
                    this._dataSource(undefined, true).splice(index, 1);
                }
                else {
                    var index = $.inArray(this._cDeleteData[0], this._dataSource().dataSource.json);
                    this._dataSource().dataSource.json.splice(index, 1);
                }
            }
            if (this.model.sortSettings.sortedColumns.length) {
                var sortedGrp = [];
                for (var i = this.model.sortSettings.sortedColumns.length - 1; i >= 0; i--){
                    if(this.model.groupSettings.groupedColumns.indexOf(this.model.sortSettings.sortedColumns[i].field) == -1)
                        queryManagar.sortBy(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
                    else
                        sortedGrp.push({field: this.model.sortSettings.sortedColumns[i].field, direction: this.model.sortSettings.sortedColumns[i].direction })
                }
                for (var j = 0; j < sortedGrp.length ; j++){
                    queryManagar.sortBy(sortedGrp[j].field, sortedGrp[j].direction);
                }
            }

            if (this.model.allowSearching && this.model.searchSettings.key.length) {
                var searchDetails = this.model.searchSettings;
                searchDetails.fields = searchDetails.fields.length != 0 ? searchDetails.fields : this.getColumnFieldNames();
                queryManagar.search(searchDetails.key ,searchDetails.fields, searchDetails.operator || "contains", searchDetails.ignoreCase || true);
                if (!this.initialRender && args.requestType == "searching")
                    this._currentPage(1);
                if (!(this._dataSource() instanceof ej.DataManager))
                    this._filteredRecords = this._dataManager.executeLocal(queryManagar).result;
            }

            if (this.model.allowFiltering && this.model.filterSettings.filteredColumns.length) {
                var predicate, firstFilterCondition = this.model.filterSettings.filteredColumns[0];
                if (this._isExcelFilter) {
                    this._excelFilter.getPredicate(this.model.filterSettings.filteredColumns, null, true);
                    var predicates = this._excelFilter._predicates[0];
                    for (var prop in predicates) {
                        var obj = predicates[prop], isTake = obj["from"] != undefined;
                        if (isTake)
                            queryManagar.skip(obj["from"] == "top" ? 0 : this._gridRecordsCount - obj["take"]).take(obj["take"]);
                        else
                            predicate = predicate != undefined ? predicate["and"](obj) : obj;
                    }
                }
                else {
                    if (!firstFilterCondition.isComplex)
                        predicate = ej.Predicate(firstFilterCondition.field, firstFilterCondition.operator, firstFilterCondition.value, !firstFilterCondition.matchcase);
                    else
                        predicate = firstFilterCondition;
                    for (var i = 1; i < this.model.filterSettings.filteredColumns.length; i++) {
                        if (!this.model.filterSettings.filteredColumns[i].isComplex)
                            predicate = predicate[this.model.filterSettings.filteredColumns[i].predicate](this.model.filterSettings.filteredColumns[i].field, this.model.filterSettings.filteredColumns[i].operator, this.model.filterSettings.filteredColumns[i].value, !this.model.filterSettings.filteredColumns[i].matchcase);
                        else
                            predicate = predicate["and"](this.model.filterSettings.filteredColumns[i]);
                    }
                }
                predicate && queryManagar.where(predicate);
                if (this._isLocalData) {
                    var fresults = this._dataManager.executeLocal(queryManagar);
                    this._filteredRecordsCount = isTake ? fresults.result.length : fresults.count;
                    var lastPage = (this._filteredRecordsCount % this.model.pageSettings.pageSize == 0) ? (this._filteredRecordsCount / this.model.pageSettings.pageSize) : (parseInt(this._filteredRecordsCount / this.model.pageSettings.pageSize, 10) + 1);
                    if (this._currentPage() > lastPage)
                        this._currentPage(lastPage);
                    this._filteredRecords = this._dataManager.executeLocal(queryManagar).result;
                } else if (!ej.isNullOrUndefined(args) && args.requestType == ej.Grid.Actions.Filtering)
                    this._currentPage(1);
            }

            if (this.model.summaryRows) {
                this._setSummaryAggregate(queryManagar);
            }

            if (this.model.allowPaging || (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling)) {
                if (this._currentPage() == 0) {
                    if (this._prevPageNo == 0 || this._prevPageNo == null)
                        this._currentPage(1);
                    else
                        this._currentPage(this._prevPageNo);
                }
                queryManagar.page(this._currentPage(), this.model.pageSettings.pageSize);
            }

            if (this.model.allowGrouping) {
                var cloned = queryManagar.clone();
                if (this.model.allowPaging && this.model.groupSettings.groupedColumns.length) {
                    cloned.queries = cloned.queries.slice(0, cloned.queries.length - 1);
                }
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                    queryManagar.group(this.model.groupSettings.groupedColumns[i]);
                    cloned.group(this.model.groupSettings.groupedColumns[i]);
                }
                if (this.model.groupSettings.groupedColumns.length)
                    this._setAggreatedCollection(cloned);
            }
            if (args != undefined && args.requestType == "add" && this._isLocalData && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0)
                !(this._dataSource() instanceof ej.DataManager) ? this._dataSource().unshift(args.data) : this._dataSource().dataSource.json.unshift(args.data);
            if ((!ej.isNullOrUndefined(args) && args.action == "add") && !ej.isNullOrUndefined(this.model.parentDetails)) {
                var column = this.getColumnByField(this.model.parentDetails.parentKeyField);
                var ix = $.inArray(column, this.model.columns)
                if (ix == -1) {
                    var newdata = {};
                    newdata[this.model.parentDetails.parentKeyField] = this.model.parentDetails.parentKeyFieldValue;
                    $.extend(true, this.model.currentViewData[0], newdata);
                }
            }
            this._cloneQuery = queryManagar.clone();
                if (this._isLocalData) {
                var dataMgrJson = this._dataManager.dataSource.json;
                var dataSource = this._dataSource().dataSource;
                if (!ej.isNullOrUndefined(dataSource) && this._dataSource() instanceof ej.DataManager)
                    this._dataManager.dataSource.json = dataMgrJson != dataSource.json ? dataSource.json : dataMgrJson;
                var result = this._dataManager.executeLocal(queryManagar);
                if (this.model.scrollSettings.allowVirtualScrolling && this.model.pageSettings.currentPage == this.model.pageSettings.totalPages - 1)
                    this._prevPageRendered = true;
                if (this.model.scrollSettings.allowVirtualScrolling && !this._prevPageRendered && result.result.length != this.model.pageSettings.pageSize && this.model.pageSettings.totalPages == this.model.pageSettings.currentPage) {
                    var pageQuery = ej.pvt.filterQueries(queryManagar.queries, "onPage");
                    queryManagar.queries.splice($.inArray(pageQuery[0], queryManagar.queries), 1);
                    queryManagar.page(this._currentPage() - 1, this.model.pageSettings.pageSize);
                    var lastPageResult = this._dataManager.executeLocal(queryManagar);
                    lastPageResult.result.splice(0, result.result.length);
                    this._previousPageRecords = $.extend(true, [], lastPageResult.result);
                    this._previousPageLength = result.result.length;
                    this._currentPageData = result.result;
                    ej.merge(lastPageResult.result, result.result);
                    this.model.currentViewData = lastPageResult.result;
                    this._lastPageRendered = true;
                }
                else if (this._lastPageRendered && this.model.pageSettings.currentPage == this.model.pageSettings.totalPages - 1) {
                    var count = this.model.pageSettings.pageSize - this._previousPageLength;
                    for (var dupRow = 0; dupRow < count; dupRow++) {
                        var removeEle = this.getRows()[this.getRows().length - (this.model.pageSettings.pageSize - dupRow)];
                        removeEle.remove();
                    }
                    this._tempPageRendered = true;
                    this.model.currentViewData = result.result;
                }
                else
                    this.model.currentViewData = result.result;
                this._gridRecordsCount = result.count;
                this._remoteSummaryData = result.aggregates;
                this._searchCount = this._searchString.length ? result.count : null;
                this.model.groupSettings.groupedColumns.length && this._setAggregates();
            }

        },
        _initGridRender: function () {
            this.addInitTemplate();
            if (this.model.scrollSettings.frozenColumns > 0)
                this.addFrozenTemplate();
            this.model.allowGrouping && this.addGroupingTemplate();
            if (this.model.allowResizing || this.model.allowResizeToFit)
                this._resizer = new ej.gridFeatures.gridResize(this);
            if (this.model.keySettings)
                $.extend(this.model.keyConfigs, this.model.keySettings);
            if (this.model.allowTextWrap == true)
                this.element.addClass("e-wrap");
            this.render();
            this._trigger("dataBound", {});
            if (this.model.columnLayout == "fixed") {
                var headerTableWidth = this.model.scrollSettings.frozenColumns > 0 ? this.getHeaderTable().eq(0).width() + this.getHeaderTable().eq(1).width() : this.getHeaderTable().width();
                var operation = this.getHeaderContent().width() > headerTableWidth ? 'addClass' : 'removeClass';
                var headerTable = this.getHeaderTable();
                var contentTable = this.getContentTable();
                if (this.model.scrollSettings.frozenColumns > 0) {
                    headerTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getHeaderTable().eq(1) : this.getHeaderTable().eq(0);
                    contentTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getContentTable().eq(1) : this.getContentTable().eq(0);
                }
                headerTable[operation]('e-tableLastCell');
                contentTable[operation]('e-tableLastCell');
            }
            if (this.model.allowGrouping && ej.gridFeatures.dragAndDrop)
                this._headerCellgDragDrop();
            if (this.model.allowReordering && ej.gridFeatures.dragAndDrop) {
                this._headerCellreorderDragDrop();
                this._initIndicators();
            }
            this._wireEvents();
            if (this.model.allowGrouping && !ej.isNullOrUndefined(this.model.serverProperties)) {
                this.model._groupingCollapsed = this.model.serverProperties._groupingCollapsed;
                for (var i = 0; i < this.model._groupingCollapsed.length; i++) {
                    var content = this.getContent().find(".e-recordplusexpand");
                    var tr = content.filter("td[ej-mappingname='" + this.model._groupingCollapsed[i].key + "'    ][ej-mappingvalue='" + this.model._groupingCollapsed[i].value + "']");
                    if (tr.length > 1 && !ej.isNullOrUndefined(this.model._groupingCollapsed[i].parent)) {
                        var parent = this.model._groupingCollapsed[i].parent;
                        tr = tr.filter(function (e) { return $(this).parents(".e-tabletd").parent("tr").prev("tr").find(".e-recordplusexpand[ej-mappingvalue=" + parent + "]").length })
                    }

                    this.expandCollapse(tr);
                }
            }
            this.initialRender = false;
            if (this.model.width && !this.model.allowScrolling)
                this.element.width(this.model.width);
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding)
                this._processEditing();
            if (this.model.parentDetails) {  //refreshes parent scroller on child expand
                var id = this.model.parentDetails.parentID, parentObj = $("#" + id).data("ejGrid");
                parentObj.model.allowScrolling && parentObj._refreshScroller({ requestType: "refresh" });
            }
            if (this.element.closest('tr').hasClass('e-detailrow') && !this.model.parentDetails) {
                var parentObj = this.element.closest('tr.e-detailrow').closest('.e-grid').data("ejGrid");
                parentObj.model.allowScrolling && parentObj.getScrollObject().refresh();
            }
            if (this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel")) {
                this._renderFilterDialogs();
                if (this.model.enableResponsiveRow)
                    this._renderResponsiveFilter();
            }
            if (this.model.allowGrouping && this.model.showSummary)
                this._refreshGroupSummary();
        },
        _getMetaColGroup: function () {
            var $colgroup = ej.buildTag("colgroup");
            for (var i = 0; i < this.model.columns.length; i++) {
                var $col = $(document.createElement("col"));
                this.model.columns[i]["visible"] === false && $col.css("display", "none");
                !ej.isNullOrUndefined(this.model.columns[i]["cssClass"]) && $col.addClass(this.model.columns[i]["cssClass"]);
                if ( this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && $.inArray(this.model.columns[i]["field"], this.model.groupSettings.groupedColumns) != -1)
                    $col.css("display", "none");
                $colgroup.append($col);
            }
            return $colgroup;
        },
        _alternateRow: function () {
            return this.getIndex() % 2 == 0 ? "e-row" : "e-alt_row";
        },
        addInitTemplate: function () {
            var headerCellDiv = this.element.find(".e-headercelldiv:not(.e-emptyCell)"), templates = {}, firstVisible = true;
            var tbody = document.createElement('tbody'), $tbody = $(tbody);
            if (this.model.rowTemplate == null) {
                var tr = document.createElement('tr'),
                    $tr = $(tr),
                    columns = this.model.columns,
                    i;
                if (this._gridRecordsCount)
                    this._initColumns(this.model.currentViewData[0] != undefined ? this.model.currentViewData[0] : this.model.currentViewData.value);
                else if (this._isLocalData && (this._dataSource() != null && this._dataSource().length || (this._dataManager && this._dataManager.dataSource.json.length)))
                    this._initColumns(this._dataSource()[0] != undefined ? this._dataSource()[0] : this._dataManager.dataSource.json[0]);
                var helpers = { _gridFormatting: this.formatting };
                $.views.helpers(helpers);

                var viewHelper = {};
                viewHelper["_foreignKey"] = this._foreignKeyBinding; // move to common methods
                $.views.helpers(viewHelper);

                if (this.model.detailsTemplate || this.model.childGrid || this.model.detailsDataBound) {
                    var $tdDetailCell = ej.buildTag("td.e-detailrowcollapse", "<div class='e-icon e-gnextforward'></div>");
                    $tr.append($tdDetailCell);
                }
                for (i = 0; i < this.model.columns.length; i++) {
                    var $tdCell = ej.buildTag("td.e-rowcell");
                    if (!ej.isNullOrUndefined(columns[i]["tooltip"]) || columns[i]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
                        $tdCell.addClass("e-gridtooltip")
                    if (columns[i]["clipMode"] == ej.Grid.ClipMode.Ellipsis || columns[i]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
                        $tdCell.addClass("e-gridellipsis");
                    if (this.model.isResponsive)
                        $tdCell.attr("data-cell", this.model.columns[i]["headerText"]);
                    if (columns[i]["visible"] == false)
                        $tdCell.addClass("e-hide");
                    else {
                        if (firstVisible && (this.model.detailsTemplate != null || this.model.childGrid != null || this.model.detailsDataBound != null))
                            $tdCell.addClass('e-detailrowvisible');
                        firstVisible = false;
                    }
                    !this.model.groupSettings.showGroupedColumn && $tdCell.addClass("{{for ~groupedColumns}}" +
                        " {{if #data == '" + this.model.columns[i]["field"] + "'}}e-hide{{/if}}" +
                        "{{/for}}");
                    if (!ej.isNullOrUndefined(columns[i]["templateID"] || columns[i]["template"])) {
                        var viewHelper = {}, index, htxt = columns[i].headerText;
                        viewHelper["_" + this._id + "ColumnTemplating"] = ej.proxy(this._gridTemplate, null, this, index);
                        $.views.helpers(viewHelper);
                        if(!ej.isNullOrUndefined(htxt) && !ej.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
                            htxt = htxt.replace(/[^0-9\s\w]/g,"_");
                        $("#" + this._id + htxt + i + "_Template").remove();
                        var scriptElement = this._createTemplateElement(columns[i]);
                        if ((columns[i].field == "") || ej.isNullOrUndefined(columns[i].field))
                            this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
                        $tdCell.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "','" + i + "')}}");
                    } else {
                        var splits = (columns[i].field || "").split("."), sLen = splits.length - 1, braces = "";
                        while (sLen) {
                            braces += "(";
                            sLen--;
                        }
                        var columnType = columns[i].type || columns[i].editType
                        switch (columnType) {
                            case "boolean":
                            case "booleanedit":
                                if (this.model.locale != "en-US" && this._getLocalizedLabels("True") != ej.Grid.locale["en-US"]["True"] && columns[i]["displayAsCheckbox"] != true)
                                    $tdCell.html('{{if ' + columns[i].field + '}}' + this._getLocalizedLabels("True") + '{{else}}' + this._getLocalizedLabels("False") + '{{/if}}');
                                else
                                    $tdCell.addClass("e-boolrowcell").html("{{if #data['" + splits.join("']['") + "']}} <input type ='checkbox' disabled='disabled' checked='checked'></input>{{else}} <input type ='checkbox' disabled='disabled'></input> {{/if}}");
                                break;
                            default:
                                if (columns[i].disableHtmlEncode)
                                    $tdCell.html("{{html:" + "#data['" + splits.join("'] || {})['") + "']}}");
                                else
                                    $tdCell.html("{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}");
                        }
                        if (columns[i]["format"] != undefined && (!columns[i]["foreignKeyValue"] && !columns[i]["dataSource"]))
                            $tdCell.html("{{:~_gridFormatting('" + columns[i]["format"] + "'," + braces + "#data['" + splits.join("'] || {})['") + "'],'" + this.model.locale + "')}}");
                        if (columns[i]["foreignKeyValue"] && columns[i]["dataSource"]) {
                            var foreignKeyColumn = columns[i]["field"] != columns[i]["foreignKeyField"] ? columns[i]["field"] : columns[i]["foreignKeyField"];
                            var foreignColumnClone = $.extend(true, {}, columns[i]);
                            delete foreignColumnClone["dataSource"];
                            delete foreignColumnClone["validationRules"];
                            $tdCell.html("{{:~_foreignKey('" + JSON.stringify(foreignColumnClone) + "'," + braces +"#data['" + splits.join("'] || {})['") + "'],'" + this._id + "')}}");
                        }
                        if (columns[i]["isUnbound"]) {
                            var viewHelper = {};
                            viewHelper["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
                            $.views.helpers(viewHelper);
                            if ((ej.isNullOrUndefined(columns[i]["field"])) || (columns[i].field == ""))
                                this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
                            $("#" + this._id + columns[i].headerText.replace(/[^a-z0-9|s_]/gi, '')+ "_UnboundTemplate").remove();
                            divElement = this._createUnboundElement(columns[i]);
                            $tdCell.addClass("e-unboundcell").addClass("e-" + columns[i]["headerText"].replace(/[^a-z0-9|s_]/gi, '')+i).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                            this.model.scrollSettings.frozenColumns > 0 && $tdCell.addClass("e-frozenunbound");
                            this._isUnboundColumn = true;
                        }

                    }
                    if (columns[i]["textAlign"] == undefined)
                        columns[i]["textAlign"] = "left";
                    if (!this.phoneMode && columns[i]["textAlign"] != undefined) {
                        $tdCell.css("text-align", columns[i]["textAlign"]);
                        $(headerCellDiv[i]).css("text-align", columns[i]["textAlign"]);
                    }
                    if (!this.phoneMode && !ej.isNullOrUndefined(columns[i]["headerTextAlign"])) {
                        $(headerCellDiv[i]).css("text-align", columns[i]["headerTextAlign"]);
                    }
                    if (!ej.isNullOrUndefined(columns[i]["cssClass"])) {
                        $tdCell.addClass(columns[i]["cssClass"]);
                    }
                    if (!ej.isNullOrUndefined(columns[i]["priority"]))
                        $tdCell.addClass("e-table-priority-" + columns[i]["priority"]);
                    if (!ej.isNullOrUndefined(columns[i]["customAttributes"]))
                        $tdCell.attr(columns[i]["customAttributes"]);
                    $tdCell.attr("role", "gridcell");
                    $tr.append($tdCell);
                    if (this.model.enableAltRow) {
                        helpers["_" + this._id + "AlternateRow"] = this._alternateRow;
                        $.views.helpers(helpers);
                        $tr.addClass("{{:~_" + this._id + "AlternateRow()}}");
                    }
                    $tr.attr("role", "row");
                    if (this.model.scrollSettings.frozenColumns > 0 && this.model.scrollSettings.frozenColumns == i + 1) {
                        tbody.appendChild(tr);
                        templates[this._id + "_JSONFrozenTemplate"] = $tbody.html();
                        $tr.empty();
                        $tbody.empty();
                    }
                }
                tbody.appendChild(tr);
            }
            templates[this._id + "_JSONTemplate"] = this.model.rowTemplate != null ? $(this.model.rowTemplate).html() : $tbody.html();
            $.templates(templates);
        },
        
        
        render: function () {
            this.model.showSummary = this.model.summaryRows.length > 0 || this.model.showSummary;
            this._renderGridContent().insertAfter(this.element.children(".e-gridheader"));
            this.model.allowResizeToFit && this.setWidthToColumns();
            if (this.model.allowGrouping && ej.gridFeatures.dragAndDrop)
                this._groupHeaderCelldrag();
            if (this.model.showSummary && this._currentJsonData.length) {
                this._renderGridFooter().insertAfter(this.getContent());
                this._hideCaptionSummaryColumn();
            }
            this._initialEndRendering();

        },
        _createStackedRow: function (stackedHeaderRow, frozenHeader) {
            var $tr = ej.buildTag('tr.e-columnheader e-stackedHeaderRow');
            var sHeader = [], sCss = []; tAl = [];
            for (var c = 0; c < this.model.columns.length; c++) {
                var column = this.model.columns[c];
                if (column.visible != false) {
                    if (this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && this.model.groupSettings.groupedColumns.length > 0) {
                        if ($.inArray(column.field, this.model.groupSettings.groupedColumns) != -1)
                            continue;
                    }
                    var headerText = '', cssClass = '', txtAlign = '';
                    var sColumn = stackedHeaderRow.stackedHeaderColumns;
                    for (var col = 0; col < sColumn.length; col++) {
                        if (sColumn[col].column.indexOf(column.field) != -1) {
                            headerText = sColumn[col].headerText;
                            cssClass = sColumn[col]["cssClass"];
                            txtAlign = sColumn[col].textAlign;
                        }
                    }
                    sHeader.push(headerText);
                    sCss.push(cssClass);
                    tAl.push(txtAlign);
                }
            }
            var colsPanList = []
            for (var i = 0; i < sHeader.length; i++) {
                var colSpan = 1;
                for (var j = i + 1; j < sHeader.length; j++) {
                    if (sHeader[i] == sHeader[j]) {
                        colSpan++;
                    }
                    else
                        break;
                }
                colsPanList.push({ sapnCount: colSpan, headerText: sHeader[i], cssClass: sCss[i], txtAlign: tAl[i] })
                i += colSpan - 1;
            }
            var $tr = ej.buildTag('tr.e-columnheader e-stackedHeaderRow');
            var frzCol = this.model.scrollSettings.frozenColumns;
            if (this.model.allowScrolling && frzCol > 0) {
                var frozenColspanList = [];
                var forzenColumn = 0, index = 0, frzHideCol = 0;
                for (var i = 0; i < this.model.columns.length; i++) {
                    var col = this.model.columns[i];
                    if (i < frzCol && col.visible == false)
                        frzHideCol++;
                }
                forzenColumn = frzCol - frzHideCol;
                while (forzenColumn > 0) {
                    var spanC = colsPanList[index].sapnCount;
                    if (colsPanList[index].sapnCount < forzenColumn) {
                        frozenColspanList.push(colsPanList[index])
                        if (!frozenHeader)
                            colsPanList.splice(index, 1);
                        else
                            index++;
                    }
                    else if (colsPanList[index].sapnCount > forzenColumn) {
                        colsPanList[index].sapnCount = colsPanList[index].sapnCount - forzenColumn
                        if (frozenHeader)
                            frozenColspanList.push({ sapnCount: forzenColumn, headerText: colsPanList[index].headerText });
                    }
                    else {
                        frozenColspanList.push(colsPanList[index])
                        if (!frozenHeader)
                            colsPanList.splice(index, 1);
                    }
                    forzenColumn -= spanC;
                }
                if (frozenHeader)
                    colsPanList = frozenColspanList
            }
            if (this.model.detailsTemplate || this.model.childGrid || this.model.detailsDataBound)
                $tr.append(ej.buildTag('th.e-headercell e-detailheadercell', '<div></div>'));
            for (var c = 0; c < colsPanList.length; c++) {
                var $th = ej.buildTag('th.e-headercell e-stackedHeaderCell e-default', colsPanList[c].headerText, {}, { 'colspan': colsPanList[c].sapnCount });
                $th.css("textAlign", colsPanList[c].txtAlign);
                $tr.append($th);
                if (colsPanList[c]["cssClass"] != undefined)
                    $th.addClass(colsPanList[c]["cssClass"]);
            }
            return $tr;
        },
        _renderGridHeaderInternalDesign: function (columns, frozenHeader) {
            var $table = ej.buildTag('table.e-table', "", {}, { cellspacing: "0.25px", role: "grid" });
            var $thead = ej.buildTag('thead');
            var $tbody = ej.buildTag('tbody.e-hide');
            var $columnHeader = ej.buildTag('tr.e-columnheader');
            var $colGroup = $(document.createElement('colgroup'));
            var $rowBody = $(document.createElement('tr'));
            if (this.model.detailsTemplate || this.model.childGrid || this.model.detailsDataBound) {
                $columnHeader.append(ej.buildTag('th.e-headercell e-detailheadercell', '<div></div>'));
                $colGroup.append(this._getIndentCol());
            }
            if (this.model.showStackedHeader) {
                for (var index = 0; index < this.model.stackedHeaderRows.length; index++) {
                    var $tr = this._createStackedRow(this.model.stackedHeaderRows[index], frozenHeader);
                    $thead.append($tr);
                }
            }
            for (var columnCount = 0; columnCount < columns.length; columnCount++) {
                var $headerCell = ej.buildTag('th.e-headercell e-default', "", {}, { role: "columnheader" });
                var bodyCell = document.createElement('td');
                var $headerCellDiv = ej.buildTag('div.e-headercelldiv', columns[columnCount]["headerText"] === undefined ? columns[columnCount]["headerText"] = columns[columnCount]["field"] : columns[columnCount]["headerText"], {}, { "ej-mappingname": columns[columnCount]["field"] });
                if (columns[columnCount].disableHtmlEncode)
                    $headerCellDiv.text(columns[columnCount]["headerText"]);
                if (!ej.isNullOrUndefined(columns[columnCount]["tooltip"]) || columns[columnCount]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
                    $headerCellDiv.addClass("e-gridtooltip")
                if (columns[columnCount]["clipMode"] == ej.Grid.ClipMode.Ellipsis || columns[columnCount]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
                    $headerCellDiv.addClass("e-gridellipsis");
                $headerCell.append($headerCellDiv);
                if (this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel") &&
                (columns[columnCount]["allowFiltering"] == undefined ||
                    columns[columnCount]["allowFiltering"] === true)) {
                    if (!(!ej.isNullOrUndefined(columns[columnCount]["templateID"] || columns[columnCount]["template"] || columns[columnCount]["isUnbound"]) && (columns[columnCount].field == "" || ej.isNullOrUndefined(columns[columnCount].field))))
                        var filtericon = 'e-filterset';
                    if (!this.initialRender && this.model.filterSettings.filteredColumns) {
                        for (var i = 0; i < this.model.filterSettings.filteredColumns.length; i++) {
                            if (this.model.filterSettings.filteredColumns[i].field == columns[columnCount].field) {
                                filtericon = 'e-filterset e-filteredicon e-filternone';
                            }
                        }
                    }
                    $headerCell.append(ej.buildTag('div.e-filtericon e-icon ' + filtericon));
                    if (ej.browserInfo().name == "msie" && ej.browserInfo().version == "8.0" && this.model.enableRTL)
                        $($headerCellDiv).css("padding", "0 0 0 2em");
                }
                var col = document.createElement('col');
                if (columns[columnCount]["priority"])
                    $(bodyCell).addClass("e-table-priority-" + columns[columnCount]["priority"]);
                $rowBody.append(bodyCell);
                $columnHeader.append($headerCell);
                $colGroup.append(col);
                if (columns[columnCount]["visible"] === false) {
                    $headerCell.addClass("e-hide") && $(col).css("display", "none")
                    if ($.inArray(columns[columnCount].headerText, this._hiddenColumns) == -1 && $.inArray(columns[columnCount].field, this._hiddenColumnsField) == -1)
                        this._hiddenColumns.push(columns[columnCount].headerText) && columns[columnCount].field != "" ? this._hiddenColumnsField.push(columns[columnCount].field) : this._hiddenColumnsField.push(columns[columnCount].headerText);
                    if ($.inArray(columns[columnCount].field, this._visibleColumnsField) != -1)
                        this._visibleColumnsField.splice($.inArray(columns[columnCount].field, this._visibleColumnsField), 1) && this._visibleColumns.splice($.inArray(columns[columnCount].headerText, this._visibleColumns), 1)
                }
                else {
                    this._visibleColumns.push(columns[columnCount].headerText) && columns[columnCount].field != "" ? this._visibleColumnsField.push(columns[columnCount].field) : this._visibleColumnsField.push(columns[columnCount].headerText);
                    columns[columnCount]["visible"] = true;
                    if ($.inArray(columns[columnCount].field == "" ? columns[columnCount].headerText : columns[columnCount].field, this._hiddenColumnsField) != -1)
                        this._hiddenColumnsField.splice($.inArray(columns[columnCount].field == "" ? columns[columnCount].headerText : columns[columnCount].field, this._hiddenColumnsField), 1) && this._hiddenColumns.splice($.inArray(columns[columnCount].headerText, this._hiddenColumns), 1)
                }
                if (this.model.showColumnChooser && columns[columnCount]["showInColumnChooser"] !== false)
                    columns[columnCount]["showInColumnChooser"] = true;
                if (this.model.allowResizing && columns[columnCount]["allowResizing"] !== false)
                    columns[columnCount]["allowResizing"] = true;
                if (!ej.isNullOrUndefined(columns[columnCount]["headerTextAlign"]))
                    $headerCellDiv.css("text-align", columns[columnCount]["headerTextAlign"]);
                else if (columns[columnCount]["textAlign"] != undefined)
                    $headerCellDiv.css("text-align", columns[columnCount]["textAlign"]);
                columns[columnCount]["allowResizing"] === false && this._disabledResizingColumns.push(columns[columnCount].field);
                columns[columnCount]["allowSorting"] === false && this._disabledSortableColumns.push(columns[columnCount].field);
                columns[columnCount]["allowGrouping"] === false && this._disabledGroupableColumns.push(columns[columnCount].field);
                columns[columnCount]["allowEditing"] === false && this._disabledEditableColumns.push(columns[columnCount].field);
                if (!ej.isNullOrUndefined(columns[columnCount]["cssClass"])) {
                    $headerCell.addClass(columns[columnCount]["cssClass"]);
                    $(col).addClass(columns[columnCount]["cssClass"]);
                }
                if (!ej.isNullOrUndefined(columns[columnCount]["headerTemplateID"])) {
                    $headerCellDiv.html($(columns[columnCount]["headerTemplateID"]).hide().html()).parent().addClass("e-headertemplate");
                    var index = $.inArray(columns[columnCount].field, this._disabledGroupableColumns);
                    index == -1 && ej.isNullOrUndefined(columns[columnCount].field) && this._disabledGroupableColumns.push(columns[columnCount].field);
                }
                if (this.model.allowGrouping && this.model.groupSettings.showToggleButton && $.inArray(columns[columnCount].field, this._disabledGroupableColumns) == -1 && !ej.isNullOrUndefined(columns[columnCount].field) && columns[columnCount].field != "") {
                    if ($.inArray(columns[columnCount].field, this.model.groupSettings.groupedColumns) != -1)
                        $headerCellDiv.append(this._getToggleButton().addClass("e-toggleungroup"));
                    else
                        $headerCellDiv.append(this._getToggleButton().addClass("e-togglegroup"));
                }
                if (this.model.isResponsive)
                    $headerCell.attr("title", columns[columnCount].headerText);
                if (columns[columnCount]["priority"]) {
                    $headerCell.attr("data-priority", columns[columnCount]["priority"]).addClass("e-table-priority-" + columns[columnCount]["priority"]);
                    $(col).addClass("e-table-priority-" + columns[columnCount]["priority"]);
                }
                if (this.initialRender) {
                    if (typeof (columns[columnCount].width) == "string" && columns[columnCount].width.indexOf("%") != -1)
                        this.columnsWidthCollection.push(parseInt(columns[columnCount]["width"]) / 100 * this.element.width());
                    else
                        this.columnsWidthCollection.push(columns[columnCount]["width"]);
                }
                if (columns[columnCount]["width"] == undefined && this.model.commonWidth !== undefined)
                    this.columnsWidthCollection[columnCount] = this.model.commonWidth;
                this._fieldColumnNames[columns[columnCount].headerText] = columns[columnCount].field;
                this._headerColumnNames[columns[columnCount].field] = columns[columnCount].headerText;
                this.model.allowFiltering && ej.getObject("allowFiltering",columns[columnCount]) !== false  && ("menu" == this.model.filterSettings.filterType || this._isExcelFilter) && $headerCell.addClass("e-headercellfilter");
            }
            $thead.append($columnHeader);
            $tbody.append($rowBody);
            $table.append($colGroup).append($thead).append($tbody);
            return $table;
        },
        _renderGridHeader: function () {
            var $div = ej.buildTag('div.e-gridheader'), temp, $frozenDiv, $movableDiv;
            var $innerDiv = ej.buildTag('div');
            if (this.model.allowScrolling)
                $innerDiv.addClass("e-headercontent");
            this.setGridHeaderContent($div);
            if (this.initialRender) {
                this.columnsWidthCollection = [];
                this._hiddenColumns = [];
                this._hiddenColumnsField = [];
            }
            this._visibleColumns = [];
            this._visibleColumnsField = [];
            this._disabledGroupableColumns = [];
            this._fieldColumnNames = {};
            this._headerColumnNames = {};
            if (this.model.scrollSettings.frozenColumns > 0) {
                $frozenDiv = ej.buildTag("div.e-frozenheaderdiv", this._renderGridHeaderInternalDesign(this.model.columns.slice(0, this.model.scrollSettings.frozenColumns), true));
                $movableDiv = ej.buildTag("div.e-movableheader", ej.buildTag("div.e-movableheaderdiv", this._renderGridHeaderInternalDesign(this.model.columns.slice(this.model.scrollSettings.frozenColumns), false)));
                $innerDiv.append($frozenDiv).append($movableDiv);
            } else
                $innerDiv.append(this._renderGridHeaderInternalDesign(this.model.columns));
            $div.html($innerDiv);
            if (this.model.isResponsive)
                $div.addClass("e-textover");
            this.setGridHeaderTable(this.getHeaderContent().find(".e-table"));
            return $div;
        },
        _renderGridContent: function () {
            var $div = ej.buildTag('div.e-gridcontent');
            var $innderDiv = ej.buildTag('div');
            var $table = ej.buildTag('table.e-table', "", {}, { cellspacing: "0.25px" });
            var $tbody = $(document.createElement('tbody'));
            $table.append(this.getHeaderTable().find('colgroup').clone()).append($tbody);
            $innderDiv.html($table);
            $div.html($innderDiv);
            this.setGridContentTable($table);
            this.setGridContent($div);
            $table.attr("role", "grid");
            var args = {};
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length) {
                if (this.initialRender) {
                    args.columnName = this.model.groupSettings.groupedColumns[this.model.groupSettings.groupedColumns.length - 1];
                    if (!this.model.groupSettings.showGroupedColumn) {
                        for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                            var col = this.model.groupSettings.groupedColumns[i];
                            if ($.inArray(col, this._hiddenColumnsField) == -1) {//updated for
                                this._hiddenColumnsField.push(col);//updated for
                                this.getColumnByField(col).visible = false;
                            }
                        }
                    }
                }
                args.requestType = ej.Grid.Actions.Grouping;
            } else
                args.requestType = ej.Grid.Actions.Refresh;
            if (this._dataSource() == null || this._dataSource().length == 0) {
                var $emptyTd = ej.buildTag('td.emptyrecord', this._getLocalizedLabels("EmptyRecord"), {}, { colSpan: this.model.columns.length });
                $tbody.append($(document.createElement("tr")).append($emptyTd));
                this.setWidthToColumns();
                if (this.model.groupSettings.groupedColumns.length && this.initialRender)
                    this.sendDataRenderingRequest(args)
            } else
                this.sendDataRenderingRequest(args);
            if (this._isCaptionSummary && args.requestType == "grouping" && this.model.groupSettings.groupedColumns.length > 1) {
                var colgroup = this.getContentTable().find(".e-table").not(".e-recordtable").children("colgroup");
                var $cols1 = $(this.getContentTable().find(".e-recordtable")[0]).children("colgroup").find("col");
                for (i = 0; i < colgroup.length; i++) {
                    var colCount = $(colgroup[i]).find("col").length;
                    $(colgroup[i]).find("col:gt(" + (colCount - $cols1.length - 1) + ")").remove();
                    $(colgroup[i]).append($cols1.clone());
                }
            }
            return $div;
        },
        
        print: function () {
            var args = {}; args.requestType = "print";
            this._printselectrows = this.getContentTable().find('tr[aria-selected="true"]');
            
            this._trigger("actionBegin", args);
            var allowPaging = this.model.allowPaging;
            var elementClone = this.element.clone();
            if (this.model.allowPaging && this.model.pageSettings.printMode == "currentpage") {
                this.getPager().css('display', 'none');
                elementClone = this.element.clone();
                if (!this.model.allowScrolling) {
                    this.refreshContent();
                    this.getPager().css('display', 'block');
                }
            }
            else if (allowPaging) {
                this.model.allowPaging = false;
                this.refreshContent();
                this.getPager().css('display', 'none');
                elementClone = this.element.clone();
                this.model.allowPaging = true;
                if (!this.model.allowScrolling) {
                    this.refreshContent();
                    this.getPager().css('display', 'block');
                }
            }
            if (this.model.allowScrolling) {
                var scrollWidth = this.model.scrollSettings.width, scrollHeight = this.model.scrollSettings.height;
				if (this.getScrollObject().isVScroll() || this.getScrollObject().isHScroll()) {
					var scrollContent = this.getContent().find('.e-content')[0];
					elementClone.find('.e-gridcontent').height(scrollContent.scrollHeight);
					elementClone.find('.e-gridcontent').ejScroller({ width: scrollContent.scrollWidth, height: scrollContent.scrollHeight });
					elementClone.width(scrollContent.scrollWidth);
				}
                if (this.model.allowPaging) {
                    this.refreshContent();
                    this.getPager().css('display', 'block');
                }
            }
            if (this.model.toolbarSettings.showToolbar)
                elementClone.find(".e-gridtoolbar").remove();
            args = { requestType: "print", element: elementClone, selectedRows: this._printselectrows };
            this._trigger("beforePrint", args);
            if (!ej.isNullOrUndefined(args.element))
                elementClone = args.element;
            ej.print(elementClone);
            args.requestType = "print";
            this._trigger("actionComplete", args);
        },
        
         "export": function (action, serverEvent, multipleExport) {
            var modelClone = $.extend(true, {}, this.model);
            var proxy = this;
            this._locale = this.model.locale;
            if (!multipleExport)
                modelClone = this._getModifyExportModel(modelClone);
            for (i = 0; i < this.model.filterSettings.filteredColumns.length; i++) {
                if (this.model.filterSettings.filteredColumns[i].predicates instanceof (Array)) {
                    for (j = 0; j < this.model.filterSettings.filteredColumns[i].predicates.length; j++) {
                        var predicate = JSON.parse(JSON.stringify(this.model.filterSettings.filteredColumns[i].predicates[j]));
                        predicate.isComplex = "true";
                        modelClone.filterSettings.filteredColumns.splice(i, 0, predicate);
                    }
                    modelClone.filterSettings.filteredColumns.splice(i + 2, 1)
                }
            }
            var attr = { action: action, method: 'post', "data-ajax": "false" };
            var form = ej.buildTag('form', "", null, attr);
            var gridob = this;
            if (this.ignoreOnExport) {
                for (var i = 0; i < this.ignoreOnExport.length; i++) {
                    delete modelClone[this.ignoreOnExport[i]];
                }
            }
            if (ej.raiseWebFormsServerEvents) {
                var args = { model: modelClone, originalEventType: serverEvent };
                var clientArgs = { model: JSON.stringify(modelClone) };
                ej.raiseWebFormsServerEvents(serverEvent, args, clientArgs);
                setTimeout(function () {
                    ej.isOnWebForms = true;
                }, 1000);
            }
            else {
                var gridobjectArray = {};
                if (multipleExport) {
                    $('body').find('.e-grid').each(function (index, object) {
                        var gridObject = $(object).data('ejGrid');
                        if (!ej.isNullOrUndefined(gridObject)) {
                            var modelClone = JSON.parse(JSON.stringify(gridObject.model));
                            modelClone = proxy._getModifyExportModel(modelClone);
                            if (gridob.ignoreOnExport) {
                                for (var i = 0; i < gridob.ignoreOnExport.length; i++) {
                                    delete modelClone[gridob.ignoreOnExport[i]];
                                }
                                gridobjectArray[index] = JSON.stringify(modelClone);
                                var inputAttr = { name: 'GridModel', type: 'hidden', value: JSON.stringify(modelClone) }
                                var input = ej.buildTag('input', "", null, inputAttr);
                                form.append(input);
                            }
                        }
                    });
                }
                else {
                    var inputAttr = { name: 'GridModel', type: 'hidden', value: JSON.stringify(modelClone) }
                    var input = ej.buildTag('input', "", null, inputAttr);
                    form.append(input);
                    form.append(this);
                }
                $('body').append(form);
                form.submit();
            }
            setTimeout(function () {
                proxy.model.locale = proxy._locale;
            }, 0);
            return true;
        },
        _getModifyExportModel:function(modelClone){
            var tempObj = {}
            $.extend(tempObj, ej.Grid.locale["en-US"], ej.Grid.locale[modelClone.locale]);
            var temp = tempObj.GroupCaptionFormat;
            var split1 = temp.indexOf("{{if");
            var split2 = temp.indexOf(" {{else}}");
            var grpText = temp.slice(split1, split2).replace("{{if count == 1 }}", "");
            var localeProp = { EmptyRecord: tempObj.EmptyRecord, GroupCaptionFormat: temp.slice(0, split1), GroupText: grpText };
            this.model.locale = modelClone.locale.concat(JSON.stringify(localeProp));
            modelClone.locale = modelClone.locale.concat(JSON.stringify(localeProp));
            for (var i = 0; i < modelClone.columns.length; i++) {
                if (modelClone.columns[i].editType != undefined) {
                    switch (modelClone.columns[i].editType) {
                        case "stringedit":
                        case "edittemplate":
                            modelClone.columns[i].editType = "string";
                            break;
                        case "numericedit":
                            modelClone.columns[i].editType = "numeric";
                            break;
                        case "dropdownedit":
                            modelClone.columns[i].editType = "dropdown";
                            break;
                        case "booleanedit":
                            modelClone.columns[i].editType = "boolean";
                            break;
                        default:
                            break;
                    }
                }
            }
            for (var i = 0; i < modelClone.filterSettings.filteredColumns.length; i++) {
                if (modelClone.filterSettings.filteredColumns[i].operator == "equal")
                    modelClone.filterSettings.filteredColumns[i].operator = "equals";
                else if (modelClone.filterSettings.filteredColumns[i].operator == "notequal")
                    modelClone.filterSettings.filteredColumns[i].operator = "notequals";
            }
            if (modelClone.showStackedHeader) {
                modelClone.stackedHeaderRow = modelClone.stackedHeaderRows;
                for (var i = 0; i < modelClone.stackedHeaderRow.length; i++) {
                    modelClone.stackedHeaderRow[i].stackedHeaderColumn = modelClone.stackedHeaderRow[i].stackedHeaderColumns;
                }
            }
            return modelClone
        },
        sendDataRenderingRequest: function (args) {
            if (this._templateRefresh) {
                this.refreshTemplate();
                this._templateRefresh = false;
            }
            this._previousColumnIndex = null;
            this._previousRowCellIndex = null;
            this._previousIndex = null;
            if (args.requestType == "add" || args.requestType == "grouping" || (this.model.currentViewData != null && this.model.currentViewData.length)) {
                switch (args.requestType) {
                    case ej.Grid.Actions.Refresh:
                    case ej.Grid.Actions.Paging:
                    case ej.Grid.Actions.Sorting:
                    case ej.Grid.Actions.Filtering:
                    case ej.Grid.Actions.Save:
                    case ej.Grid.Actions.Cancel:
                    case ej.Grid.Actions.Delete:
                    case ej.Grid.Actions.Search:
                    case ej.Grid.Actions.Reorder:
                    case ej.Grid.Actions.BatchSave:
                        var cloneGroupedColumns = this.model.groupSettings.groupedColumns
                        if(this.model.allowGrouping && args.requestType == ej.Grid.Actions.Refresh && cloneGroupedColumns.length == 0 && this.element.find(".e-grouptopleftcell").length > 0) {
                            var $header = this.element.children(".e-gridheader");
                            $header.find("div").first().empty().append(this._renderGridHeader().find("table"));
                        }
                        if(!this.model.allowGrouping)
                            cloneGroupedColumns = [];
                        if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                            $("#" + this._id + "_externalEdit").css("display", "none");
                        if (cloneGroupedColumns.length == 0) {
                            var temp = document.createElement('div'), temp1, insertIndex = -1, isRemoteAdaptor = false;
                            if (!this.phoneMode)
                                this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
                            (this.model.detailsTemplate != null || this.model.childGrid != null || this.model.detailsDataBound != null) && this.getContentTable().find("colgroup").first().prepend(this._getIndentCol());
                            var currentPage = this._currentPage();
                            if ((this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "normal") && (args.requestType == "cancel" || args.requestType == "save"))
                                this._editFormHeight = this.element.find(".gridform").closest("tr").height();
     
                            if (this.model.scrollSettings.frozenColumns > 0)
                                temp.innerHTML = this._renderByFrozenDesign();
                            else {
                                temp.innerHTML = ['<table>', $.render[this._id + "_JSONTemplate"](this.model.currentViewData), '</table>'].join("");
                                if (args.data) {
                                    temp1 = document.createElement('div');
                                    temp1.innerHTML = ['<table>', $.render[this._id + "_JSONTemplate"](args.data), '</table>'].join("");
                                    if (this._dataSource() instanceof ej.DataManager && args.requestType == ej.Grid.Actions.Save) {
                                        insertIndex = this._getDataIndex(this.model.currentViewData, args.data);
                                        isRemoteAdaptor = this._dataSource().adaptor instanceof ej.remoteSaveAdaptor;
                                    }
                                }
                                var tableEle = this.getContentTable().get(0);
                                var tbodyEle = tableEle.lastChild;
                                var rindex = this.getContentTable().first().find('tbody').first();
                                if ((args.requestType == "save" || args.requestType == "cancel") && this.model.editSettings.editMode != "batch") {
                                    if (this.model.editSettings.editMode.indexOf("inlineform") != -1)
                                        rowIndex = !ej.isNullOrUndefined(args.selectedRow) ? args.selectedRow : this._selectedRow();
                                    else
                                        rowIndex = this.getContentTable().find('.e-' + args.action + 'edrow').index();
                                    var a = this._currentTrIndex;
                                    if (rowIndex == -1)
                                        rowIndex = a;
                                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                                        if (this.model.editSettings.editMode == "inlineform")
                                            var rowTr = $($(tbodyEle.childNodes).not('.e-detailrow')[rowIndex]);
                                        else
                                            var rowTr = $(tbodyEle.childNodes[rowIndex]);
                                        var rowEle = $(tbodyEle.childNodes).not('.e-detailrow');
                                        for (var i = 0; i < rowEle.length; i++) {
                                            if (rowTr.is(rowEle[i]))
                                                rowIndex = i;
                                        }
                                    }

                                    if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                                        if (args.action == "add" && !this.getContentTable().find(".e-addedrow").length) break;
                                        $oldChild = this.getContentTable().find('.e-addedrow').get(0);
                                        $editedTr = this.getContentTable().find('.e-editedrow');
                                        $newChild = ($editedTr.length || args.requestType == "cancel") ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;
                                        if (this.model.sortSettings.sortedColumns.length && this._currentJsonData.length > 0 || !ej.isNullOrUndefined(this._searchCount))
                                            this.refreshContent();
                                        else if ($editedTr.length) {
                                            if (this.model.editSettings.showAddNewRow && this.model.editSettings.rowPosition == "top")
                                                rowIndex = rowIndex - 1;
                                            $newChild = temp.firstChild.firstChild.childNodes[rowIndex];
                                            if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                                                $oldChild = $editedTr.prev('tr').get(0);
                                                $editedTr.remove();
                                            } else
                                                $oldChild = $editedTr.get(0);
                                            var $newChildObj = $($newChild), $oldChildObj = $($oldChild);
                                            if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $oldChildObj.next('tr.e-detailrow:visible').length) {
                                                var $target = $newChildObj.find('.e-detailrowcollapse');
                                                $target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                                            }
                                            if (args.requestType == "cancel") {
                                                if (this.model.editSettings.showAddNewRow)
                                                    this.getContentTable().find('.e-addedrow').addClass("e-showaddrow");
                                                $oldChildObj.replaceWith($newChildObj);
                                            } else if (!ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount < this._previousFilterCount) {
                                                if (this.model.detailsTemplate != null && $oldChildObj.next('tr.e-detailrow').length)
                                                    tbodyEle.removeChild($oldChildObj.next('tr.e-detailrow').get(0));
                                                $oldChildObj.remove();
                                                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && cloneGroupedColumns.length == 0)
                                                    tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);
                                            } else {
                                                tbodyEle.replaceChild($newChild, $oldChild);
                                            }
                                        } else {
                                            var $newChildObj = $($newChild), $oldChildObj = $($oldChild);
                                            if (args.action == "add" && args.requestType == "save" && this.model.editSettings.showAddNewRow && this.model.allowPaging && this.model.pageSettings.pageSize <= this._currentJsonData.length)
                                                this.model.editSettings.rowPosition == "bottom" ? tbodyEle.lastChild.previousSibling.remove() : tbodyEle.lastChild.remove();
                                            if (args.requestType == "cancel" || this._dataSource() instanceof ej.DataManager || this._currentPage() != 1 || (args.requestType == "save" && !ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount == this._previousFilterCount)) {
                                                if (!ej.isNullOrUndefined($oldChild)) {
                                                    $oldChildObj.remove();
                                                    if (this._dataSource() instanceof ej.DataManager && insertIndex != -1) {
                                                        if (insertIndex == 0)
                                                            tbodyEle.insertBefore($newChild, tbodyEle.children[insertIndex]);
                                                        else
                                                            $newChildObj.insertAfter(tbodyEle.children[insertIndex - 1]);
                                                    }
                                                    else if ((!(this._dataSource() instanceof ej.DataManager) || isRemoteAdaptor) && this._currentPage() != 1 && args.requestType == "save")
                                                        $(tbodyEle).prepend($(temp.firstChild.firstChild.firstChild));
                                                    if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && cloneGroupedColumns.length == 0 &&
                                                        ((this._dataSource() instanceof ej.DataManager && insertIndex == -1 && (!isRemoteAdaptor && args.requestType != "save")) ||
                                                        (args.requestType != "save" && !(this._dataSource() instanceof ej.DataManager))) && (args.requestType == "cancel" && !this.model.editSettings.showAddNewRow))
                                                        tableEle.lastChild.appendChild(temp.firstChild.firstChild.lastChild);
                                                }
                                                if (args.requestType == "cancel" && this._selectedRow() != -1)
                                                    this.clearSelection();

                                            } else if (this.model.currentViewData.length == 1) {
                                                $(tbodyEle).empty();
                                                tbodyEle.appendChild($newChild);
                                            } else if (this.model.editSettings.rowPosition == "bottom") {
                                                rindex.prepend($oldChild);
                                                tbodyEle.replaceChild($newChild, $oldChild);
                                            } else
                                                tbodyEle.replaceChild($newChild, $oldChild);
                                        }
                                    } else if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
                                        if (args.action == "add" && !this.element.find(".e-addedrow").length) break;
                                        $editedTr = this.element.find('.e-editedrow');
                                        if (args.requestType == "cancel" || (!$editedTr.length && !ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount == this._previousFilterCount)) {
                                            $newChild = temp.firstChild.firstChild.childNodes[rowIndex];
                                            $oldChild = tbodyEle.childNodes[rowIndex];
                                            var $newChildObj = $($newChild), $oldChildObj = $($oldChild);
                                            $oldChildObj.replaceWith($newChildObj);
                                            this.clearSelection();
                                            this.model.allowPaging && this._refreshGridPager();

                                        } else if ($editedTr.length) {
                                            $newChild = temp.firstChild.firstChild.childNodes[rowIndex];
                                            $oldChild = this._excludeDetailRows(tbodyEle.childNodes)[rowIndex];
                                            if (this.model.allowCellMerging != null) {
                                                var $oldChildObj = $($oldChild);
                                                if ($($oldChild.childNodes).hasClass("e-merged")) {
                                                    var index = $oldChildObj.children('.e-merged').index();
                                                    var count = $oldChild.children[index].colSpan;
                                                    for (var i = 0 ; i < count; i++) {
                                                        $newChild.childNodes[index + i].className += " e-merged e-hide";
                                                        $newChild.childNodes[index].colSpan = i + 1;
                                                    }
                                                }
                                            }
                                            if (this.model.detailsTemplate != null)
                                                $oldChild = $(tbodyEle.childNodes).not('.e-detailrow').eq(rowIndex).get(0);
                                            if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $oldChildObj.next('tr.e-detailrow:visible').length) {
                                                var $target = $($newChild).find(".e-detailrowcollapse");
                                                $target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                                            }
                                            if (!ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount < this._previousFilterCount) {
                                                var $oldChildObj = $($oldChild);
                                                if (this.model.detailsTemplate != null && $oldChildObj.next('tr.e-detailrow').length)
                                                    tbodyEle.removeChild($oldChildObj.next('tr.e-detailrow').get(0));
                                                $oldChildObj.remove();
                                                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length)
                                                    tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);
                                            } else
                                                tbodyEle.replaceChild($newChild, $oldChild);
                                        } else if (this.model.currentViewData.length == 1 && this.getContentTable().find('td.e-rowcell').length == 0) {
                                            $newChild = temp.firstChild.firstChild.firstChild;
                                            $(tbodyEle).empty();
                                            tbodyEle.appendChild($newChild);
                                        } else {
                                            newChild = ($editedTr.length || args.requestType == "cancel") ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;
                                            if (!(this._dataSource() instanceof ej.DataManager)) {
                                                if (this._currentPage() == 1)
                                                    this.getContentTable().find('tbody').first().prepend($(newChild));
                                                else
                                                    this.getContentTable().find('tbody').first().prepend($(temp.firstChild.firstChild.firstChild));
                                                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length)
                                                    tbodyEle.removeChild(tbodyEle.lastChild);
                                            }
                                            else if (insertIndex != -1) {
                                                if (insertIndex == 0)
                                                    tbodyEle.insertBefore(newChild, tbodyEle.children[insertIndex]);
                                                else
                                                    $(newChild).insertAfter(tbodyEle.children[insertIndex - 1]);
                                                if (this.model.allowPaging && (this.model.pageSettings.pageSize <= this.model.currentViewData.length || insertIndex == this.model.pageSettings.pageSize - 1))
                                                    tbodyEle.removeChild(tbodyEle.lastChild);
                                            }
                                            if (this.model.detailsTemplate != null && $(tableEle.lastChild.lastChild).children('.e-detailrowexpand').length)
                                                tbodyEle.removeChild(tbodyEle.lastChild);
                                        }
                                    }
                                    this._gridRows = tableEle.rows;
                                    if (this.model.enableAltRow)
                                        this._refreshAltRow();
                                } else if (args.requestType == "delete") {
                                    if (this._isUnboundColumn) {
                                        $editedrow = this.element.find('.e-editedrow');
                                        $oldChild = this.getContentTable().find('.e-editedrow').get(0);
                                        $newChild = ($editedrow.length) ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;

                                        if ($editedrow.length != 0 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")) {
                                            $($oldChild).replaceWith($($newChild));
                                        }
                                        else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                                            $oldChild = $editedrow.prev('tr').get(0);
                                            $editedrow.remove();
                                        }
                                        else
                                            $oldChild = $editedrow.get(0);
                                    }
                                    if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && this.getContentTable()[0].rows.length != this.model.currentViewData.length) {
                                        if (this.getContentTable().find("tr").length && this._excludeDetailRows().length)
                                            tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);
                                        else
                                            $(tbodyEle).prepend(temp.firstChild.firstChild.rows);
                                    }
                                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                                        var visibleRow = this.getContentTable().find('.e-detailrow:visible');
                                        $.each(visibleRow, function (indx, item) {
                                            if (visibleRow.eq(indx).closest('tr').prev().children('.e-detailrowexpand').length == 0)
                                                visibleRow.eq(indx).remove();
                                        });
                                    }
                                    if (this.model.enableAltRow)
                                        this._refreshAltRow();
                                } else
                                    this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);

                            }
                            this._currentJsonData = this.model.currentViewData;
                            this._gridRows = this.getContentTable().get(0).rows;
                            if (this.model.scrollSettings.frozenColumns > 0)
                                this._gridRows = [this._gridRows, this.getContentTable().get(1).rows];

                            var model = {};
                            if ((args.requestType == "sorting" || args.requestType == "filtering") && this.model.scrollSettings.allowVirtualScrolling) {
                                if (args.requestType == "filtering") {
                                    this.getContent().first().ejScroller("refresh").ejScroller("isVScroll") ? this.element.find(".gridheader").addClass("e-scrollcss") : this.element.find(".gridheader").removeClass("e-scrollcss");
                                    var model = this._refreshVirtualPagerInfo();
                                }
                                this._refreshVirtualContent(currentPage, model);
                                args.requestType == "filtering" && this.getContent().first().ejScroller("refresh");
                            }
                            if (this.model.allowPaging) {
                                if (this.model.filterSettings.filteredColumns.length)
                                    this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount, currentPage: this._currentPage() });
                                else
                                    this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount, currentPage: this._currentPage() });
                                this._refreshGridPager();
                            }
                            this._eventBindings();
                            break;
                        }
                    case ej.Grid.Actions.Grouping:
                        this._group(args);
                        this._refreshStackedHeader();
                        break;
                    case ej.Grid.Actions.BeginEdit:
                        this._edit(args);
                        break;
                    case ej.Grid.Actions.Add:
                        this._add(args);
                        break;
                    case ej.Grid.Actions.Ungrouping:
                        this._ungroup(args);
                        break;
                    case ej.Grid.Actions.VirtualScroll:
                        !this._isVirtualRecordsLoaded && this._replacingContent();
                        break;
                }
            } else
                this._newungroup(args);
            this._showGridLines();
            this._completeAction(args);
        },
        _showGridLines: function () {
            var $lines = this.model.gridLines;
            if ($lines != "both") {
				this.getContent().addClass($lines != "none" ? "e-" + $lines + "lines" : "e-hidelines");
            }
        },
		_showHeaderGridLines: function(){
			var $lines = this.model.gridLines;
			if ($lines != "both") 
				this.getHeaderContent().addClass($lines != "none" ? "e-"+$lines+"lines" : "e-hidelines");
		},
        _newungroup: function (args) {
            if (args.requestType == "ungrouping")
                this._ungroup(args);
            else
                this.getContentTable().find('tbody').empty().first().append(this._getEmptyTbody());
        },
        _completeAction: function (args) {
            if (!this.model.editSettings.showAddNewRow)
                this.model.isEdit = false;
            this._confirmedValue = false;
			if(args.requestType == "save" || args.requestType =="cancel")
				this._isAddNew=false;
            if (ej.Grid.Actions.Grouping == args.requestType && ej.isNullOrUndefined(args.columnName))
                return;
            if ((args.columnSortDirection == "ascending" || args.columnSortDirection == "descending") && !ej.isNullOrUndefined(args.columnName)) {
                var scolumn = this.getColumnByField(args.columnName);
                if (this.model.allowSorting && this.model.allowMultiSorting)
                    this._scolumns.push(scolumn.field);
                else
                    this._gridSort = scolumn.field;
            }
            if (args.requestType!='beginedit')
               this.setWidthToColumns();
            if (!this.initialRender && (ej.Grid.Actions.UnGrouping == args.requestType || this.model.groupSettings.groupedColumns.length > 0) && !$("#" + this._id + "EditForm").length)
                this._recalculateIndentWidth();
            if (ej.Grid.Actions.Paging == args.requestType || ej.Grid.Actions.BatchSave == args.requestType)
                this._refreshGridPager();
            else if ((ej.Grid.Actions.Sorting == args.requestType && this.model.allowSorting) || ej.Grid.Actions.Refresh == args.requestType) {
                if (ej.gridFeatures.sort && this.getHeaderTable() !== null)
                    this._sortCompleteAction(args);
                if (this.model.allowPaging) {
                    var pageModel = this.getPager().ejPager("option");
                    this._currentPage(pageModel.currentPage);
                    delete pageModel.currentPage;
                    $.extend(this.model.pageSettings, pageModel);
                    delete this.model.pageSettings.masterObject;
                    this._refreshGridPager();
                }
                if (!this.initialRender && (this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0))
                    this._refreshScroller(args);
            } else if (ej.Grid.Actions.Delete == args.requestType || ej.Grid.Actions.Save == args.requestType || ej.Grid.Actions.Search == args.requestType) {
                this._editEventTrigger(args);
                if (this.model.allowPaging)
                    this._refreshPagerTotalRecordsCount();
            } else if (ej.Grid.Actions.Filtering == args.requestType)
                this._filterCompleteAction();
            else if (ej.Grid.Actions.BeginEdit == args.requestType || ej.Grid.Actions.Add == args.requestType)
                this._editCompleteAction(args);
            else if (ej.Grid.Actions.Grouping == args.requestType || ej.Grid.Actions.Ungrouping == args.requestType)
                this["_" + args.requestType + "CompleteAction"](args);
            if (this.model.toolbarSettings.showToolbar)
                this.refreshToolbar();
            if (!this.initialRender && this.model.showSummary && this.model.summaryRows.length > 0 && this._currentJsonData.length) {
                if ((args.requestType == ej.Grid.Actions.Save || args.requestType == ej.Grid.Actions.Refresh ) && !this.element.children(".e-gridfooter").length)
                    this._renderGridFooter().insertAfter(this.getContent());
                this.getFooterTable().find('colgroup').remove();
                this.getFooterTable().append(this.getHeaderTable().find("colgroup").clone());
                this._createSummaryRows(this.getFooterTable());
            }
            if (!this.initialRender && ej.gridFeatures.selection) {
                if (!this.getContent().find("td.e-selectionbackground").length)
                    this._setCurrentRow(args.requestType);
                this.clearColumnSelection();
            }
            this.model.editSettings.editMode == "batch" && this.refreshBatchEditMode();
            if (!this.initialRender && this.model.allowScrolling && (this._checkScrollActions(args.requestType) || (this.model.editSettings.editMode.indexOf("inline") != -1 && args.requestType == "beginedit")) ||
                (this.model.scrollSettings.virtualScrollMode == "continuous" && args.requestType == "virtualscroll"))
                this._refreshScroller(args);
            if (this.model.scrollSettings.virtualScrollMode == "normal" && args.requestType == "virtualscroll")
                this.getContent().find("div:first").scrollLeft(this.getScrollObject().scrollLeft());
            if (this._customPop != null && args.requestType != "sorting") {
                this._customPop.hide();
            }
            if (this.model.allowScrolling && !this.initialRender)
                this.getContentTable().find("tr:last").find("td").addClass("e-lastrowcell");

            if (this.model.allowGrouping && this.model.showSummary)
                this._refreshGroupSummary();
            if (ej.Grid.Actions.Refresh == args.requestType && !this.initialRender && this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0)
                this._groupingCompleteAction(args);
            if (ej.Grid.Actions.Refresh == args.requestType && !this.initialRender && this.model.allowGrouping && this.model.groupSettings.groupedColumns.length < 1)
                this._ungroupingCompleteAction(args);
            this._trigger("actionComplete", args);
            this._trigger("refresh");
            if ((this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")) {
                
                if (!this.initialRender && this.getContentTable().find("tr.e-addedrow").length == 0 && this.element.find(".e-gridcontent").find("tr").length != 0)
                    this._startAdd();
                 if (args.requestType == "searching")
                    this.element.find(".e-gridtoolbar").find("li#" + this._id + "_search input").focus();
            }
            
            if ((ej.Grid.Actions.BeginEdit == args.requestType || ej.Grid.Actions.Add == args.requestType) && $.isFunction($.validator))
                this.setValidation();
            if (!this.initialRender)
                this.model._groupingCollapsed = [];
		    if(!this.initialRender && args.requestType =="refresh")
				{
					for(var i =0 ; i<this.model.filterSettings.filteredColumns.length; i++)
					this.getHeaderTable().find('.e-headercelldiv').eq(this.getColumnIndexByField(this.model.filterSettings.filteredColumns[i].field)).parent().find('.e-filtericon').addClass("e-filteredicon e-filternone");
			};
		    if (this.model.columnLayout == "fixed")
		        this.setWidthToColumns();
        },
        _getForeignKeyData: function (data) {
            var proxy = this;
            var column;
            for (i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i].foreignKeyValue && this.model.columns[i].dataSource) {
                    var fieldName = ej.isNullOrUndefined(proxy.model.columns[i]["foreignKeyField"]) ? proxy.model.columns[i]["field"] : proxy.model.columns[i]["foreignKeyField"];
                    this.model.columns[i].dataSource.filter(function (col) {
                        var value = data[proxy.model.columns[i]["field"]];
                        var fValue = !isNaN(parseFloat(value)) && isFinite(value) ? parseFloat(value) : value;
                        if (col[fieldName] == fValue)
                            return column = col;
                    });
                }
            }
            return column;
        },
        _foreignKeyBinding: function (curColumn, cellValue, gridId) {
            if (typeof (curColumn) == "string")
                curColumn = JSON.parse(curColumn);
            var cellData;
            var gridObj = $("#" + gridId).ejGrid('instance');
            for (var column = 0; column < gridObj.model.columns.length; column++) {
                if (gridObj.model.columns[column]["field"] == curColumn.field && gridObj.model.columns[column]["foreignKeyValue"] == curColumn.foreignKeyValue) {
                    var foreignKeyColumn = gridObj.model.columns[column];
                    break;
                }
            }
            foreignKeyColumn.dataSource.filter(function (col) {
                var val = ej.getObject(curColumn.foreignKeyValue, col);
                if (ej.getObject(curColumn.foreignKeyField, col) == cellValue)
                    return cellData = foreignKeyColumn.type == "date" ? new Date(val) : val;
            });
            if (curColumn.format) {
                var gridObj = ej.isNullOrUndefined(gridId) ? this : this.getRsc("helpers", gridId);
                cellData = gridObj.formatting(curColumn.format, cellData, gridObj.model.locale);
            }
            return cellData;
        },
        _getDataIndex: function (data, item) {
            var flag = 0, _plen;
            for (var d = 0, len = data.length; d < len; d++) {
                for (var key = 0, _plen = this._primaryKeys.length; key < _plen; key++) {
                    if (this._checkPrimaryValue(data[d][this._primaryKeys[key]], item[this._primaryKeys[key]], this._primaryKeys[key]))
                        continue;
                    else if (key == _plen - 1)
                        flag = 1;
                }
                if (flag) return d;
            }
            return -1;
        },
        _checkPrimaryValue: function (keyData, keyItem, field) {
            if (this.getColumnByField(field).type == "string")
                keyData = keyData.trim();
            if (keyData != keyItem)
                return true;
            else
                return false;
        },
        _eventBindings: function () {
            var rowLength = this.model.scrollSettings.frozenColumns > 0 ? this._gridRows[0].length : this._gridRows.length;
            var trIndex = 0;
            var prev;
            var pageSize = this.model.pageSettings.pageSize;
            if (ej.gridFeatures.common)
                this._refreshUnboundTemplate(this.getContentTable());
            if (this._gridRecordsCount != 0) {
                if (this.model.queryCellInfo != null || this.model.rowDataBound != null || this.model.mergeCellInfo != null || this.model.templateRefresh != null) {
                    for (var row = 0; row < rowLength; row++) {
                        trIndex = row;
                        if (this.model.scrollSettings.allowVirtualScrolling && row < pageSize) {
                            for (var i = 0; i < this._cloneQuery.queries.length; i++)
                                prev = this._cloneQuery.queries[i].fn == "onPage" &&  this._cloneQuery.queries[i].e.pageIndex - 1;
                            var value = pageSize * prev;
                            if (value != 0)
                                trIndex = this.getContentTable().find("tr[name=" + value + "]").eq(row).index();
                        }
                        var rowIndex = this.getRowByIndex(trIndex);
                        if (rowIndex.hasClass("e-virtualrow") || ej.isNullOrUndefined(this._currentJsonData[row]))
                            break;
                        this._rowEventTrigger(rowIndex, this._currentJsonData[row]);
                    }
                }
            }
        },
        _rowEventTrigger: function (row, data) {
            var args = { row: row, data: data };
            this._trigger("rowDataBound", args);
            var tdCells = row.cells;
            var $tdRowcells = $(row).find(".e-rowcell");
            for (var cellIndex = 0; cellIndex < $tdRowcells.length; cellIndex++) {
                var args = { cell: $tdRowcells[cellIndex], data: data, text: $tdRowcells[cellIndex].innerHTML };
                var foreignKeyData = this._getForeignKeyData(args.data);
                if ($($tdRowcells[cellIndex]).hasClass("e-rowcell"))
                    args.column = this.model.columns[cellIndex];
                if (!ej.isNullOrUndefined(foreignKeyData))
                    args.foreignKeyData = foreignKeyData;
                if (this.model.allowCellMerging == true) {
                    this._cellMerging(args);
                    this._trigger("mergeCellInfo", args);
                }
                this._trigger("queryCellInfo", args);
                if ($($tdRowcells[cellIndex]).hasClass("e-templatecell")) {
                    var args = { cell: $tdRowcells[cellIndex], column: this.model.columns[cellIndex], data: data, rowIndex: $(row).index() };
                    this._trigger("templateRefresh", args);
                }
            }

        },

        setWidthToColumns: function () {
            var $cols1 = this.getContentTable().children("colgroup").find("col");
            var $cols2 = this.getHeaderTable().children("colgroup").find("col");
            var width = this.element.width(), frozenWidth = 0, columnsTotalWidth = 0, finalWidth=0;
            if (this.model.groupSettings.groupedColumns.length && !this.model.allowScrolling && this.model.groupSettings.showGroupedColumn) {
                var browserDetails = this.getBrowserDetails();
                if (browserDetails.browser == "msie" && parseInt(browserDetails.version, 10) > 8)
                    $cols1.first().css("width", ((30 / width) * 100) + "%");
            }
            if (!ej.isNullOrUndefined(this.model.detailsTemplate)) {
                var headerIndx = this.model.groupSettings.groupedColumns.length;
                var contentIndx = this.model.groupSettings.groupedColumns.length != 0 ? 1 : 0;
                $cols1.eq(contentIndx).css("width", this._detailsOuterWidth);
                $cols2.eq(headerIndx).css("width", this._detailsOuterWidth);
            }
            this._detailColsRefresh();
            $cols1 = this._$headerCols;
            $cols2 = this._$contentCols;

            for (var i = 0; i < $cols2.length; i++) {
                if (this.model.allowResizeToFit && this.model.columns[i]["width"] === undefined) {
                    hCellIndex = this.model.groupSettings.groupedColumns.length ? (i + this.model.groupSettings.groupedColumns.length) : i;
                    var contentWidth = this._resizer._getContentWidth(i);
                    var cellDiv = this.getHeaderTable().find('.e-headercelldiv').eq(hCellIndex);
                    var headerWidth = this._resizer._getHeaderContentWidth(cellDiv);
                    if (this.model.editSettings.editMode == "normal" && (this.model.isEdit || this._isAddNew))
                        finalWidth = $cols2.eq(i).width();
                    else {
                         finalWidth = contentWidth > headerWidth ? contentWidth : headerWidth;
					     finalWidth += parseInt(cellDiv.css("padding-left"), 10)
                    }
                    this.columnsWidthCollection[i] = finalWidth;
                    columnsTotalWidth += this.model.columns[i].visible ? finalWidth : 0;
                } else
                    columnsTotalWidth += this.model.columns[i].visible ? parseInt(this.model.columns[i]["width"], 10) : 0;
                if (!ej.isNullOrUndefined(this.columnsWidthCollection[i])) {
                    $cols1.eq(i).width(this.columnsWidthCollection[i]);
                    $cols2.eq(i).width(this.columnsWidthCollection[i]);
                    if (this.model.columns[i]["priority"])
                        $cols2.eq(i).addClass("e-table-priority-" + this.model.columns[i]["priority"]);
                } else if (this.model.allowScrolling) {
                    var colWidth = (width / this.model.columns.length).toFixed(2), bSize = (width / (this.model.scrollSettings.buttonSize || 18) / 100).toFixed(2), cWidth = colWidth - bSize;
                    $cols1.eq(i).css("width", cWidth + "px");
                    $cols2.eq(i).css("width", cWidth + "px");
                    this.model.columns[i].width = cWidth;
                    this.columnsWidthCollection[i] = parseFloat(cWidth);
                }
            }
            if (this.model.columnLayout == "fixed") {
                if (this.model.scrollSettings && this.model.scrollSettings.frozenColumns == 0) {
                    this.getHeaderTable().width(columnsTotalWidth);
                    this.getContentTable().width(columnsTotalWidth);
                }
                var headerTableWidth = this.model.scrollSettings.frozenColumns > 0 ? this.getHeaderTable().eq(0).width() + this.getHeaderTable().eq(1).width() : this.getHeaderTable().width();
                var operation = this.getHeaderContent().width() > headerTableWidth ? 'addClass' : 'removeClass';
                var headerTable = this.getHeaderTable();
                var contentTable = this.getContentTable();
                if (this.model.scrollSettings.frozenColumns > 0) {
                    headerTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getHeaderTable().eq(1) : this.getHeaderTable().eq(0);
                    contentTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getContentTable().eq(1) : this.getContentTable().eq(0);
                }
                headerTable[operation]('e-tableLastCell');
                contentTable[operation]('e-tableLastCell');
            }
            if (!this.model.allowScrolling && this.model.allowResizeToFit && columnsTotalWidth > width) {
                this.model.allowScrolling = true;
                this.model.scrollSettings.width = width;
                this.getHeaderTable().parent().addClass("e-headercontent");
                if (!this.model.scrollSettings.frozenColumns > 0)
                    this.getHeaderTable().width(width);
            }
            if (this.model.isEdit) {
                var clonedCol = $cols1.clone();
                var editedTr;
                if (this.model.editSettings.showAddNewRow)
                    editedTr = this.getContentTable().find(".e-editedrow");
                $colGroup = this.model.scrollSettings.frozenColumns > 0 ? this.getContent().find(".gridform").find("colgroup") : !ej.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr.find("colgroup") : $("#" + this._id + "EditForm").find("colgroup");
                this.model.scrollSettings.frozenColumns > 0 && $colGroup.first().empty().append(clonedCol.splice(0, this.model.scrollSettings.frozenColumns));
                $colGroup.last().empty().append(clonedCol);
                if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    $colGroup.prepend(this._getIndentCol());
            }
            if (this.model.groupSettings.groupedColumns.length) {
                var $grouedColGroup = this.getContentTable().find(".e-recordtable").children("colgroup");
                for (var i = 0; i < $grouedColGroup.length; i++) {
                    var clonedCol = $cols1.clone();
                    var detailsWidth = this._detailsOuterWidth != null ? this._detailsOuterWidth : "30px";
                    if (this.model.detailsTemplate != null || this.model.childGrid != null) clonedCol.splice(0, 0, $(this._getIndentCol()).width(detailsWidth)[0]);
                    $grouedColGroup.eq(i).empty().append(clonedCol);
                }
            }
            if (this.model.scrollSettings.frozenColumns > 0) {
                var totalWidth = 0, frozenWidth;
                for (var i = 0; i < this.columnsWidthCollection.length; i++) {
                    totalWidth += this.columnsWidthCollection[i];
                    if (this.model.scrollSettings.frozenColumns - 1 == i)
                        frozenWidth = Math.ceil(totalWidth);
                }
                this.getContent().find(".e-frozencontentdiv").outerWidth(frozenWidth)
                    .end().find(".e-movablecontentdiv").outerWidth(totalWidth - frozenWidth);
                this.getHeaderContent().find(".e-frozenheaderdiv").outerWidth(frozenWidth)
                    .end().find(".e-movableheaderdiv").outerWidth(totalWidth - frozenWidth);
            }
        },
        _initialEndRendering: function () {
            // use this method to add behaviour after grid render.
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate")
                    this.element.append(this._renderDialog());
                else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                    this.element.append(this._renderExternalForm());
            }
            if (this._selectedRow() != -1)
                this.selectRows(this._selectedRow());
            (this.model.editSettings.editMode == "batch" || this.model.editSettings.showDeleteConfirmDialog) && this._renderConfirmDialog();
            (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) && $("#" + this._id + 'AlertDialog') == null && this._renderAlertDialog();
            if (this.model.allowMultiSorting || this.model.selectionType == "multiple")
                this._renderMultiTouchDialog();
            if (this.model.scrollSettings.frozenColumns > 0 && !this.model.allowScrolling) {
                this.getContent().remove();
                this.getHeaderTable().eq(1).remove();
                this._alertDialog.find(".e-content").text(this._getLocalizedLabels("FrozenColumnsScrollAlert"));
                this._alertDialog.ejDialog("open");
                return;
            }
            this.model.scrollSettings.allowVirtualScrolling && this._createPagerStatusBar();
            this._getRowHeights();
            this.model.allowScrolling && this._renderScroller();
            this._addMedia();
            if (this.model.scrollSettings.allowVirtualScrolling) {
                if (this._currentPage() == 1)
                    this._virtualLoadRecords[this._currentPage()] = this._currentJsonData;
                this._refreshVirtualContent();
                this.getContent().first().ejScroller("refresh");
                if (this.getContent().ejScroller("isVScroll")) {
                    this.element.find(".e-gridheader").addClass("e-scrollcss");
                    this.getHeaderTable().first().width(this.getContentTable().width());
                }
                else
                    this.element.find(".e-gridheader").removeClass("e-scrollcss");
            }
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar" && !this.model.allowPaging && !this.model.scrollSettings.allowVirtualScrolling)
                this._createPagerStatusBar();
            if (ej.gridFeatures.common)
                this.rowHeightRefresh()
            if (ej.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType) != -1)
                this._refreshFilterIcon();
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this._recalculateIndentWidth();
            if (this.initialRender)
                this._addLastRow();
        },

        _addLastRow: function () {
            var lastRowtd = this.getContentTable().find("tr:last").find("td"), rowHeight = 0;

            if (this.model.allowScrolling && !this.model.scrollSettings.allowVirtualScrolling && !ej.isNullOrUndefined(this.model.dataSource) && !ej.isNullOrUndefined(this.getRows())) {
                for (var i = 0; i < this.getRows().length; i++)
                    rowHeight += $(this.getRows()[i]).height();

                if (rowHeight < this.getContent().height() - 1)
                    lastRowtd.addClass("e-lastrowcell");
            }
        },
        _addMedia: function () {
            if (this.model.allowScrolling)
                this._scrollWidth = this.model.scrollSettings.width;
            if (this.model.minWidth && !this.model.enableResponsiveRow) {
                this._$onresize = $.proxy(this.windowonresize, this);
                $(window).bind("resize", this._$onresize);
                if ($.isFunction(window.matchMedia)) {
                    var mediaFilterObj = window.matchMedia("(max-width: 768px)");
                    this._mediaStatus = mediaFilterObj.matches;
                }
                this.windowonresize();
            }
        },
        _getNoncontentHeight: function () {
            var height = this.getHeaderContent().outerHeight();
            if (this.model.toolbarSettings.showToolbar)
                height += this.element.find('.e-gridtoolbar').outerHeight();
            if (this.model.allowPaging)
                height += this.element.find('.e-pager').outerHeight();
            if (this.model.allowGrouping && this.model.groupSettings.showDropArea)
                height += this.element.find('.e-groupdroparea').outerHeight();
            return height;
        },
        
        setDimension: function (height, width) {
            var originalHeight = height - this._getNoncontentHeight();
            this.model.scrollSettings.height = originalHeight;
            this.model.scrollSettings.width = width;
            this._renderScroller();
        },
        _mediaQueryUpdate: function (verticalScroll,horizontalScroll) {
            if (horizontalScroll || verticalScroll) {
                var top = this.element.height();
                var cTop = this.getContent().offset()['top'];
                var height = $(window).height() - this._getNoncontentHeight();
                var s = this.getContent().data('ejScroller');
                if (!verticalScroll) {
                    height = this.model.scrollSettings.height;
                }
                this.model.scrollSettings.height = height;
                if (this.model.minWidth && !this.element.hasClass("e-responsive") && !this._scrollerAddedOnMedia) {
                    this.getContentTable().css("min-width", this.model.minWidth);
                    this.getHeaderTable().css("min-width", this.model.minWidth);
                    this.model.allowScrolling = true;
                    this._mediaQuery = true;
                    this.model.scrollSettings.width = this.getContent().width();
                    this.model.scrollSettings.height = height;
                    this.element.find(".e-gridheader").first().find("div").first().addClass("e-headercontent");
                    this._renderScroller();
                    this._mediaQuery = false;
                    this._scrollerAddedOnMedia = true;
                }
                if (this._scrollerAddedOnMedia)
                    this.getContent().ejScroller({ width: Math.floor(this.getHeaderContent()[0].getBoundingClientRect().width), height: height });
                if (verticalScroll && !this.getHeaderContent().hasClass("e-scrollcss")) {
                    this.getHeaderContent().addClass("e-scrollcss")
                    this.getHeaderContent().find('div.e-headercontent').addClass('e-hscrollcss');
                }
                if (!verticalScroll) {
                    this.getHeaderContent().removeClass("e-scrollcss")
                    this.getHeaderContent().find('div.e-headercontent').removeClass('e-hscrollcss');
                }
            } else if (this._scrollerAddedOnMedia) {
                if (this.getHeaderContent().hasClass("e-scrollcss")) {
                    this.getHeaderContent().removeClass("e-scrollcss");
                    this.getHeaderContent().find(".e-headercontent").first().removeClass("e-headercontent");
                }
                if (this.getContent().data("ejScroller"))
                    this.getContent().ejScroller("destroy");
                this.getContentTable().css("min-width", "");
                this.getHeaderTable().css("min-width", "");
                this._scrollerAddedOnMedia = false;
            }
        },
        windowonresize: function () {
            this.model.scrollSettings.width = this._originalScrollWidth;
            if (typeof (this._originalScrollWidth) == "number" && this.element.parent().width() < this._originalScrollWidth)
                this.model.scrollSettings.width = this.element.parent().width();
            var $width = typeof (this._originalScrollWidth) == "string" || this.element.parent().width() < this.element.width() ? "auto" : this.model.scrollSettings.width;
            this.getHeaderContent().find("div table").first().width("100%");
            this.getContent().find("div table").first().width("100%");
            this.element.css("width", $width);
            this.getContent().css("width", $width);
            if (this.model.allowGrouping)
                this._recalculateIndentWidth();
            var scrollHorizontal = this.getContent().width() < this.getContent().find('table').width();
            var contentTableHeight = scrollHorizontal ? this.getContentTable().height() + 18 : this.getContentTable().height();
            var scrollVertical = ($(window).height() - this._getNoncontentHeight()) < contentTableHeight;
            this._mediaQueryUpdate(scrollVertical, scrollHorizontal);
        },
        _removeMedia: function () {
            $(window).unbind("resize", this._$onresize);
            this.getContentTable().css("min-width", "");
            this.getHeaderTable().css("min-width", "");
            this.getContentTable().css("width", "");
            this.model.scrollSettings.width = "auto";
            if (this.getContent().data("ejScroller"))
                this.getContent().ejScroller("destroy");
        },
        _getRowHeights: function () {
            var trs = this.getRows();
            if (trs !== null) {
                this._rowHeightCollection = [];
                if (trs[1] !== undefined && trs[1].length && ((this.model.scrollSettings.frozenColumns > 0 && trs[0] !== undefined) || (trs[0] !== undefined && typeof trs[0].item !== "undefined" && typeof trs[0].length == "number" && typeof trs[1].item !== "undefined" && typeof trs[1].length == "number"))) {
                    frotrs = trs[0];
                    movtrs = trs[1];
                    for (var i = 0 ; i < frotrs.length ; i++) {
                        this._rowHeightCollection[i] = frotrs[i].offsetTop >= movtrs[i].offsetTop ? frotrs[i].offsetTop : movtrs[i].offsetTop;
                    }
                }
                else {
                    for (var i = 0 ; i < trs.length ; i++) {
                        this._rowHeightCollection[i] = trs[i].offsetTop;
                    }
                }
            }
            return this._rowHeightCollection;
        },
        _getEmptyTbody: function () {
            var $emptyTd = ej.buildTag('td.emptyrecord', this._getLocalizedLabels("EmptyRecord"), {}, { colSpan: this.model.columns.length });
            return $(document.createElement("tr")).append($emptyTd);
        },
        _getIndentCol: function () {
            return ej.buildTag("col", "", { width: "30px" });
        },
        _createSortElement: function () {
            return ej.buildTag('span.e-icon', "&nbsp;");
        },
        _createSortNumber: function (number, header) {
            if (header.css("text-align") == "right")
                return ej.buildTag('span.e-number', number, { "color": "white", "font-size": "9px", "float": "left" });
            else
                return ej.buildTag('span.e-number', number, { "color": "white", "font-size": "9px", "float": "right" });
        },
        _wireEvents: function () {
            this._on(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", this._clickHandler);
            this._on(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", ".e-gridheader", this._mouseClickHandler);
            if (ej.gridFeatures.common) {
                this._on(this.element, "dblclick", ".e-gridcontent > div:first", this._recorddblClickHandler);
                if (this.model.rightClick)
                    this._on(this.element, "contextmenu", this._rightClickHandler);
                this._on(this.element, "click", ".e-gridcontent", this._recordClick);
                this._enableRowHover();
                if (this.model.enableTouch)
                    this._on(this.element, "swipeleft swiperight", ".e-gridcontent div > .e-table", $.proxy(this._touchGrid, this));
                else
                    this.element.addClass("e-touch");
                this._on(this.element, "mousedown", ".e-gridheader", this._headerMouseDown);
                this._on(this.element, "mouseover mouseleave", ".e-gridheader", this._headerHover);
                this._on(this.element, ej.eventType.mouseMove, ".e-gridheader", this._headerHover);
                this.model.allowResizeToFit && this._on(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
                if (this.model.allowResizing) {
                    this._on(this.element, ej.eventType.mouseMove, this._mouseMove);
                    this._on(this.element, "mouseup", this._mouseUp);
                }
                if (this.model.allowKeyboardNavigation) {
                    this.element[0].tabIndex = this.element[0].tabIndex == -1 ? 0 : this.element[0].tabIndex;
                    this.element[0].accessKey = (!ej.isNullOrUndefined(this.element[0].accessKey) && this.element[0].accessKey != "") ? this.element[0].accessKey : "e";
                    this._on(this.element, "keyup", this._keyDownHandler);
                }
            }
            if (ej.gridFeatures.edit) {
                this._enableEditingEvents();
                this._on(this.element, "click", ".e-gridcontent .e-unboundcelldiv", this._unboundClickHandler);
            }
            if (this.model.allowGrouping) {
                this._enableGroupingEvents();
                this._on(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);

            }
            this._enableFilterEvents();
        },
        _enableFilterEvents: function () {
            if (this.model.allowMultiSorting || this.model.selectionType == "multiple" || this.model.allowFiltering)
                this._on($(document), "mousedown", this._docClickHandler);
            if (this.model.allowFiltering) {
                var proxy = this, $target;
                this._off(this.element, "keyup", ".e-filterbar input")._on(this.element, "keyup", ".e-filterbar input", this._filterBarHandler);
                this._on(this.element, "focus click", ".e-filterbar", this._filterBarClose);
            }
        },
        _docClickHandler: function (e) {
            var details = this.getBrowserDetails(), $target = $(e.target);
            if (this._customPop != null && this.element.find(e.target).length == 0)
                this._customPop.hide();
            if (this.model.allowFiltering) {
                if (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel") {
                    if (this._$colType && ($(e.target).find(".e-grid.e-dlgcontainer").length > 1 || $(e.target).find(".e-excelfilter").length > 1))
                        if (details.browser == "msie")
                            e.target.tagName != "BODY" && (!this.isExcelFilter ? this._closeFilterDlg() : this._excelFilter.closeXFDialog(e));
                        else
                            !this._isExcelFilter ? this._closeFilterDlg() : this._excelFilter.closeXFDialog(e);
                } else if (!$target.hasClass("e-filtertext") && !$target.hasClass("e-cancel"))
                    this.getFilterBar().find(".e-cancel").addClass("e-hide");
            }

        },
        _mouseClickHandler: function (e) {
            var $temp = $(e.target), $target;
            if (!(this.model.isResponsive || this.model.enableResponsiveRow) && $temp.closest(".e-grid").length != 0 && $temp.closest(".e-grid").attr("id") !== this._id) return;
            if (this.getHeaderTable().find('.e-columnheader').not('.e-stackedHeaderRow').css('cursor') == "col-resize")
                return;
            if ($(e.target).is(".e-ascending, .e-descending"))
                $target = $(e.target.parentNode);
            else if ($temp.hasClass('e-groupheadercell'))
                $target = $temp.children("div");
            else
                $target = $(e.target);
            if (this._$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this._isExcelFilter)) {
                $.fx.off = true;
                if (this._isExcelFilter)
                    this._excelFilter.closeXFDialog();
                else if ($("#" + this._id + "_" + this._$prevColType + "Dlg").data("ejDialog") != undefined)
                    $("#" + this._id + "_" + this._$prevColType + "Dlg").ejDialog("close");
                $.fx.off = false;
            }
            this.getHeaderTable().find(".e-columnheader").find(".e-headercellactive").removeClass("e-headercellactive").removeClass("e-active");
            if ($target.hasClass("e-headercelldiv") || (!$target.hasClass("e-togglegroupbutton") && $target.closest(".e-headercelldiv").length && $.inArray($target[0].tagName, ["SELECT", "INPUT", "TEXTAREA"]) == -1)
                || ($target.closest(".e-groupheadercell").length && $(e.target).is(".e-ascending, .e-descending"))) {
                if (!this.model.allowSorting || ej.gridFeatures.sort === undefined)
                    return;
                $target = ($target.hasClass("e-headercelldiv") || $target.closest(".e-groupheadercell").length) ? $target : $target.closest(".e-headercelldiv");
                var columnName = $target.attr("ej-mappingname");
                var columnSortDirection = ej.sortOrder.Ascending;
                this._$prevSElementTarget = this._$curSElementTarget;
                this._$curSElementTarget = $target;
                if ($target.find('span').hasClass("e-ascending"))
                    var columnSortDirection = ej.sortOrder.Descending;
                else
                    var columnSortDirection = ej.sortOrder.Ascending;
                if (e["pointerType"] == "touch" && this._customPop != null && !this._customPop.is(":visible") && this._customPop.find(".e-sortdirect").hasClass("e-spanclicked"))
                    this._customPop.show();
                if (e["pointerType"] == "touch" && this._customPop != null && (this._customPop.find(".e-rowselect").is(":visible") || !this._customPop.find(".e-sortdirect").hasClass("e-spanclicked")) && this.model.allowMultiSorting) {
                    var $offset = $target.offset();
                    this._customPop.removeAttr("style");
                    this._customPop.offset({ left: $offset.left, top: $offset.top - this.getHeaderTable().find(".e-columnheader").height() }).find(".e-sortdirect").show().end()
                        .find(".e-rowselect").hide().end().show();
                }
                if (this.model.allowMultiSorting && (e.ctrlKey || this._enableSortMultiTouch))
                    this.multiSortRequest = true;
                if (e.shiftKey && $.inArray(columnName, this.model.groupSettings.groupedColumns) == -1) {
                    this._removeSortedColumnFromCollection(columnName);
                    this.multiSortRequest = true;
                    columnName = null;
                    this.sortColumn(columnName, columnSortDirection);
                }
                if (!ej.isNullOrUndefined(columnName))
                    this.sortColumn(columnName, columnSortDirection);
            } else if ($target.hasClass("e-togglegroupbutton") && this.model.allowGrouping) {
                var field = $target.parent().attr("ej-mappingname");
                $target.hasClass("e-togglegroup") && this.groupColumn(field);
                $target.hasClass("e-toggleungroup") && this.ungroupColumn(field);
            } else if ($target.hasClass("e-filtericon") || $target.hasClass("e-filteredicon") || $target.hasClass('e-responsivefilterColDiv') || $target.parent().hasClass('e-responsivefilterColDiv')) {
                var columnName = $target.parent().find(".e-headercelldiv").attr("ej-mappingname") || $target.attr("ej-mappingname") || $($target.parent()).attr("ej-mappingname");
                this._$prevFieldName = this._$curFieldName;
                if (this.model.allowFiltering) {
                    var proxy = this;
                    $.each(this.model.columns, function (indx, col) {
                        if (col.field == columnName) {
                            proxy._$colType = col.type;
                            proxy._$curFieldName = col.field;
                            proxy._$colFormat = col.format;
                            proxy._$colForeignKeyField = col.foreignKeyField ? col.foreignKeyField : col.field;
                            proxy._$colForeignKeyValue = col.foreignKeyValue;
                            proxy._$colDropdownData = col.dataSource;
                        }
                    });
                    if (!this._isExcelFilter) {
                        var $id = "#" + this._id + "_" + this._$colType + "Dlg";
                        if (this._$colType == "string") {
                            if (this._$colForeignKeyValue && this._$colDropdownData)
                                $("#" + this._id + "_acString").ejAutocomplete({ fields: { text: proxy._$colForeignKeyValue, key: proxy._$colForeignKeyField }, dataSource: proxy._$colDropdownData });
                            else
                                $("#" + this._id + "_acString").ejAutocomplete({ fields: { text: proxy._$curFieldName, key: this._getIdField() }, dataSource: this._dataSource() });
                        } else if (this._$colType == "date") {
                            if (this._$colFormat != undefined) {
                                this._$colFormat = this._$colFormat.replace("{0:", "").replace("}", "");
                                $($id).find(".e-datewidget .e-datepicker").ejDatePicker({ dateFormat: this._$colFormat.replace("{0:", "").replace("}", "") });
                            }
                            else
                                $($id).find(".e-datewidget .e-datepicker").ejDatePicker({ dateFormat: "MM/dd/yyyy" });
                        }
                        else if (this._$colType == "datetime") {
                            if (this._$colFormat != undefined) {
                                this._$colFormat = this._$colFormat.replace("{0:", "").replace("}", "");
                                $($id).find(".e-datetimewidget input").ejDateTimePicker({ dateFormat: this._$colFormat.replace("{0:", "").replace("}", "") });
                            }
                            this._setFilterFieldValues($id);
                        }
                    }
                    this._mediaStatus = document.documentElement.clientWidth < 768;
                    if (this.model.isResponsive && this._mediaStatus) {
                        var gridObj = this;
                        var $headerDiv = ej.buildTag('div.e-resFilterDialogHeaderDiv');
                        var $titleSapn = ej.buildTag('div.labelRes', '<span>Filter</span>');
                        if ($(".e-filterMenuBtn").length > 0)
                            $(".e-filterMenuBtn").remove();
                        var $dlgBtn = ej.buildTag('div.e-filterMenuBtn');
                        var $inputOk = ej.buildTag('input.e-resposnsiveFilterBtnLeft');
                        var $inputCancel = ej.buildTag('input.e-resposnsiveFilterBtnRight');

                        $headerDiv.append($titleSapn);
                        $headerDiv.css('width', '100%');
                        var $dlgClone = $($id).css('padding-left', '0px');
                        if ($target.parent().hasClass('e-responsivefilterColDiv') && $target.hasClass('e-filternone')) {
                            proxy._fltrClrHandler();
                            $target.remove();
                            $("#responsiveFilter").css('display', 'block');
                            // this.element.css('display', 'block');
                        }
                        else {
                            this.element.css('display', 'none');
                            setTimeout(function () { $("#responsiveFilter").css('display', 'none'), 0 });
                            if (!this._isExcelFilter) {
                                var btnText = this.model.enableResponsiveRow ? 'OK' : 'Filter', clearText = this.model.enableResponsiveRow ? 'Cancel' : 'Clear';
                                $inputOk.ejButton({ text: btnText, type: 'button', click: $.proxy(this._fltrBtnHandler, this) });
                                $inputCancel.ejButton({
                                    text: clearText, type: 'button', click: function () {
                                        if (clearText == 'Clear') {
                                            proxy.element.css('display', 'block');
                                            proxy._fltrClrHandler();
                                        }
                                        $($id).css('display', 'none');
                                        if ($inputCancel.hasClass("e-resposnsiveFilterBtnRight"))
                                            proxy.element.css('display', 'block');
                                    }
                                });
                                if ($target.parent().hasClass('e-responsivefilterColDiv') && $target.hasClass('e-filternone')) {
                                    proxy._fltrClrHandler();
                                    $target.remove();
                                }
                                else {
                                    $dlgClone.addClass('e-resMenuFltr');
                                    $dlgClone.css('height', $(window).height() - 1).css('width', $(window).width() - 2);
                                    $dlgClone.find('.e-operator').addClass('e-resFilterOperator');
                                    $dlgClone.find('.e-value').addClass('e-resFilterOperator');
                                    var $btnContainer = $dlgClone.find('.e-dlgBtns').remove().addClass('e-filterMenuBtn');
                                    $dlgClone.append($dlgBtn.append($inputOk).append($inputCancel));
                                    if (ej.isNullOrUndefined($dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
                                        $dlgClone.insertAfter(this.element);
                                        var $backIcon = ej.buildTag('div.e-resFilterleftIcon', '', {}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' });
                                        var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' })
                                        $backIcon.click(function (e) {
                                            $dlgClone.css('display', 'none');
                                            if (gridObj.model.enableResponsiveRow)
                                                $("#responsiveFilter").css('display', 'block');
                                            else
                                                gridObj.element.css('display', 'block');
                                        })
                                        $headerDiv.append($backIcon.append($spanIcon));
                                        var $closeIcon = ej.buildTag('div.e-resFIlterRigthIcon', '', {}, { closeDialogue: $id.slice(1), gridEle: true });
                                        var $closeSpan = ej.buildTag('span.e-icon e-resIcon e-responisveClose', '', {}, { closeDialogue: $id.slice(1), gridEle: true })
                                        $closeIcon.click(function (e) {
                                            $dlgClone.css('display', 'none');
                                            gridObj.element.css('display', 'block');
                                        });
                                        var $ejWid = $($dlgClone.find('.e-value').find('input:last'));
                                        if (proxy._$colType == 'string') {
                                            var model = $($dlgClone.find('.e-value').find('input:last')).ejAutocomplete('model');
                                            $ejWid.ejAutocomplete('destroy').ejAutocomplete({
                                                enableDistinct: true, dataSource: model.dataSource, fields: model.fields, width: model.width, focusIn: function (args) {
                                                    var $dropdown = this.element.closest(".e-filterDialoge").find(".e-dropdownlist");
                                                    this.model.filterType = $dropdown.val();
                                                }
                                            });
                                        }
                                        $headerDiv.append($closeIcon.append($closeSpan));
                                        $dlgClone.prepend($headerDiv);
                                    }
                                    $dlgClone.find('.e-responsiveLabelDiv').remove();
                                    var $label = ej.buildTag('div.e-responsiveLabelDiv', '', { 'margin-left': '5%', 'font-size': '17px', 'margin-top': '5%' }).append(ej.buildTag('span', this.getHeaderTextByFieldName(columnName), { 'font-weight': 'bold' }));
                                    $label.insertAfter($dlgClone.find('.e-resFilterDialogHeaderDiv'));
                                    $dlgClone.fadeIn(100, "easeOutQuad", function () {
                                    });
                                }
                            }
                            else {
                                this._excelDlg = $id = "#" + this._id + this._$colType + "_excelDlg";
                                if (ej.isNullOrUndefined($dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
                                    $inputOk.ejButton({
                                        text: 'OK', type: 'button', click: function (sender) {
                                            gridObj._excelFilter._openedFltr = $(gridObj._excelDlg);
                                            gridObj._excelFilter._fltrBtnHandler();
                                            gridObj._setResponsiveFilterIcon();
                                            gridObj.element.css('display', 'block');
                                        }
                                    });
                                    $inputCancel.ejButton({ text: 'Cancel', type: 'button', click: function () { $($id).css('display', 'none'); proxy.element.css('display', 'block') } });
                                    $($id).children().not('.e-searchcontainer').remove();
                                    var excelObj = this._excelFilter;
                                    var $backIcon = ej.buildTag('div.e-resFilterleftIcon', '', {}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' });
                                    var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' })
                                    $backIcon.click(function (e) {
                                        $.proxy(gridObj._closeDivIcon(e), this);
                                    })
                                    $headerDiv.append($backIcon.append($spanIcon));
                                    var $closeIcon = ej.buildTag('div.e-resFIlterRigthIcon', '', {}, { closeDialogue: $id.slice(1), gridEle: true });
                                    var $closeSpan = ej.buildTag('span.e-icon e-resIcon e-responisveCustomFilter', '', {}, { closeDialogue: $id.slice(1), gridEle: true })
                                    $closeIcon.click(function (e) {
                                        $.proxy(gridObj._closeDivIcon(e), this);
                                    })
                                    if (proxy._$colType != 'boolean')
                                        $headerDiv.append($closeIcon.append($closeSpan));
                                    $($id).css('padding', '0px');
                                    var $searchContainer = $($id).css('height', $(window).height() - 2);
                                    $searchContainer.css('width', $(window).width() - 2);
                                    var $searchBox = $searchContainer.find('.e-searchcontainer .e-searchbox').css('margin-top', '10px');
                                    $searchBox.children().css('margin-top', '10px');
                                    var $checkBoxDiv = $searchContainer.find('.e-checkboxlist');
                                    var scrolWidth = $(window).width() * (97 / 100), scrollHeight = $(window).height() * (65 / 100);
                                    $($searchContainer.find('.e-searchcontainer')).addClass('e-resSearch');
                                    var $btn = $searchContainer.find('.e-resSearch .e-btncontainer').remove();
                                    $btn.find('input:first').css('width', '45.6%');
                                    $btn.find('input:first').addClass('e-resposnsiveFilterBtnLeft');
                                    $btn.find('input:last').addClass('e-resposnsiveFilterBtnRight');
                                    $searchContainer.find('.e-excelLabel').remove();
                                    var $labelDiv = ej.buildTag('div.e-excelLabel', 'Order Id', { 'font-weight': 'bold', 'margin-top': '10px' });
                                    var $searchBox = $searchContainer.find('.e-searchcontainer');
                                    $labelDiv.insertAfter($searchContainer.find('.e-searchcontainer .e-searchbox'));
                                    $searchContainer.prepend($headerDiv);
                                    $($id).append($dlgBtn.append($inputOk).append($inputCancel))
                                    $checkBoxDiv.ejScroller({ height: scrollHeight, width: scrolWidth }).ejScroller('refresh');
                                }
                                this._excelFilter.openXFDialog({ field: columnName, enableResponsiveRow: true, displayName: this.getHeaderTextByFieldName(columnName), dataSource: this._dataSource(), position: { X: xPos, Y: yPos }, dimension: { height: $(window).height(), width: $(window).width() }, cssClass: "resFilter", type: this._$colType, format: this._$colFormat });
                                $($id).insertAfter(this.element);
                                !ej.isNullOrUndefined($($id).parents('.e-grid')[0]) && $($id).remove();
                                $closeIcon.click(function (e) {
                                    $(gridObj._excelDlg).css('display', 'none');
                                    var height = $(window).height() - 5, width = $(window).width();
                                    excelObj._openCustomFilter('equal');
                                    var $dlgClone = $id = $("#" + gridObj._id + gridObj._$colType + "_CustomFDlg").addClass('e-responsviesExcelFilter');
                                    if (ej.isNullOrUndefined($dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
                                        var $headerDivCustom = ej.buildTag('div.e-resFilterDialogHeaderDiv');
                                        var $titleSapn = ej.buildTag('div.labelRes', '<span>Custom Filter</span>');
                                        $headerDivCustom.append($titleSapn);
                                        var $backIcon = ej.buildTag('div.e-resFilterleftIcon', '', {}, { closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg", openDialogue: gridObj._excelDlg.slice(1) });
                                        var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, { closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg", openDialogue: gridObj._excelDlg.slice(1) })
                                        $backIcon.click(function (e) {
                                            $dlgClone.css('display', 'none');
                                            if (gridObj.model.enableResponsiveRow)
                                                $("#responsiveFilter").css('display', 'block');
                                            else
                                                gridObj.element.css('display', 'block');
                                        });
                                        $headerDivCustom.append($backIcon.append($spanIcon));
                                        var $closeIconCust = ej.buildTag('div.e-resFIlterRigthIcon', '', {}, { closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg", gridEle: true });
                                        var $closeSpan = ej.buildTag('span.e-icon e-resIcon e-responisveClose', '', {}, { closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg", gridEle: true })
                                        $headerDivCustom.append($closeIconCust.append($closeSpan));
                                        $closeIconCust.click(function (e) {
                                            $dlgClone.css('display', 'none');
                                            gridObj.element.css('display', 'block');
                                        })
                                        $dlgClone.prepend($headerDivCustom);
                                        $dlgClone.insertAfter(gridObj.element);
                                        $dlgClone.find('.e-dlgfields').css('width', '100%');
                                        var $firstDiv = $dlgClone.find('.e-dlgfields:first').css('width', '92%').css('margin-left', '6%');
                                        $firstDiv.css('margin-top', '4%');
                                        var colName = $dlgClone.find('.e-dlgfields').find('.e-fieldset legend').text();
                                        var $labelDiv = ej.buildTag('div.e-responsiveLabelDiv', colName, { 'margin-left': '6%' });
                                        $labelDiv.insertAfter($firstDiv);
                                        var $fieldSet = $dlgClone.find('.e-dlgfields').find('.e-fieldset').find('table').css('width', '61%');
                                        $dlgClone.find('.e-dlgfields').find('.e-fieldset').replaceWith($fieldSet);
                                        var $fieldDiv = $fieldSet.parent('div').addClass('e-responsiveExcelFilterFieldDiv');
                                        var $ddl = $fieldSet.find('.e-dropdownlist')
                                        $fieldSet.find('.e-dropdownlist').each(function (index, object) {
                                            var ds = $(object).ejDropDownList('model.dataSource');
                                            var wid = $(window).width() * (40 / 100);
                                            $(object).ejDropDownList('destroy').ejDropDownList({ width: wid, popupWidth: wid + "px", dataSource: ds });
                                        });
                                        $fieldSet.find('.e-autocomplete').each(function (index, object) {
                                            var model = $(object).ejAutocomplete('model.dataSource');
                                            var wid = $(window).width() * (40 / 100);
                                            $(object).ejAutocomplete('destroy').ejAutocomplete({ width: wid, dataSource: model.dataSource, fields: model.fields });
                                        });
                                        $fieldSet.find('.e-datepicker').each(function (index, object) {
                                            var ds = $(object).ejDatePicker('model.dataSource');
                                            var wid = $(window).width() * (40 / 100);
                                            $(object).ejDatePicker('destroy').ejDatePicker({ width: wid });
                                        });
                                        var $okClone = $inputOk.clone(), $cancelClone = $inputCancel.clone();
                                        $okClone.ejButton({
                                            text: 'OK', type: 'button', click: function (sender) {
                                                gridObj._excelFilter._openedFltr = $dlgClone;
                                                gridObj._excelFilter._fltrBtnHandler();
                                                if ($dlgClone.hasClass('e-dlgcustom'))
                                                    $dlgClone.ejDialog('close');
                                                gridObj._setResponsiveFilterIcon();
                                                gridObj.element.css('display', 'block');
                                            }
                                        });
                                        $cancelClone.ejButton({ text: 'Cancel', type: 'button', click: function () { $dlgClone.ejDialog('close'); proxy.element.css('display', 'block') } });
                                        $dlgClone.append($dlgBtn.clone().append($okClone).append($cancelClone))
                                        var $btnContainer = $dlgClone.find('.e-dlgfields .e-btncontainer').remove();
                                        $btnContainer.find('input:first').addClass('e-resposnsiveFilterBtnLeft');
                                        $btnContainer.find('input:first').css('width', '45.6%')
                                        $btnContainer.find('input:last').addClass('e-resposnsiveFilterBtnRight');
                                    }
                                    gridObj.element.css('display', 'none');
                                    $dlgClone.ejDialog({ enableModal: false, height: height, width: width, position: { X: 0, Y: 0 }, enableResize: false, showHeader: false }).ejDialog('open');
                                })
                                var $searchdiv = ej.buildTag('div');
                            }
                        }
                    }
                    else {
                        $($id).ejDialog({ position: { X: "", Y: "" } });
						var docWidth = $(document).width(), dlgWidth = document.documentElement.clientWidth < 800 ? 200 : 250, xPos = $target.position().left + 18, yPos = $target.position().top + 2;
                        var filterDlgLargeCss = "e-filterdialoglarge";
                        dlgWidth = this._isExcelFilter ? this._excelFilter._dialogContainer.width() : dlgWidth;
                        if ($target.offset().left + 18 + dlgWidth > docWidth)
                            xPos = xPos - dlgWidth;
                        if (dlgWidth == 200)
                            filterDlgLargeCss = "";
                        if (!this._isExcelFilter)
                            $($id).ejDialog({ position: { X: xPos, Y: yPos }, width: dlgWidth, cssClass: filterDlgLargeCss })
                            .ejDialog("open");
                        else
                            this._excelFilter.openXFDialog({ field: columnName, displayName: this.getHeaderTextByFieldName(columnName), dataSource: this._dataSource(), position: { X: xPos, Y: yPos }, type: this._$colType, format: this._$colFormat, foreignKey: this._$colForeignKeyField, foreignKeyValue: this._$colForeignKeyValue, foreignDataSource: this._$colDropdownData });
                    }
                    this._setFilterFieldValues($id);
                    if (this._$colType == "number" && this.getColumnByField(columnName)["serverType"] != undefined )
                        $($id).find(".e-numerictextbox").ejNumericTextbox({ width: "100%",decimalPlaces: 0 });
                    else if(this._$colType == "number")
                        $($id).find(".e-numerictextbox").ejNumericTextbox({ width: "100%",decimalPlaces: 2 });
                    this._$prevColType = this._$colType;
                    this._$fDlgIsOpen = true;
                }
            }
        },
        _responsiveFilterClose: function () {
            this.element.css('display', 'block');
        },
        _clickHandler: function (e) {
            var $target = $(e.target),tempChooser = $("[id$='ccDiv'].e-grid.e-columnChooser"),fieldName, $form = $("#" + this._id + "EditForm"), index, columnIndex, rowIndex;
			if(tempChooser.length) {
                var  flag = true;
                for(var i = 0; i < tempChooser.length; i++){
                    if($target.parents(".e-ccButton").length) flag = $(e.target).closest(".e-grid").attr("id")+"ccDiv" != tempChooser[i].id;
                    var obj = $("#"+tempChooser[i].id).ejDialog("instance");
                    if(obj.isOpened() && flag) {
                        obj.close();
                        $(".e-columnChoosertail").remove();
                        $(".e-columnChoosertailAlt").remove();
                    }
                }
            }
            if ($target.hasClass("e-button") && ($target.hasClass("e-disable") || $target.prop("disabled"))) return;
            if ($target.closest(".e-grid").attr("id") !== this._id) return;
            if ($target.closest("#" + this._id + "EditForm").length)
                return;
            if ($target.hasClass("e-rowcell") || $target.closest("td").is(".e-rowcell") || ($target.hasClass("e-headercell") && ((e.clientY - $target.offset().top) < ($target.height() / 4)))) {
                if (this._bulkEditCellDetails.cancelSave) {
                    this._bulkEditCellDetails.cancelSave = false;
                    return;
                }
                if (this.model.editSettings.editMode == "batch" && ($.isFunction($.validator) && $form.length && $form.validate().errorList.length > 0))
                    return;
                this.model.editSettings.editMode == "batch" && this.element.focus();
                index = $target.closest("tr").hasClass("e-insertedrow") ? this.model.groupSettings.groupedColumns.length : 0;
                var tempIndex = $target.closest(".e-rowcell").index() != -1 ? $target.closest(".e-rowcell").index() : $target.closest(".e-headercell").index() - this.model.groupSettings.groupedColumns.length;
                columnIndex = $target.hasClass("e-rowcell") ? $target.index() - index : tempIndex - index;
                columnIndex = (this.model.detailsTemplate != null || this.model.childGrid != null) ? columnIndex - 1 : columnIndex;
                if (this.model.scrollSettings.frozenColumns && ($target.closest(".e-movableheaderdiv").length || $target.closest(".e-movablecontentdiv").length))
                    columnIndex = columnIndex + this.model.scrollSettings.frozenColumns;
                rowIndex = this.getIndexByRow($target.closest("tr"));
                this._bulkEditCellDetails.columnIndex = columnIndex;
                this._bulkEditCellDetails.rowIndex = rowIndex;
                if (this.model.allowSelection && ej.gridFeatures.selection) {
                    if (this.model.selectionType == "multiple") {
                        if (e.ctrlKey || this._enableSelectMultiTouch) {
                            this.multiSelectCtrlRequest = true;
                        }
                        if (e.shiftKey) {
                            this.multiSelectShiftRequest = true;
                            if (this._allowcellSelection && rowIndex > -1)
                                this.selectCells([[rowIndex, [columnIndex]]]);
                            if (this._allowrowSelection && rowIndex > -1)
                                this.selectRows(this._previousIndex, this.getIndexByRow($target.closest('tr')), $target);
                            if (this._allowcolumnSelection && $target.hasClass("e-headercell") && !$target.hasClass("e-stackedHeaderCell") && ((e.clientY - $target.offset().top) < ($target.height() / 4)))
                                this.selectColumns(this._previousColumnIndex, columnIndex);
                        }
                        if (e["pointerType"] == "touch" && this._customPop != null && !this._customPop.is(":visible") && this._customPop.find(".e-rowselect").hasClass("e-spanclicked") && this.model.selectionSettings.selectionMode == "row")
                            this._customPop.show();
                        if (e["pointerType"] == "touch" && this._customPop != null && (this._customPop.find(".e-sortdirect").is(":visible") || !this._customPop.find(".e-rowselect").hasClass("e-spanclicked")) && this.model.selectionType == "multiple") {
                            this._customPop.removeAttr("style");
                            var offset = $target.offset();
                            this._customPop.offset({ top: 0, left: 0 }).offset({ left: offset.left, top: offset.top - this.getRowHeight() }).find(".e-sortdirect").hide().end()
                                .find(".e-rowselect").show().end().show();
                        }
                    }
                    if (!this.multiSelectShiftRequest) {
                        if (this._allowcellSelection && rowIndex > -1) {
                            var cellProto = this._checkCellSelectionByRow(rowIndex, columnIndex);
                            if ((this.model.selectionSettings.enableToggle || (e.ctrlKey && this.model.selectionType == 'multiple')) && (cellProto != -1 && this.selectedRowCellIndexes.length > 0 && this.selectedRowCellIndexes[0].cellIndex.length > 0))
                                this.clearCellSelection(cellProto.rowIndex, columnIndex);
                            else
                                this.selectCells([[rowIndex, [columnIndex]]]);
                        }
                        if (this._allowrowSelection && rowIndex > -1) {
                            if (this.model.selectionSettings.enableToggle && this.getSelectedRecords().length == 1 && $.inArray(this.getIndexByRow($target.closest('tr')), this.selectedRowsIndexes) != -1)
                                this.clearSelection(this.getIndexByRow($target.closest('tr')));
                            else
                                this.selectRows(this.getIndexByRow($target.closest('tr')), null, $target);
                        }
                        if (this._allowcolumnSelection && $target.hasClass("e-headercell") && !$target.hasClass("e-stackedHeaderCell") && ((e.clientY - $target.offset().top) < ($target.height() / 4))) {
                            if (this.model.selectionSettings.enableToggle && this.selectedColumnIndexes.length == 1 && $.inArray(columnIndex, this.selectedColumnIndexes) != -1)
                                this.clearColumnSelection(columnIndex);
                            else
                                this.selectColumns(columnIndex);
                        }
                        this.multiSelectCtrlRequest = false;
                    }
                    this.multiSelectShiftRequest = false;
                }

                fieldName = this.model.columns[this._bulkEditCellDetails.columnIndex]["field"];
                if ($target.closest(".e-rowcell").length && fieldName)
                    this.model.editSettings.allowEditing && this.model.editSettings.editMode == ej.Grid.EditMode.Batch && this.editCell($.inArray($target.closest("tr").get(0), this.getRows()), fieldName);
            }
            if ($target.hasClass("e-rowselect") || $target.hasClass("e-sortdirect")) {
                if (!$target.hasClass("e-spanclicked")) {
                    $target.addClass("e-spanclicked");
                    if ($target.hasClass("e-rowselect"))
                        this._enableSelectMultiTouch = true;
                    if ($target.hasClass("e-sortdirect"))
                        this._enableSortMultiTouch = true;
                } else {
                    $target.removeClass("e-spanclicked");
                    if ($target.hasClass("e-rowselect"))
                        this._enableSelectMultiTouch = false;
                    if ($target.hasClass("e-sortdirect"))
                        this._enableSortMultiTouch = false;
                    this._customPop.hide();
                }
            }
            if (ej.gridFeatures.common) {
                this.expandCollapse($target);
            }
            if ($target.is(".e-filtericon") && $target.closest(".e-detailrow").length != 0)
                e.stopPropagation();
            if (this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this._isExcelFilter) && !$target.is(".e-filtericon") && $target.closest(".e-dlgcontainer").length != 1)
                !this._isExcelFilter ? this._closeFilterDlg() : this._excelFilter.closeXFDialog(e);
        },
        _checkCellSelectionByRow: function (rowIndex, columnIndex) {
            for (var i = 0; i < this.selectedRowCellIndexes.length; i++) {
                if (this.selectedRowCellIndexes[i].rowIndex == rowIndex)
                    break;
            }
            if (i != this.selectedRowCellIndexes.length && $.inArray(columnIndex, this.selectedRowCellIndexes[i].cellIndex) != -1)
                return this.selectedRowCellIndexes[i];
            return -1;
        },
        
        _destroy: function () {
            /// <summary>This function is  used to destroy the Grid Object</summary>
            this.element.off();
            this.element.find(".e-gridheader").find(".e-headercontent,.e-movableheader")
                .add(this.getContent().find(".e-content,.e-movablecontent")).unbind('scroll');
            var editForm = $("#" + this._id + "EditForm");
            if (editForm.length) {
                var $formEle = editForm.find('.e-field'), $element;
                for (var i = 0; i < $formEle.length; i++) {
                    $element = $($formEle[i]);
                    if ($element.hasClass('e-datetimepicker'))
                        $element.ejDateTimePicker("destroy");
                    else if ($element.hasClass('e-datepicker'))
                        $element.ejDatePicker("destroy");
                    else if ($element.hasClass('e-dropdownlist'))
                        $element.ejDropDownList("destroy");
                }
                editForm.remove();
            }
            if (this._confirmDialog)
                this._confirmDialog.ejDialog("destroy");
            this.element.find('.e-dropdownlist').ejDropDownList('model.dataSource', []);
            if (this.model.showColumnChooser) {
                $("#" + this._id + "ccDiv").ejDialog("destroy");
                $("#" + this._id + "ccDiv").remove();
                $("#" + this._id + "_ccTail").remove();
                $("#" + this._id + "_ccTailAlt").remove();
            }
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "excel")
                this._excelFilter.resetExcelFilter()
            if (this.model.allowReordering)
                $(".e-columndropindicator").remove();
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "menu") {
                var proxy = this, $colType;
                $.each(this.model.columns, function (indx, col) {
                    $colType = col.type;
                    $("#" + proxy._id + $colType + "_ddinput_popup_wrapper").remove();
                    if ($colType == "string")
                        $("#" + proxy._id + "_stringDlg").find('.e-autocomplete').ejAutocomplete("destroy");
                    else if ($colType == "date")
                        $("#" + proxy._id + "_dateDlg").find('.e-datepicker').ejDatePicker("destroy");
                    else if ($colType == "datetime")
                        $("#" + proxy._id + "_datetimeDlg").find('.e-datetimepicker').ejDateTimePicker("destroy");
                    else if ($colType == "number")
                        $("#" + proxy._id + "_numberDlg").find('.e-numerictextbox').ejNumericTextbox("destroy");
                });
            }
            if (this._$onresize)
                $(window).unbind("resize", this._$onresize);
            this.element.empty().removeClass("e-grid " + this.model.cssClass);
            this.element.ejWaitingPopup("destroy");
            if (this.model.contextMenuSettings.enableContextMenu) {
                $("#" + this._id + "_Context").ejMenu('destroy');
                $("#" + this._id + "_Context").remove();
            }
        },
        _getLocalizedLabels: function (property) {
            return (ej.Grid.locale[this.model.locale] === undefined || ej.Grid.locale[this.model.locale][property] === undefined) ? ej.Grid.locale["en-US"][property] : ej.Grid.locale[this.model.locale][property];
        },
    });
    if (ej.gridFeatures.common)
        $.extend(ej.Grid.prototype, ej.gridFeatures.common);
    if (ej.gridFeatures.edit)
        $.extend(ej.Grid.prototype, ej.gridFeatures.edit);
    if (ej.gridFeatures.filter)
        $.extend(ej.Grid.prototype, ej.gridFeatures.filter);
    if (ej.gridFeatures.group)
        $.extend(ej.Grid.prototype, ej.gridFeatures.group);
    if (ej.gridFeatures.selection)
        $.extend(ej.Grid.prototype, ej.gridFeatures.selection);
    if (ej.gridFeatures.sort)
        $.extend(ej.Grid.prototype, ej.gridFeatures.sort);
    if (ej.gridFeatures.dragAndDrop)
        $.extend(ej.Grid.prototype, ej.gridFeatures.dragAndDrop);

    ej.Grid.locale = {};

    ej.Grid.locale["en-US"] = {
        EmptyRecord: "No records to display",
        GroupDropArea: "Drag a column header here to group its column",
        DeleteOperationAlert: "No records selected for delete operation",
        EditOperationAlert: "No records selected for edit operation",
        SaveButton: "Save",
        OkButton: "OK",
        CancelButton: "Cancel",
        EditFormTitle: "Details of ",
        AddFormTitle: "Add New Record",
        Notactionkeyalert: "This Key-Combination is not available",
        Keyconfigalerttext: "This Key-Combination has already been assigned to ",
        GroupCaptionFormat: "{{:headerText}}: {{:key}} - {{:count}} {{if count == 1 }} item {{else}} items {{/if}} ",
        BatchSaveConfirm: "Are you sure you want to save changes?",
        BatchSaveLostChanges: "Unsaved changes will be lost. Are you sure you want to continue?",
        ConfirmDelete: "Are you sure you want to Delete Record?",
        CancelEdit: "Are you sure you want to Cancel the changes?",
        PagerInfo: "{0} of {1} pages ({2} items)",
        FrozenColumnsViewAlert: "Frozen columns should be in grid view area",
        FrozenColumnsScrollAlert: "Enable allowScrolling while using frozen Columns",
        FrozenNotSupportedException: "Frozen Columns and Rows are not supported for Grouping, Row Template, Detail Template, Hierarchy Grid and Batch Editing",
        Add: "Add",
        Edit: "Edit",
        Delete: "Delete",
        Update: "Update",
        Cancel: "Cancel",
        Done: "Done",
        Columns: "Columns",
        SelectAll: "(Select All)",
        PrintGrid: "Print",
        ExcelExport: "Excel Export",
        WordExport: "Word Export",
        PdfExport: "PDF Export",
        StringMenuOptions: [{ text: "StartsWith", value: "StartsWith" }, { text: "EndsWith", value: "EndsWith" }, { text: "Contains", value: "Contains" }, { text: "Equal", value: "Equal" }, { text: "NotEqual", value: "NotEqual" }],
        NumberMenuOptions: [{ text: "LessThan", value: "LessThan" }, { text: "GreaterThan", value: "GreaterThan" }, { text: "LessThanOrEqual", value: "LessThanOrEqual" }, { text: "GreaterThanOrEqual", value: "GreaterThanOrEqual" }, { text: "Equal", value: "Equal" }, { text: "NotEqual", value: "NotEqual" }],
        PredicateAnd: "AND",
        PredicateOr: "OR",
        Filter: "Filter",
        FilterMenuCaption: "Filter Value",
        FilterbarTitle: "'s filterbar cell",
        MatchCase: "Match Case",
        Clear: "Clear",
        ResponsiveFilter: "Filter",
        ResponsiveSorting: "Sort",
        Search: "Search",
        DatePickerWaterMark: "Select date",
        EmptyDataSource: "DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid",
        True: "true",
        False: "false",
        UnGroup: "Click here to ungroup",
        AddRecord: "Add Record",
        EditRecord: "Edit Record",
        DeleteRecord: "Delete Record",
        Save: "Save",
        Grouping: "Grouping",
        Ungrouping: "Ungrouping",
        SortInAscendingOrder: "Sort In Ascending Order",
        SortInDescendingOrder: "Sort In Descending Order",
        NextPage: "Next Page",
        PreviousPage: "Previous Page",
        FirstPage: "First Page",
        LastPage: "Last Page"
    };
    ej.Grid.Actions = {
        /** Used to specify paging action in grid   */
        Paging: "paging",
        /** Used to specify sorting action in grid   */
        Sorting: "sorting",
        /** Used to specify filtering action in grid   */
        Filtering: "filtering",
        /** Used to specify begin edit action in grid   */
        BeginEdit: "beginedit",
        /** Used to specify saving action in grid   */
        Save: "save",
        /** Used to specify adding action in grid   */
        Add: "add",
        /** Used to specify deleting action in grid   */
        Delete: "delete",
        /** Used to specify cancelling action in grid   */
        Cancel: "cancel",
        /** Used to specify grouping action in grid   */
        Grouping: "grouping",
        /** Used to specify un-grouping action in grid   */
        Ungrouping: "ungrouping",
        /** Used to specify refresh action in grid   */
        Refresh: "refresh",
        /** Used to specify reordering action in grid   */
        Reorder: "reorder",
        /** Used to specify searching action in grid   */
        Search: "searching",
        /** Used to specify batch save action in grid   */
        BatchSave: "batchsave",
        /** Used to specify virtual scroll action in grid   */
        VirtualScroll: "virtualscroll"
    };

    ej.Grid.SummaryType = {
        /**  Creates grid with summary type as Average */
        Average: "average",
        /**  Creates grid with summary type as Minimum */
        Minimum: "minimum",
        /**  Creates grid with summary type as Maximum */
        Maximum: "maximum",
        /**  Creates grid with summary type as Count */
        Count: "count",
        /**  Creates grid with summary type as Sum */
        Sum: "sum",
        /**  Creates grid with summary type as TrueCount */
        TrueCount: "truecount",
        /**  Creates grid with summary type as FalseCount */
        FalseCount: "falsecount",
        /**  Creates grid with summary type as Custom */
        Custom: "custom"
    };

    ej.Grid.EditMode = {
        /**  Creates grid with editMode as Normal */
        Normal: "normal",
        /**  Creates grid with editMode as Dialog */
        Dialog: "dialog",
        /**  Creates grid with editMode as DialogTemplate */
        DialogTemplate: "dialogtemplate",
        /**  Creates grid with editMode as Batch */
        Batch: "batch",
        /**  Creates grid with editMode as ExternalForm */
        ExternalForm: "externalform",
        /**  Creates grid with editMode as ExternalFormTemplate */
        ExternalFormTemplate: "externalformtemplate",
        /**  Creates grid with editMode as InlineForm */
        InlineForm: "inlineform",
        /**  Creates grid with editMode as InlineTemplateForm */
        InlineTemplateForm: "inlineformtemplate"
    };

    ej.Grid.PrintMode = {
        /**  print all pages in grid */
        AllPages: "allpages",
        /**   print current pages in grid */
        CurrentPage: "currentpage",
    };

    ej.Grid.Rowposition = {
        /** Add new row in the top of the grid */
        Top: "top",
        /** Add new row in the bottom of the grid */
        Bottom: "bottom",
    };

    ej.Grid.FormPosition = {
        /**  Creates grid with formPosition as BottomLeft */
        BottomLeft: "bottomleft",
        /**  Creates grid with formPosition as TopRight */
        TopRight: "topright"
    };

    ej.Grid.ClipMode = {
        /** Render an ellipsis ("...") to represent clipped text **/
        Ellipsis: "ellipsis",
        /** Clips the text **/
        Clip: "clip",
        /** Render an ellipsis ("...") to represent clipped text and tooltip would be shown **/
        EllipsisWithTooltip: "ellipsiswithtooltip"
    };

    ej.Grid.EditingType = {
        /**  Allows to set edit type as string edit type */
        String: "stringedit",
        /**  Allows to set edit type as boolean edit type */
        Boolean: "booleanedit",
        /**  Allows to set edit type as numeric edit type */
        Numeric: "numericedit",
        /**  Allows to set edit type as drop down edit type */
        Dropdown: "dropdownedit",
        /**  Allows to set edit type as date picker edit type */
        DatePicker: "datepicker",
        /**  Allows to set edit type as date time picker edit type */
        DateTimePicker: "datetimepicker",
    };

    ej.Grid.UnboundType = {
        /** Used to specify unbound type as Edit   */
        Edit: "edit",
        /** Used to specify unbound type as Save   */
        Save: "save",
        /** Used to specify unbound type as Delete   */
        Delete: "delete",
        /** Used to specify unbound type as Cancel   */
        Cancel: "cancel"
    };

    ej.Grid.ToolBarItems = {
        /** Used to add toolbar item for adding records    */
        Add: "add",
        /** Used to add toolbar item for editing records    */
        Edit: "edit",
        /** Used to add toolbar item for deleting records    */
        Delete: "delete",
        /** Used to add toolbar item for updating records    */
        Update: "update",
        /** Used to add toolbar item for cancelling records    */
        Cancel: "cancel",
        /** Used to add toolbar item for searching records    */
        Search: "search",
        /** Used to add toolbar item for printing grid    */
        PrintGrid: "printGrid",
        /** Used to add toolbar item for exproting grid to excel    */
        ExcelExport: "excelExport",
        /** Used to add toolbar item for exporting grid to word    */
        WordExport: "wordExport",
        /** Used to add toolbar item for exporting grid to pdf    */
        PdfExport: "pdfExport"
    };

    ej.Grid.FilterType = {
        /**  Creates grid with filtering type as Menu */
        Menu: "menu",
        /**  Creates grid with filtering type as FilterBar */
        FilterBar: "filterbar",
        /** Creates grid with filtering type as Excel */
        Excel: "excel"
    };

    ej.Grid.FilterBarMode = {
        /** Used to set filter bar mode as Immediate mode */
        Immediate: "immediate",
        /** Used to set filter bar mode as OnEnter mode */
        OnEnter: "onenter"
    };

    ej.Grid.SelectionType = {
        /**  Support for Single selection only in grid */
        Single: "single",
        /**  Support for multiple selections in grid */
        Multiple: "multiple"
    };
    ej.Grid.ColumnLayout = {
         /**  Support for auto width in grid */
        Auto: "auto",
        /**  Support for fixed column width in grid */
        Fixed: "fixed"
    };
    ej.Grid.GridLines = {
        /**  Support for Show both the vertical and horizontal line in grid  */
        Both: "both",
        /**  Support for Hide both the vertical and horizontal line in grid  */
        None: "none",
        /**  Support for Shows the horizontal line only in grid */
        Horizontal: "horizontal",
        /**  Support for Shows the vertical line only in grid  */
        Vertical: "vertical",
    };

    ej.Grid.VirtualScrollMode = {
        /** Used to set the Normal mode virtual paging*/
        Normal: "normal",
        /** Used to set the Continuous mode virtual paging*/
        Continuous: "continuous"
    };

    ej.Grid.SelectionMode = {
        /**  Support for Row selection in grid */
        Row: "row",
        /**  Support for Cell selection in grid */
        Cell: "cell",
        /**  Support for Column selection in grid */
        Column: "column"
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.gridResize = function (instance) {
        this.$headerTable = instance.getHeaderTable();
        this.gridInstance = instance;
        this._colMinWidth = 15;
        this._$visualElement = $();
        this._currentCell = -1;
        this._allowStart = false;
        this._oldWidth = null;
        this._orgX = null;
        this._orgY = null;
        this._extra = null;
        this._expand = false;
        this._target = null;
        this._cellIndex = -1;
    }

    ej.gridFeatures.gridResize.prototype = {
        _mouseHover: function (e) {
            if (this._$visualElement.is(":visible"))
                return;
            this._allowStart = false;
            if ($(e.target).is(".e-headercelldiv"))
                e.target = e.target.parentNode;
            var $target = $(e.target);
			if ($(e.target).hasClass("e-filtericon") && ($(e.target).css("cursor") == "col-resize" || $(e.target).closest("tr").css("cursor") == "col-resize")) {
                $(e.target).css("cursor", "pointer");
                $(e.target).closest("tr").css("cursor", "pointer");
            }
            if ($target.hasClass("e-headercell")) {
                var _resizableCell = e.target;
                var location = _resizableCell.getBoundingClientRect(), _x = 0, _y = 0;
                if (e.type = "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }
                else if (e.type = "touchmove") {
                    _x = evt.originalEvent.changedTouches[0].clientX;
                    _y = evt.originalEvent.changedTouches[0].clientY;
                }
                else if (e.type = "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                    var _nlx = this.gridInstance.getHeaderContent().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                else
                    var _nlx = this.gridInstance.getHeaderTable().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                if (((_x >= (location.left + document.documentElement.scrollLeft + _resizableCell.offsetWidth - 5)) || ((_x <= (location.left + 3)))) && (_x < _nlx) && (_x >= location.left) && (_y <= location.top + document.documentElement.scrollTop + e.target.offsetHeight)) {
                    if (_x > location.left + 3)
                        var tempTarget = $(e.target).find(".e-headercelldiv");
                    else
                        var tempTarget = $(e.target).prevAll("th:visible:first").find(".e-headercelldiv");
                    this.gridInstance.model.showStackedHeader && $.inArray($(tempTarget).attr("ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1 && $($target.parents('thead')).find('tr').css("cursor", "col-resize");
                    !this.gridInstance.model.showStackedHeader && $.inArray($(tempTarget).attr("ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1 && $target.parent().css("cursor", "col-resize");
                    if ($(e.target).hasClass('e-stackedHeaderCell'))
                        this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").index(_resizableCell);
                    else
                        this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").not(".e-stackedHeaderCell").index(_resizableCell);
                    this._allowStart = true;
                }
                else {
                    $target.parent().css("cursor", "pointer");
                    this._currentCell = -1;
                }
            }
        },
        _start: function (_x, _y) {
            var _myrow = this.gridInstance.getHeaderTable().find(".e-columnheader"), _top;
            var _cells, _mycel;
            if ($(this._target).hasClass('e-stackedHeaderCell'))
                _cells = _myrow.find(".e-headercell").not(".e-hide");
            else
                _cells = _myrow.find(".e-headercell").not(".e-stackedHeaderCell,.e-hide");
            if (this._currentCell != -1 && this._currentCell < _cells.length)
                _mycel = _cells[this._currentCell];
            if (typeof (_mycel) == 'undefined')
                return;
            var _j = _mycel.getBoundingClientRect();
            _top = this._tableY = _j.top + parseInt(navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollTop : document.documentElement.scrollTop);
            if (this._allowStart) {
                var vElement = this._$visualElement = $(document.createElement('div'));
                _height = this.gridInstance.element.find(".e-gridcontent").first().height() + this.gridInstance.element.find(".e-gridheader").height();
                if (this.gridInstance.model.showStackedHeader && this.gridInstance.model.stackedHeaderRows.length > 0) {
                    var headerRow = this.gridInstance.getHeaderTable().find('tr.e-columnheader')
                    var lenght = headerRow.length;
                    var currentIndex = $(this._target).parent('tr')[0].rowIndex;
                    for (var i = 0; i < currentIndex; i++) {
                        _height = _height - $(headerRow[i]).height();
                    }
                    // _height = _height - $(".e-stackedHeaderRow").height();
                }
                vElement.addClass("e-reSizeColbg").appendTo(this.gridInstance.element).attr("unselectable", "on").css("visibility", "hidden");
                this.gridInstance._resizeTimeOut = setTimeout(function() {
                    vElement.css({ visibility: "visible", height: _height + 'px', cursor: 'col-resize', left: _x, top: _top, position: 'fixed' });
                }, 100);
                this._oldWidth = _mycel.offsetWidth;
                this._orgX = _x;
                this._orgY = _y;
                this._extra = _x - this._orgX;
                this._expand = true;
            }
            else {
                this._currentCell = -1;
            }
        },
        _mouseMove: function (e) {
            if (this._expand) {
                var _x = 0, _y = 0;
                if (e.type = "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }
                else if (e.type = "touchmove") {
                    _x = evt.originalEvent.changedTouches[0].clientX;
                    _y = evt.originalEvent.changedTouches[0].clientY;
                }
                else if (e.type = "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                _x += document.documentElement.scrollLeft;
                e.preventDefault();
                this._moveVisual(_x);
            }
            else
                this._mouseHover(e);
        },
        _getCellIndex: function (e) {
            var $target = $(e._target);
            var targetCell = e._target;
            var location = targetCell.getBoundingClientRect();
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            if (this._orgX < location.left + 5 + scrollLeft)
                targetCell = $(targetCell).prevAll(":visible:first")[0];
            var hCellIndex = targetCell.cellIndex;
            var cellIndex = hCellIndex;
            if (e.gridInstance.model.groupSettings.groupedColumns.length) {
                cellIndex = hCellIndex - e.gridInstance.model.groupSettings.groupedColumns.length;
            }
            return cellIndex;
        },
        _reSize: function (_x, _y) {
            // Function used for Resizing the column
            var proxy = this;
            var resized = false, $content;
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                this._initialTableWidth = this.gridInstance.getHeaderTable().first().parent().width() + this.gridInstance.getHeaderTable().last().parent().width();
            else
                this._initialTableWidth = this.gridInstance.getHeaderTable().parent().width();
            !this.gridInstance.model.enableRTL && this._getResizableCell();
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0)
                var _rowobj = this.gridInstance.getHeaderTable().find('thead');
            else
                var _rowobj = $(this._target).parents('thead');
            if (this._currentCell != -1 && this._expand) {
                this._expand = false;
                var _childTH = _rowobj.find(".e-headercell:not(.e-detailheadercell)").filter(":visible");
                var _outerCell = _childTH[this._currentCell];
                var _oldWidth = _outerCell.offsetWidth;
                var _extra = _x - this._orgX;
                //Check whether the column minimum width reached
                if (parseInt(_extra) + parseInt(_oldWidth) > this._colMinWidth) {
                    if (_extra != 0)
                        _rowobj.css("cursor", 'default');
                    this._resizeColumnUsingDiff(_oldWidth, _extra);
                    $content = this.gridInstance.element.find(".e-gridcontent").first();
                    var scrollContent = $content.find("div").hasClass("e-content");
                    this.gridInstance.model.allowScrolling && $content.ejScroller("refresh");                    
                    var browser = this.gridInstance.getBrowserDetails();
                    if (browser.browser == "msie" && this.gridInstance.model.allowScrolling) {
                        var oldWidth = this.gridInstance.getContentTable().width(), newwidth = this.gridInstance._calculateWidth();
                        if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0) {
                            this.gridInstance.getHeaderTable().last().width(newwidth - this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width());
                            this.gridInstance.getContentTable().last().width(newwidth - this.gridInstance.getContent().find(".e-frozencontentdiv").width());
                            this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().last().width(newwidth - this.gridInstance.getFooterContent().find(".e-frozenfootertdiv").width());
                        }
                        else {
                            if (newwidth > oldWidth) {
                                this.gridInstance.getHeaderTable().width(newwidth);
                                this.gridInstance.getContentTable().width(newwidth);
                                this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().width(newwidth);
                            }
                        }
                        if (parseInt(browser.version, 10) > 8 && this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                            if (newwidth > oldWidth) {
                                this.gridInstance.getContentTable().width(newwidth);
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", (20 / $content.find("table").first().width()) * 100 + "%");
                            }
                            else {
                                this.gridInstance.getContentTable().css("width", "100%");
                                this.gridInstance._groupingAction(true);
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", ((this.gridInstance.getHeaderTable().find("colgroup").find("col").first().width() / $content.find("table").first().width()) * 100).toFixed(2) + "%");
                            }
                        }
                        this.gridInstance.getHeaderTable().parent().scrollLeft($content.find(".e-content").scrollLeft() - 1);
                    }
                    this.gridInstance._colgroupRefresh();
                    if (this.gridInstance.model.groupSettings.groupedColumns.length)
                        this.gridInstance._recalculateIndentWidth();
                    if (!(browser.browser == "msie") && this.gridInstance.model.allowScrolling && this.gridInstance.model.scrollSettings.frozenColumns == 0) {
                        this.gridInstance.getHeaderTable().width("100%");
                        this.gridInstance.getContentTable().width("100%");
                        var tableWidth = this.gridInstance._calculateWidth();
                        if (tableWidth <= this.gridInstance.getContentTable().width() || this.gridInstance.getHeaderTable().width() > this.gridInstance.getContentTable().width()) {
                            this.gridInstance.getHeaderTable().width(tableWidth);
                            this.gridInstance.getContentTable().width(tableWidth);
                        }
                    }
                    if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'default') {
                        var cellIndex = this._cellIndex;
                        var target = $(this._target), columnIndex = [], col = [];
                        var newWidth = _oldWidth + _extra;
                        var args = {};
                        if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                            var rowindex = target.parent(".e-stackedHeaderRow").index();
                            var stackedHeaderCell = target.parent(".e-stackedHeaderRow").children()[this._cellIndex].cellIndex;
                            var stackedHeaderColumns = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns[stackedHeaderCell].column;
                            var columns = stackedHeaderColumns;
                            if (!(stackedHeaderColumns instanceof Array))
                                columns = stackedHeaderColumns.split(",");
                            for (var i = 0 ; i < columns.length; i++) {
                                var index = this.gridInstance.getColumnIndexByField(columns[i]);
                                columnIndex.push(index)
                                col.push(this.gridInstance.model.columns[index]);
                            }
                            args = { columnIndex: columnIndex, column: col, oldWidth: _oldWidth, newWidth: newWidth };
                        }
                        else
                        args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], oldWidth: _oldWidth, newWidth: newWidth };
                        this.gridInstance._trigger("resized", args);
                    }
                    if (this.gridInstance.model.allowScrolling) {
                        $content.ejScroller("refresh");
                        if (!scrollContent && $content.find("div").hasClass("e-content"))
                            this.gridInstance.refreshScrollerEvent();
                        this.gridInstance._isHscrollcss();
                    }
                }

            }

            this._target = null;
            this._$visualElement.remove();
            this._expand = false;
            this._currentCell = -1;
            this._allowStart = false;

        },
        _getFrozenResizeWidth: function () {
            var $frozenColumnsCol = this.gridInstance.getHeaderTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumn : 0), width = 0;
            for (var i = 0; i < $frozenColumnsCol.length; i++) {
                if ($frozenColumnsCol.eq(i).css("display") != "none")
                    width += parseInt($frozenColumnsCol[i].style.width.replace("px", ""));
            }
            return width;
        },
        _diaplayFinder: function () {
            return $(this).css('display') != 'none';
        },
        _resizeColumnUsingDiff: function (_oldWidth, _extra) {
            var proxy = this, _extraVal;			
            this._currntCe = this._currentCell;
            if (this.gridInstance.model.showStackedHeader && !$(this._target).parent('tr').hasClass('e-stackedHeaderRow'))
                this._currentCell = this._currentCell - this.gridInstance.getHeaderTable().find(".e-stackedHeaderCell").length;
            var $headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
            var $ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
            if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                this.gridInstance._detailColsRefresh();
                $headerCols = this.gridInstance._$headerCols;
                $ContentCols = this.gridInstance._$contentCols;
            }
            var $headerCol = $headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                    , $ContentCol, $footerCol, $frozenCols = $headerCols.slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0);
            var colWidth = $headerCol[0].style.width, isPercent = colWidth.indexOf("%") != -1;
            var _inlineWidth = (!colWidth || isPercent)? $(this._target).outerWidth() : colWidth;
            var indent = !isPercent ? _oldWidth / parseInt(_inlineWidth) : 1;
            _extraVal = _extra = _extra / indent
            var _newWidth = parseInt(_extra) + parseInt(_inlineWidth);
            if (_newWidth > 0 && _extra != 0) {
                if (_newWidth < this._colMinWidth)
                    _newWidth = this._colMinWidth;
                var _extra = _newWidth - _oldWidth;
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                    if (this._currentCell >= 0 && this._currentCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
                        return;
                    $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(this._currentCell);
                }
                else
                    $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length);
                if (this.gridInstance.model.showSummary) {
                    $footerCol = this.gridInstance.getFooterTable().find('colgroup').find("col").filter(this._diaplayFinder).eq(this._currentCell);
                    $footerCol.outerWidth(_newWidth);
                }
                if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    this._resizeStackedHeaderColumn($(this._target).parent('tr'), _extraVal, this._currntCe);
                }
                else
                    $headerCol.outerWidth(_newWidth);
                if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var $colGroup = $tables.find("colgroup");
                        for (var i = 0; i < this._changedcell.length; i++) {
                            var cellIndex = this._changedcell[i];
                            for (var j = 0 ; j < $colGroup.length; j++) {
                                var visibleCols = $($colGroup[j]).children().filter(this._diaplayFinder);
                                var width = parseInt((_extraVal)) + parseInt(visibleCols[cellIndex].style.width);
                                if (width < this._colMinWidth)
                                    width = this._colMinWidth
                                $(visibleCols[cellIndex]).width(width);
                            }
                        }
                    }
                    var length = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder).length;
                    for (var i = 0; i < this._changedcell.length; i++) {
                        var $conCol = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder)[this._changedcell[i]]
                        var width = parseInt((_extraVal)) + parseInt($conCol.style.width);
                        if (width < this._colMinWidth)
                            width = this._colMinWidth
                        $($conCol).outerWidth(width);
                        if (this.gridInstance.model.isEdit && (this.gridInstance.model.allowGrouping && this.gridInstance.model.groupSettings.groupedColumns.length == 0)) {
                            $sEditCol = this.gridInstance.getContentTable().find(".gridform").find("colgroup col").filter(this._diaplayFinder)[this._changedcell[i]];
                            $($sEditCol).outerWidth(width);
                        }
                    }
                }
                else {
                    if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var $colGroup = $tables.find("colgroup");
                        var cellIndex = this._currentCell;
                        var colCount = this.gridInstance.getVisibleColumnNames().length;
                        for (var i = 0 ; i < $colGroup.length; i++) {
                            var cols = $($colGroup[i]).find("col").filter(this._diaplayFinder);
                            if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
                            $(cols[cellIndex]).width(_newWidth);
                        }
                    }
                    $ContentCol.outerWidth(_newWidth);
                    if (this.gridInstance.model.isEdit) {
                        var $editableRow = this.gridInstance.getContentTable().find(".e-editedrow,.e-addedrow");
                        var $editCols = $editableRow.find("table").find("colgroup col");
                        var addCol;
                        if ($editableRow.hasClass("e-addedrow") && this.gridInstance.model.groupSettings.groupedColumns.length)
                            addCol = this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length - 1;
                        else
                            addCol = this._currentCell;
                        var $editCol = $editCols.filter(this._diaplayFinder).eq(addCol);
                        $editCol.outerWidth(_newWidth);
                    }
                }
                this.gridInstance._findColumnsWidth();
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                    var frozenColumns = this.gridInstance.getContentTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings.frozenColumns)
                        , width = 0, direction;
                    for (i = 0; i < frozenColumns.length; i++)
                        width += parseInt(frozenColumns[i].style.width.replace("px", ""));
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width);
                    direction = this.gridInstance.model.enableRTL ? "margin-right" : "margin-left";
                    this.gridInstance.getContent().find(".e-frozencontentdiv").width(width).next().css(direction, width + "px");
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width).next().css(direction, width + "px");
                    this.gridInstance.model.showSummary && this.gridInstance.getFooterContent().find(".e-frozenfooterdiv").width(width);
                }
                this.gridInstance.getHeaderTable().find(".e-columnheader").css("cursor", "default");
            }
        },
        _resizeStackedHeaderColumn: function (currentTr, extra, currentCell) {
            // var currentIndex = this._currntCe;
            this._changedcell = [];
            var headerCells = this.gridInstance.getHeaderContent().find(".e-headercell");
            var preCol = 0, limit = 0, currentTh = headerCells[currentCell], currentSpan = $(currentTh).attr('colspan'), commonExtra = extra / currentSpan, tr = $(currentTh).parent('tr');
            var nextTr = tr.next();
            var currentIndex = currentTh.cellIndex;
            if (this.gridInstance.model.groupSettings.showGroupedColumn) {
                limit = this.gridInstance.model.groupSettings.groupedColumns.length;
                preCol += limit
            }
            while (currentIndex > limit) {
                currentIndex--;
                var th = $(tr).children('th')[currentIndex];
                preCol += parseInt($(th).attr('colspan'));
            }
            this._currentCell = preCol;
            var length = preCol + parseInt(currentSpan);
            for (var i = preCol; i < length; i++) {
                var $colG = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder)[i];
                this._changedcell.push(i - limit)
                var width = parseInt(extra) + parseInt($colG.style.width);
                if (width < this._colMinWidth)
                    width = this._colMinWidth;
                $($colG).outerWidth(width);
             }
        },
        _triggerResizeEvents: function (event, _x) {
            var _rowobj = this.gridInstance.getHeaderTable().find(".e-columnheader");
            var _childTH = _rowobj.find(".e-headercell").filter(":visible");
            var cellIndex = this._cellIndex;
            var target = $(this._target), columnIndex = []; col = [];
            if (event == "resizeStart") {
                this._orgX = _x;
                cellIndex = this._cellIndex = this._getCellIndex(this, _x);
            }
            var _outerCell = _childTH[this._currentCell];
            var _oldWidth = _outerCell.offsetWidth;
            if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                var rowindex = target.parent(".e-stackedHeaderRow").index();
                var stackedHeaderCell = target.parent(".e-stackedHeaderRow").children()[this._cellIndex].cellIndex;
                var stackedHeaderColumns = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns[stackedHeaderCell].column;
                var columns = stackedHeaderColumns;
                if (!(stackedHeaderColumns instanceof Array))
                    columns = stackedHeaderColumns.split(",");
                for (var i = 0 ; i < columns.length; i++) {
                    var index = this.gridInstance.getColumnIndexByField(columns[i]);
                    columnIndex.push(index)
                    col.push(this.gridInstance.model.columns[index]);
                }
            }
            if (event == "resizeStart") {
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: target, oldWidth: _oldWidth };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth };
                return this.gridInstance._trigger("resizeStart", args);
            }
            else {
                var _childth = _rowobj.find(".e-headercell").not(".e-detailheadercell").filter(":visible");
                var _extra = _x - this._orgX;
                var newWidth = _oldWidth + _extra;
                this.gridInstance._colgroupRefresh();
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: $(_outerCell), oldWidth: _oldWidth, newWidth: newWidth, extra: _extra };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth, newWidth: newWidth, extra: _extra };
                return this.gridInstance._trigger("resizeEnd", args);
            }
        },
        _mouseUp: function (e) {
            if (this.gridInstance._resizeTimeOut){
                clearTimeout(this.gridInstance._resizeTimeOut);
                this.gridInstance._resizeTimeOut = 0;
            }
            if (this._expand) {
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'col-resize') {
                    if (this._triggerResizeEvents("resizeEnd", _x)) {
                        this.gridInstance.element.find(".e-reSizeColbg").remove();
                        return;
                    }
                }
                _x += document.documentElement.scrollLeft;
                this._reSize(_x, _y);
                var index = this.gridInstance.model.showStackedHeader ? this._currntCe - this.gridInstance.getHeaderTable().find(".e-stackedHeaderCell").length : this._currntCe;
                if (index >= 0)
                if (!ej.isNullOrUndefined(index))
                    this.gridInstance.model.columns[index].width = this.gridInstance.columnsWidthCollection[index];
            }
            setTimeout(function(){
                $(document).off("selectstart.ejgrid");
            }, 10);
        },
        _getResizableCell: function () {
            var row = this.gridInstance.getHeaderTable().find(".e-columnheader");
            var cell = row.find(".e-headercell").not(".e-hide,.e-detailheadercell");
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            for (var i = 0; i < cell.length; i++) {
                point = cell[i].getBoundingClientRect();
                var xlimit = point.left + scrollLeft + 5;
                if (xlimit > this._orgX && $(cell[i]).height() + point.top >= this._orgY) {
                    this._currentCell = i - 1;
                    return;
                }
                if (i == cell.length - 1 || (this.gridInstance.model.showStackedHeader && $(this._target).get(0) === cell[i])) {
                    this._currentCell = i;
                    return;
                }
            }
        },
        _moveVisual: function (_x) {
            /// Used to move the visual element in mouse move
            var _bounds = this.gridInstance.getHeaderContent().find("div").first()[0].getBoundingClientRect();
            if ((_bounds.left + document.documentElement.scrollLeft + _bounds.width < _x) || (_x < _bounds.left + document.documentElement.scrollLeft))
                this._$visualElement.remove();
            else if (this._currentCell != -1)
                this._$visualElement.css({ left: _x, top: this._tableY });
        },
        _mouseDown: function (e) {
            if (this._allowStart && ($(e.target).closest("tr").css("cursor") == 'col-resize')) {
                this._target = e.target;
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY - document.body.scrollTop;
                }
                if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'col-resize') {
                    if ($(e.target).is(".e-headercelldiv"))
                        e.target = e.target.parentNode;
                    this._target = e.target;
                    if (this._triggerResizeEvents("resizeStart", _x))
                        return;
                }
                var gridobj = this;
                _x += document.documentElement.scrollLeft;
                if (e.button != 2)
                    this._start(_x, _y);
                $(document).on("selectstart.ejgrid", function(){return false});
            }
            return false;
        },
        _columnResizeToFit: function (e) {
            var resize = this.gridInstance.getHeaderTable().find(".e-columnheader").filter(function (e) {
                return $(this).css("cursor") == "col-resize";
            });
            if (this.gridInstance.model.allowResizeToFit && resize.length) {
                if ($(e.target).is(".e-headercelldiv"))
                    e.target = e.target.parentNode;
                var $target = $(e.target);
                var headerCells = this.gridInstance.getHeaderContent().find(".e-headercell"), preCol = 0, indent = 0;
                this._target = $target;
                if ($target.hasClass("e-headercell")) {
                    var targetCell = e.target;
                    var hCellIndex = $.inArray(targetCell, headerCells);
                    var cellIndex = hCellIndex;
                    this._orgX = e.pageX;
                    if(!this.gridInstance.model.enableRTL) 
						this._getResizableCell();
					else
						this._currentCell = hCellIndex;
                    if (hCellIndex != this._currentCell) {
                        hCellIndex = cellIndex = this._currentCell;
                        targetCell = e.target.previousSibling;
                    }
                    var currentTh = headerCells.filter(":visible")[cellIndex], changesCellIndex = [], changesFinalWdith = [], changesOldWidth = [];
                    if (this.gridInstance.model.groupSettings.showGroupedColumn)
                        indent = this.gridInstance.model.groupSettings.groupedColumns.length;
                    if ($(targetCell).parent("tr").hasClass('e-stackedHeaderRow')) {
                        currentSpan = $(currentTh).attr('colspan'), tr = $(currentTh).parent('tr'), tHeadIndex = currentTh.cellIndex;
                        var nextTr = tr.next();
                        while (tHeadIndex > indent) {
                            tHeadIndex--
                            var th = $(tr).children('th')[tHeadIndex];
                            preCol += parseInt($(th).attr('colspan'))
                        };
                        var length = preCol + parseInt(currentSpan);
                    }
                    else {
                        if (this.gridInstance.model.showStackedHeader)
                            cellIndex = hCellIndex = cellIndex - this.gridInstance.getHeaderTable().find(".e-stackedHeaderCell").length;
                        preCol = cellIndex; length = cellIndex + 1;
                    }
                    var finalWidth = 0, headerWidth = 0, contentWidth = 0, argCols = [], argExtra = [];
                    if (preCol != -1) {
                        var hiddenLen = headerCells.slice(0, preCol + 1).filter(".e-hide").length;
                        var args = { columnIndex: preCol + hiddenLen, column: this.gridInstance.model.columns[preCol + hiddenLen], target: $target, oldWidth: oldWidth };
                        this.gridInstance._trigger("resizeStart", args);
                        for (var i = preCol; i < length; i++) {
                            hiddenLen = headerCells.slice(0, i + 1).filter(".e-hide").length;
                            contentWidth = this._getContentWidth(i + hiddenLen);
                            $cellDiv = this.gridInstance.getHeaderTable().find('.e-headercell:not(.e-hide, .e-stackedHeaderCell)').children(".e-headercelldiv").eq(i);
                            headerWidth = this._getHeaderContentWidth($cellDiv);
                            finalWidth = headerWidth > contentWidth ? headerWidth : contentWidth;
                            finalWidth += parseInt($cellDiv.css("padding-left"), 10);
                            var oldWidth = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder).eq(i + indent).width();
                            finalWidth = oldWidth > finalWidth ? finalWidth : (this._colMinWidth < finalWidth ? finalWidth : this._colMinWidth);

                            this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder).eq(i + indent).width(finalWidth);
                            if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                                var $colGroups = this.gridInstance.getContentTable().find('.e-recordtable').find('colgroup');
                                var proxy = this;
                                $.each($colGroups, function (indx, colgroup) {
                                    $(colgroup).find('col').filter(proxy._diaplayFinder).eq(i).width(finalWidth);
                                });
                            }
                            this.gridInstance.getContentTable().find('col').filter(this._diaplayFinder).eq(i + indent).width(finalWidth);
                            argCols.push(this.gridInstance.model.columns[i + hiddenLen]);
                            argExtra.push(Math.abs(finalWidth - oldWidth))
                            changesCellIndex.push(i + hiddenLen); changesFinalWdith.push(finalWidth); changesOldWidth.push(oldWidth);
                            if (this.gridInstance.model.scrollSettings.frozenColumns>0)
                                this.gridInstance.setWidthToColumns();
                        }

                    }
                    this.gridInstance._colgroupRefresh();
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resizeEnd", args);
                    for (var i = 0; i < changesCellIndex.length; i++) {
                        this.gridInstance.columnsWidthCollection[changesCellIndex[i]] = changesFinalWdith[i];
                        this.gridInstance.model.columns[changesCellIndex[i]]["width"] = changesFinalWdith[i];
                    }
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resized", args);
                }
            }
        },
        _getContentWidth: function (cellindx) {
            var contentWidth = 0;
            var $span = ej.buildTag('span', {}, {}), proxy = this.gridInstance, tdWidth;
            if (!ej.isNullOrUndefined(proxy._gridRows)) {
                var rows = proxy._gridRows;
                if (this.gridInstance.model.scrollSettings.frozenColumns && cellindx >= this.gridInstance.model.scrollSettings.frozenColumns) {
                    rows = rows[1];
                    cellindx = cellindx - this.gridInstance.model.scrollSettings.frozenColumns;
                }
                $.each(rows, function (indx, row) {
					var td = $(row).find('td.e-rowcell').eq(cellindx);
					var content = $(td).html();
					if (proxy.model.columns[cellindx]["isUnbound"])
						$span.html($(content).children());
					else
						$span.html(content);
					$(td).html($span);
					tdWidth = td.find('span:first').width();
					if (tdWidth > contentWidth)
						contentWidth = tdWidth;
					$(td).html(content);
				});
			}
            proxy._refreshUnboundTemplate(this.gridInstance.getContentTable());
            return contentWidth;
        },
        _getHeaderContentWidth: function ($cellDiv) {
            var headerWidth = 0, $span = ej.buildTag('span', {}, {});
            var content = $cellDiv.html();
            $span.html(content);
            $cellDiv.html($span);
            headerWidth = $cellDiv.find('span:first').width();
            if (this.gridInstance.model.allowFiltering && this.gridInstance.model.filterSettings.filterType == "menu" || this.gridInstance.model.filterSettings.filterType == "excel")
                headerWidth = headerWidth + $cellDiv.parent().find(".e-filtericon").width() + 10;
            $cellDiv.html(content);
            return headerWidth;
        },
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html div elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejUploadbox", "ej.Uploadbox", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,

        _rootCSS: "e-uploadbox",

        defaults: {

            buttonText: {

                browse: "Browse",

                upload: "Upload",

                cancel: "Cancel",

                close: "Close",
            },

            width: "100px",

            height: "35px",

            htmlAttributes: {},

            dialogPosition: { X: "", Y: "" },

            dialogText: {

                title: "Upload Box",

                name: "Name",

                size: "Size",

                status: "Status"
            },

            customFileDetails: {

                title: true,

                name: true,

                size: true,

                status: true,

                action: true
            },

            dialogAction: {

                modal: false,

                closeOnComplete: false,

                drag: true,

                content: null

            },

            locale: "en-US",

            asyncUpload: true,

            pushFile: null,

            enabled: true,

            multipleFilesSelection: true,

            autoUpload: false,

            showFileDetails: true,

            fileSize: 31457280,

            extensionsAllow: "",

            extensionsDeny: "",

            saveUrl: "",

            removeUrl: "",

            uploadName: "",

            cssClass: "",

            dropAreaText: "Drop files or click to upload ",

            allowDragAndDrop: false,

            showBrowseButton: true,

            showRoundedCorner: true,

            dropAreaHeight: "100%",

            dropAreaWidth: "100%",

            enableRTL: false,

            create: null,

            fileSelect: null,

            begin: null,

            cancel: null,

            inProgress: null,
            
            success: null,

            complete: null,

            remove: null,

            error: null,

            destroy: null
        },


        dataTypes: {
            buttonText: "data",
            dialogText: "data",
            disbled: "boolean",
            customFileDetails: "data",
            pushFile: "data",
            dialogAction: "data",
            multipleFilesSelection: "boolean",
            autoUpload: "boolean",
            showFileDetails: "boolean",
            allowDragAndDrop: "boolean",
            showBrowseButton: "boolean",
            showRoundedCorner: "boolean",
            fileSize: "number",
            extensionsAllow: "string",
            extensionsDeny: "string",
            saveUrl: "string",
            removeUrl: "string",
            cssClass: "string",
            enableRTL: "boolean",
            htmlAttributes: "data"
        },



        disable: function () {
            this._changeState(false);
        },

        enable: function () {
            this._changeState(true);
        },
		
        _changeState: function (state) {
            state ? $(this.control).removeClass("e-disable") : $(this.control).addClass("e-disable");
            this.model.enabled = state;
            $(this._currentElement).find(".e-uploadinput")[0].disabled = !state;
            if (this.diaObj) {
                this.diaObj.option("beforeClose", this._onBeforeClose);
                this.diaObj.setModel({ enabled: state, allowDraggable: state });
            }
        },

        refresh: function () {
            if (this.diaObj) {
                if (this.diaObj.isOpened())
                    this.diaObj.close();
                else
                    this._uploadFileListDelete();
            }
        },


        _init: function () {
            this.s = ej.browserInfo();
            this._initialize();
            this._wireEvents();
            /*Sync Uploads*/
            if (!this.model.asyncUpload) {
                this._initObjectsSyncUpload();
            }
            this._controlStatus(this.model.enabled);
            this.model.locale == "en-US" ? this._buttonText(this.model.buttonText) : this._setLocale();
            this._roundedCorner(this.model.showRoundedCorner);
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "buttonText":
                        this._buttonText(options[option]);
                        break;
                    case "htmlAttributes":
                        this._addAttr(options[option]);
                        break;
                    case "dialogText":
                        this._dialogText(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "locale":
                        this.model.locale = options[option];
                        this._setLocale();
                        break;
                    case "height":
                        this.model.height = options[option];
                        this._setHeight(this.model.height);
                        break;
                    case "width":
                        this.model.width = options[option];
                        this._setWidth(this.model.width);
                        break;
                    case "dialogPosition":
                        this.model.dialogPosition = options[option];
                        this._dialogPosition();
                        break;
                    case "allowDragAndDrop":
                        this.model.allowDragAndDrop = options[option];
                        this._dragAndDrop();
                        break;
                    case "dropAreaText":
                        this.model.dropAreaText = options[option];
						this._dropAreaText(this.model.dropAreaText);
                        break;
                    case "showBrowseButton":
                        this.model.showBrowseButton = options[option];
                        this._hideBrowseButton();
						this._refreshUploadDialogParent();
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "dropAreaHeight":
                        this.model.dropAreaHeight = options[option];
                        this._setSize();
                        break;
                    case "dropAreaWidth":
                        this.model.dropAreaWidth = options[option];
                        this._setSize();
                        break;
                    case "pushFile":
                        this.model.pushFile = options[option];
                        if (this.model.pushFile != null && this.UploadType == "Xhr" && this.model.asyncUpload) this._files = this.model.pushFile; this._onXhrSelect();
                        break;
                    case "multipleFilesSelection":
                        this.model.multipleFilesSelection = options[option];
                        if (this.model.multipleFilesSelection)
                            this._currentElement.find(".e-uploadinput").attr('multiple', 'multiple');
                        else
                            this._currentElement.find(".e-uploadinput").removeAttr('multiple');
                        break;
                    case "uploadName":
                        this.model.uploadName = options[option];
                        this.inputupload.attr('name', this.model.uploadName);
                        this.refresh();
                        break;
                    case "autoUpload":
                        this.model.autoUpload = options[option];
                        break;
                    case "showFileDetails":
                        this.model.showFileDetails = options[option];
                        this.refresh();
                        break;
                    case "fileSize":
                        this.model.fileSize = options[option];
                        break;
                    case "extensionsAllow":
                        this.model.extensionsAllow = options[option];
						this._currentElement.find(".e-uploadinput").attr('accept', options[option]);
                        break;
                    case "extensionsDeny":
                        this.model.extensionsDeny = options[option];
                        break;
                    case "saveUrl":
                        this.model.saveUrl = options[option];
                        break;
                    case "removeUrl":
                        this.model.removeUrl = options[option];
                        break;
                }
                this._currentElement = this.model.allowDragAndDrop && !this.model.showBrowseButton ? this.dragWrapper : this.element;
            }
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _setRTL: function (val) {
            val ? this._currentElement.addClass("e-rtl") : this._currentElement.removeClass("e-rtl");
            if (this.updialog) this.updialog.ejDialog({ enableRTL: val });
        },
        _getLocalizedLabels: function (property) {
            var textType;
            if (property == "browse" || property == "upload" || property == "cancel" || property == 'close')
                textType = "buttonText";
            else
                textType = "dialogText";
            return (ej.Uploadbox.Locale[this.model.locale] === undefined || ej.Uploadbox.Locale[this.model.locale][property] === undefined) ?
            ej.Uploadbox.Locale[this.model.locale][textType][property] :
            ej.Uploadbox.Locale[this.model.locale][property];
        },

        _setLocale: function () {
            this._buttonText(ej.Uploadbox.Locale[this.model.locale].buttonText);
            this._dialogText(ej.Uploadbox.Locale[this.model.locale].dialogText);
			this._dropAreaText(ej.Uploadbox.Locale[this.model.locale].dropAreaText);
        },

        _buttonText: function (data) {
            $.extend(this.model.buttonText, data);
            this.buttondiv.val(this.model.buttonText.browse);
            if (this.updialog) {
                this.updialog.find(".e-action-container .e-uploadbtn").html(this.model.buttonText.upload);
                this.updialog.find(".e-action-container .e-uploadclosebtn").html(this.model.buttonText.cancel);
            }
        },

        _dialogText: function (data) {
            $.extend(this.model.dialogText, data);
            if (!(this.diaObj == undefined))
                this.diaObj.option('title', this.model.dialogText.title);
            if (this.updialog) {
                this.updialog.find('.e-head-name').html(this.model.dialogText.name);
                this.updialog.find('.e-head-size').html(this.model.dialogText.size);
                this.updialog.find('.e-head-status').html(this.model.dialogText.status);
            }
        },


        _destroy: function () {
            if (this._currentElement.hasClass("e-uploadbox")) {
                this._currentElement.removeClass("e-uploadbox e-widget");
                this._currentElement.empty();
                $(this.dragWrapper).after(this._currentElement);
                this._bindResizeHandler(false);
                this.dragWrapper.remove();
            }
        },

        _setSkin: function (skin) {
            this._currentElement.removeClass(this.model.cssClass);
            this._currentElement.addClass(skin);
			if (this.diaObj)
                this.diaObj.setModel({ cssClass:this.model.cssClass });
        },


        _initialize: function () {
            this.control = this.element[0];
            this.element.addClass("e-widget " + this.model.cssClass);
            this.innerdiv = ej.buildTag('div.e-selectpart e-select e-box');
            this.element.append(this.innerdiv);
            this.buttondiv = ej.buildTag('input.e-inputbtn e-btn#' + this.control.id + '_SelectButton', '', {}, { type: 'button', "data-role": "none", value: this._getLocalizedLabels("browse") });
            this.inputupload = ej.buildTag('input.e-uploadinput', "", {}, { type: 'file', "data-role": "none", name: this.model.uploadName != "" ? this.model.uploadName : this.control.id }).attr("accept",this.model.extensionsAllow);
            if (this.model.multipleFilesSelection) {
                this.inputupload.attr('multiple', 'multiple');
            }
            this.innerdiv.append(this.buttondiv);
            this.innerdiv.append(this.inputupload);
            if (this.model.allowDragAndDrop) this._dragAndDrop(true);
            this._Selector = this.buttondiv[0];
            this._currentElement = this.model.allowDragAndDrop && !this.model.showBrowseButton ? this.dragWrapper : this.element;
            this._setRTL(this.model.enableRTL);
            this._addAttr(this.model.htmlAttributes);
            this.Uploadframes = []; //For IFrame
            this.UploadForms = [];
            this._successFiles = [];
            this.UploadType = this._isXhrSupported() ? "Xhr" : "IFrame";
            if (this.model.width != "") this._setWidth(this.model.width);
            if (this.model.height != "") this._setHeight(this.model.height);
            this._hideBrowseButton();
        },		
        _refreshUploadDialogParent: function () {
            if (this.diaObj)
                this.diaObj.setModel({ target: (this.model.dialogAction.content != null && this.model.dialogAction.content != "") ? this.model.dialogAction.content : (!this.model.showBrowseButton) && (this.model.allowDragAndDrop) ? "#" + this.control.id + '_dragWrapper' : "#" + this.control.id });
        },
        _hideBrowseButton: function () {
            if ((!this.model.showBrowseButton) && (this.model.allowDragAndDrop)) {
                this.element.addClass("e-browse-hide");
                this._dropAreaSize();
            }
            else {
                if (this.element.hasClass("e-browse-hide")) {
                    this.element.removeClass("e-browse-hide");
                    this.element.width(this.model.width);
                    this.element.height(this.model.height);
                }
            }
        },
        _setSize: function () {
            if (this.model.allowDragAndDrop) {
                if (this.model.dropAreaWidth != "") this.dragWrapper.width(this.model.dropAreaWidth);
                if (this.model.dropAreaHeight != "") this.dragWrapper.height(this.model.dropAreaHeight);
                if (!this.model.showBrowseButton) this._dropAreaSize();
            }
        },

        _dropAreaSize: function () {
            if (this.model.dropAreaWidth != "") this.element.width(this.model.dropAreaWidth);
            if (this.model.dropAreaHeight != "") this.element.height(this.model.dropAreaHeight);
        },

        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else proxy.element.attr(key, value)
            });
        },

        _dragAndDrop: function () {
            if (this.model.allowDragAndDrop) {
                this.dragWrapper = ej.buildTag("div.e-drag-wrapper e-widget-wrapper e-upload-box " + this.model.cssClass + "#" + this.control.id + '_dragWrapper')
                this.innerWrapper = ej.buildTag("div.e-drag-container");
                this._spanTag = ej.buildTag("span.e-drag-text").html(this.model.locale == "en-US" ? this.model.dropAreaText : ej.Uploadbox.Locale[this.model.locale].dropAreaText);
                this.innerWrapper.append(this._spanTag);
                this.innerWrapper.insertBefore(this.element);
                this.dragWrapper.insertBefore(this.element);
                this.innerWrapper.append(this.element);
                this.dragWrapper.append(this.innerWrapper);
                this._bindDragEvents();
                this._refreshUploadDialogParent();
                this._setSize();
            }
            else {
                this._refreshUploadDialogParent();
                this.element.insertBefore(this.dragWrapper);
                this.dragWrapper.remove();
                this._unBindDragEvents();
            }
            this._hideBrowseButton();
        },
        _resizeHandler: function () {
            if (this.diaObj) {
                if ($(window).width() > 750) {
                    $(this.updialog).closest('.e-dialog.e-uploadbox').removeClass("e-mobile-upload");
                    this.diaObj.setModel({ width: this._getDialogContentWidth(), height: "auto" });
                }
                else {
                    $(this.updialog).closest('.e-dialog.e-uploadbox').addClass("e-mobile-upload");
                    this.diaObj.setModel({ width: 250, height: "auto"});
                }
                if (this.diaObj.scroller) this.diaObj.scroller.setModel({ height: "auto" });
            }
        },
        _getDialogContentWidth: function () {
            var dialogWidth = 0;
            if (this.model.customFileDetails.name)   dialogWidth = dialogWidth + 200;
            if (this.model.customFileDetails.size)  dialogWidth = dialogWidth + 100;
            if (this.model.customFileDetails.status) dialogWidth = dialogWidth + 200; 
            else if (this.model.customFileDetails.action) dialogWidth = dialogWidth + 45;
            return dialogWidth+5;
        },
		_dropAreaText: function (areaText) {
            if (this.model.allowDragAndDrop)
                this._spanTag.html(areaText);
        },
        _bindDragEvents: function () {
            this._on(this.dragWrapper, "dragover", this._onDragOverHandler);
            this._on(this.dragWrapper, "drop", this._onDropHandler);
        },
        _unBindDragEvents: function () {
            this._off(this.dragWrapper, "dragover", this._onDragOverHandler);
            this._off(this.dragWrapper, "drop", this._onDropHandler);
        },
        _setWidth: function (value) {
            this.element.css("width", value);
        },
        _setHeight: function (value) {
            this.element.height(value);
        },
        _dialogPosition: function () {
            if (this.diaObj) {
                if ((this.diaObj.model.content == "#" + this.control.id || this.diaObj.model.content == "#" + this.control.id + "_dragWrapper") && this.model.dialogPosition.X == "" && this.model.dialogPosition.Y == "") {
                    var left = parseInt(this.diaObj.wrapper.css("left")) - ((this.diaObj.wrapper.outerWidth() - $(this.diaObj.model.content).outerWidth()) / 2);
                    this.model.dialogPosition.X = parseInt(left) > 0 ? left : parseInt(this.diaObj.wrapper.css("left"));
                    this.model.dialogPosition.Y = parseInt(this.diaObj.wrapper.css("top")) + $(this.diaObj.model.content).outerHeight();
                }
                if (this.model.dialogPosition.X != "" && this.model.dialogPosition.Y != "") this.diaObj.setModel({ position: this.model.dialogPosition });
            }
        },

        _roundedCorner: function (value) {
            if (value) {
                this.innerdiv.addClass('e-corner');
            }
            else if (this.innerdiv.hasClass('e-corner')) {
                this.innerdiv.removeClass('e-corner');
            }
        },


        _wireEvents: function () {

            this._on(this.element, "click", this._disableclickselect);
            this._on(this.element, "keydown", this._keydownselect);
            this._bindInputChangeEvent();
            this._bindResizeHandler(true);
        },
        _bindResizeHandler: function (responsive) {
            responsive ? $(window).bind('resize', $.proxy(this._resizeHandler, this)) : $(window).unbind('resize', $.proxy(this._resizeHandler, this));
        },

        _keydownselect: function (e) {
             if (!this.element.hasClass("e-disable") && e.keyCode == 13 && (!this.diaObj || !this.diaObj.isOpened()))
               this.element.find('.e-uploadinput').click();
        },

        _onDropHandler: function (e) {
            if (ej.browserInfo().name === "msie" && ej.browserInfo().version === "8.0" || ej.browserInfo().version === "9.0") return false;
            if (this._currentElement.hasClass("e-disable")) return false;
            e.stopPropagation();
            e.preventDefault();
            this._files = this._getAllFileInfo(e.originalEvent.dataTransfer.files);
            this._fileUpload(e);
        },


        _onDragOverHandler: function (e) {
            if (this._currentElement.hasClass("e-disable")) return false;
            e.stopPropagation();
            e.preventDefault();
        },


        _disableclickselect: function (e) {
            if (this._currentElement.hasClass("e-disable")) {
                e.preventDefault();
            }
        },


        _bindInputChangeEvent: function () {
            this._on(this.inputupload, "change", this._inputValueChange);
        },


        _inputValueChange: function (e) {
            this._files = this._getInputFileInfo($(e.target));
            if (this._trigger("fileSelect", {files:this._files})) return false;
            this._fileUpload(e);
        },
        _fileUpload: function (e) {
            var filteredFiles = this._isAllowed(this._files);
            this._files = filteredFiles.files;
            if (!this.model.asyncUpload) {
                if (filteredFiles.status)
                    this._onSelectSyncUpload(e); //Sync Upload
                } else {
                    if (filteredFiles.files != null && filteredFiles.files.length > 0) {
                        if (this.UploadType == "Xhr") 
                            this._onXhrSelect(e); //removed uploadcore // For XHR Upload
                        else 
                           this._onSelectIFrame(e); //For Iframe
                        this._resetFileInput(this._currentElement.find(".e-uploadinput"));
                    }
                }
        },


        __uploadButtonClick: function (e) {
            if (!this._currentElement.hasClass("e-disable")) {
                var uploadbtn = this._currentElement.find(".e-uploadbtn");
                if (this._currentElement.find(".e-uploadbtn").hasClass("e-disable")) e.preventDefault();
                else {
                    if (this.UploadType == "Xhr") {
                        this._xhrOnUploadButtonClick(e); // Xhr Upload
                    } else {
                        this._onUploadButtonClickIFrame(e); //Iframe Upload
                    }
                }
                $(e.target).attr('disabled', 'disabled').addClass('e-disable');
            }
        },

        _actionClick: function (e) {
            if (!this._currentElement.hasClass("e-disable")) {
                var targetAction, fileItem, file;
                targetAction = $(e.target);
                fileItem = targetAction.closest(".e-upload-file");
                this._file = $(fileItem).data("file");
                if (targetAction.hasClass("e-file-delete")) {

                    if (this.UploadType == "Xhr") {
                        this._xhrOnRemove(e, fileItem); //XHr Remove
                    } else {
                        this._onRemoveIFrame(e, fileItem); //IFrame File Upload
                    }
                } else if (targetAction.hasClass("e-file-cancel")) {
                    this._trigger("cancel", { fileStatus: this._file });
                    var fileclose = this.updialog.find(".e-file-cancel");
                    if (fileclose.hasClass("e-disable")) e.preventDefault();
                    else {
                        if (!this.model.asyncUpload) {
                            this._onCancelSyncUpload(e, fileItem); //sync
                        } else {
							this._removeFile($(fileItem).data("file"));
                            if (this.UploadType == "Xhr") {
                                this._xhrOnCancel(e, fileItem); //Xhr Cancel Item
                            } else {
                                this._onCancelIFrame(e, fileItem); //IFrame Cancel Item
                            }
                        }
                    }
                } else if (targetAction.hasClass("e-file-retry")) {//removed uploadcore
                    if (this.UploadType == "Xhr") {
                        this._xhrOnRetry(e, fileItem); //xhr remove
                    } else {
                        this._onRetryIFrame(e, fileItem); //IFrame Remove
                    }
                }
            }
        },

        _removeFileEntry: function (file) {
            file.remove();
        },
		_removeFile:function(file){
			var fileList=[];
			for(var index=0;index<this._files.length;index++)
				if(this._files[index]!=file)
					fileList.push(this._files[index]);
			this._files=fileList;
		},


        _isFileUpload: function (fileEntry) {
            if (this.model.customFileDetails.action) {
                var actiondiv = $(fileEntry).find("div.e-icon");
                return actiondiv.is(".e-file-cancel");
            }
            else return true;
        },


        _isXhrSupported: function () {
            return (((this.s.name == "msie" && parseInt(this.s.version) < 9) || ((this.s.name == "safari" && this.s.name == "chrome") && this.s.version == "536")) ? false : (typeof (FormData) != "undefined") && (typeof (File) != "undefined"));
        },


        _getFileName: function (input) {
            return $.map(this._getAllFileInfo(input), function (file) {
                return file.name;
            }).join(", ");
        },

        _getFileSize: function (input) {
            var tempProxy = this;
            return $.map(this._getAllFileInfo(input), function (file) {
                return tempProxy._formatSize(file.size);
            }).join(", ");
        },

        _pushFile: function (files, datapart) {
            var fileListDetails, addedFile, actionlist, i, action, diaObj, addedheading, addedfilesize, addname, addsize, addstatus;
            addedheading = $("<div class='e-head-content'></div>");
            addname = $("<div class='e-file-head e-head-name'>" + this._getLocalizedLabels("name") + "</div>");
            addsize = $("<div class='e-file-head e-head-size'>" + this._getLocalizedLabels("size") + "</div>");
            addstatus = $("<div class='e-file-head e-head-status'>" + this._getLocalizedLabels("status") + "</div>");
            if (this.model.customFileDetails.name) $(addname).appendTo(addedheading);
            if (this.model.customFileDetails.size) $(addsize).appendTo(addedheading);
            if (this.model.customFileDetails.status) $(addstatus).appendTo(addedheading);
            filedialog = this.updialog;
            if (filedialog && filedialog.length != 0) {
                if (this.model.showFileDetails) {
                    if (this.updialog) this.updialog.find(".e-uploadbtn").removeAttr('disabled').removeClass('e-disable');
                    this.diaObj.open();
                }
            }
            else {
                this.updialog = ej.buildTag('div.uploaddialog#' + this.element[0].id + '_dialog', "", {}, { 'title': this._getLocalizedLabels("title") });
                if (this.model.allowDragAndDrop && !this.model.showBrowseButton) {
                    this.dragWrapper.append(this.updialog);
                    DialogContentContainer = "#" + this.control.id + '_dragWrapper';
                }
                else {
                    this.element.append(this.updialog);
                    DialogContentContainer = "#" + this.control.id;
                }
            }
            fileListDetails = this.updialog.find(".e-ul");
            if ($(this.updialog.find(".e-head-content")))
                $(this.updialog.find(".e-head-content")).replaceWith(addedheading);
            if (fileListDetails.length == 0) {
                addedheading.appendTo(this.updialog);
                fileListDetails = ej.buildTag('ul.e-ul').appendTo(this.updialog);
			}
			if($(this.updialog).find('.e-file-upload').length>0)
				$(this.updialog).find('.e-file-upload').remove();
			fileListActions = ej.buildTag('div.e-file-upload').appendTo(this.updialog).append((this.model.autoUpload || !this.model.asyncUpload) ? $(ej.buildTag('div.e-action-container')).addClass("sync") : ej.buildTag('div.e-action-container'));
            dialogActions = ej.buildTag('button.e-uploadclosebtn e-btn e-select', this._getLocalizedLabels("cancel"), {}, { type: 'button', "data-role": "none" }).appendTo($(this.updialog).find(".e-action-container"));
            if (this.model.showRoundedCorner)
                dialogActions.addClass('e-corner');
            this._on(dialogActions, "click", this._dialogclose);
            this._on(dialogActions, 'keydown', this._keydownDialogClose);            
            var dialogContainer = (this.model.dialogAction.content != null && this.model.dialogAction.content != "") ? this.model.dialogAction.content : DialogContentContainer
            this.updialog.ejDialog({ showOnInit: false, closeIconTooltip: this._getLocalizedLabels("closeToolTip"), minWidth: 240, width: ($(window).width() < 750) ? 250 : this._getDialogContentWidth(), height: "auto", cssClass: "e-uploadbox " + this.model.cssClass, close: $.proxy(this._uploadFileListDelete, this), enableRTL: this.model.enableRTL, target: dialogContainer, enableResize: false, allowDraggable: this.model.dialogAction.drag, enableModal: this.model.asyncUpload ? this.model.dialogAction.modal : false, showHeader: this.model.customFileDetails.title });
            $(window).width() < 750 ? $(this.updialog).closest('.e-dialog.e-uploadbox').addClass("e-mobile-upload") : $(this.updialog).closest('.e-dialog.e-uploadbox').removeClass("e-mobile-upload");
			this.diaObj = this.updialog.data('ejDialog');
			if(this.model.cssClass!="")
				this.diaObj.setModel({ cssClass:this.model.cssClass });
            this._dialogPosition();
            if (!this.model.multipleFilesSelection) {
                this.updialog.find(".e-ul>.e-upload-file").remove();
            }
            for (i = 0; i < files.length; i++) {//localization can be given for not started
                addedFile = $("<li class='e-upload-file'></li>").appendTo(fileListDetails).data(datapart);
                addedlist = $("<div class='e-file-list'></div>");
                addedfilename = $("<div class='e-file-progress e-file-view'><div class='e-file-name e-file-view'><span class='e-file-name-txt'>" + files[i].name + "</span></div>");
                addedfilesize = "<div class='e-file-size e-file-view'><span class='e-file-name-txt'>" + this._formatSize(files[i].size) + "</span></div>";
                addedfilestatus = $("<div class='e-file-percentage e-file-view'><div class='e-file-progress-bar'><div class='e-file-progress-status'></div></div></div>");
                addedfileaction = $("<div class='e-action-perform'><div class='e-icon e-file-view'></div></div>")
                if (this.model.customFileDetails.name) $(addedfilename).appendTo(addedlist);
                if (this.model.customFileDetails.size) {
                    if (this._getFileSize(files[i]).toString().toLowerCase().match("0.0kb").length == 0 || files[i].size != null) {
                        $(addedfilesize).appendTo(addedlist);
                    }
                    else $(this.updialog).find(".e-head-size").remove();
                }
                if (this.model.customFileDetails.status) $(addedfilestatus).appendTo(addedlist);
                if (this.model.customFileDetails.action) {
                    $(addedfileaction).appendTo(addedlist);
                    action = "cancel";
                    addedlist.find(".e-icon").remove().addClass(action.toString());
                    if (action == "cancel") {
                        actionlist = ej.buildTag('div.e-icon e-file-cancel', '', {}, { title: this._getLocalizedLabels("cancelToolTip") });
                    } else if (action == "remove") {
                        actionlist = ej.buildTag('div.e-icon e-file-delete', '', {}, { title: this._getLocalizedLabels("removeToolTip") });
                    } else if (action == "retry") {
                        actionlist = ej.buildTag('div.e-icon e-file-retry', '', {}, { title: this._getLocalizedLabels("retryToolTip") });
                    }

                    addedlist.find(".e-action-perform").append(actionlist);

                    this._on(actionlist, "click", this._actionClick);
                }
                $(addedlist).appendTo(addedFile);
            }
            if (this.model.showFileDetails) {
                this.diaObj.open();
            }
            this._buttonText(this.model.buttonText);
            this._dialogText(this.model.dialogText);
            return addedFile;
        },

        _keydownDialogClose: function (e) {
            if (!this._currentElement.hasClass("e-disable")) {
                if (e.keyCode == 13) this._dialogclose();
            }
        },

        _pushFileDetails: function (files) {
            var fileListDetails, addedFile, actionlist, i, action, me, diaObj, addedlist, addedheading, addname, addsize, addstatus, addaction, addedfilename, addedfilestatus, addedfilesize, addedfileaction;
            addedheading = $("<div class='e-head-content'></div>");
            addname = $("<div class='e-file-head e-head-name'>" + this._getLocalizedLabels("name") + "</div>");
            addsize = $("<div class='e-file-head e-head-size'>" + this._getLocalizedLabels("size") + "</div>");
            addstatus = $("</div><div class='e-file-head e-head-status'>" + this._getLocalizedLabels("status") + "</div>");
            if (this.model.customFileDetails.name) $(addname).appendTo(addedheading);
            if (this.model.customFileDetails.size) $(addsize).appendTo(addedheading);
            if (this.model.customFileDetails.status) $(addstatus).appendTo(addedheading);
            me = this;
            filedialog = this.updialog;
            if (filedialog && filedialog.length != 0) {
                if (this.model.showFileDetails) {
                    if (this.updialog) this.updialog.find(".e-uploadbtn").removeAttr('disabled').removeClass('e-disable');
                    me.diaObj.open();
                }
            } else {
                this.updialog = ej.buildTag('div.uploaddialog#' + this.element[0].id + '_dialog', "", {}, { 'title': this._getLocalizedLabels("title") });
                if (this.model.allowDragAndDrop && !this.model.showBrowseButton) {
                    this.dragWrapper.append(this.updialog);
                    DialogContentContainer = "#" + this.control.id + '_dragWrapper';
                }
                else {
                    this.element.append(this.updialog);
                    DialogContentContainer = "#" + this.control.id;
                }
            }
            var fileListDetails, addedFile;
            fileListDetails = this.updialog.find(".e-ul");
            if ($(this.updialog.find(".e-head-content")))
                $(this.updialog.find(".e-head-content")).replaceWith(addedheading);
            if (fileListDetails.length == 0) {
                addedheading.appendTo(this.updialog);
                fileListDetails = ej.buildTag('ul.e-ul').appendTo(this.updialog);
			}
			if($(this.updialog).find('.e-file-upload').length>0)
				$(this.updialog).find('.e-file-upload').remove();
			fileListActions = ej.buildTag('div.e-file-upload').appendTo(this.updialog).append((this.model.autoUpload || !this.model.asyncUpload) ? $(ej.buildTag('div.e-action-container')).addClass("sync") : ej.buildTag('div.e-action-container'));
            dialogActions = ej.buildTag('button.e-uploadclosebtn e-btn e-select', this._getLocalizedLabels("cancel"), {}, { type: 'button', "data-role": "none" }).appendTo($(this.updialog).find(".e-action-container"));
            if (this.model.showRoundedCorner)
            dialogActions.addClass('e-corner');
            this._on(dialogActions, "click", this._dialogclose);            
            if (!this.model.multipleFilesSelection) {
                this.updialog.find(".e-ul>.e-upload-file").remove();
            }
            addedFile = $("<li class='e-upload-file'></li>").appendTo(fileListDetails).data("file", files);
            addedlist = $("<div class='e-file-list'></div>");
            addedfilename = $("<div class='e-file-progress e-file-view'><div class='e-file-name e-file-view'><span class='e-file-name-txt'>" + files.name + "</span></div>");
            addedfilesize = $("<div class='e-file-size e-file-view'><span class='e-file-name-txt'>" + this._formatSize(0) + "\\" + this._formatSize(files.size) + "</span></div>");
            addedfilestatus = $("<div class='e-file-percentage e-file-view'><div class='e-file-progress-bar'><div class='e-file-progress-status'></div></div></div>");
            addedfileaction = $("<div class='e-action-perform'><div class='e-icon e-file-view'></div></div></div>")
            if (this.model.customFileDetails.name) $(addedfilename).appendTo(addedlist);
            if (this.model.customFileDetails.size) $(addedfilesize).appendTo(addedlist);
            if (this.model.customFileDetails.status) $(addedfilestatus).appendTo(addedlist);
            if (this.model.customFileDetails.action) $(addedfileaction).appendTo(addedlist);
            $(addedlist).appendTo(addedFile);
            var dialogContainer = (this.model.dialogAction.content != null && this.model.dialogAction.content != "") ? this.model.dialogAction.content : DialogContentContainer;
            this.updialog.ejDialog({ showOnInit: false, closeIconTooltip: this._getLocalizedLabels("closeToolTip"), minWidth: 240, width: ($(window).width() < 750) ? 250 : this._getDialogContentWidth(), height: "auto", cssClass: "e-uploadbox " + this.model.cssClass, close: $.proxy(this._uploadFileListDelete, this), enableRTL: this.model.enableRTL, target: dialogContainer, enableResize: false, allowDraggable: this.model.dialogAction.drag, enableModal: this.model.asyncUpload ? this.model.dialogAction.modal : false, showHeader: this.model.customFileDetails.title })
			$(window).width() < 750 ? $(this.updialog).closest('.e-dialog.e-uploadbox').addClass("e-mobile-upload") : $(this.updialog).closest('.e-dialog.e-uploadbox').removeClass("e-mobile-upload");
			me.diaObj = this.updialog.data("ejDialog");
			if (me.model.cssClass!="")
                me.diaObj.setModel({ cssClass:this.model.cssClass });
            me._dialogPosition();
            if (this.model.showFileDetails) {
                me.diaObj.open();
            }
            this._buttonText(this.model.buttonText);
            this._dialogText(this.model.dialogText);
            return addedFile;
        },

        _setProgress: function (filelist, percentage, e) {
            var progressbar, progress, filesize, loaded, total;
            if (this.model.customFileDetails.status) {
                progressbar = $(filelist).find(".e-file-progress-status");
                progressbar.width(percentage + "%");
            }
            if (this.model.customFileDetails.size) {
                filesize = $(filelist).find(".e-file-size .e-file-name-txt");
                loaded = this._formatSize(e.loaded);
                total = this._formatSize(e.total);
                filesize.html(loaded + "\\" + total);
            }
        },

        _setAction: function (element, action) {
            if (this.model.customFileDetails.action) {
                var actionlist;
                element.find(".e-icon").remove().addClass(action.toString());
                if (action == "cancel") {
                    actionlist = ej.buildTag('div.e-icon e-file-cancel', '', {}, { title: this._getLocalizedLabels("cancelToolTip") });
                } else if (action == "remove") {
                    actionlist = ej.buildTag('div.e-icon e-file-delete', '', {}, { title: this._getLocalizedLabels("removeToolTip") });
                } else if (action == "retry") {
                    actionlist = ej.buildTag('div.e-icon e-file-retry', '', {}, { title: this._getLocalizedLabels("retryToolTip") });
                }
                element.find(".e-action-perform").append(actionlist);
                this._on(actionlist, "click", this._actionClick);
            }
        },

        _setStatus: function (element, status) {
            if (this.model.customFileDetails.status) {
                var progress, upstatus = ej.buildTag('div');
                if (status == "success") {
                    element.find(".file-status").addClass("e-file-status-success").html("Completed");
                    element.find(".e-file-percentage").html("").attr("title", this._getLocalizedLabels("completedToolTip"));
                    upstatus.addClass("e-icon e-file-percentage-success");
                    element.find(".e-file-percentage").append(upstatus);
                }
                if (status == "failed") {
                    element.find(".file-status").addClass("e-file-status-failed").html("Failed");
                    element.find(".e-file-percentage").html("").attr("title", this._getLocalizedLabels("failedToolTip"));
                    upstatus.addClass("e-icon e-file-percentage-failed");
                    element.find(".e-file-percentage").append(upstatus);
                }
                if (status == "progress") {
                    element.find(".file-status").addClass("file-status-inprogress").html("in progress");
                }
                if (status == "uploading") {
                    element.find(".file-status").addClass("file-status-inprogress").html("uploading");
                    progress = element.find(".e-file-percentage");
                    progress.html("");
                }
            }
        },

        _createInputandBind: function () {
            var tempInput = ej.buildTag('input', '', {}, { type: 'file', "data-role": "none" });
            tempInput.attr("name", this.model.uploadName != "" ? this.model.uploadName : this.control.id).attr("autocomplete", "off").attr("class", "e-uploadinput").attr("accept",this.model.extensionsAllow);
            if (this.model.multipleFilesSelection) {
                tempInput.attr("multiple", "multiple");
            }
            tempInput.appendTo(this.element.find(".e-selectpart"));
            this.inputupload = tempInput;
            this._bindInputChangeEvent();
        },

        _showUploadButton: function () {
            var uploadbutton = this.updialog.find(".e-uploadbtn");
            if (uploadbutton.length == 0) {
                uploadbutton = ej.buildTag('button.e-uploadbtn e-btn e-select', this._getLocalizedLabels("upload"), {}, { type: "button", "data-role": "none" });
                if (this.model.showRoundedCorner)
                    uploadbutton.addClass('e-corner');
                this.updialog.find(".e-action-container").append(uploadbutton);
                this._on(uploadbutton, "click", this.__uploadButtonClick);
                this._on(uploadbutton, 'keydown', this._keydownUpload);
                $(uploadbutton).focus();
            }
            this._buttonText(this.model.buttonText);
        },

        _keydownUpload: function (e) {
            if (e.keyCode == 13) this.__uploadButtonClick(e);
        },

        _resetFileInput: function ($element) {
            var clone = $element.clone(false, false);
            this._on(clone, "change", this._inputValueChange);
            $element.replaceWith(clone);
        },

        _isAllowed: function (files) {
            var inputfield, uploadControl, args, allowExtension, allowSize, denyExtension, proxy = this, allowedFiles = [], filteredFiles = [],status=true;
            inputfield = this.element.find(".e-uploadinput");
            uploadControl = this;
            if (this.model.extensionsAllow != "") {
                allowExtension = this.model.extensionsAllow.replace(/\s/g, "").toLowerCase().split(",");
                $(files).each(function () {
                    if ($.inArray((this.extension).toLowerCase(), allowExtension) == -1) {

                        args = { action: "Files Processing", error:proxy._getLocalizedLabels("allowError").replace("#Extension", allowExtension), files: this };
                        uploadControl._trigger('error', args);
						proxy._resetFileInput(inputfield);
                        status = false;
                    }
                    else {
                        if (this.extension != "")
                            allowedFiles.push(this);
                    }
                });
            }

            else if (this.model.extensionsDeny != "") {
                denyExtension = this.model.extensionsDeny.replace(/\s/g, "").toLowerCase().split(",");
                $(files).each(function () {
                    if ($.inArray((this.extension).toLowerCase(), denyExtension) != -1) {

                        args = { action: "Files Processing", error: proxy._getLocalizedLabels("denyError").replace("#Extension", denyExtension), files: this };
                        uploadControl._trigger('error', args);
						proxy._resetFileInput(inputfield);
                        status = false;
                    }
                    else {
                        if (this.extension != "")
                            allowedFiles.push(this);
                    }
                });
            }
            else {
                $(files).each(function () {
                    if (this.extension != "")
                        allowedFiles.push(this);
                });
            }
            if (this.model.fileSize != "") {
                allowSize = this.model.fileSize;
                $(allowedFiles).each(function () {
                    if ((this.size > allowSize)) {

                        args = { action: "Files Processing", error: proxy._getLocalizedLabels("filedetail"), files: this };
                        uploadControl._trigger('error', args);
						proxy._resetFileInput(inputfield);
                        status = false;
                    }
                    else {
                        filteredFiles.push(this);
                    }
                });
            }
            else
                filteredFiles = allowedFiles;
            return { files: filteredFiles, status: status };
        },

        _fileListRemove: function () {
            fileList = this.updialog.find(".e-upload-file .e-file-delete");
            if (fileList.length == 0) {
                this.updialog.find(".e-uploadbtn").attr('disabled', 'disabled').addClass('e-disable');
                this.updialog.ejDialog('close');
            }
        },

        _uploadHide: function () {
            fileList = this.updialog.find(".e-upload-file .e-file-cancel");
            if (fileList.length == 0) {
                this.updialog.find(".e-ul").empty();
                this.updialog.find(".e-uploadbtn").attr('disabled', 'disabled').addClass('e-disable');
                this.updialog.ejDialog('close');
            }
        },

        _onBeforeClose: function (args) {
            if (!ej.isNullOrUndefined(args.event)) if ($(args.event.currentTarget).hasClass("e-disable")) args.cancel = true;
            else args.cancel = false;
        },

        _dialogclose: function (e) {
            if (!this._currentElement.hasClass("e-disable")) {
                var closebtn = this.updialog.find(".e-uploadclosebtn");
                var file, fileItem;
                fileItem = this.updialog.find(".e-ul").children().first();
                file = $(fileItem).data("file");
                if (closebtn.hasClass("e-disable")) e.preventDefault();
                else {
                    this._uploadFileListDelete();
                    this.updialog.ejDialog('close');
                }
                this._trigger("cancel", { fileStatus: file });
            }
        },

        _uploadFileListDelete: function () {
            this.updialog.find(".e-ul").empty();
            this._resetFileInput(this._currentElement.find(".e-uploadinput"));
            if (!this.model.asyncUpload)
                this._formResetSyncUpload();
        },

        _onXhrSelect: function (e) {
            var files, xhrUpload, addedFile;
            this._xhrBeforeUpload(this._files);
            xhrUpload = this;
            $.each(xhrUpload._files, function (i, fileItem) {
                addedFile = $(fileItem).data("filelist");
                xhrUpload._setAction(addedFile, "cancel"); // XhrUpload._Uploader._setAction(addedFile, "cancel");
                if (xhrUpload.model.autoUpload) {
                    xhrUpload._xhrPerformUpload(fileItem);
                } else {
                    xhrUpload._showUploadButton();
                }
            });
        },

        _xhrBeforeUpload: function (files) {
            var fileEntry, xhrUpload, formdata, addedFile;
            fileEntry = files;
            xhrUpload = this;
            $.each(fileEntry, function (i, fileItem) {
                formdata = xhrUpload._createFormObjectXhr(fileItem);
                $(fileItem).data("formobject", formdata);
                addedFile = xhrUpload._pushFileDetails(fileItem);
                $(fileItem).data("filelist", addedFile);
            });

            return fileEntry;
        },

        _xhrPerformUpload: function (fileItem) {
            var isPrevented, url, xhrUpload, formdata, xhr, args;
            xhr = new XMLHttpRequest();
            xhrUpload = this;
            args = { files: fileItem };
            if (this._trigger('begin', args)) {
                $(fileItem).data("xhr", xhr);
                xhrUpload._onRequestError(xhrUpload, undefined, fileItem);
                return;
            }
            url = this.model.saveUrl;
            formdata = $(fileItem).data("formobject");

            formdata.append(this.control.id + "_data", JSON.stringify(args.data));
            $(fileItem).data("xhr", xhr);
            xhr.addEventListener("load", function (e) {
                xhrUpload._onRequestSuccess(xhrUpload, e, fileItem);
            }, false);
            xhr.addEventListener("error", function (e) {
                xhrUpload._onRequestError(xhrUpload, e, fileItem);
            }, false);
            xhr.upload.addEventListener("progress", function (e) {
                xhrUpload._onRequestProgress(xhrUpload, e, fileItem);
            }, false);
            xhr.open("POST", url);
            xhr.send(formdata);
        },

        _xhrOnUploadButtonClick: function (e) {
            var xhrUpload, fileEntry, started, fileCount;
            xhrUpload = this.model.showBrowseButton ? this.diaObj.wrapper : this.dragWrapper;
            fileCount = xhrUpload.find(".e-ul li.e-upload-file");
            for (i = 0; i < fileCount.length; i++) {
                fileEntry = $(this);
                started = this._isFileUpload(fileCount[i]);
                if (started) {
                    this._xhrPerformUpload($(fileCount[i]).data("file"));
                }
            }
        },

        _xhrOnRemove: function (e, fileItem) {
            var filename = $(fileItem).find(".e-file-name").text().toString().split(","), proxy = this;
            $.ajax({
                url: this.model.removeUrl,
                type: "POST",
                data: "fileNames=" + filename,
                success: function () {
                    $(fileItem).remove();
                    proxy._fileListRemove();
                    proxy._trigger("remove", { fileStatus: proxy._file });

                }
            });
        },

        _xhrOnCancel: function (e, fileItem) {
            var file, xhr;
            file = $(fileItem).data("file");
            xhr = $(file).data("xhr");
            if (xhr) {
                $(file).data("xhr").abort();
            }
            $(file).data("xhr", null);
            $(fileItem).data("file", null);
            $(fileItem).remove();
            this._uploadHide();
        },

        _xhrOnRetry: function (e, fileItem) {
            if (!this._currentElement.hasClass("e-disable")) {
                var file = $(fileItem).data("file");
                this._xhrPerformUpload(file);
            }
        },

        _onRequestSuccess: function (xhrUpload, e, fileEntry) {
            var xhr = $(fileEntry).data("xhr");
            if (xhr.status >= 200 && xhr.status <= 299) {
                xhrUpload._onXhrUploadSuccess(xhrUpload, e, fileEntry);
            }
            else {
                xhrUpload._onRequestError(xhrUpload, e, fileEntry);
            }
        },

        _onXhrUploadSuccess: function (xhrUpload, e, fileEntry) {
            var addedFile, xhr, progressbar, size, fSize, filesize, args;
            addedFile = $(fileEntry).data("filelist");
            xhr = $(fileEntry).data("xhr");
            if (xhrUpload.model.removeUrl) {
                xhrUpload._setAction(addedFile, "remove");
                xhrUpload._setStatus(addedFile, "success");
            } else {
                addedFile.find(".e-icon").remove();
                xhrUpload._setStatus(addedFile, "success");
            }
            if ($(fileEntry).length > 0) {
                progressbar = $(addedFile).find(".e-file-progress-status");
                progressbar.width("100%");
                size = $(fileEntry)[0].size;
                fSize = this._formatSize(size);
                filesize = $(addedFile).find(".e-file-size .e-file-name-txt");
                filesize.html(fSize + "\\" + fSize);
            }
            args = { files: fileEntry,responseText: xhr.responseText, xhr: xhr, e: e };
            this.updialog.find(".e-file-upload .e-uploadclosebtn").html(this.model.buttonText.close).focus();
            xhrUpload._trigger('success', args);
            this._successFiles.push(fileEntry);
            if (xhrUpload._files.length == this._successFiles.length) {
                args = { files: fileEntry, responseText: xhr.responseText,success: this._successFiles, xhr: xhr, e: e };
                xhrUpload._trigger('complete', args);
                this._successFiles.length = 0;
				//Will close the dialog box once upload has complete.
                if (this.model.dialogAction.closeOnComplete) this._dialogclose();
            }
        },

        _onRequestError: function (xhrUpload, e, fileEntry) {
            var addedFile, xhr, args;
            addedFile = $(fileEntry).data("filelist");
            xhr = $(fileEntry).data("xhr");
            xhrUpload._setAction(addedFile, "retry");
            xhrUpload._setStatus(addedFile, "failed");
            args = { action: "File Processing", error: xhr.status + xhr.statusText, files: fileEntry, xhr: xhr, e: e };
            xhrUpload._trigger('error', args);
        },

        _onRequestProgress: function (xhrUpload, e, fileEntry) {
            var percentage, addedFile,args;
            percentage = Math.round(e.loaded * 100 / e.total);
            addedFile = $(fileEntry).data("filelist");
            xhrUpload._setProgress(addedFile, percentage, e);
            xhrUpload._setStatus(addedFile, "progress");
            args = { file: fileEntry, percentage: percentage, e: e };
            this._trigger('inProgress', args);
        },

        _createFormObjectXhr: function (file) {
            var formData = new FormData();
            formData.append(this.model.uploadName != "" ? this.model.uploadName : this.control.id, file.rawFile);
            return formData;
        },

        _getInputFileInfo: function ($input) {
            var input = $input[0];
            if (input.files) {
                return this._getAllFileInfo(input.files);
            } else {
                return [{
                    name: this._GetName(input.value),
                    extension: this._getFileExtensionType(input.value),
                    size: this._getFileSizeinIE(input.value)
                }];
            }
        },

        _getFileSizeinIE: function (fileName) {
            var actievXObj, fileSize;
            actievXObj = null;
            fileSize = null;
            try {
                actievXObj = new ActiveXObject("Scripting.FileSystemObject");
            } catch (e) {
                fileSize = null;
            }
            if (actievXObj) {
                fileSize = actievXObj.getFile(fileName).size;
            }
            return fileSize;
        },

        _getFileExtensionType: function (fileName) {
            return fileName.match ? (fileName.match(/\.([^\.]+)$/) ? fileName.match(/\.([^\.]+)$/)[0] : "" || "") : "";
        },

        _getAllFileInfo: function (rawFiles) {
            var tempProxy = this;
            return $.map(rawFiles, function (file) {
                return tempProxy._getFileInfo(file || rawFiles);
            });
        },

        _GetName: function (fullname) {
            var nameIndex = fullname.lastIndexOf("\\");
            return (nameIndex != -1) ? fullname.substr(nameIndex + 1) : fullname;
        },

        _getFileInfo: function (rawFile) {
            // Older Firefox versions (before 3.6) use fileName and fileSize
            var fileName = rawFile.name || rawFile.fileName || rawFile;
            return {
                name: fileName,
                extension: this._getFileExtensionType(fileName),
                size: rawFile.size || rawFile.fileSize,
                rawFile: rawFile
            };
        },

        _formatSize: function (bytes) {
            var i = -1;
            if (!bytes)
                return "0.0KB";
            do {
                bytes = bytes / 1024;
                i++;
            } while (bytes > 99);
            return Math.max(bytes, 0).toFixed(1) + ['KB', 'MB', 'GB', 'TB', 'PB', 'EB'][i];
        },

        _onSelectIFrame: function (e) {
            var input, files, addedFile, uploadframe;
            input = $(e.target);
            files = this._getInputFileInfo(input);
            addedFile = this._beforeUploadIFrame(files);
            uploadframe = addedFile.data("iframe");
            if (this.model.autoUpload) {
                this._performUploadIFrame(addedFile);
            } else {
                this._showUploadButton();
            }
            this._off(this.inputupload, "change");
            this._bindInputChangeEvent();
        },

        _onRemoveIFrame: function (e, fileItem) {
            var iframe, fileNames, proxy, fileDetails;
            iframe = fileItem.data("iframe");
            fileDetails = $(fileItem).data("file");
            fileNames = fileDetails[0].name;
            proxy = this;
            if (iframe) {
                this._removeFileEntry(fileItem);
                if (this.model.removeUrl) {
                    $.ajax({
                        url: this.model.removeUrl,
                        type: "POST",
                        data: "fileNames=" + fileNames,
                        success: function () {
                            proxy._fileListRemove();
                            proxy._trigger("remove", { fileStatus: proxy._file });
                        }
                    });
                }
            } else {
                this._removeFileEntry(fileItem);
                this._trigger("remove", { fileStatus: this._file });
            }
        },

        _onCancelIFrame: function (e, fileItem) {
            var iframe;
            this._trigger('cancel', { Status: fileItem });
            iframe = fileItem.data("iframe");
            if (iframe) {
                this._removeFileEntry(fileItem);
                if (typeof (iframe.stop) != "undefined") {
                    iframe.stop();
                } else if (iframe.document) {
                    iframe.document.execCommand("Stop");
                    iframe.contentWindow.location.href = iframe.contentWindow.location.href;
                }
                this._processServerResponse(iframe, "");
            }
            this._uploadHide();
        },

        _onRetryIFrame: function (e, fileItem) {
            this._performUploadIFrame(fileItem);
        },

        _beforeUploadIFrame: function (files) {
            var uploadframe, uploadform, addedfile;
            //creating iframe and adding it to the upload div block.
            uploadframe = this._createFrame(this.control.id + "_Iframe" + this.Uploadframes.length);
            this.Uploadframes.push(uploadframe);
            uploadform = this._createForm(this.model.saveUrl, uploadframe[0].id);
            this._currentElement.find("input.e-uploadinput").removeClass("e-uploadinput").css("display", "none").appendTo(uploadform);
            this._createInputandBind();
            addedfile = this._pushFile(files, { "iframe": uploadframe, "form": uploadform, "file": files });
            uploadframe.data({ "filelist": addedfile });
            this._setAction(addedfile, "cancel");
            return addedfile;
        },

        _performUploadIFrame: function (addedFile) {
            var isPrevented, files, uploadframe, uploadform, args;
            args = { files: addedFile };
            if (this._trigger('begin', args)) {
                this._failureIframeUpload(addedFile, "File upload has been denied");
                return;
            }
            files = addedFile.data("file");
            this._setStatus(addedFile, "uploading");
            uploadframe = addedFile.data("iframe");
            uploadform = addedFile.data("form");
            var hiddendata = $("<input>").attr("name", this.control.id + "_data").attr('type', 'hidden').val(JSON.stringify(args.data));
            uploadform.append(hiddendata);
            uploadframe.appendTo(document.body);
            uploadform.appendTo(document.body);
            //error here calls the upload even if the url is wrong
            this._on(uploadframe, "load", this._removeFramesIFrame);
            uploadform.submit();
        },

        _onUploadButtonClickIFrame: function (e) {
            var iframeUpload, fileEntry, started;
            iframeUpload = this;
            $(".e-ul li.e-upload-file", iframeUpload.updialog).each(function () {
                fileEntry = $(this);
                started = iframeUpload._isFileUpload(fileEntry);
                if (started) {
                    iframeUpload._performUploadIFrame(fileEntry);
                }
            });
        },

        _removeFramesIFrame: function (e) {
            var uploadframe, response, filelist, fileEntry, args;
            uploadframe = $(e.target);
            filelist = uploadframe.data("filelist");
            try {
                response = $.trim(uploadframe.context.contentDocument.body.innerText.replace(/\n|\r/g, ' '));
            } catch (e) {
                response = "Server Error trying to get server response: " + e;
            }
            if (response.substring(0, 12) != "Server Error" && response.indexOf("HTTP Error") != 0) {
                this._processServerResponse(uploadframe, response);
                this._setIframeProgress(filelist, 100, e);
                this._setStatus(filelist, "progress");
                this._successIframeUpload(filelist, response);
            }
            else { this._failureIframeUpload(filelist, response); }
        },


        _setIframeProgress: function (filelist, percentage, e) {
            var progressbar, progress, filesize, loaded, total;
            progressbar = $(filelist).find(".e-file-progress-status");
            progressbar.width(percentage + "%");
        },

        _successIframeUpload: function (filelist, response) {
            fileEntry = filelist.data("file");
            if (this.model.removeUrl) {
                this._setAction(filelist, "remove");
                this._setStatus(filelist, "success");
            } else {
                filelist.find(".file-action").remove();
                this._setStatus(filelist, "success");
            }
            args = { files: fileEntry, responseText: response };
            this.updialog.find(".e-file-upload .e-uploadclosebtn").html(this.model.buttonText.close).focus();
            this._trigger('success', args);
            this._successFiles.push(fileEntry);
            if (filelist.length == this._successFiles.length) {
                args = { files: fileEntry, responseText: response, success: this._successFiles };
                this._trigger('complete', args);
                this._successFiles.length = 0;
				//Will close the dialog box once upload has complete.
                if (this.model.dialogAction.closeOnComplete) this._dialogclose();
            }
        },

        _failureIframeUpload: function (filelist, response) {
            fileEntry = filelist.data("file");
            if (this.model.saveUrl && response != "File upload has been denied") {
                this._setAction(filelist, "retry");
                this._setStatus(filelist, "failed");
            } else {
                filelist.find(".file-action").remove();
                this._setStatus(filelist, "failed");
            }
            if (response.indexOf("HTTP Error") == 0)
                args = { files: fileEntry, responseText: response, status: response.match(/\d+/).toString() };
            else
                args = { files: fileEntry, responseText: response };
            this._trigger('error', args);
        },

        _processServerResponse: function (uploadframe) {
            var uploadform;
            uploadform = $(document.body).find("form[target='" + $(uploadframe).attr("id") + "']");
            setTimeout(function () {
                uploadform.remove();
                uploadframe.remove();
            }, 0);
        },

        _createDivBlock: function (className) {
            return ej.buildTag('div.' + className);
        },

        _createForm: function (action, target) {
            return ej.buildTag('form', '', {}, { enctype: 'multipart/form-data', method: 'POST', action: action, target: target });
        },

        _createFrame: function (id) {
            return ej.buildTag('iframe#' + id, '', { display: 'none' }, { name: id });
        },

        _createInput: function (id) {
            return ej.buildTag('input', '', {}, { type: 'file', name: id, "data-role": "none" });
        },



        _initObjectsSyncUpload: function () {
            this._currentElement.closest("form")
                    .attr("enctype", "multipart/form-data")
                    .attr("encoding", "multipart/form-data");
            this._wireEventsSyncUpload();
        },

        _wireEventsSyncUpload: function () {
            var closestform = this._currentElement.closest("form")[0];
            this._on($(closestform), "submit", this._formSubmitSyncUpload);
            this._on($(closestform), "reset", this._formResetSyncUpload);
        },

        _onSelectSyncUpload: function (e) {
            var input, files, selection, addedfile;
            input = $(e.target);
            selection = $(".e-selectpart", this.control);
            this._currentElement.find("input.e-uploadinput").removeClass("e-uploadinput").css("display", "none").appendTo(selection);
            this._createInputandBind();
            addedfile = this._pushFile(this._files, { "file": this._files, "Input": input });
        },

        _onCancelSyncUpload: function (e, fileItem) {
            var inputfield = fileItem.data("Input");
            fileItem.data("file", null);
            fileItem.data("Input", null);
            fileItem.remove();
            inputfield.remove();
            this._uploadHide();
        },

        _formSubmitSyncUpload: function (e) {
            var input, uploader;
            input = $(".e-uploadinput", this.control);
            input.attr("name", "");
            uploader = this.model.uploadName != "" ? this.model.uploadName : this.control.id;
            setTimeout(function () {
                input.attr("name", uploader);
            }, 0);
        },

        _formResetSyncUpload: function (e) {
            $(".e-selectpart", this.control).children('input[type="file"]').each(function () {
                if (!$(this).hasClass('e-uploadinput')) {
                    $(this).remove();
                }
            });
        }
        /*Sync End*/
    });
    ej.Uploadbox.Locale = {};

    ej.Uploadbox.Locale["en-US"] = {
        buttonText: {
            upload: "Upload",
            browse: "Browse",
            cancel: "Cancel",
            close: "Close"
        },
        dialogText: {
            title: "Upload Box",
            name: "Name",
            size: "Size",
            status: "Status"
        },
		dropAreaText: "Drop files or click to upload",
        filedetail: "The selected file size is too large. Please select a file within the valid size.",
        denyError: "Files with #Extension extensions are not allowed.",
        allowError: "Only files with #Extension extensions are allowed.",
        cancelToolTip: "Cancel",
        removeToolTip: "Remove",
        retryToolTip: "Retry",
        completedToolTip: "Completed",
        failedToolTip: "Failed",
        closeToolTip: "Close"
    };
})(jQuery, Syncfusion);
;