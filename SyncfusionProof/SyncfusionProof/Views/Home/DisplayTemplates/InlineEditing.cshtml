@model SyncfusionProof.Data.Models.HomeModel

@using Syncfusion.JavaScript.Models

<div id="InlineEditingGridUndoAlert" class="alert alert-danger" role="alert" style="display:none;">
  <strong>Record(s) deleted.</strong>
  <a id="InlineEditingGridUndoLink" href="#" class="alert-link btn btn-default">Undo</a>
</div>

<div class="well">
  @(Html.EJ().Grid<SyncfusionProof.Data.Models.TestModel>("InlineEditingGrid")
  .EnablePersistence()
  .Datasource(Model.TestModels)
  .AllowSelection()
  .SelectionType(SelectionType.Multiple)
  .AllowSorting()
  .AllowPaging()
  .AllowResizing()
  .AllowScrolling()
  .ScrollSettings(x => { x.Width("100%"); x.Height("100%"); })
  .MinWidth(500)
  .IsResponsive()
  //use ShowAddNewRow to automatically add a row whenever an edit finishes
  .EditSettings(x => { x.AllowAdding().AllowDeleting().AllowEditing(); })
  //.EditSettings(x => { x.AllowAdding().AllowDeleting().AllowEditing().ShowAddNewRow(); })
  .ToolbarSettings(x => x.ShowToolbar().ToolbarItems(y =>
  {
    y.AddTool(ToolBarItems.Search);
    y.AddTool(ToolBarItems.Add);
    y.AddTool(ToolBarItems.Edit);
    y.AddTool(ToolBarItems.Delete);
    y.AddTool(ToolBarItems.Update);
    y.AddTool(ToolBarItems.Cancel);
  }))
  .Columns(x =>
  {
    x.Field("OrderId").HeaderText("Order ID").IsIdentity(true).IsPrimaryKey(true).Add();

    x.Field("CustomerId").HeaderText("Customer ID").EditType(EditingType.String).Add();
    x.Field("EmployeeId").HeaderText("Employee ID").EditType(EditingType.Numeric).Add();
    x.Field("Manufacturer").DataSource(Model.Manufacturers).HeaderText("Manufacturer Name").EditType(EditingType.Dropdown).Add();

    x.Field("Freight")
      .HeaderText("Freight")
      .EditType(EditingType.Numeric)
      .NumericEditOptions(new EditorProperties() { DecimalPlaces = 2 })
      .Format("{0:C}")
      .Add();

    x.Field("FreightDetails.Freight2").HeaderText("Freight2").EditType(EditingType.Numeric).Format("{0:C}").Add();

    x.Field("MyBooleanEditor")
      .HeaderText("True or False")
      .EditType(EditingType.Boolean)
      .Add();

    //x.Field("Value1").HeaderText("Value 1").EditType(EditingType.Numeric).NumericEditOptions(new EditorProperties { Change = "Utility.Syncfusion.Grid.InlineEditingGrid.onChange" }).Format("{0:C}").ValidationRules(y => y.AddRule("lessThanValue2", true)).Add();
    //x.Field("Value2").HeaderText("Value 2").EditType(EditingType.Numeric).NumericEditOptions(new EditorProperties { Change = "Utility.Syncfusion.Grid.InlineEditingGrid.onChange" }).Format("{0:C}").Add();
    //x.Field("ValueSum").HeaderText("Value 1 + Value 2").IsIdentity(true).AllowEditing(false).Add();

    x.Field("OrderDate").HeaderText("Order Date").EditType(EditingType.Datepicker).Format("{0:MM/dd/yyyy}").IsIdentity(true).AllowEditing(false).Add();

    x.Field("ShipCity")
      .HeaderText("Ship City")
      .EditType(EditingType.String)
      .Width(500)
      .EditTemplate(y =>
      {
        y.Create("Utility.Syncfusion.Grid.InlineEditingGridtextAreaCreate")
          .Read("Utility.Syncfusion.Grid.InlineEditingGridtextAreaRead")
          .Write("Utility.Syncfusion.Grid.InlineEditingGridtextAreaWrite");
      })
      .Add();

    x.Field("ShipState").HeaderText("Ship State").EditType(EditingType.String).Add();
  })
  .ClientSideEvents(x =>
  {
    x.ActionComplete("Utility.Syncfusion.Grid.InlineEditingGrid.actionComplete");
    x.ActionBegin("Utility.Syncfusion.Grid.InlineEditingGrid.actionBegin");
    x.ToolbarClick("Utility.Syncfusion.Grid.InlineEditingGrid.toolbarClick");
  })
  )
</div>